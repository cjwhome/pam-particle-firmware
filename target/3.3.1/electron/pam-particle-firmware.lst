
c:/Users/austi/OldPAM/pam-particle-firmware/target/3.3.1/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f810  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  0808f830  0808f830  0001f830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  0808f838  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002b0  20000000  0808f83c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009a8  200002b0  200002b0  000402b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  0808faec  0808faec  0003faec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0808fb14  0808fb14  0003fb14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00186a10  00000000  00000000  0003fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020b44  00000000  00000000  001c6528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003258  00000000  00000000  001e706c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00008dd0  00000000  00000000  001ea2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004088f  00000000  00000000  001f3094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000657cb  00000000  00000000  00233923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ccce0  00000000  00000000  002990ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00009830  00000000  00000000  00365dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00039502  00000000  00000000  0036f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f00b f97c 	bl	808b34e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f00b f984 	bl	808b36a <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	0808f83c 	.word	0x0808f83c
 8080070:	200002b0 	.word	0x200002b0
 8080074:	200002b0 	.word	0x200002b0
 8080078:	20000c55 	.word	0x20000c55
 808007c:	20000c55 	.word	0x20000c55

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f008 ff8f 	bl	8088fa4 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42ac      	cmp	r4, r5
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808f7fc 	.word	0x0808f7fc
 80800a4:	0808f824 	.word	0x0808f824

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f002 ba16 	b.w	80824d8 <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f004 fbfb 	bl	80848a8 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f008 bf2d 	b.w	8088f14 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f007 bd85 	b.w	8087bc8 <malloc>

080800be <_Znaj>:
 80800be:	f007 bd83 	b.w	8087bc8 <malloc>

080800c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80800c2:	f007 bd89 	b.w	8087bd8 <free>

080800c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c6:	7800      	ldrb	r0, [r0, #0]
 80800c8:	fab0 f080 	clz	r0, r0
 80800cc:	0940      	lsrs	r0, r0, #5
 80800ce:	4770      	bx	lr

080800d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d0:	2301      	movs	r3, #1
 80800d2:	7003      	strb	r3, [r0, #0]
 80800d4:	4770      	bx	lr

080800d6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800d6:	b148      	cbz	r0, 80800ec <null_ptr_check+0x16>
 80800d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800da:	b13b      	cbz	r3, 80800ec <null_ptr_check+0x16>
 80800dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800de:	b12b      	cbz	r3, 80800ec <null_ptr_check+0x16>
 80800e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800e2:	fab0 f080 	clz	r0, r0
 80800e6:	0940      	lsrs	r0, r0, #5
 80800e8:	4240      	negs	r0, r0
 80800ea:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800ec:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800f0:	4770      	bx	lr

080800f2 <set_mem_page>:
{
 80800f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800f4:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 80800f6:	4608      	mov	r0, r1
 80800f8:	f7ff ffed 	bl	80800d6 <null_ptr_check>
{
 80800fc:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 80800fe:	4605      	mov	r5, r0
 8080100:	bb40      	cbnz	r0, 8080154 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8080102:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080106:	bf14      	ite	ne
 8080108:	2300      	movne	r3, #0
 808010a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 808010c:	78ca      	ldrb	r2, [r1, #3]
 808010e:	429a      	cmp	r2, r3
 8080110:	d020      	beq.n	8080154 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8080112:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080114:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8080116:	2301      	movs	r3, #1
 8080118:	21f3      	movs	r1, #243	; 0xf3
 808011a:	7860      	ldrb	r0, [r4, #1]
 808011c:	f10d 0207 	add.w	r2, sp, #7
 8080120:	47b0      	blx	r6
 8080122:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080126:	b998      	cbnz	r0, 8080150 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080128:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808012c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808012e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080132:	f003 0310 	and.w	r3, r3, #16
 8080136:	4313      	orrs	r3, r2
 8080138:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808013c:	2173      	movs	r1, #115	; 0x73
 808013e:	2301      	movs	r3, #1
 8080140:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080142:	7860      	ldrb	r0, [r4, #1]
 8080144:	f10d 0207 	add.w	r2, sp, #7
 8080148:	47b0      	blx	r6
 808014a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808014e:	b108      	cbz	r0, 8080154 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080150:	f06f 0501 	mvn.w	r5, #1
}
 8080154:	4628      	mov	r0, r5
 8080156:	b002      	add	sp, #8
 8080158:	bd70      	pop	{r4, r5, r6, pc}

0808015a <get_mem_page>:
{
 808015a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808015c:	4604      	mov	r4, r0
	rslt = null_ptr_check(dev);
 808015e:	f7ff ffba 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080162:	b970      	cbnz	r0, 8080182 <get_mem_page+0x28>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080164:	2301      	movs	r3, #1
 8080166:	21f3      	movs	r1, #243	; 0xf3
 8080168:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 808016a:	7860      	ldrb	r0, [r4, #1]
 808016c:	f10d 0207 	add.w	r2, sp, #7
 8080170:	47a8      	blx	r5
 8080172:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080176:	b930      	cbnz	r0, 8080186 <get_mem_page+0x2c>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8080178:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808017c:	f003 0310 	and.w	r3, r3, #16
 8080180:	70e3      	strb	r3, [r4, #3]
}
 8080182:	b003      	add	sp, #12
 8080184:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8080186:	f06f 0001 	mvn.w	r0, #1
	return rslt;
 808018a:	e7fa      	b.n	8080182 <get_mem_page+0x28>

0808018c <boundary_check.constprop.0>:
		if (*value > max) {
 808018c:	7803      	ldrb	r3, [r0, #0]
 808018e:	428b      	cmp	r3, r1
			*value = max;
 8080190:	bf84      	itt	hi
 8080192:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080194:	f892 3046 	ldrbhi.w	r3, [r2, #70]	; 0x46
}
 8080198:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808019c:	bf84      	itt	hi
 808019e:	f043 0302 	orrhi.w	r3, r3, #2
 80801a2:	f882 3046 	strbhi.w	r3, [r2, #70]	; 0x46
}
 80801a6:	4770      	bx	lr

080801a8 <bme680_get_regs>:
{
 80801a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80801ac:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80801ae:	4618      	mov	r0, r3
{
 80801b0:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 80801b2:	f7ff ff90 	bl	80800d6 <null_ptr_check>
{
 80801b6:	4688      	mov	r8, r1
 80801b8:	4691      	mov	r9, r2
	if (rslt == BME680_OK) {
 80801ba:	4604      	mov	r4, r0
 80801bc:	b9a8      	cbnz	r0, 80801ea <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801be:	78ab      	ldrb	r3, [r5, #2]
 80801c0:	b93b      	cbnz	r3, 80801d2 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 80801c2:	4629      	mov	r1, r5
 80801c4:	4630      	mov	r0, r6
 80801c6:	f7ff ff94 	bl	80800f2 <set_mem_page>
			if (rslt == BME680_OK)
 80801ca:	4604      	mov	r4, r0
 80801cc:	b908      	cbnz	r0, 80801d2 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801ce:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801d2:	464b      	mov	r3, r9
 80801d4:	4642      	mov	r2, r8
 80801d6:	4631      	mov	r1, r6
 80801d8:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801da:	7868      	ldrb	r0, [r5, #1]
 80801dc:	47b8      	blx	r7
			rslt = BME680_E_COM_FAIL;
 80801de:	2800      	cmp	r0, #0
 80801e0:	bf18      	it	ne
 80801e2:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801e6:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801ea:	4620      	mov	r0, r4
 80801ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801f0 <bme680_set_regs>:
{
 80801f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801f4:	461c      	mov	r4, r3
 80801f6:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801f8:	2100      	movs	r1, #0
{
 80801fa:	b08a      	sub	sp, #40	; 0x28
 80801fc:	4606      	mov	r6, r0
 80801fe:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8080200:	a801      	add	r0, sp, #4
 8080202:	2224      	movs	r2, #36	; 0x24
 8080204:	9100      	str	r1, [sp, #0]
 8080206:	f00b f8b0 	bl	808b36a <memset>
	rslt = null_ptr_check(dev);
 808020a:	4620      	mov	r0, r4
 808020c:	f7ff ff63 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080210:	b9e8      	cbnz	r0, 808024e <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8080212:	f108 33ff 	add.w	r3, r8, #4294967295
 8080216:	2b12      	cmp	r3, #18
 8080218:	d833      	bhi.n	8080282 <bme680_set_regs+0x92>
 808021a:	46ea      	mov	sl, sp
 808021c:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 808021e:	fa1f f888 	uxth.w	r8, r8
 8080222:	fa1f f389 	uxth.w	r3, r9
 8080226:	4543      	cmp	r3, r8
 8080228:	d314      	bcc.n	8080254 <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 808022a:	b980      	cbnz	r0, 808024e <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808022c:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8080230:	3a01      	subs	r2, #1
 8080232:	b293      	uxth	r3, r2
 8080234:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8080236:	f89d 1000 	ldrb.w	r1, [sp]
 808023a:	7860      	ldrb	r0, [r4, #1]
 808023c:	f10d 0201 	add.w	r2, sp, #1
 8080240:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8080242:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080244:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8080248:	bf18      	it	ne
 808024a:	f06f 0001 	mvnne.w	r0, #1
}
 808024e:	b00a      	add	sp, #40	; 0x28
 8080250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 8080254:	78a3      	ldrb	r3, [r4, #2]
					rslt = set_mem_page(reg_addr[index], dev);
 8080256:	f816 5009 	ldrb.w	r5, [r6, r9]
				if (dev->intf == BME680_SPI_INTF) {
 808025a:	b93b      	cbnz	r3, 808026c <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 808025c:	4628      	mov	r0, r5
 808025e:	4621      	mov	r1, r4
 8080260:	f7ff ff47 	bl	80800f2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080264:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080268:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808026c:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 8080270:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080274:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 8080278:	f109 0901 	add.w	r9, r9, #1
 808027c:	f10a 0a02 	add.w	sl, sl, #2
 8080280:	e7cf      	b.n	8080222 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8080282:	f06f 0003 	mvn.w	r0, #3
 8080286:	e7e2      	b.n	808024e <bme680_set_regs+0x5e>

08080288 <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080288:	23e0      	movs	r3, #224	; 0xe0
{
 808028a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808028c:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080290:	23b6      	movs	r3, #182	; 0xb6
{
 8080292:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080294:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8080298:	f7ff ff1d 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808029c:	4604      	mov	r4, r0
 808029e:	b970      	cbnz	r0, 80802be <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 80802a0:	78ab      	ldrb	r3, [r5, #2]
 80802a2:	b17b      	cbz	r3, 80802c4 <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80802a4:	462b      	mov	r3, r5
 80802a6:	2201      	movs	r2, #1
 80802a8:	f10d 0107 	add.w	r1, sp, #7
 80802ac:	f10d 0006 	add.w	r0, sp, #6
 80802b0:	f7ff ff9e 	bl	80801f0 <bme680_set_regs>
 80802b4:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 80802b6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802b8:	200a      	movs	r0, #10
 80802ba:	4798      	blx	r3
			if (rslt == BME680_OK) {
 80802bc:	b14c      	cbz	r4, 80802d2 <bme680_soft_reset+0x4a>
}
 80802be:	4620      	mov	r0, r4
 80802c0:	b003      	add	sp, #12
 80802c2:	bd30      	pop	{r4, r5, pc}
			rslt = get_mem_page(dev);
 80802c4:	4628      	mov	r0, r5
 80802c6:	f7ff ff48 	bl	808015a <get_mem_page>
		if (rslt == BME680_OK) {
 80802ca:	4604      	mov	r4, r0
 80802cc:	2800      	cmp	r0, #0
 80802ce:	d1f6      	bne.n	80802be <bme680_soft_reset+0x36>
 80802d0:	e7e8      	b.n	80802a4 <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80802d2:	78ab      	ldrb	r3, [r5, #2]
 80802d4:	2b00      	cmp	r3, #0
 80802d6:	d1f2      	bne.n	80802be <bme680_soft_reset+0x36>
					rslt = get_mem_page(dev);
 80802d8:	4628      	mov	r0, r5
 80802da:	f7ff ff3e 	bl	808015a <get_mem_page>
 80802de:	4604      	mov	r4, r0
 80802e0:	e7ed      	b.n	80802be <bme680_soft_reset+0x36>

080802e2 <bme680_init>:
{
 80802e2:	b530      	push	{r4, r5, lr}
 80802e4:	b08d      	sub	sp, #52	; 0x34
 80802e6:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80802e8:	f7ff fef5 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802ec:	4604      	mov	r4, r0
 80802ee:	2800      	cmp	r0, #0
 80802f0:	f040 80af 	bne.w	8080452 <bme680_init+0x170>
		rslt = bme680_soft_reset(dev);
 80802f4:	4628      	mov	r0, r5
 80802f6:	f7ff ffc7 	bl	8080288 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802fa:	4604      	mov	r4, r0
 80802fc:	2800      	cmp	r0, #0
 80802fe:	f040 80a8 	bne.w	8080452 <bme680_init+0x170>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8080302:	462b      	mov	r3, r5
 8080304:	2201      	movs	r2, #1
 8080306:	4629      	mov	r1, r5
 8080308:	20d0      	movs	r0, #208	; 0xd0
 808030a:	f7ff ff4d 	bl	80801a8 <bme680_get_regs>
			if (rslt == BME680_OK) {
 808030e:	4604      	mov	r4, r0
 8080310:	2800      	cmp	r0, #0
 8080312:	f040 809e 	bne.w	8080452 <bme680_init+0x170>
				if (dev->chip_id == BME680_CHIP_ID) {
 8080316:	782b      	ldrb	r3, [r5, #0]
 8080318:	2b61      	cmp	r3, #97	; 0x61
 808031a:	f040 809d 	bne.w	8080458 <bme680_init+0x176>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 808031e:	4601      	mov	r1, r0
 8080320:	9001      	str	r0, [sp, #4]
 8080322:	2225      	movs	r2, #37	; 0x25
 8080324:	a802      	add	r0, sp, #8
 8080326:	f00b f820 	bl	808b36a <memset>
	rslt = null_ptr_check(dev);
 808032a:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 808032c:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8080330:	f7ff fed1 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080334:	4604      	mov	r4, r0
 8080336:	2800      	cmp	r0, #0
 8080338:	f040 808b 	bne.w	8080452 <bme680_init+0x170>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808033c:	462b      	mov	r3, r5
 808033e:	2219      	movs	r2, #25
 8080340:	2089      	movs	r0, #137	; 0x89
 8080342:	a901      	add	r1, sp, #4
 8080344:	f7ff ff30 	bl	80801a8 <bme680_get_regs>
		if (rslt == BME680_OK)
 8080348:	4604      	mov	r4, r0
 808034a:	b938      	cbnz	r0, 808035c <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808034c:	462b      	mov	r3, r5
 808034e:	2210      	movs	r2, #16
 8080350:	20e1      	movs	r0, #225	; 0xe1
 8080352:	f10d 011d 	add.w	r1, sp, #29
 8080356:	f7ff ff27 	bl	80801a8 <bme680_get_regs>
 808035a:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808035c:	f8bd 3025 	ldrh.w	r3, [sp, #37]	; 0x25
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8080360:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8080364:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8080366:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 808036a:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808036c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080370:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080372:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 8080376:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8080378:	f8bd 300b 	ldrh.w	r3, [sp, #11]
 808037c:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8080382:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080386:	f8bd 300f 	ldrh.w	r3, [sp, #15]
 808038a:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 808038c:	f8bd 3011 	ldrh.w	r3, [sp, #17]
 8080390:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8080392:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8080396:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 808039a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 808039e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a2:	f8bd 3017 	ldrh.w	r3, [sp, #23]
 80803a6:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803a8:	f8bd 3019 	ldrh.w	r3, [sp, #25]
 80803ac:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80803b2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80803ba:	f003 020f 	and.w	r2, r3, #15
 80803be:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803c2:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803c4:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80803c8:	091b      	lsrs	r3, r3, #4
 80803ca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803ce:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80803d4:	732b      	strb	r3, [r5, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803d6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80803da:	736b      	strb	r3, [r5, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80803dc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80803e0:	73ab      	strb	r3, [r5, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80803e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80803e6:	73eb      	strb	r3, [r5, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80803e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80803ec:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80803ee:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 80803f2:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f4:	f8bd 3027 	ldrh.w	r3, [sp, #39]	; 0x27
 80803f8:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80803fa:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80803fe:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 8080400:	bb14      	cbnz	r4, 8080448 <bme680_init+0x166>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080402:	462b      	mov	r3, r5
 8080404:	2201      	movs	r2, #1
 8080406:	2002      	movs	r0, #2
 8080408:	f10d 0103 	add.w	r1, sp, #3
 808040c:	f7ff fecc 	bl	80801a8 <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080410:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 8080414:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080416:	f3c3 1301 	ubfx	r3, r3, #4, #2
 808041a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 808041e:	b998      	cbnz	r0, 8080448 <bme680_init+0x166>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080420:	462b      	mov	r3, r5
 8080422:	2201      	movs	r2, #1
 8080424:	f10d 0103 	add.w	r1, sp, #3
 8080428:	f7ff febe 	bl	80801a8 <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 808042c:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080430:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080432:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 8080436:	b938      	cbnz	r0, 8080448 <bme680_init+0x166>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8080438:	462b      	mov	r3, r5
 808043a:	2201      	movs	r2, #1
 808043c:	2004      	movs	r0, #4
 808043e:	f10d 0103 	add.w	r1, sp, #3
 8080442:	f7ff feb1 	bl	80801a8 <bme680_get_regs>
 8080446:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8080448:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 808044c:	111b      	asrs	r3, r3, #4
 808044e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8080452:	4620      	mov	r0, r4
 8080454:	b00d      	add	sp, #52	; 0x34
 8080456:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 8080458:	f06f 0402 	mvn.w	r4, #2
 808045c:	e7f9      	b.n	8080452 <bme680_init+0x170>

0808045e <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808045e:	2374      	movs	r3, #116	; 0x74
{
 8080460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080462:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080464:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 8080468:	f7ff fe35 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808046c:	bba0      	cbnz	r0, 80804d8 <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 808046e:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080470:	4623      	mov	r3, r4
 8080472:	2201      	movs	r2, #1
 8080474:	2074      	movs	r0, #116	; 0x74
 8080476:	f10d 0106 	add.w	r1, sp, #6
 808047a:	f7ff fe95 	bl	80801a8 <bme680_get_regs>
			if (rslt == BME680_OK) {
 808047e:	b9a0      	cbnz	r0, 80804aa <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080480:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8080484:	f013 0503 	ands.w	r5, r3, #3
 8080488:	d011      	beq.n	80804ae <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 808048a:	f023 0303 	bic.w	r3, r3, #3
 808048e:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080492:	2201      	movs	r2, #1
 8080494:	4623      	mov	r3, r4
 8080496:	f10d 0106 	add.w	r1, sp, #6
 808049a:	f10d 0007 	add.w	r0, sp, #7
 808049e:	f7ff fea7 	bl	80801f0 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804a2:	200a      	movs	r0, #10
 80804a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804a6:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80804a8:	e7e2      	b.n	8080470 <bme680_set_sensor_mode+0x12>
 80804aa:	2d00      	cmp	r5, #0
 80804ac:	d1e0      	bne.n	8080470 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80804b2:	b18a      	cbz	r2, 80804d8 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80804b8:	f002 0203 	and.w	r2, r2, #3
 80804bc:	f023 0303 	bic.w	r3, r3, #3
 80804c0:	4313      	orrs	r3, r2
 80804c2:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804c6:	b938      	cbnz	r0, 80804d8 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804c8:	4623      	mov	r3, r4
 80804ca:	2201      	movs	r2, #1
 80804cc:	f10d 0106 	add.w	r1, sp, #6
 80804d0:	f10d 0007 	add.w	r0, sp, #7
 80804d4:	f7ff fe8c 	bl	80801f0 <bme680_set_regs>
}
 80804d8:	b003      	add	sp, #12
 80804da:	bd30      	pop	{r4, r5, pc}

080804dc <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80804dc:	2300      	movs	r3, #0
{
 80804de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80804e0:	4606      	mov	r6, r0
 80804e2:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80804e4:	4608      	mov	r0, r1
{
 80804e6:	460c      	mov	r4, r1
	uint8_t data = 0;
 80804e8:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80804ec:	9304      	str	r3, [sp, #16]
 80804ee:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80804f2:	9306      	str	r3, [sp, #24]
 80804f4:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 80804f8:	f7ff fded 	bl	80800d6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80804fc:	2800      	cmp	r0, #0
 80804fe:	f040 80f8 	bne.w	80806f2 <bme680_set_sensor_settings+0x216>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080502:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8080506:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808050a:	d105      	bne.n	8080518 <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 808050c:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080510:	4620      	mov	r0, r4
 8080512:	f7ff ffa4 	bl	808045e <bme680_set_sensor_mode>
 8080516:	e007      	b.n	8080528 <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080518:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 808051a:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 808051e:	f000 80ea 	beq.w	80806f6 <bme680_set_sensor_settings+0x21a>
		dev->power_mode = BME680_SLEEP_MODE;
 8080522:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 8080526:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 8080528:	f016 0510 	ands.w	r5, r6, #16
 808052c:	d01e      	beq.n	808056c <bme680_set_sensor_settings+0x90>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 808052e:	4622      	mov	r2, r4
 8080530:	2107      	movs	r1, #7
 8080532:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8080536:	f7ff fe29 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 808053a:	b928      	cbnz	r0, 8080548 <bme680_set_sensor_settings+0x6c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808053c:	4623      	mov	r3, r4
 808053e:	2201      	movs	r2, #1
 8080540:	2075      	movs	r0, #117	; 0x75
 8080542:	4469      	add	r1, sp
 8080544:	f7ff fe30 	bl	80801a8 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080548:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 808054c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080550:	009b      	lsls	r3, r3, #2
 8080552:	f022 021c 	bic.w	r2, r2, #28
 8080556:	f003 031c 	and.w	r3, r3, #28
 808055a:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 808055c:	2275      	movs	r2, #117	; 0x75
			count++;
 808055e:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080560:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 8080564:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080568:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 808056c:	06b3      	lsls	r3, r6, #26
 808056e:	d521      	bpl.n	80805b4 <bme680_set_sensor_settings+0xd8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080570:	4622      	mov	r2, r4
 8080572:	2108      	movs	r1, #8
 8080574:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080578:	f7ff fe08 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 808057c:	b930      	cbnz	r0, 808058c <bme680_set_sensor_settings+0xb0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808057e:	4623      	mov	r3, r4
 8080580:	2201      	movs	r2, #1
 8080582:	2070      	movs	r0, #112	; 0x70
 8080584:	f10d 0107 	add.w	r1, sp, #7
 8080588:	f7ff fe0e 	bl	80801a8 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808058c:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808058e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080592:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8080596:	f023 0308 	bic.w	r3, r3, #8
 808059a:	f002 0208 	and.w	r2, r2, #8
 808059e:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80805a0:	aa08      	add	r2, sp, #32
 80805a2:	442a      	add	r2, r5
			count++;
 80805a4:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805a6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80805aa:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80805ae:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80805b2:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80805b4:	07b1      	lsls	r1, r6, #30
 80805b6:	d032      	beq.n	808061e <bme680_set_sensor_settings+0x142>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80805b8:	4622      	mov	r2, r4
 80805ba:	2105      	movs	r1, #5
 80805bc:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80805c0:	f7ff fde4 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 80805c4:	b930      	cbnz	r0, 80805d4 <bme680_set_sensor_settings+0xf8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80805c6:	4623      	mov	r3, r4
 80805c8:	2201      	movs	r2, #1
 80805ca:	2074      	movs	r0, #116	; 0x74
 80805cc:	f10d 0107 	add.w	r1, sp, #7
 80805d0:	f7ff fdea 	bl	80801a8 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80805d4:	07f2      	lsls	r2, r6, #31
 80805d6:	d509      	bpl.n	80805ec <bme680_set_sensor_settings+0x110>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80805d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805dc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80805e0:	f003 031f 	and.w	r3, r3, #31
 80805e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80805e8:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80805ec:	07b3      	lsls	r3, r6, #30
 80805ee:	d50b      	bpl.n	8080608 <bme680_set_sensor_settings+0x12c>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80805f0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80805f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80805f8:	009b      	lsls	r3, r3, #2
 80805fa:	f003 031c 	and.w	r3, r3, #28
 80805fe:	f022 021c 	bic.w	r2, r2, #28
 8080602:	4313      	orrs	r3, r2
 8080604:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080608:	2274      	movs	r2, #116	; 0x74
 808060a:	ab08      	add	r3, sp, #32
 808060c:	442b      	add	r3, r5
 808060e:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080612:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080616:	3501      	adds	r5, #1
			data_array[count] = data;
 8080618:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808061c:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808061e:	0771      	lsls	r1, r6, #29
 8080620:	d521      	bpl.n	8080666 <bme680_set_sensor_settings+0x18a>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080622:	4622      	mov	r2, r4
 8080624:	2105      	movs	r1, #5
 8080626:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808062a:	f7ff fdaf 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 808062e:	b930      	cbnz	r0, 808063e <bme680_set_sensor_settings+0x162>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080630:	4623      	mov	r3, r4
 8080632:	2201      	movs	r2, #1
 8080634:	2072      	movs	r0, #114	; 0x72
 8080636:	f10d 0107 	add.w	r1, sp, #7
 808063a:	f7ff fdb5 	bl	80801a8 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808063e:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080644:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080648:	f023 0307 	bic.w	r3, r3, #7
 808064c:	f002 0207 	and.w	r2, r2, #7
 8080650:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080652:	aa08      	add	r2, sp, #32
 8080654:	442a      	add	r2, r5
			count++;
 8080656:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080658:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808065c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080660:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080664:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080666:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808066a:	d039      	beq.n	80806e0 <bme680_set_sensor_settings+0x204>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808066c:	4622      	mov	r2, r4
 808066e:	2101      	movs	r1, #1
 8080670:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080674:	f7ff fd8a 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK) {
 8080678:	b960      	cbnz	r0, 8080694 <bme680_set_sensor_settings+0x1b8>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808067a:	210a      	movs	r1, #10
 808067c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080680:	f7ff fd84 	bl	808018c <boundary_check.constprop.0>
			if (rslt == BME680_OK)
 8080684:	b930      	cbnz	r0, 8080694 <bme680_set_sensor_settings+0x1b8>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080686:	4623      	mov	r3, r4
 8080688:	2201      	movs	r2, #1
 808068a:	2071      	movs	r0, #113	; 0x71
 808068c:	f10d 0107 	add.w	r1, sp, #7
 8080690:	f7ff fd8a 	bl	80801a8 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 8080694:	0672      	lsls	r2, r6, #25
 8080696:	d50b      	bpl.n	80806b0 <bme680_set_sensor_settings+0x1d4>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 8080698:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 808069c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80806a0:	011b      	lsls	r3, r3, #4
 80806a2:	f003 0310 	and.w	r3, r3, #16
 80806a6:	f022 0210 	bic.w	r2, r2, #16
 80806aa:	4313      	orrs	r3, r2
 80806ac:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80806b0:	0633      	lsls	r3, r6, #24
 80806b2:	d50a      	bpl.n	80806ca <bme680_set_sensor_settings+0x1ee>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80806b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806b8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80806bc:	f023 030f 	bic.w	r3, r3, #15
 80806c0:	f002 020f 	and.w	r2, r2, #15
 80806c4:	4313      	orrs	r3, r2
 80806c6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80806ca:	2271      	movs	r2, #113	; 0x71
 80806cc:	ab08      	add	r3, sp, #32
 80806ce:	442b      	add	r3, r5
 80806d0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80806d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80806d8:	3501      	adds	r5, #1
			data_array[count] = data;
 80806da:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80806de:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 80806e0:	b928      	cbnz	r0, 80806ee <bme680_set_sensor_settings+0x212>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80806e2:	4623      	mov	r3, r4
 80806e4:	462a      	mov	r2, r5
 80806e6:	a906      	add	r1, sp, #24
 80806e8:	a804      	add	r0, sp, #16
 80806ea:	f7ff fd81 	bl	80801f0 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 80806ee:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 80806f2:	b009      	add	sp, #36	; 0x24
 80806f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80806f6:	235a      	movs	r3, #90	; 0x5a
 80806f8:	f88d 3008 	strb.w	r3, [sp, #8]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 80806fc:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8080700:	f9b1 2012 	ldrsh.w	r2, [r1, #18]
 8080704:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080708:	bf28      	it	cs
 808070a:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808070e:	2bc8      	cmp	r3, #200	; 0xc8
 8080710:	bf38      	it	cc
 8080712:	23c8      	movcc	r3, #200	; 0xc8
 8080714:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080718:	f202 1299 	addw	r2, r2, #409	; 0x199
 808071c:	4353      	muls	r3, r2
 808071e:	2214      	movs	r2, #20
 8080720:	fbb3 f3f2 	udiv	r3, r3, r2
 8080724:	220a      	movs	r2, #10
 8080726:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 808072a:	fbb3 f3f2 	udiv	r3, r3, r2
 808072e:	f991 2011 	ldrsb.w	r2, [r1, #17]
 8080732:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080736:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080738:	f991 3004 	ldrsb.w	r3, [r1, #4]
 808073c:	f991 1014 	ldrsb.w	r1, [r1, #20]
 8080740:	434b      	muls	r3, r1
 8080742:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080746:	fb93 f3f1 	sdiv	r3, r3, r1
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808074a:	2183      	movs	r1, #131	; 0x83
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808074c:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 808074e:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080752:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8080756:	3204      	adds	r2, #4
 8080758:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808075c:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
 8080760:	434a      	muls	r2, r1
 8080762:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080766:	fbb3 f3f2 	udiv	r3, r3, r2
 808076a:	2222      	movs	r2, #34	; 0x22
 808076c:	3bfa      	subs	r3, #250	; 0xfa
 808076e:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 8080770:	2264      	movs	r2, #100	; 0x64
 8080772:	3332      	adds	r3, #50	; 0x32
 8080774:	fb93 f3f2 	sdiv	r3, r3, r2
 8080778:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808077c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8080780:	f88d 2009 	strb.w	r2, [sp, #9]
	if (dur >= 0xfc0) {
 8080784:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080788:	d21a      	bcs.n	80807c0 <bme680_set_sensor_settings+0x2e4>
		while (dur > 0x3F) {
 808078a:	2b3f      	cmp	r3, #63	; 0x3f
 808078c:	b2c2      	uxtb	r2, r0
 808078e:	f100 0001 	add.w	r0, r0, #1
 8080792:	d813      	bhi.n	80807bc <bme680_set_sensor_settings+0x2e0>
		durval = (uint8_t) (dur + (factor * 64));
 8080794:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8080798:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 808079a:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808079c:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807a0:	2202      	movs	r2, #2
 80807a2:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80807a4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807a8:	a903      	add	r1, sp, #12
 80807aa:	a802      	add	r0, sp, #8
 80807ac:	f7ff fd20 	bl	80801f0 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80807b0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80807b4:	2800      	cmp	r0, #0
 80807b6:	f47f aeb7 	bne.w	8080528 <bme680_set_sensor_settings+0x4c>
 80807ba:	e6a9      	b.n	8080510 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80807bc:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80807be:	e7e4      	b.n	808078a <bme680_set_sensor_settings+0x2ae>
		durval = 0xff; /* Max duration*/
 80807c0:	23ff      	movs	r3, #255	; 0xff
 80807c2:	e7ea      	b.n	808079a <bme680_set_sensor_settings+0x2be>

080807c4 <bme680_get_profile_dur>:
{
 80807c4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807c6:	4b18      	ldr	r3, [pc, #96]	; (8080828 <bme680_get_profile_dur+0x64>)
{
 80807c8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807ca:	6818      	ldr	r0, [r3, #0]
 80807cc:	889b      	ldrh	r3, [r3, #4]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807ce:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807d2:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807d6:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807da:	9000      	str	r0, [sp, #0]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807dc:	a802      	add	r0, sp, #8
 80807de:	4403      	add	r3, r0
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807e0:	4404      	add	r4, r0
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807e2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807e6:	f814 0c08 	ldrb.w	r0, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80807ea:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807ec:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80807ee:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 80807f2:	4423      	add	r3, r4
 80807f4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80807f8:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80807fc:	4418      	add	r0, r3
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80807fe:	f241 23b9 	movw	r3, #4793	; 0x12b9
 8080802:	fb04 3300 	mla	r3, r4, r0, r3
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808080a:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 808080e:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080810:	b29b      	uxth	r3, r3
 8080812:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080814:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8080818:	b118      	cbz	r0, 8080822 <bme680_get_profile_dur+0x5e>
		*duration += dev->gas_sett.heatr_dur;
 808081a:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 808081e:	440b      	add	r3, r1
 8080820:	8013      	strh	r3, [r2, #0]
}
 8080822:	b002      	add	sp, #8
 8080824:	bd10      	pop	{r4, pc}
 8080826:	bf00      	nop
 8080828:	0808d3c4 	.word	0x0808d3c4

0808082c <bme680_get_sensor_data>:
{
 808082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080830:	4606      	mov	r6, r0
 8080832:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080834:	4608      	mov	r0, r1
 8080836:	f7ff fc4e 	bl	80800d6 <null_ptr_check>
{
 808083a:	460c      	mov	r4, r1
	if (rslt == BME680_OK) {
 808083c:	4605      	mov	r5, r0
 808083e:	2800      	cmp	r0, #0
 8080840:	f040 8159 	bne.w	8080af6 <bme680_get_sensor_data+0x2ca>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080844:	9006      	str	r0, [sp, #24]
 8080846:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808084a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808084e:	4608      	mov	r0, r1
 8080850:	f7ff fc41 	bl	80800d6 <null_ptr_check>
 8080854:	270a      	movs	r7, #10
 8080856:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080858:	2d00      	cmp	r5, #0
 808085a:	f040 8153 	bne.w	8080b04 <bme680_get_sensor_data+0x2d8>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808085e:	4623      	mov	r3, r4
 8080860:	220f      	movs	r2, #15
 8080862:	a904      	add	r1, sp, #16
 8080864:	201d      	movs	r0, #29
 8080866:	f7ff fc9f 	bl	80801a8 <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808086a:	f89d e010 	ldrb.w	lr, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808086e:	f99d c01e 	ldrsb.w	ip, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080872:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080876:	f00e 030f 	and.w	r3, lr, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808087a:	f00c 0120 	and.w	r1, ip, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808087e:	f02e 0e7f 	bic.w	lr, lr, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080882:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8080884:	ea4e 0101 	orr.w	r1, lr, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080888:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808088c:	f00c 0c10 	and.w	ip, ip, #16
 8080890:	ea41 010c 	orr.w	r1, r1, ip
 8080894:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080896:	7073      	strb	r3, [r6, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080898:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 808089a:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808089e:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808a2:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80808a4:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80808a6:	70b3      	strb	r3, [r6, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808a8:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808aa:	f89d 8012 	ldrb.w	r8, [sp, #18]
 80808ae:	f89d 9013 	ldrb.w	r9, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80808b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808b6:	f89d a015 	ldrb.w	sl, [sp, #21]
 80808ba:	f89d b016 	ldrb.w	fp, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80808be:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808c2:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808c6:	7031      	strb	r1, [r6, #0]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808c8:	f280 8119 	bge.w	8080afe <bme680_get_sensor_data+0x2d2>
				| ((uint32_t) buff[7] / 16));
 80808cc:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808ce:	ea40 1b0b 	orr.w	fp, r0, fp, lsl #4
 80808d2:	ea4b 3a0a 	orr.w	sl, fp, sl, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80808d6:	f8b4 b016 	ldrh.w	fp, [r4, #22]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80808da:	f994 c01a 	ldrsb.w	ip, [r4, #26]
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80808de:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80808e2:	ebcb 0ada 	rsb	sl, fp, sl, lsr #3
 80808e6:	ea4f 71ea 	mov.w	r1, sl, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80808ea:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80808ee:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80808f2:	fb00 f701 	mul.w	r7, r0, r1
 80808f6:	fba0 0100 	umull	r0, r1, r0, r0
 80808fa:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80808fe:	0b00      	lsrs	r0, r0, #12
 8080900:	ea40 5001 	orr.w	r0, r0, r1, lsl #20
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080904:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8080908:	ea4f 7cec 	mov.w	ip, ip, asr #31
 808090c:	fb00 fc0c 	mul.w	ip, r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080910:	1309      	asrs	r1, r1, #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080912:	fb07 cc01 	mla	ip, r7, r1, ip
 8080916:	fba0 7007 	umull	r7, r0, r0, r7
 808091a:	4484      	add	ip, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808091c:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
				| ((uint32_t) buff[4] / 16));
 8080920:	091b      	lsrs	r3, r3, #4
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080922:	fb80 0a0a 	smull	r0, sl, r0, sl
 8080926:	ea4f 2ed0 	mov.w	lr, r0, lsr #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808092a:	0bb8      	lsrs	r0, r7, #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808092c:	ea4e 5e4a 	orr.w	lr, lr, sl, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080930:	ea40 408c 	orr.w	r0, r0, ip, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080934:	4470      	add	r0, lr
 8080936:	6320      	str	r0, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8080938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 808093c:	3080      	adds	r0, #128	; 0x80
 808093e:	1200      	asrs	r0, r0, #8
 8080940:	80b0      	strh	r0, [r6, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080942:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080944:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080948:	104f      	asrs	r7, r1, #1
 808094a:	f5a7 477a 	sub.w	r7, r7, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808094e:	ea4f 0ca7 	mov.w	ip, r7, asr #2
 8080952:	fb0c fc0c 	mul.w	ip, ip, ip
		(int32_t)dev->calib.par_p6) >> 2;
 8080956:	f994 1026 	ldrsb.w	r1, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808095a:	ea4f 20ec 	mov.w	r0, ip, asr #11
 808095e:	4341      	muls	r1, r0
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080960:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080964:	ea43 3308 	orr.w	r3, r3, r8, lsl #12
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080968:	4378      	muls	r0, r7
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808096a:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808096e:	0040      	lsls	r0, r0, #1
 8080970:	eb00 00a1 	add.w	r0, r0, r1, asr #2
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080974:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8080978:	eb08 00a0 	add.w	r0, r8, r0, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 808097c:	f640 4835 	movw	r8, #3125	; 0xc35
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080980:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080984:	ea4f 3c6c 	mov.w	ip, ip, asr #13
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080988:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808098a:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 808098e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080992:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080994:	fb0c f101 	mul.w	r1, ip, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080998:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808099a:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = var1 >> 18;
 808099e:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809a0:	8ba7      	ldrh	r7, [r4, #28]
 80809a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80809a6:	4379      	muls	r1, r7
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809a8:	eba3 3320 	sub.w	r3, r3, r0, asr #12
 80809ac:	fb08 f303 	mul.w	r3, r8, r3
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b0:	13c9      	asrs	r1, r1, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809b2:	fbb3 f3f1 	udiv	r3, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809b6:	f343 019c 	sbfx	r1, r3, #2, #29
 80809ba:	4349      	muls	r1, r1
 80809bc:	f9b4 702a 	ldrsh.w	r7, [r4, #42]	; 0x2a
		(int32_t)dev->calib.par_p8) >> 13;
 80809c0:	f9b4 c028 	ldrsh.w	ip, [r4, #40]	; 0x28
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809c4:	1349      	asrs	r1, r1, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809c6:	434f      	muls	r7, r1
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809c8:	f343 015d 	sbfx	r1, r3, #1, #30
 80809cc:	fb0c f101 	mul.w	r1, ip, r1
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809d0:	f343 10d7 	sbfx	r0, r3, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809d4:	1349      	asrs	r1, r1, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809d6:	eb01 3127 	add.w	r1, r1, r7, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809da:	fb00 f700 	mul.w	r7, r0, r0
 80809de:	4378      	muls	r0, r7
		(int32_t)dev->calib.par_p10) >> 17;
 80809e0:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 80809e4:	4378      	muls	r0, r7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809e6:	eb01 4160 	add.w	r1, r1, r0, asr #17
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ea:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809ee:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80809f2:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809f4:	1109      	asrs	r1, r1, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809f6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 80809fa:	60b3      	str	r3, [r6, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80809fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80809fe:	f994 300e 	ldrsb.w	r3, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080a06:	3180      	adds	r1, #128	; 0x80
 8080a08:	1209      	asrs	r1, r1, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a0a:	434b      	muls	r3, r1
 8080a0c:	fb93 f3f0 	sdiv	r3, r3, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a10:	f994 700d 	ldrsb.w	r7, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a14:	434b      	muls	r3, r1
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a16:	434f      	muls	r7, r1
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a18:	119b      	asrs	r3, r3, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a1a:	fb97 f7f0 	sdiv	r7, r7, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a1e:	fb93 f3f0 	sdiv	r3, r3, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a22:	443b      	add	r3, r7
	var2 = ((int32_t) dev->calib.par_h2
 8080a24:	8967      	ldrh	r7, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a2a:	437b      	muls	r3, r7
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a2c:	e9dd c701 	ldrd	ip, r7, [sp, #4]
 8080a30:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 8080a34:	f8b4 c008 	ldrh.w	ip, [r4, #8]
	var2 = ((int32_t) dev->calib.par_h2
 8080a38:	129b      	asrs	r3, r3, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a3a:	eba7 170c 	sub.w	r7, r7, ip, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8080a3e:	f994 c00c 	ldrsb.w	ip, [r4, #12]
 8080a42:	fb01 fc0c 	mul.w	ip, r1, ip
 8080a46:	fb9c fcf0 	sdiv	ip, ip, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a4a:	eba7 076c 	sub.w	r7, r7, ip, asr #1
	var3 = var1 * var2;
 8080a4e:	437b      	muls	r3, r7
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a50:	f994 7010 	ldrsb.w	r7, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a54:	f04f 0c05 	mov.w	ip, #5
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a58:	4379      	muls	r1, r7
 8080a5a:	fb91 f0f0 	sdiv	r0, r1, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080a5e:	7be1      	ldrb	r1, [r4, #15]
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a60:	f002 070f 	and.w	r7, r2, #15
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a64:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a68:	1399      	asrs	r1, r3, #14
 8080a6a:	4349      	muls	r1, r1
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a6c:	1100      	asrs	r0, r0, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a6e:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
 8080a70:	4348      	muls	r0, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080a76:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8080a7a:	129b      	asrs	r3, r3, #10
 8080a7c:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080a7e:	492a      	ldr	r1, [pc, #168]	; (8080b28 <bme680_get_sensor_data+0x2fc>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a80:	131b      	asrs	r3, r3, #12
 8080a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8080a86:	428b      	cmp	r3, r1
 8080a88:	bfd4      	ite	le
 8080a8a:	60f3      	strle	r3, [r6, #12]
 8080a8c:	60f1      	strgt	r1, [r6, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a8e:	f240 513c 	movw	r1, #1340	; 0x53c
 8080a92:	2300      	movs	r3, #0
 8080a94:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080a98:	0992      	lsrs	r2, r2, #6
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a9a:	fbcc 1300 	smlal	r1, r3, ip, r0
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a9e:	4823      	ldr	r0, [pc, #140]	; (8080b2c <bme680_get_sensor_data+0x300>)
 8080aa0:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aa4:	fba1 1c00 	umull	r1, ip, r1, r0
 8080aa8:	fb00 c303 	mla	r3, r0, r3, ip
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080aac:	9803      	ldr	r0, [sp, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aae:	0c09      	lsrs	r1, r1, #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ab0:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8080ab4:	03d2      	lsls	r2, r2, #15
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ab6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080aba:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
 8080abe:	eb60 0000 	sbc.w	r0, r0, r0
 8080ac2:	1852      	adds	r2, r2, r1
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ac4:	ea4f 4c23 	mov.w	ip, r3, asr #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ac8:	eb40 4323 	adc.w	r3, r0, r3, asr #16
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080acc:	4818      	ldr	r0, [pc, #96]	; (8080b30 <bme680_get_sensor_data+0x304>)
 8080ace:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8080ad2:	fba7 0101 	umull	r0, r1, r7, r1
 8080ad6:	fb07 1c0c 	mla	ip, r7, ip, r1
 8080ada:	0a40      	lsrs	r0, r0, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080adc:	0857      	lsrs	r7, r2, #1
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ade:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080ae2:	ea47 77c3 	orr.w	r7, r7, r3, lsl #31
 8080ae6:	1059      	asrs	r1, r3, #1
 8080ae8:	19c0      	adds	r0, r0, r7
 8080aea:	eb41 216c 	adc.w	r1, r1, ip, asr #9
 8080aee:	f00a f9c5 	bl	808ae7c <__aeabi_ldivmod>
 8080af2:	6130      	str	r0, [r6, #16]
		if (rslt == BME680_OK) {
 8080af4:	b16d      	cbz	r5, 8080b12 <bme680_get_sensor_data+0x2e6>
}
 8080af6:	4628      	mov	r0, r5
 8080af8:	b009      	add	sp, #36	; 0x24
 8080afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080afe:	200a      	movs	r0, #10
 8080b00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b02:	4798      	blx	r3
	} while (tries);
 8080b04:	3f01      	subs	r7, #1
 8080b06:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080b0a:	f47f aea5 	bne.w	8080858 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 8080b0e:	2502      	movs	r5, #2
	return rslt;
 8080b10:	e7f1      	b.n	8080af6 <bme680_get_sensor_data+0x2ca>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b12:	f996 3000 	ldrsb.w	r3, [r6]
 8080b16:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b18:	bfb6      	itet	lt
 8080b1a:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 8080b1c:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 8080b20:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080b24:	e7e7      	b.n	8080af6 <bme680_get_sensor_data+0x2ca>
 8080b26:	bf00      	nop
 8080b28:	000186a0 	.word	0x000186a0
 8080b2c:	20000000 	.word	0x20000000
 8080b30:	20000040 	.word	0x20000040

08080b34 <__tcf_0>:
#if Wiring_Serial4

// instantiate Serial4
USARTSerial& __fetch_global_Serial4()
{
	static USARTSerial serial4(HAL_USART_SERIAL4, acquireSerial4Buffer());
 8080b34:	4770      	bx	lr

08080b36 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b36:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b38:	7c03      	ldrb	r3, [r0, #16]
 8080b3a:	f013 0008 	ands.w	r0, r3, #8
 8080b3e:	bf1e      	ittt	ne
 8080b40:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 8080b42:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080b44:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b46:	2800      	cmp	r0, #0
  }
 8080b48:	bfb8      	it	lt
 8080b4a:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 8080b4e:	4770      	bx	lr

08080b50 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b50:	4770      	bx	lr

08080b52 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 8080b52:	4770      	bx	lr

08080b54 <_ZN6SdFileD0Ev>:
 8080b54:	b510      	push	{r4, lr}
 8080b56:	4604      	mov	r4, r0
 8080b58:	212c      	movs	r1, #44	; 0x2c
 8080b5a:	f7ff fab2 	bl	80800c2 <_ZdlPvj>
 8080b5e:	4620      	mov	r0, r4
 8080b60:	bd10      	pop	{r4, pc}

08080b62 <_ZN4FileD0Ev>:
 8080b62:	b510      	push	{r4, lr}
 8080b64:	4604      	mov	r4, r0
 8080b66:	2134      	movs	r1, #52	; 0x34
 8080b68:	f7ff faab 	bl	80800c2 <_ZdlPvj>
 8080b6c:	4620      	mov	r0, r4
 8080b6e:	bd10      	pop	{r4, pc}

08080b70 <_Z20remoteReadStoredVars6String>:
    }

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
 8080b70:	2300      	movs	r3, #0
int remoteReadStoredVars(String mem_address){
 8080b72:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080b74:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080b78:	f007 fd08 	bl	808858c <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080b7c:	2898      	cmp	r0, #152	; 0x98
    int numerical_mem_address = mem_address.toInt();
 8080b7e:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080b80:	d80b      	bhi.n	8080b9a <_Z20remoteReadStoredVars6String+0x2a>
        EEPROM.get(numerical_mem_address, tempValue);
 8080b82:	f009 f8df 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080b86:	4620      	mov	r0, r4
 8080b88:	2202      	movs	r2, #2
 8080b8a:	f10d 0106 	add.w	r1, sp, #6
 8080b8e:	f006 fd85 	bl	808769c <HAL_EEPROM_Get>
        return tempValue;
 8080b92:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    }else{
        return -1;
    }
}
 8080b96:	b002      	add	sp, #8
 8080b98:	bd10      	pop	{r4, pc}
        return -1;
 8080b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8080b9e:	e7fa      	b.n	8080b96 <_Z20remoteReadStoredVars6String+0x26>

08080ba0 <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 8080ba0:	3008      	adds	r0, #8
 8080ba2:	f005 bd1f 	b.w	80865e4 <_ZN7FatFile5writeEPKvj>

08080ba6 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080ba6:	3010      	adds	r0, #16
 8080ba8:	f005 bd1c 	b.w	80865e4 <_ZN7FatFile5writeEPKvj>

08080bac <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080bac:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bae:	2201      	movs	r2, #1
 8080bb0:	f88d 1007 	strb.w	r1, [sp, #7]
 8080bb4:	3010      	adds	r0, #16
 8080bb6:	f10d 0107 	add.w	r1, sp, #7
 8080bba:	f005 fd13 	bl	80865e4 <_ZN7FatFile5writeEPKvj>
  }
 8080bbe:	b003      	add	sp, #12
 8080bc0:	f85d fb04 	ldr.w	pc, [sp], #4

08080bc4 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080bc4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bc8:	f005 b959 	b.w	8085e7e <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080bcc <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8080bcc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bd0:	f005 b88d 	b.w	8085cee <_ZN9SdSpiCard10readBlocksEmPhj>

08080bd4 <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8080bd4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bd8:	f005 b8cb 	b.w	8085d72 <_ZN9SdSpiCard10writeBlockEmPKh>

08080bdc <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8080bdc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080be0:	f005 b83d 	b.w	8085c5e <_ZN9SdSpiCard9readBlockEmPh>

08080be4 <_ZN4File5flushEv>:
    FatFile::sync();
 8080be4:	3010      	adds	r0, #16
 8080be6:	f005 bc73 	b.w	80864d0 <_ZN7FatFile4syncEv>

08080bea <_ZN4File4peekEv>:
    return FatFile::peek();
 8080bea:	3010      	adds	r0, #16
 8080bec:	f005 bba4 	b.w	8086338 <_ZN7FatFile4peekEv>

08080bf0 <_ZN4File4readEv>:
  int read() {
 8080bf0:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
 8080bf2:	2201      	movs	r2, #1
 8080bf4:	f10d 0107 	add.w	r1, sp, #7
 8080bf8:	3010      	adds	r0, #16
 8080bfa:	f005 faee 	bl	80861da <_ZN7FatFile4readEPvj>
 8080bfe:	2801      	cmp	r0, #1
 8080c00:	bf14      	ite	ne
 8080c02:	f04f 30ff 	movne.w	r0, #4294967295
 8080c06:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  }
 8080c0a:	b003      	add	sp, #12
 8080c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08080c10 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8080c10:	b570      	push	{r4, r5, r6, lr}
 8080c12:	4606      	mov	r6, r0
 8080c14:	460c      	mov	r4, r1
{
    if (base == 0) {
 8080c16:	4615      	mov	r5, r2
 8080c18:	b92a      	cbnz	r2, 8080c26 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8080c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 8080c1e:	6803      	ldr	r3, [r0, #0]
 8080c20:	b2c9      	uxtb	r1, r1
 8080c22:	689b      	ldr	r3, [r3, #8]
 8080c24:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8080c26:	2900      	cmp	r1, #0
 8080c28:	da0b      	bge.n	8080c42 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
 8080c2a:	2a0a      	cmp	r2, #10
 8080c2c:	d109      	bne.n	8080c42 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 8080c2e:	212d      	movs	r1, #45	; 0x2d
 8080c30:	f007 fcfe 	bl	8088630 <_ZN5Print5printEc>
            val = -n;
 8080c34:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8080c36:	4630      	mov	r0, r6
 8080c38:	b2ea      	uxtb	r2, r5
}
 8080c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 8080c3e:	f007 bd1a 	b.w	8088676 <_ZN5Print11printNumberEmh>
            val = n;
 8080c42:	4621      	mov	r1, r4
 8080c44:	e7f7      	b.n	8080c36 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

08080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 8080c46:	b510      	push	{r4, lr}
 8080c48:	4604      	mov	r4, r0
        size_t n = print(b, base);
 8080c4a:	f7ff ffe1 	bl	8080c10 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
 8080c4e:	4620      	mov	r0, r4
    }
 8080c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 8080c54:	f007 bcef 	b.w	8088636 <_ZN5Print7printlnEv>

08080c58 <__tcf_1>:
 8080c58:	4770      	bx	lr

08080c5a <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080c5a:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 8080c5c:	2201      	movs	r2, #1
 8080c5e:	f88d 1007 	strb.w	r1, [sp, #7]
 8080c62:	3008      	adds	r0, #8
 8080c64:	f10d 0107 	add.w	r1, sp, #7
 8080c68:	f005 fcbc 	bl	80865e4 <_ZN7FatFile5writeEPKvj>
  }
 8080c6c:	b003      	add	sp, #12
 8080c6e:	f85d fb04 	ldr.w	pc, [sp], #4

08080c72 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080c72:	b40e      	push	{r1, r2, r3}
 8080c74:	b503      	push	{r0, r1, lr}
 8080c76:	ab03      	add	r3, sp, #12
 8080c78:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 8080c7c:	2100      	movs	r1, #0
        va_start(args, format);
 8080c7e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080c80:	f007 fdf4 	bl	808886c <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 8080c84:	b002      	add	sp, #8
 8080c86:	f85d eb04 	ldr.w	lr, [sp], #4
 8080c8a:	b003      	add	sp, #12
 8080c8c:	4770      	bx	lr

08080c8e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080c8e:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080c90:	f04f 0c20 	mov.w	ip, #32
 8080c94:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 8080c96:	b500      	push	{lr}
 8080c98:	b08c      	sub	sp, #48	; 0x30
 8080c9a:	aa0d      	add	r2, sp, #52	; 0x34
 8080c9c:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 8080ca0:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ca4:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 8080ca8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080caa:	6801      	ldr	r1, [r0, #0]
 8080cac:	aa04      	add	r2, sp, #16
 8080cae:	201e      	movs	r0, #30
 8080cb0:	f006 fe84 	bl	80879bc <log_message_v>
}
 8080cb4:	b00c      	add	sp, #48	; 0x30
 8080cb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8080cba:	b003      	add	sp, #12
 8080cbc:	4770      	bx	lr
	...

08080cc0 <_Z22__fetch_global_Serial4v>:
{
 8080cc0:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, acquireSerial4Buffer());
 8080cc2:	4c0e      	ldr	r4, [pc, #56]	; (8080cfc <_Z22__fetch_global_Serial4v+0x3c>)
{
 8080cc4:	b086      	sub	sp, #24
	static USARTSerial serial4(HAL_USART_SERIAL4, acquireSerial4Buffer());
 8080cc6:	7823      	ldrb	r3, [r4, #0]
 8080cc8:	f3bf 8f5b 	dmb	ish
 8080ccc:	07db      	lsls	r3, r3, #31
 8080cce:	d411      	bmi.n	8080cf4 <_Z22__fetch_global_Serial4v+0x34>
 8080cd0:	4620      	mov	r0, r4
 8080cd2:	f7ff f9f8 	bl	80800c6 <__cxa_guard_acquire>
 8080cd6:	b168      	cbz	r0, 8080cf4 <_Z22__fetch_global_Serial4v+0x34>
 8080cd8:	a801      	add	r0, sp, #4
 8080cda:	f009 f803 	bl	8089ce4 <_Z20acquireSerial4Bufferv>
 8080cde:	2103      	movs	r1, #3
 8080ce0:	aa01      	add	r2, sp, #4
 8080ce2:	4807      	ldr	r0, [pc, #28]	; (8080d00 <_Z22__fetch_global_Serial4v+0x40>)
 8080ce4:	f008 fdf6 	bl	80898d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 8080ce8:	4620      	mov	r0, r4
 8080cea:	f7ff f9f1 	bl	80800d0 <__cxa_guard_release>
 8080cee:	4805      	ldr	r0, [pc, #20]	; (8080d04 <_Z22__fetch_global_Serial4v+0x44>)
 8080cf0:	f00a fb10 	bl	808b314 <atexit>
	return serial4;
}
 8080cf4:	4802      	ldr	r0, [pc, #8]	; (8080d00 <_Z22__fetch_global_Serial4v+0x40>)
 8080cf6:	b006      	add	sp, #24
 8080cf8:	bd10      	pop	{r4, pc}
 8080cfa:	bf00      	nop
 8080cfc:	20000300 	.word	0x20000300
 8080d00:	2000030c 	.word	0x2000030c
 8080d04:	08080b35 	.word	0x08080b35

08080d08 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080d08:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080d0a:	f7ff ffd9 	bl	8080cc0 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080d0e:	4b07      	ldr	r3, [pc, #28]	; (8080d2c <_Z15serialEventRun4v+0x24>)
 8080d10:	4604      	mov	r4, r0
 8080d12:	b153      	cbz	r3, 8080d2a <_Z15serialEventRun4v+0x22>
 8080d14:	f008 fdf9 	bl	808990a <_ZN11USARTSerial9isEnabledEv>
 8080d18:	b138      	cbz	r0, 8080d2a <_Z15serialEventRun4v+0x22>
 8080d1a:	6823      	ldr	r3, [r4, #0]
 8080d1c:	4620      	mov	r0, r4
 8080d1e:	691b      	ldr	r3, [r3, #16]
 8080d20:	4798      	blx	r3
 8080d22:	2800      	cmp	r0, #0
 8080d24:	dd01      	ble.n	8080d2a <_Z15serialEventRun4v+0x22>
        handler();
 8080d26:	f3af 8000 	nop.w
}
 8080d2a:	bd10      	pop	{r4, pc}
 8080d2c:	00000000 	.word	0x00000000

08080d30 <_Z22__fetch_global_Serial5v>:

#if Wiring_Serial5

// instantiate Serial5
USARTSerial& __fetch_global_Serial5()
{
 8080d30:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, acquireSerial5Buffer());
 8080d32:	4c0e      	ldr	r4, [pc, #56]	; (8080d6c <_Z22__fetch_global_Serial5v+0x3c>)
{
 8080d34:	b086      	sub	sp, #24
	static USARTSerial serial5(HAL_USART_SERIAL5, acquireSerial5Buffer());
 8080d36:	7823      	ldrb	r3, [r4, #0]
 8080d38:	f3bf 8f5b 	dmb	ish
 8080d3c:	07db      	lsls	r3, r3, #31
 8080d3e:	d411      	bmi.n	8080d64 <_Z22__fetch_global_Serial5v+0x34>
 8080d40:	4620      	mov	r0, r4
 8080d42:	f7ff f9c0 	bl	80800c6 <__cxa_guard_acquire>
 8080d46:	b168      	cbz	r0, 8080d64 <_Z22__fetch_global_Serial5v+0x34>
 8080d48:	a801      	add	r0, sp, #4
 8080d4a:	f008 ffd1 	bl	8089cf0 <_Z20acquireSerial5Bufferv>
 8080d4e:	2104      	movs	r1, #4
 8080d50:	aa01      	add	r2, sp, #4
 8080d52:	4807      	ldr	r0, [pc, #28]	; (8080d70 <_Z22__fetch_global_Serial5v+0x40>)
 8080d54:	f008 fdbe 	bl	80898d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 8080d58:	4620      	mov	r0, r4
 8080d5a:	f7ff f9b9 	bl	80800d0 <__cxa_guard_release>
 8080d5e:	4805      	ldr	r0, [pc, #20]	; (8080d74 <_Z22__fetch_global_Serial5v+0x44>)
 8080d60:	f00a fad8 	bl	808b314 <atexit>
	return serial5;
}
 8080d64:	4802      	ldr	r0, [pc, #8]	; (8080d70 <_Z22__fetch_global_Serial5v+0x40>)
 8080d66:	b006      	add	sp, #24
 8080d68:	bd10      	pop	{r4, pc}
 8080d6a:	bf00      	nop
 8080d6c:	20000304 	.word	0x20000304
 8080d70:	20000320 	.word	0x20000320
 8080d74:	08080c59 	.word	0x08080c59

08080d78 <_Z15serialEventRun5v>:

void serialEventRun5()
{
 8080d78:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080d7a:	f7ff ffd9 	bl	8080d30 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080d7e:	4b07      	ldr	r3, [pc, #28]	; (8080d9c <_Z15serialEventRun5v+0x24>)
 8080d80:	4604      	mov	r4, r0
 8080d82:	b153      	cbz	r3, 8080d9a <_Z15serialEventRun5v+0x22>
 8080d84:	f008 fdc1 	bl	808990a <_ZN11USARTSerial9isEnabledEv>
 8080d88:	b138      	cbz	r0, 8080d9a <_Z15serialEventRun5v+0x22>
 8080d8a:	6823      	ldr	r3, [r4, #0]
 8080d8c:	4620      	mov	r0, r4
 8080d8e:	691b      	ldr	r3, [r3, #16]
 8080d90:	4798      	blx	r3
 8080d92:	2800      	cmp	r0, #0
 8080d94:	dd01      	ble.n	8080d9a <_Z15serialEventRun5v+0x22>
        handler();
 8080d96:	f3af 8000 	nop.w
}
 8080d9a:	bd10      	pop	{r4, pc}
 8080d9c:	00000000 	.word	0x00000000

08080da0 <_ZN5SdFat5beginEhh>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
 8080da0:	b538      	push	{r3, r4, r5, lr}
 8080da2:	4604      	mov	r4, r0
 8080da4:	4613      	mov	r3, r2
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080da6:	460a      	mov	r2, r1
 8080da8:	f500 618e 	add.w	r1, r0, #1136	; 0x470
 8080dac:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080db0:	f004 fec4 	bl	8085b3c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080db4:	b908      	cbnz	r0, 8080dba <_ZN5SdFat5beginEhh+0x1a>
 8080db6:	2000      	movs	r0, #0
    return SdFatBase::begin(&m_spi, csPin, divisor);
  }
 8080db8:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080dba:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080dbe:	4628      	mov	r0, r5
 8080dc0:	f005 fbbc 	bl	808653c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080dc4:	2101      	movs	r1, #1
 8080dc6:	4620      	mov	r0, r4
 8080dc8:	f005 fde5 	bl	8086996 <_ZN9FatVolume4initEh>
 8080dcc:	4601      	mov	r1, r0
 8080dce:	b168      	cbz	r0, 8080dec <_ZN5SdFat5beginEhh+0x4c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080dd0:	4621      	mov	r1, r4
 8080dd2:	4628      	mov	r0, r5
 8080dd4:	f005 f9fb 	bl	80861ce <_ZN7FatFile8openRootEP9FatVolume>
 8080dd8:	2800      	cmp	r0, #0
 8080dda:	d0ec      	beq.n	8080db6 <_ZN5SdFat5beginEhh+0x16>
    if (!dir->isDir()) {
 8080ddc:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080de0:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080de4:	d0e7      	beq.n	8080db6 <_ZN5SdFat5beginEhh+0x16>
    m_cwd = dir;
 8080de6:	4b04      	ldr	r3, [pc, #16]	; (8080df8 <_ZN5SdFat5beginEhh+0x58>)
 8080de8:	601d      	str	r5, [r3, #0]
    return true;
 8080dea:	e7e5      	b.n	8080db8 <_ZN5SdFat5beginEhh+0x18>
    return (part ? init(part) : init(1) || init(0))
 8080dec:	4620      	mov	r0, r4
 8080dee:	f005 fdd2 	bl	8086996 <_ZN9FatVolume4initEh>
 8080df2:	2800      	cmp	r0, #0
 8080df4:	d1ec      	bne.n	8080dd0 <_ZN5SdFat5beginEhh+0x30>
 8080df6:	e7de      	b.n	8080db6 <_ZN5SdFat5beginEhh+0x16>
 8080df8:	20000a80 	.word	0x20000a80

08080dfc <_Z13writeRegisterhh>:
void writeRegister(uint8_t reg, uint8_t value) {
 8080dfc:	b538      	push	{r3, r4, r5, lr}
 8080dfe:	460c      	mov	r4, r1
 8080e00:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080e02:	f009 f80d 	bl	8089e20 <_Z20__fetch_global_Wire3v>
 8080e06:	216b      	movs	r1, #107	; 0x6b
 8080e08:	f008 fe0a 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080e0c:	f009 f808 	bl	8089e20 <_Z20__fetch_global_Wire3v>
 8080e10:	6803      	ldr	r3, [r0, #0]
 8080e12:	4629      	mov	r1, r5
 8080e14:	689b      	ldr	r3, [r3, #8]
 8080e16:	4798      	blx	r3
    Wire3.write(value);
 8080e18:	f009 f802 	bl	8089e20 <_Z20__fetch_global_Wire3v>
 8080e1c:	6803      	ldr	r3, [r0, #0]
 8080e1e:	4621      	mov	r1, r4
 8080e20:	689b      	ldr	r3, [r3, #8]
 8080e22:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080e24:	f008 fffc 	bl	8089e20 <_Z20__fetch_global_Wire3v>
}
 8080e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080e2c:	2101      	movs	r1, #1
 8080e2e:	f008 be12 	b.w	8089a56 <_ZN7TwoWire15endTransmissionEh>
	...

08080e34 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080e36:	f008 ff85 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080e3a:	2204      	movs	r2, #4
 8080e3c:	f240 6313 	movw	r3, #1555	; 0x613
 8080e40:	eb0d 0102 	add.w	r1, sp, r2
 8080e44:	2000      	movs	r0, #0
 8080e46:	9301      	str	r3, [sp, #4]
 8080e48:	f006 fc30 	bl	80876ac <HAL_EEPROM_Put>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080e4c:	f008 ff7a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080e50:	2204      	movs	r2, #4
 8080e52:	2564      	movs	r5, #100	; 0x64
 8080e54:	eb0d 0102 	add.w	r1, sp, r2
 8080e58:	2008      	movs	r0, #8
 8080e5a:	9501      	str	r5, [sp, #4]
 8080e5c:	f006 fc26 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CO_SLOPEA_MEM_ADDRESS, 100);
 8080e60:	f008 ff70 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080e64:	2204      	movs	r2, #4
 8080e66:	2010      	movs	r0, #16
 8080e68:	eb0d 0102 	add.w	r1, sp, r2
 8080e6c:	9501      	str	r5, [sp, #4]
 8080e6e:	f006 fc1d 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CO_SLOPEB_MEM_ADDRESS, 100);
 8080e72:	f008 ff67 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080e76:	2204      	movs	r2, #4
 8080e78:	2098      	movs	r0, #152	; 0x98
 8080e7a:	eb0d 0102 	add.w	r1, sp, r2
 8080e7e:	9501      	str	r5, [sp, #4]
 8080e80:	f006 fc14 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080e84:	f008 ff5e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080e88:	2204      	movs	r2, #4
 8080e8a:	2018      	movs	r0, #24
 8080e8c:	eb0d 0102 	add.w	r1, sp, r2
 8080e90:	9501      	str	r5, [sp, #4]
 8080e92:	f006 fc0b 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080e96:	f008 ff55 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080e9a:	2204      	movs	r2, #4
 8080e9c:	2020      	movs	r0, #32
 8080e9e:	eb0d 0102 	add.w	r1, sp, r2
 8080ea2:	9501      	str	r5, [sp, #4]
 8080ea4:	f006 fc02 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080ea8:	f008 ff4c 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080eac:	2204      	movs	r2, #4
 8080eae:	2028      	movs	r0, #40	; 0x28
 8080eb0:	eb0d 0102 	add.w	r1, sp, r2
 8080eb4:	9501      	str	r5, [sp, #4]
 8080eb6:	f006 fbf9 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080eba:	f008 ff43 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080ebe:	2204      	movs	r2, #4
 8080ec0:	2030      	movs	r0, #48	; 0x30
 8080ec2:	eb0d 0102 	add.w	r1, sp, r2
 8080ec6:	9501      	str	r5, [sp, #4]
 8080ec8:	f006 fbf0 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080ecc:	f008 ff3a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080ed0:	2204      	movs	r2, #4
 8080ed2:	2038      	movs	r0, #56	; 0x38
 8080ed4:	eb0d 0102 	add.w	r1, sp, r2
 8080ed8:	9501      	str	r5, [sp, #4]
 8080eda:	f006 fbe7 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080ede:	f008 ff31 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080ee2:	2204      	movs	r2, #4
 8080ee4:	2040      	movs	r0, #64	; 0x40
 8080ee6:	eb0d 0102 	add.w	r1, sp, r2
 8080eea:	9501      	str	r5, [sp, #4]
 8080eec:	f006 fbde 	bl	80876ac <HAL_EEPROM_Put>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080ef0:	f008 ff28 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080ef4:	2204      	movs	r2, #4
 8080ef6:	2400      	movs	r4, #0
 8080ef8:	eb0d 0102 	add.w	r1, sp, r2
 8080efc:	4610      	mov	r0, r2
 8080efe:	9401      	str	r4, [sp, #4]
 8080f00:	f006 fbd4 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CO_ZEROA_MEM_ADDRESS, 0);
 8080f04:	f008 ff1e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f08:	2204      	movs	r2, #4
 8080f0a:	200c      	movs	r0, #12
 8080f0c:	eb0d 0102 	add.w	r1, sp, r2
 8080f10:	9401      	str	r4, [sp, #4]
 8080f12:	f006 fbcb 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CO_ZEROB_MEM_ADDRESS, 0);
 8080f16:	f008 ff15 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f1a:	2204      	movs	r2, #4
 8080f1c:	2094      	movs	r0, #148	; 0x94
 8080f1e:	eb0d 0102 	add.w	r1, sp, r2
 8080f22:	9401      	str	r4, [sp, #4]
 8080f24:	f006 fbc2 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080f28:	f008 ff0c 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f2c:	2204      	movs	r2, #4
 8080f2e:	2014      	movs	r0, #20
 8080f30:	eb0d 0102 	add.w	r1, sp, r2
 8080f34:	9401      	str	r4, [sp, #4]
 8080f36:	f006 fbb9 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080f3a:	f008 ff03 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f3e:	2204      	movs	r2, #4
 8080f40:	201c      	movs	r0, #28
 8080f42:	eb0d 0102 	add.w	r1, sp, r2
 8080f46:	9401      	str	r4, [sp, #4]
 8080f48:	f006 fbb0 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080f4c:	f008 fefa 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f50:	2204      	movs	r2, #4
 8080f52:	2024      	movs	r0, #36	; 0x24
 8080f54:	eb0d 0102 	add.w	r1, sp, r2
 8080f58:	9401      	str	r4, [sp, #4]
 8080f5a:	f006 fba7 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080f5e:	f008 fef1 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f62:	2204      	movs	r2, #4
 8080f64:	202c      	movs	r0, #44	; 0x2c
 8080f66:	eb0d 0102 	add.w	r1, sp, r2
 8080f6a:	9401      	str	r4, [sp, #4]
 8080f6c:	f006 fb9e 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080f70:	f008 fee8 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f74:	2204      	movs	r2, #4
 8080f76:	2034      	movs	r0, #52	; 0x34
 8080f78:	eb0d 0102 	add.w	r1, sp, r2
 8080f7c:	9401      	str	r4, [sp, #4]
 8080f7e:	f006 fb95 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080f82:	f008 fedf 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f86:	2204      	movs	r2, #4
 8080f88:	203c      	movs	r0, #60	; 0x3c
 8080f8a:	eb0d 0102 	add.w	r1, sp, r2
 8080f8e:	9401      	str	r4, [sp, #4]
 8080f90:	f006 fb8c 	bl	80876ac <HAL_EEPROM_Put>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080f94:	f008 fed6 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080f98:	2204      	movs	r2, #4
 8080f9a:	2044      	movs	r0, #68	; 0x44
 8080f9c:	eb0d 0102 	add.w	r1, sp, r2
 8080fa0:	9401      	str	r4, [sp, #4]
 8080fa2:	f006 fb83 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080fa6:	f008 fecd 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080faa:	2204      	movs	r2, #4
 8080fac:	2048      	movs	r0, #72	; 0x48
 8080fae:	eb0d 0102 	add.w	r1, sp, r2
 8080fb2:	9401      	str	r4, [sp, #4]
 8080fb4:	f006 fb7a 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080fb8:	f008 fec4 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080fbc:	2204      	movs	r2, #4
 8080fbe:	2058      	movs	r0, #88	; 0x58
 8080fc0:	eb0d 0102 	add.w	r1, sp, r2
 8080fc4:	9401      	str	r4, [sp, #4]
 8080fc6:	f006 fb71 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080fca:	f008 febb 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080fce:	2204      	movs	r2, #4
 8080fd0:	4951      	ldr	r1, [pc, #324]	; (8081118 <_Z20writeDefaultSettingsv+0x2e4>)
 8080fd2:	205c      	movs	r0, #92	; 0x5c
 8080fd4:	f006 fb6a 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080fd8:	f008 feb4 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080fdc:	2204      	movs	r2, #4
 8080fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080fe2:	eb0d 0102 	add.w	r1, sp, r2
 8080fe6:	204c      	movs	r0, #76	; 0x4c
 8080fe8:	9301      	str	r3, [sp, #4]
 8080fea:	f006 fb5f 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080fee:	f008 fea9 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8080ff2:	2204      	movs	r2, #4
 8080ff4:	f242 7310 	movw	r3, #10000	; 0x2710
 8080ff8:	eb0d 0102 	add.w	r1, sp, r2
 8080ffc:	2050      	movs	r0, #80	; 0x50
 8080ffe:	9301      	str	r3, [sp, #4]
 8081000:	f006 fb54 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8081004:	f008 fe9e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081008:	2204      	movs	r2, #4
 808100a:	f06f 0306 	mvn.w	r3, #6
 808100e:	eb0d 0102 	add.w	r1, sp, r2
 8081012:	2054      	movs	r0, #84	; 0x54
 8081014:	9301      	str	r3, [sp, #4]
 8081016:	f006 fb49 	bl	80876ac <HAL_EEPROM_Put>
    Time.zone(tempValue);
 808101a:	4b40      	ldr	r3, [pc, #256]	; (808111c <_Z20writeDefaultSettingsv+0x2e8>)
 808101c:	6818      	ldr	r0, [r3, #0]
 808101e:	f009 fced 	bl	808a9fc <__aeabi_i2f>
 8081022:	f007 fced 	bl	8088a00 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8081026:	f008 fe8d 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808102a:	2204      	movs	r2, #4
 808102c:	2060      	movs	r0, #96	; 0x60
 808102e:	eb0d 0102 	add.w	r1, sp, r2
 8081032:	9401      	str	r4, [sp, #4]
 8081034:	f006 fb3a 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8081038:	f008 fe84 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808103c:	2204      	movs	r2, #4
 808103e:	4628      	mov	r0, r5
 8081040:	eb0d 0102 	add.w	r1, sp, r2
 8081044:	9401      	str	r4, [sp, #4]
 8081046:	f006 fb31 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 808104a:	f008 fe7b 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808104e:	2204      	movs	r2, #4
 8081050:	2501      	movs	r5, #1
 8081052:	eb0d 0102 	add.w	r1, sp, r2
 8081056:	2068      	movs	r0, #104	; 0x68
 8081058:	9501      	str	r5, [sp, #4]
 808105a:	f006 fb27 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 808105e:	f008 fe71 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081062:	2204      	movs	r2, #4
 8081064:	206c      	movs	r0, #108	; 0x6c
 8081066:	eb0d 0102 	add.w	r1, sp, r2
 808106a:	9401      	str	r4, [sp, #4]
 808106c:	f006 fb1e 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8081070:	f008 fe68 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081074:	2204      	movs	r2, #4
 8081076:	2070      	movs	r0, #112	; 0x70
 8081078:	eb0d 0102 	add.w	r1, sp, r2
 808107c:	9401      	str	r4, [sp, #4]
 808107e:	f006 fb15 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081082:	f008 fe5f 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081086:	2204      	movs	r2, #4
 8081088:	2074      	movs	r0, #116	; 0x74
 808108a:	eb0d 0102 	add.w	r1, sp, r2
 808108e:	9501      	str	r5, [sp, #4]
 8081090:	f006 fb0c 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8081094:	f008 fe56 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081098:	2204      	movs	r2, #4
 808109a:	2078      	movs	r0, #120	; 0x78
 808109c:	eb0d 0102 	add.w	r1, sp, r2
 80810a0:	9501      	str	r5, [sp, #4]
 80810a2:	f006 fb03 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 80810a6:	f008 fe4d 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80810aa:	2204      	movs	r2, #4
 80810ac:	207c      	movs	r0, #124	; 0x7c
 80810ae:	eb0d 0102 	add.w	r1, sp, r2
 80810b2:	9401      	str	r4, [sp, #4]
 80810b4:	f006 fafa 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 80810b8:	f008 fe44 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80810bc:	2204      	movs	r2, #4
 80810be:	2080      	movs	r0, #128	; 0x80
 80810c0:	eb0d 0102 	add.w	r1, sp, r2
 80810c4:	9501      	str	r5, [sp, #4]
 80810c6:	f006 faf1 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 80810ca:	f008 fe3b 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80810ce:	2204      	movs	r2, #4
 80810d0:	2084      	movs	r0, #132	; 0x84
 80810d2:	eb0d 0102 	add.w	r1, sp, r2
 80810d6:	9401      	str	r4, [sp, #4]
 80810d8:	f006 fae8 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 80810dc:	f008 fe32 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80810e0:	2204      	movs	r2, #4
 80810e2:	2088      	movs	r0, #136	; 0x88
 80810e4:	eb0d 0102 	add.w	r1, sp, r2
 80810e8:	9401      	str	r4, [sp, #4]
 80810ea:	f006 fadf 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 80810ee:	f008 fe29 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80810f2:	2204      	movs	r2, #4
 80810f4:	208c      	movs	r0, #140	; 0x8c
 80810f6:	eb0d 0102 	add.w	r1, sp, r2
 80810fa:	9401      	str	r4, [sp, #4]
 80810fc:	f006 fad6 	bl	80876ac <HAL_EEPROM_Put>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8081100:	f008 fe20 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081104:	2204      	movs	r2, #4
 8081106:	2090      	movs	r0, #144	; 0x90
 8081108:	eb0d 0102 	add.w	r1, sp, r2
 808110c:	9401      	str	r4, [sp, #4]
 808110e:	f006 facd 	bl	80876ac <HAL_EEPROM_Put>
}
 8081112:	b003      	add	sp, #12
 8081114:	bd30      	pop	{r4, r5, pc}
 8081116:	bf00      	nop
 8081118:	20000a34 	.word	0x20000a34
 808111c:	20000a24 	.word	0x20000a24

08081120 <_Z14readStoredVarsv>:
void readStoredVars(void){
 8081120:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8081124:	4cd2      	ldr	r4, [pc, #840]	; (8081470 <_Z14readStoredVarsv+0x350>)
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8081126:	f008 fe0d 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808112a:	2204      	movs	r2, #4
 808112c:	4621      	mov	r1, r4
 808112e:	2000      	movs	r0, #0
 8081130:	f006 fab4 	bl	808769c <HAL_EEPROM_Get>
    if(DEVICE_id == -1){
 8081134:	6823      	ldr	r3, [r4, #0]
 8081136:	3301      	adds	r3, #1
 8081138:	d104      	bne.n	8081144 <_Z14readStoredVarsv+0x24>
        DEVICE_id = 1555;
 808113a:	f240 6313 	movw	r3, #1555	; 0x613
 808113e:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8081140:	f7ff fe78 	bl	8080e34 <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8081144:	f008 fdfe 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081148:	2204      	movs	r2, #4
 808114a:	2008      	movs	r0, #8
 808114c:	eb0d 0102 	add.w	r1, sp, r2
 8081150:	f006 faa4 	bl	808769c <HAL_EEPROM_Get>
    CO2_slope = tempValue;
 8081154:	9801      	ldr	r0, [sp, #4]
 8081156:	f009 fc51 	bl	808a9fc <__aeabi_i2f>
    CO2_slope /= 100;
 808115a:	49c6      	ldr	r1, [pc, #792]	; (8081474 <_Z14readStoredVarsv+0x354>)
 808115c:	f009 fd56 	bl	808ac0c <__aeabi_fdiv>
 8081160:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8081478 <_Z14readStoredVarsv+0x358>
    CO_slopeA /= 100;
 8081164:	f8df 8314 	ldr.w	r8, [pc, #788]	; 808147c <_Z14readStoredVarsv+0x35c>
    CO2_slope /= 100;
 8081168:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
 808116c:	f008 fdea 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081170:	2204      	movs	r2, #4
 8081172:	2010      	movs	r0, #16
 8081174:	eb0d 0102 	add.w	r1, sp, r2
 8081178:	f006 fa90 	bl	808769c <HAL_EEPROM_Get>
    CO_slopeA = tempValue;
 808117c:	9801      	ldr	r0, [sp, #4]
 808117e:	f009 fc3d 	bl	808a9fc <__aeabi_i2f>
    CO_slopeA /= 100;
 8081182:	49bc      	ldr	r1, [pc, #752]	; (8081474 <_Z14readStoredVarsv+0x354>)
 8081184:	f009 fd42 	bl	808ac0c <__aeabi_fdiv>
 8081188:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPEB_MEM_ADDRESS, tempValue);
 808118c:	f008 fdda 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081190:	2204      	movs	r2, #4
 8081192:	2098      	movs	r0, #152	; 0x98
 8081194:	eb0d 0102 	add.w	r1, sp, r2
 8081198:	f006 fa80 	bl	808769c <HAL_EEPROM_Get>
    CO_slopeB = tempValue;
 808119c:	9801      	ldr	r0, [sp, #4]
 808119e:	f009 fc2d 	bl	808a9fc <__aeabi_i2f>
    CO_slopeB /= 100;
 80811a2:	49b4      	ldr	r1, [pc, #720]	; (8081474 <_Z14readStoredVarsv+0x354>)
 80811a4:	f009 fd32 	bl	808ac0c <__aeabi_fdiv>
 80811a8:	4fb5      	ldr	r7, [pc, #724]	; (8081480 <_Z14readStoredVarsv+0x360>)
    PM_1_slope /= 100;
 80811aa:	4eb6      	ldr	r6, [pc, #728]	; (8081484 <_Z14readStoredVarsv+0x364>)
    CO_slopeB /= 100;
 80811ac:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80811ae:	f008 fdc9 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80811b2:	2204      	movs	r2, #4
 80811b4:	2018      	movs	r0, #24
 80811b6:	eb0d 0102 	add.w	r1, sp, r2
 80811ba:	f006 fa6f 	bl	808769c <HAL_EEPROM_Get>
    PM_1_slope = tempValue;
 80811be:	9801      	ldr	r0, [sp, #4]
 80811c0:	f009 fc1c 	bl	808a9fc <__aeabi_i2f>
    PM_1_slope /= 100;
 80811c4:	49ab      	ldr	r1, [pc, #684]	; (8081474 <_Z14readStoredVarsv+0x354>)
 80811c6:	f009 fd21 	bl	808ac0c <__aeabi_fdiv>
 80811ca:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80811cc:	f008 fdba 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80811d0:	2204      	movs	r2, #4
 80811d2:	2020      	movs	r0, #32
 80811d4:	eb0d 0102 	add.w	r1, sp, r2
 80811d8:	f006 fa60 	bl	808769c <HAL_EEPROM_Get>
    PM_25_slope = tempValue;
 80811dc:	9801      	ldr	r0, [sp, #4]
 80811de:	f009 fc0d 	bl	808a9fc <__aeabi_i2f>
    PM_25_slope /= 100;
 80811e2:	49a4      	ldr	r1, [pc, #656]	; (8081474 <_Z14readStoredVarsv+0x354>)
 80811e4:	f009 fd12 	bl	808ac0c <__aeabi_fdiv>
 80811e8:	4da7      	ldr	r5, [pc, #668]	; (8081488 <_Z14readStoredVarsv+0x368>)
    PM_10_slope /= 100;
 80811ea:	4ca8      	ldr	r4, [pc, #672]	; (808148c <_Z14readStoredVarsv+0x36c>)
    PM_25_slope /= 100;
 80811ec:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 80811ee:	f008 fda9 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80811f2:	2204      	movs	r2, #4
 80811f4:	2028      	movs	r0, #40	; 0x28
 80811f6:	eb0d 0102 	add.w	r1, sp, r2
 80811fa:	f006 fa4f 	bl	808769c <HAL_EEPROM_Get>
    PM_10_slope = tempValue;
 80811fe:	9801      	ldr	r0, [sp, #4]
 8081200:	f009 fbfc 	bl	808a9fc <__aeabi_i2f>
    PM_10_slope /= 100;
 8081204:	499b      	ldr	r1, [pc, #620]	; (8081474 <_Z14readStoredVarsv+0x354>)
 8081206:	f009 fd01 	bl	808ac0c <__aeabi_fdiv>
 808120a:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 808120c:	f008 fd9a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081210:	2204      	movs	r2, #4
 8081212:	2030      	movs	r0, #48	; 0x30
 8081214:	eb0d 0102 	add.w	r1, sp, r2
 8081218:	f006 fa40 	bl	808769c <HAL_EEPROM_Get>
    temp_slope = tempValue;
 808121c:	9801      	ldr	r0, [sp, #4]
 808121e:	f009 fbed 	bl	808a9fc <__aeabi_i2f>
    temp_slope /= 100;
 8081222:	4994      	ldr	r1, [pc, #592]	; (8081474 <_Z14readStoredVarsv+0x354>)
 8081224:	f009 fcf2 	bl	808ac0c <__aeabi_fdiv>
 8081228:	4b99      	ldr	r3, [pc, #612]	; (8081490 <_Z14readStoredVarsv+0x370>)
 808122a:	f8df a268 	ldr.w	sl, [pc, #616]	; 8081494 <_Z14readStoredVarsv+0x374>
 808122e:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8081230:	f008 fd88 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081234:	2204      	movs	r2, #4
 8081236:	2038      	movs	r0, #56	; 0x38
 8081238:	eb0d 0102 	add.w	r1, sp, r2
 808123c:	f006 fa2e 	bl	808769c <HAL_EEPROM_Get>
    pressure_slope = tempValue;
 8081240:	9801      	ldr	r0, [sp, #4]
 8081242:	f009 fbdb 	bl	808a9fc <__aeabi_i2f>
    pressure_slope /= 100;
 8081246:	498b      	ldr	r1, [pc, #556]	; (8081474 <_Z14readStoredVarsv+0x354>)
 8081248:	f009 fce0 	bl	808ac0c <__aeabi_fdiv>
 808124c:	4b92      	ldr	r3, [pc, #584]	; (8081498 <_Z14readStoredVarsv+0x378>)
 808124e:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8081250:	f008 fd78 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081254:	2204      	movs	r2, #4
 8081256:	2040      	movs	r0, #64	; 0x40
 8081258:	eb0d 0102 	add.w	r1, sp, r2
 808125c:	f006 fa1e 	bl	808769c <HAL_EEPROM_Get>
    rh_slope = tempValue;
 8081260:	9801      	ldr	r0, [sp, #4]
 8081262:	f009 fbcb 	bl	808a9fc <__aeabi_i2f>
    rh_slope /= 100;
 8081266:	4983      	ldr	r1, [pc, #524]	; (8081474 <_Z14readStoredVarsv+0x354>)
 8081268:	f009 fcd0 	bl	808ac0c <__aeabi_fdiv>
 808126c:	4b8b      	ldr	r3, [pc, #556]	; (808149c <_Z14readStoredVarsv+0x37c>)
 808126e:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8081270:	f008 fd68 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081274:	2204      	movs	r2, #4
 8081276:	498a      	ldr	r1, [pc, #552]	; (80814a0 <_Z14readStoredVarsv+0x380>)
 8081278:	4610      	mov	r0, r2
 808127a:	f006 fa0f 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(CO_ZEROA_MEM_ADDRESS, CO_zeroA);
 808127e:	f008 fd61 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081282:	2204      	movs	r2, #4
 8081284:	4987      	ldr	r1, [pc, #540]	; (80814a4 <_Z14readStoredVarsv+0x384>)
 8081286:	200c      	movs	r0, #12
 8081288:	f006 fa08 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(CO_ZEROB_MEM_ADDRESS, CO_zeroB);
 808128c:	f008 fd5a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081290:	2204      	movs	r2, #4
 8081292:	4985      	ldr	r1, [pc, #532]	; (80814a8 <_Z14readStoredVarsv+0x388>)
 8081294:	2094      	movs	r0, #148	; 0x94
 8081296:	f006 fa01 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 808129a:	f008 fd53 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808129e:	2204      	movs	r2, #4
 80812a0:	4982      	ldr	r1, [pc, #520]	; (80814ac <_Z14readStoredVarsv+0x38c>)
 80812a2:	2014      	movs	r0, #20
 80812a4:	f006 f9fa 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80812a8:	f008 fd4c 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812ac:	2204      	movs	r2, #4
 80812ae:	4980      	ldr	r1, [pc, #512]	; (80814b0 <_Z14readStoredVarsv+0x390>)
 80812b0:	201c      	movs	r0, #28
 80812b2:	f006 f9f3 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80812b6:	f008 fd45 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812ba:	2204      	movs	r2, #4
 80812bc:	497d      	ldr	r1, [pc, #500]	; (80814b4 <_Z14readStoredVarsv+0x394>)
 80812be:	2024      	movs	r0, #36	; 0x24
 80812c0:	f006 f9ec 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 80812c4:	f008 fd3e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812c8:	2204      	movs	r2, #4
 80812ca:	497b      	ldr	r1, [pc, #492]	; (80814b8 <_Z14readStoredVarsv+0x398>)
 80812cc:	202c      	movs	r0, #44	; 0x2c
 80812ce:	f006 f9e5 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 80812d2:	f008 fd37 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812d6:	2204      	movs	r2, #4
 80812d8:	4978      	ldr	r1, [pc, #480]	; (80814bc <_Z14readStoredVarsv+0x39c>)
 80812da:	2034      	movs	r0, #52	; 0x34
 80812dc:	f006 f9de 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 80812e0:	f008 fd30 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812e4:	2204      	movs	r2, #4
 80812e6:	4976      	ldr	r1, [pc, #472]	; (80814c0 <_Z14readStoredVarsv+0x3a0>)
 80812e8:	203c      	movs	r0, #60	; 0x3c
 80812ea:	f006 f9d7 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80812ee:	f008 fd29 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80812f2:	2204      	movs	r2, #4
 80812f4:	4973      	ldr	r1, [pc, #460]	; (80814c4 <_Z14readStoredVarsv+0x3a4>)
 80812f6:	2044      	movs	r0, #68	; 0x44
 80812f8:	f006 f9d0 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80812fc:	f008 fd22 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081300:	2204      	movs	r2, #4
 8081302:	4971      	ldr	r1, [pc, #452]	; (80814c8 <_Z14readStoredVarsv+0x3a8>)
 8081304:	2048      	movs	r0, #72	; 0x48
 8081306:	f006 f9c9 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808130a:	f008 fd1b 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808130e:	2204      	movs	r2, #4
 8081310:	496e      	ldr	r1, [pc, #440]	; (80814cc <_Z14readStoredVarsv+0x3ac>)
 8081312:	2058      	movs	r0, #88	; 0x58
 8081314:	f006 f9c2 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081318:	f008 fd14 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808131c:	2204      	movs	r2, #4
 808131e:	496c      	ldr	r1, [pc, #432]	; (80814d0 <_Z14readStoredVarsv+0x3b0>)
 8081320:	205c      	movs	r0, #92	; 0x5c
 8081322:	f006 f9bb 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081326:	f008 fd0d 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808132a:	2204      	movs	r2, #4
 808132c:	4969      	ldr	r1, [pc, #420]	; (80814d4 <_Z14readStoredVarsv+0x3b4>)
 808132e:	204c      	movs	r0, #76	; 0x4c
 8081330:	f006 f9b4 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081334:	f008 fd06 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081338:	2204      	movs	r2, #4
 808133a:	4967      	ldr	r1, [pc, #412]	; (80814d8 <_Z14readStoredVarsv+0x3b8>)
 808133c:	2050      	movs	r0, #80	; 0x50
 808133e:	f006 f9ad 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081342:	f008 fcff 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081346:	2204      	movs	r2, #4
 8081348:	2054      	movs	r0, #84	; 0x54
 808134a:	eb0d 0102 	add.w	r1, sp, r2
 808134e:	f006 f9a5 	bl	808769c <HAL_EEPROM_Get>
    Time.zone(tempValue);
 8081352:	9801      	ldr	r0, [sp, #4]
 8081354:	f009 fb52 	bl	808a9fc <__aeabi_i2f>
 8081358:	f007 fb52 	bl	8088a00 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808135c:	f008 fcf2 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081360:	2204      	movs	r2, #4
 8081362:	495e      	ldr	r1, [pc, #376]	; (80814dc <_Z14readStoredVarsv+0x3bc>)
 8081364:	2060      	movs	r0, #96	; 0x60
 8081366:	f006 f999 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 808136a:	f008 fceb 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808136e:	2204      	movs	r2, #4
 8081370:	495b      	ldr	r1, [pc, #364]	; (80814e0 <_Z14readStoredVarsv+0x3c0>)
 8081372:	2064      	movs	r0, #100	; 0x64
 8081374:	f006 f992 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081378:	f008 fce4 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808137c:	2204      	movs	r2, #4
 808137e:	4959      	ldr	r1, [pc, #356]	; (80814e4 <_Z14readStoredVarsv+0x3c4>)
 8081380:	2068      	movs	r0, #104	; 0x68
 8081382:	f006 f98b 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081386:	f008 fcdd 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808138a:	2204      	movs	r2, #4
 808138c:	4956      	ldr	r1, [pc, #344]	; (80814e8 <_Z14readStoredVarsv+0x3c8>)
 808138e:	206c      	movs	r0, #108	; 0x6c
 8081390:	f006 f984 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 8081394:	f008 fcd6 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081398:	2204      	movs	r2, #4
 808139a:	4954      	ldr	r1, [pc, #336]	; (80814ec <_Z14readStoredVarsv+0x3cc>)
 808139c:	2070      	movs	r0, #112	; 0x70
 808139e:	f006 f97d 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80813a2:	f008 fccf 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813a6:	2204      	movs	r2, #4
 80813a8:	4951      	ldr	r1, [pc, #324]	; (80814f0 <_Z14readStoredVarsv+0x3d0>)
 80813aa:	2074      	movs	r0, #116	; 0x74
 80813ac:	f006 f976 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80813b0:	f008 fcc8 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813b4:	2204      	movs	r2, #4
 80813b6:	494f      	ldr	r1, [pc, #316]	; (80814f4 <_Z14readStoredVarsv+0x3d4>)
 80813b8:	2078      	movs	r0, #120	; 0x78
 80813ba:	f006 f96f 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80813be:	f008 fcc1 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813c2:	2204      	movs	r2, #4
 80813c4:	494c      	ldr	r1, [pc, #304]	; (80814f8 <_Z14readStoredVarsv+0x3d8>)
 80813c6:	207c      	movs	r0, #124	; 0x7c
 80813c8:	f006 f968 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80813cc:	f008 fcba 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813d0:	2204      	movs	r2, #4
 80813d2:	494a      	ldr	r1, [pc, #296]	; (80814fc <_Z14readStoredVarsv+0x3dc>)
 80813d4:	2080      	movs	r0, #128	; 0x80
 80813d6:	f006 f961 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80813da:	f008 fcb3 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813de:	2204      	movs	r2, #4
 80813e0:	4947      	ldr	r1, [pc, #284]	; (8081500 <_Z14readStoredVarsv+0x3e0>)
 80813e2:	2084      	movs	r0, #132	; 0x84
 80813e4:	f006 f95a 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80813e8:	f008 fcac 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813ec:	2204      	movs	r2, #4
 80813ee:	4945      	ldr	r1, [pc, #276]	; (8081504 <_Z14readStoredVarsv+0x3e4>)
 80813f0:	2088      	movs	r0, #136	; 0x88
 80813f2:	f006 f953 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80813f6:	f008 fca5 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80813fa:	2204      	movs	r2, #4
 80813fc:	4651      	mov	r1, sl
 80813fe:	208c      	movs	r0, #140	; 0x8c
 8081400:	f006 f94c 	bl	808769c <HAL_EEPROM_Get>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081404:	f008 fc9e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8081408:	2204      	movs	r2, #4
 808140a:	2090      	movs	r0, #144	; 0x90
 808140c:	493e      	ldr	r1, [pc, #248]	; (8081508 <_Z14readStoredVarsv+0x3e8>)
 808140e:	f006 f945 	bl	808769c <HAL_EEPROM_Get>
    if(sensible_iot_en){
 8081412:	f8da 3000 	ldr.w	r3, [sl]
 8081416:	b113      	cbz	r3, 808141e <_Z14readStoredVarsv+0x2fe>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081418:	2000      	movs	r0, #0
 808141a:	f007 faf1 	bl	8088a00 <_ZN9TimeClass4zoneEf>
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 808141e:	f241 3187 	movw	r1, #4999	; 0x1387
 8081422:	4a33      	ldr	r2, [pc, #204]	; (80814f0 <_Z14readStoredVarsv+0x3d0>)
    if(!CO2_slope)
 8081424:	f8d9 0000 	ldr.w	r0, [r9]
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081428:	6813      	ldr	r3, [r2, #0]
 808142a:	3b01      	subs	r3, #1
 808142c:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 808142e:	bf88      	it	hi
 8081430:	2301      	movhi	r3, #1
    if(!CO2_slope)
 8081432:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081436:	bf88      	it	hi
 8081438:	6013      	strhi	r3, [r2, #0]
    if(!CO2_slope)
 808143a:	f009 fcc7 	bl	808adcc <__aeabi_fcmpeq>
 808143e:	b118      	cbz	r0, 8081448 <_Z14readStoredVarsv+0x328>
        CO2_slope = 1;
 8081440:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081444:	f8c9 3000 	str.w	r3, [r9]
    if(!CO_slopeA)
 8081448:	2100      	movs	r1, #0
 808144a:	f8d8 0000 	ldr.w	r0, [r8]
 808144e:	f009 fcbd 	bl	808adcc <__aeabi_fcmpeq>
 8081452:	b118      	cbz	r0, 808145c <_Z14readStoredVarsv+0x33c>
        CO_slopeA = 1;
 8081454:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081458:	f8c8 3000 	str.w	r3, [r8]
    if(!CO_slopeB)
 808145c:	2100      	movs	r1, #0
 808145e:	6838      	ldr	r0, [r7, #0]
 8081460:	f009 fcb4 	bl	808adcc <__aeabi_fcmpeq>
 8081464:	2800      	cmp	r0, #0
 8081466:	d051      	beq.n	808150c <_Z14readStoredVarsv+0x3ec>
        CO_slopeB = 1;
 8081468:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808146c:	603b      	str	r3, [r7, #0]
 808146e:	e04d      	b.n	808150c <_Z14readStoredVarsv+0x3ec>
 8081470:	20000080 	.word	0x20000080
 8081474:	42c80000 	.word	0x42c80000
 8081478:	200002b8 	.word	0x200002b8
 808147c:	200002c8 	.word	0x200002c8
 8081480:	200002cc 	.word	0x200002cc
 8081484:	200002e4 	.word	0x200002e4
 8081488:	200002ec 	.word	0x200002ec
 808148c:	200002dc 	.word	0x200002dc
 8081490:	20000a28 	.word	0x20000a28
 8081494:	200009f8 	.word	0x200009f8
 8081498:	20000570 	.word	0x20000570
 808149c:	20000578 	.word	0x20000578
 80814a0:	200002bc 	.word	0x200002bc
 80814a4:	200002d4 	.word	0x200002d4
 80814a8:	200002d8 	.word	0x200002d8
 80814ac:	200002e8 	.word	0x200002e8
 80814b0:	200002f0 	.word	0x200002f0
 80814b4:	200002e0 	.word	0x200002e0
 80814b8:	20000a2c 	.word	0x20000a2c
 80814bc:	20000574 	.word	0x20000574
 80814c0:	2000057c 	.word	0x2000057c
 80814c4:	200009fc 	.word	0x200009fc
 80814c8:	200003c8 	.word	0x200003c8
 80814cc:	20000530 	.word	0x20000530
 80814d0:	20000a34 	.word	0x20000a34
 80814d4:	20000098 	.word	0x20000098
 80814d8:	2000009c 	.word	0x2000009c
 80814dc:	20000a30 	.word	0x20000a30
 80814e0:	20000528 	.word	0x20000528
 80814e4:	20000524 	.word	0x20000524
 80814e8:	2000052c 	.word	0x2000052c
 80814ec:	20000534 	.word	0x20000534
 80814f0:	20000520 	.word	0x20000520
 80814f4:	20000344 	.word	0x20000344
 80814f8:	20000334 	.word	0x20000334
 80814fc:	2000048c 	.word	0x2000048c
 8081500:	200002d0 	.word	0x200002d0
 8081504:	20000444 	.word	0x20000444
 8081508:	200003c0 	.word	0x200003c0
    if(!PM_1_slope)
 808150c:	2100      	movs	r1, #0
 808150e:	6830      	ldr	r0, [r6, #0]
 8081510:	f009 fc5c 	bl	808adcc <__aeabi_fcmpeq>
 8081514:	b110      	cbz	r0, 808151c <_Z14readStoredVarsv+0x3fc>
        PM_1_slope = 1;
 8081516:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808151a:	6033      	str	r3, [r6, #0]
    if(!PM_25_slope)
 808151c:	2100      	movs	r1, #0
 808151e:	6828      	ldr	r0, [r5, #0]
 8081520:	f009 fc54 	bl	808adcc <__aeabi_fcmpeq>
 8081524:	b110      	cbz	r0, 808152c <_Z14readStoredVarsv+0x40c>
        PM_25_slope = 1;
 8081526:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808152a:	602b      	str	r3, [r5, #0]
    if(!PM_10_slope)
 808152c:	2100      	movs	r1, #0
 808152e:	6820      	ldr	r0, [r4, #0]
 8081530:	f009 fc4c 	bl	808adcc <__aeabi_fcmpeq>
 8081534:	b110      	cbz	r0, 808153c <_Z14readStoredVarsv+0x41c>
        PM_10_slope = 1;
 8081536:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808153a:	6023      	str	r3, [r4, #0]
}
 808153c:	b002      	add	sp, #8
 808153e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081542:	bf00      	nop

08081544 <_Z7readCO2v>:

float readCO2(void){
 8081544:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 8081546:	4b12      	ldr	r3, [pc, #72]	; (8081590 <_Z7readCO2v+0x4c>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	b11b      	cbz	r3, 8081554 <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 808154c:	2101      	movs	r1, #1
 808154e:	4811      	ldr	r0, [pc, #68]	; (8081594 <_Z7readCO2v+0x50>)
 8081550:	f003 fe06 	bl	8085160 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081554:	480f      	ldr	r0, [pc, #60]	; (8081594 <_Z7readCO2v+0x50>)
 8081556:	f003 fdd9 	bl	808510c <_ZN13Telaire_T67137readPPMEv>
 808155a:	f009 fa4f 	bl	808a9fc <__aeabi_i2f>
 808155e:	4c0e      	ldr	r4, [pc, #56]	; (8081598 <_Z7readCO2v+0x54>)

    if(CO2_float == 0){
 8081560:	2100      	movs	r1, #0
    CO2_float = t6713.readPPM();
 8081562:	4605      	mov	r5, r0
 8081564:	6020      	str	r0, [r4, #0]
    if(CO2_float == 0){
 8081566:	f009 fc31 	bl	808adcc <__aeabi_fcmpeq>
 808156a:	4b0c      	ldr	r3, [pc, #48]	; (808159c <_Z7readCO2v+0x58>)
 808156c:	b170      	cbz	r0, 808158c <_Z7readCO2v+0x48>
        CO2_float = CO2_float_previous;
 808156e:	681b      	ldr	r3, [r3, #0]
 8081570:	6023      	str	r3, [r4, #0]
    }else{
        CO2_float_previous = CO2_float;
    }

    CO2_float += CO2_zero;
 8081572:	4b0b      	ldr	r3, [pc, #44]	; (80815a0 <_Z7readCO2v+0x5c>)
 8081574:	6818      	ldr	r0, [r3, #0]
 8081576:	f009 fa41 	bl	808a9fc <__aeabi_i2f>
 808157a:	6821      	ldr	r1, [r4, #0]
 808157c:	f009 f98a 	bl	808a894 <__addsf3>
    CO2_float *= CO2_slope;
 8081580:	4b08      	ldr	r3, [pc, #32]	; (80815a4 <_Z7readCO2v+0x60>)
 8081582:	6819      	ldr	r1, [r3, #0]
 8081584:	f009 fa8e 	bl	808aaa4 <__aeabi_fmul>
 8081588:	6020      	str	r0, [r4, #0]

    
    return CO2_float;
}
 808158a:	bd38      	pop	{r3, r4, r5, pc}
        CO2_float_previous = CO2_float;
 808158c:	601d      	str	r5, [r3, #0]
 808158e:	e7f0      	b.n	8081572 <_Z7readCO2v+0x2e>
 8081590:	200003c8 	.word	0x200003c8
 8081594:	20000a20 	.word	0x20000a20
 8081598:	200002b0 	.word	0x200002b0
 808159c:	200002b4 	.word	0x200002b4
 80815a0:	200002bc 	.word	0x200002bc
 80815a4:	200002b8 	.word	0x200002b8

080815a8 <_Z7echoGpsv>:

}



void echoGps(){
 80815a8:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 80815aa:	f008 f89d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80815ae:	6803      	ldr	r3, [r0, #0]
 80815b0:	691b      	ldr	r3, [r3, #16]
 80815b2:	4798      	blx	r3
 80815b4:	b990      	cbnz	r0, 80815dc <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 80815b6:	f7ff fbbb 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 80815ba:	6803      	ldr	r3, [r0, #0]
 80815bc:	691b      	ldr	r3, [r3, #16]
 80815be:	4798      	blx	r3
 80815c0:	2800      	cmp	r0, #0
 80815c2:	ddf2      	ble.n	80815aa <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 80815c4:	f7ff fbb4 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 80815c8:	6803      	ldr	r3, [r0, #0]
 80815ca:	695b      	ldr	r3, [r3, #20]
 80815cc:	4798      	blx	r3
 80815ce:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 80815d0:	f008 f88a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80815d4:	b2e1      	uxtb	r1, r4
 80815d6:	f007 f82b 	bl	8088630 <_ZN5Print5printEc>
 80815da:	e7e6      	b.n	80815aa <_Z7echoGpsv+0x2>
        }

    }
}
 80815dc:	bd10      	pop	{r4, pc}
	...

080815e0 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 80815e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80815e4:	4606      	mov	r6, r0
 80815e6:	460d      	mov	r5, r1
 80815e8:	2400      	movs	r4, #0
    char temp[3];

    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 80815ea:	4f0f      	ldr	r7, [pc, #60]	; (8081628 <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 80815ec:	f101 38ff 	add.w	r8, r1, #4294967295
    for (byte i = 0; i < len; i++)
 80815f0:	42ac      	cmp	r4, r5
 80815f2:	d012      	beq.n	808161a <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 80815f4:	4639      	mov	r1, r7
 80815f6:	5d32      	ldrb	r2, [r6, r4]
 80815f8:	a801      	add	r0, sp, #4
 80815fa:	f006 fafd 	bl	8087bf8 <sprintf>
        Serial.print(temp);
 80815fe:	f008 f873 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081602:	a901      	add	r1, sp, #4
 8081604:	f007 f810 	bl	8088628 <_ZN5Print5printEPKc>
        if (i != len - 1)
 8081608:	45a0      	cmp	r8, r4
 808160a:	d004      	beq.n	8081616 <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 808160c:	f008 f86c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081610:	2120      	movs	r1, #32
 8081612:	f007 f80d 	bl	8088630 <_ZN5Print5printEc>
    for (byte i = 0; i < len; i++)
 8081616:	3401      	adds	r4, #1
 8081618:	e7ea      	b.n	80815f0 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 808161a:	f008 f865 	bl	80896e8 <_Z16_fetch_usbserialv>
 808161e:	f007 f80a 	bl	8088636 <_ZN5Print7printlnEv>
}
 8081622:	b002      	add	sp, #8
 8081624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081628:	0808d3ca 	.word	0x0808d3ca

0808162c <_Z10sendPacketPhh>:
{
 808162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808162e:	4604      	mov	r4, r0
 8081630:	460d      	mov	r5, r1
 8081632:	4606      	mov	r6, r0
 8081634:	180f      	adds	r7, r1, r0
    for (byte i = 0; i < len; i++)
 8081636:	42be      	cmp	r6, r7
 8081638:	d007      	beq.n	808164a <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 808163a:	f7ff fb79 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 808163e:	6803      	ldr	r3, [r0, #0]
 8081640:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081644:	689b      	ldr	r3, [r3, #8]
 8081646:	4798      	blx	r3
    for (byte i = 0; i < len; i++)
 8081648:	e7f5      	b.n	8081636 <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 808164a:	4629      	mov	r1, r5
 808164c:	4620      	mov	r0, r4
}
 808164e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 8081652:	f7ff bfc5 	b.w	80815e0 <_Z11printPacketPhh>
	...

08081658 <_Z19enableContinuousGPSv>:
{
 8081658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 808165a:	4a08      	ldr	r2, [pc, #32]	; (808167c <_Z19enableContinuousGPSv+0x24>)
 808165c:	ab01      	add	r3, sp, #4
 808165e:	f8d2 000e 	ldr.w	r0, [r2, #14]
 8081662:	f8d2 1012 	ldr.w	r1, [r2, #18]
 8081666:	8ad2      	ldrh	r2, [r2, #22]
 8081668:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 808166a:	210a      	movs	r1, #10
 808166c:	a801      	add	r0, sp, #4
    byte packet[] = {
 808166e:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081670:	f7ff ffdc 	bl	808162c <_Z10sendPacketPhh>
}
 8081674:	b005      	add	sp, #20
 8081676:	f85d fb04 	ldr.w	pc, [sp], #4
 808167a:	bf00      	nop
 808167c:	0808f02c 	.word	0x0808f02c

08081680 <_Z17enableLowPowerGPSv>:
{
 8081680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 8081682:	4a07      	ldr	r2, [pc, #28]	; (80816a0 <_Z17enableLowPowerGPSv+0x20>)
 8081684:	ab01      	add	r3, sp, #4
 8081686:	6990      	ldr	r0, [r2, #24]
 8081688:	69d1      	ldr	r1, [r2, #28]
 808168a:	8c12      	ldrh	r2, [r2, #32]
 808168c:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 808168e:	210a      	movs	r1, #10
 8081690:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081692:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081694:	f7ff ffca 	bl	808162c <_Z10sendPacketPhh>
}
 8081698:	b005      	add	sp, #20
 808169a:	f85d fb04 	ldr.w	pc, [sp], #4
 808169e:	bf00      	nop
 80816a0:	0808f02c 	.word	0x0808f02c
 80816a4:	00000000 	.word	0x00000000

080816a8 <_Z15readTemperaturev>:

float readTemperature(void){
 80816a8:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
        temperature = hih.temperature();
        if(debugging_enabled){
 80816aa:	4b2f      	ldr	r3, [pc, #188]	; (8081768 <_Z15readTemperaturev+0xc0>)
 80816ac:	681d      	ldr	r5, [r3, #0]
    if(hih8120_enabled){
 80816ae:	4b2f      	ldr	r3, [pc, #188]	; (808176c <_Z15readTemperaturev+0xc4>)
 80816b0:	681b      	ldr	r3, [r3, #0]
 80816b2:	b30b      	cbz	r3, 80816f8 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80816b4:	4b2e      	ldr	r3, [pc, #184]	; (8081770 <_Z15readTemperaturev+0xc8>)
 80816b6:	8958      	ldrh	r0, [r3, #10]
 80816b8:	f009 f99c 	bl	808a9f4 <__aeabi_ui2f>
 80816bc:	492d      	ldr	r1, [pc, #180]	; (8081774 <_Z15readTemperaturev+0xcc>)
 80816be:	f009 faa5 	bl	808ac0c <__aeabi_fdiv>
 80816c2:	492d      	ldr	r1, [pc, #180]	; (8081778 <_Z15readTemperaturev+0xd0>)
 80816c4:	f009 f9ee 	bl	808aaa4 <__aeabi_fmul>
 80816c8:	492c      	ldr	r1, [pc, #176]	; (808177c <_Z15readTemperaturev+0xd4>)
 80816ca:	f009 f8e1 	bl	808a890 <__aeabi_fsub>
 80816ce:	4604      	mov	r4, r0
        if(debugging_enabled){
 80816d0:	b125      	cbz	r5, 80816dc <_Z15readTemperaturev+0x34>
            Serial.println("Temperature reading from HIH8120");
 80816d2:	f008 f809 	bl	80896e8 <_Z16_fetch_usbserialv>
 80816d6:	492a      	ldr	r1, [pc, #168]	; (8081780 <_Z15readTemperaturev+0xd8>)
 80816d8:	f006 ffb9 	bl	808864e <_ZN5Print7printlnEPKc>
          }
        temperature = bme.temperature;
    }
    //temperature *= 100;

    temperature *= temp_slope;
 80816dc:	4b29      	ldr	r3, [pc, #164]	; (8081784 <_Z15readTemperaturev+0xdc>)
 80816de:	4620      	mov	r0, r4
 80816e0:	6819      	ldr	r1, [r3, #0]
 80816e2:	f009 f9df 	bl	808aaa4 <__aeabi_fmul>
 80816e6:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 80816e8:	4b27      	ldr	r3, [pc, #156]	; (8081788 <_Z15readTemperaturev+0xe0>)
 80816ea:	6818      	ldr	r0, [r3, #0]
 80816ec:	f009 f986 	bl	808a9fc <__aeabi_i2f>
 80816f0:	4621      	mov	r1, r4
 80816f2:	f009 f8cf 	bl	808a894 <__addsf3>

    return temperature;
    //temperature = temperature +
}
 80816f6:	bd38      	pop	{r3, r4, r5, pc}
    }else if(new_temperature_sensor_enabled){
 80816f8:	4b24      	ldr	r3, [pc, #144]	; (808178c <_Z15readTemperaturev+0xe4>)
 80816fa:	681b      	ldr	r3, [r3, #0]
 80816fc:	b313      	cbz	r3, 8081744 <_Z15readTemperaturev+0x9c>
        if(debugging_enabled){
 80816fe:	b125      	cbz	r5, 808170a <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 8081700:	f007 fff2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081704:	4922      	ldr	r1, [pc, #136]	; (8081790 <_Z15readTemperaturev+0xe8>)
 8081706:	f006 ffa2 	bl	808864e <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 808170a:	200b      	movs	r0, #11
 808170c:	f008 fab1 	bl	8089c72 <analogRead>
 8081710:	f009 f974 	bl	808a9fc <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 8081714:	f008 fd18 	bl	808a148 <__aeabi_f2d>
 8081718:	a30f      	add	r3, pc, #60	; (adr r3, 8081758 <_Z15readTemperaturev+0xb0>)
 808171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808171e:	f008 fd6b 	bl	808a1f8 <__aeabi_dmul>
 8081722:	f009 f861 	bl	808a7e8 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 8081726:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808172a:	f009 f8b1 	bl	808a890 <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 808172e:	f008 fd0b 	bl	808a148 <__aeabi_f2d>
 8081732:	a30b      	add	r3, pc, #44	; (adr r3, 8081760 <_Z15readTemperaturev+0xb8>)
 8081734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081738:	f008 fe88 	bl	808a44c <__aeabi_ddiv>
 808173c:	f009 f854 	bl	808a7e8 <__aeabi_d2f>
 8081740:	4604      	mov	r4, r0
 8081742:	e7cb      	b.n	80816dc <_Z15readTemperaturev+0x34>
        if(debugging_enabled){
 8081744:	b125      	cbz	r5, 8081750 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 8081746:	f007 ffcf 	bl	80896e8 <_Z16_fetch_usbserialv>
 808174a:	4912      	ldr	r1, [pc, #72]	; (8081794 <_Z15readTemperaturev+0xec>)
 808174c:	f006 ff7f 	bl	808864e <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 8081750:	4b11      	ldr	r3, [pc, #68]	; (8081798 <_Z15readTemperaturev+0xf0>)
 8081752:	681c      	ldr	r4, [r3, #0]
 8081754:	e7c2      	b.n	80816dc <_Z15readTemperaturev+0x34>
 8081756:	bf00      	nop
 8081758:	eb1c432d 	.word	0xeb1c432d
 808175c:	3f4a36e2 	.word	0x3f4a36e2
 8081760:	47ae147b 	.word	0x47ae147b
 8081764:	3f847ae1 	.word	0x3f847ae1
 8081768:	200003c8 	.word	0x200003c8
 808176c:	2000048c 	.word	0x2000048c
 8081770:	20000480 	.word	0x20000480
 8081774:	467ff800 	.word	0x467ff800
 8081778:	43250000 	.word	0x43250000
 808177c:	42200000 	.word	0x42200000
 8081780:	0808d3cf 	.word	0x0808d3cf
 8081784:	20000a28 	.word	0x20000a28
 8081788:	20000a2c 	.word	0x20000a2c
 808178c:	20000524 	.word	0x20000524
 8081790:	0808d3f0 	.word	0x0808d3f0
 8081794:	0808d40f 	.word	0x0808d40f
 8081798:	20000348 	.word	0x20000348
 808179c:	00000000 	.word	0x00000000

080817a0 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 80817a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
    if(debugging_enabled){
 80817a4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80819e8 <_Z10readAlpha2v+0x248>
float readAlpha2(void){
 80817a8:	b089      	sub	sp, #36	; 0x24
    String alpha2_ppmRounded;
 80817aa:	4668      	mov	r0, sp
 80817ac:	498f      	ldr	r1, [pc, #572]	; (80819ec <_Z10readAlpha2v+0x24c>)
 80817ae:	f006 fdb3 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 80817b2:	f8d9 3000 	ldr.w	r3, [r9]
 80817b6:	b123      	cbz	r3, 80817c2 <_Z10readAlpha2v+0x22>
        Serial.println("Start of alpha 2 read");
 80817b8:	f007 ff96 	bl	80896e8 <_Z16_fetch_usbserialv>
 80817bc:	498c      	ldr	r1, [pc, #560]	; (80819f0 <_Z10readAlpha2v+0x250>)
 80817be:	f006 ff46 	bl	808864e <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 80817c2:	4f8c      	ldr	r7, [pc, #560]	; (80819f4 <_Z10readAlpha2v+0x254>)
 80817c4:	2100      	movs	r1, #0
 80817c6:	8838      	ldrh	r0, [r7, #0]
 80817c8:	f008 fa27 	bl	8089c1a <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 80817cc:	f008 fb04 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80817d0:	2201      	movs	r2, #1
 80817d2:	214a      	movs	r1, #74	; 0x4a
 80817d4:	f008 f91d 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 80817d8:	bb40      	cbnz	r0, 808182c <_Z10readAlpha2v+0x8c>
        Serial.println("Couldn't communicate with LMP91000 2");
 80817da:	f007 ff85 	bl	80896e8 <_Z16_fetch_usbserialv>
 80817de:	4986      	ldr	r1, [pc, #536]	; (80819f8 <_Z10readAlpha2v+0x258>)
 80817e0:	f006 ff35 	bl	808864e <_ZN5Print7printlnEPKc>
          Serial.println(volt_half_Vref/1000);

        }
    }

    if(lmp91000_2.read(LMP91000_STATUS_REG) == 0){
 80817e4:	2100      	movs	r1, #0
 80817e6:	4885      	ldr	r0, [pc, #532]	; (80819fc <_Z10readAlpha2v+0x25c>)
 80817e8:	f003 f9ef 	bl	8084bca <_ZN8LMP910004readEh>
 80817ec:	b938      	cbnz	r0, 80817fe <_Z10readAlpha2v+0x5e>
        if(debugging_enabled)
 80817ee:	f8d9 3000 	ldr.w	r3, [r9]
 80817f2:	b123      	cbz	r3, 80817fe <_Z10readAlpha2v+0x5e>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 80817f4:	f007 ff78 	bl	80896e8 <_Z16_fetch_usbserialv>
 80817f8:	4981      	ldr	r1, [pc, #516]	; (8081a00 <_Z10readAlpha2v+0x260>)
 80817fa:	f006 ff28 	bl	808864e <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 80817fe:	f008 faeb 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8081802:	2201      	movs	r2, #1
 8081804:	214a      	movs	r1, #74	; 0x4a
 8081806:	f008 f904 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 808180a:	2800      	cmp	r0, #0
 808180c:	d138      	bne.n	8081880 <_Z10readAlpha2v+0xe0>
        alpha2_ppmRounded = "-99";
 808180e:	4668      	mov	r0, sp
 8081810:	497c      	ldr	r1, [pc, #496]	; (8081a04 <_Z10readAlpha2v+0x264>)
 8081812:	f006 fdd3 	bl	80883bc <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081816:	2101      	movs	r1, #1
 8081818:	8838      	ldrh	r0, [r7, #0]
 808181a:	f008 f9fe 	bl	8089c1a <digitalWrite>
    String alpha2_ppmRounded;
 808181e:	4668      	mov	r0, sp
 8081820:	f006 fd30 	bl	8088284 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081824:	4628      	mov	r0, r5
 8081826:	b009      	add	sp, #36	; 0x24
 8081828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 808182c:	2103      	movs	r1, #3
 808182e:	4876      	ldr	r0, [pc, #472]	; (8081a08 <_Z10readAlpha2v+0x268>)
 8081830:	f003 fb12 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081834:	f009 f8e2 	bl	808a9fc <__aeabi_i2f>
 8081838:	4b74      	ldr	r3, [pc, #464]	; (8081a0c <_Z10readAlpha2v+0x26c>)
 808183a:	6819      	ldr	r1, [r3, #0]
 808183c:	f009 f932 	bl	808aaa4 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081840:	4973      	ldr	r1, [pc, #460]	; (8081a10 <_Z10readAlpha2v+0x270>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081842:	4604      	mov	r4, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081844:	f009 f9e2 	bl	808ac0c <__aeabi_fdiv>
 8081848:	4680      	mov	r8, r0
 808184a:	f008 fc7d 	bl	808a148 <__aeabi_f2d>
 808184e:	2200      	movs	r2, #0
 8081850:	4b70      	ldr	r3, [pc, #448]	; (8081a14 <_Z10readAlpha2v+0x274>)
 8081852:	f008 fb19 	bl	8089e88 <__aeabi_dsub>
 8081856:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 808185a:	2200      	movs	r2, #0
 808185c:	4659      	mov	r1, fp
 808185e:	4b6e      	ldr	r3, [pc, #440]	; (8081a18 <_Z10readAlpha2v+0x278>)
 8081860:	f008 ff5a 	bl	808a718 <__aeabi_dcmpgt>
 8081864:	2800      	cmp	r0, #0
 8081866:	d0bd      	beq.n	80817e4 <_Z10readAlpha2v+0x44>
          Serial.print("half vref2 ads1");
 8081868:	f007 ff3e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808186c:	496b      	ldr	r1, [pc, #428]	; (8081a1c <_Z10readAlpha2v+0x27c>)
 808186e:	f006 fedb 	bl	8088628 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081872:	f007 ff39 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081876:	2202      	movs	r2, #2
 8081878:	4641      	mov	r1, r8
 808187a:	f006 ffe9 	bl	8088850 <_ZN5Print7printlnEfi>
 808187e:	e7b1      	b.n	80817e4 <_Z10readAlpha2v+0x44>
    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081880:	2100      	movs	r1, #0
 8081882:	485e      	ldr	r0, [pc, #376]	; (80819fc <_Z10readAlpha2v+0x25c>)
 8081884:	f003 f9a1 	bl	8084bca <_ZN8LMP910004readEh>
 8081888:	2800      	cmp	r0, #0
 808188a:	d0c0      	beq.n	808180e <_Z10readAlpha2v+0x6e>
 808188c:	4620      	mov	r0, r4
 808188e:	4960      	ldr	r1, [pc, #384]	; (8081a10 <_Z10readAlpha2v+0x270>)
 8081890:	f009 f9bc 	bl	808ac0c <__aeabi_fdiv>
 8081894:	f008 fc58 	bl	808a148 <__aeabi_f2d>
 8081898:	2200      	movs	r2, #0
 808189a:	4b5e      	ldr	r3, [pc, #376]	; (8081a14 <_Z10readAlpha2v+0x274>)
 808189c:	f008 faf4 	bl	8089e88 <__aeabi_dsub>
 80818a0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 80818a4:	2200      	movs	r2, #0
 80818a6:	4649      	mov	r1, r9
 80818a8:	4b5b      	ldr	r3, [pc, #364]	; (8081a18 <_Z10readAlpha2v+0x278>)
 80818aa:	f008 ff35 	bl	808a718 <__aeabi_dcmpgt>
 80818ae:	4604      	mov	r4, r0
 80818b0:	2800      	cmp	r0, #0
 80818b2:	d1ac      	bne.n	808180e <_Z10readAlpha2v+0x6e>
 80818b4:	f04f 080a 	mov.w	r8, #10
 80818b8:	4681      	mov	r9, r0
 80818ba:	4682      	mov	sl, r0
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 80818bc:	4d52      	ldr	r5, [pc, #328]	; (8081a08 <_Z10readAlpha2v+0x268>)
 80818be:	2100      	movs	r1, #0
 80818c0:	4628      	mov	r0, r5
 80818c2:	f003 fac9 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80818c6:	2101      	movs	r1, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 80818c8:	4482      	add	sl, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80818ca:	4628      	mov	r0, r5
 80818cc:	f003 fac4 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80818d0:	2102      	movs	r1, #2
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80818d2:	4481      	add	r9, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80818d4:	4628      	mov	r0, r5
 80818d6:	f003 fabf 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80818da:	2103      	movs	r1, #3
 80818dc:	4628      	mov	r0, r5
 80818de:	f003 fabb 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80818e2:	f1b8 0801 	subs.w	r8, r8, #1
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80818e6:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80818e8:	d1e9      	bne.n	80818be <_Z10readAlpha2v+0x11e>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 80818ea:	f04f 0b0a 	mov.w	fp, #10
        volt0_gas = A0_gas * ads_bitmv;
 80818ee:	4b47      	ldr	r3, [pc, #284]	; (8081a0c <_Z10readAlpha2v+0x26c>)
        volt_half_Vref = half_Vref * ads_bitmv;
 80818f0:	fbb4 f0fb 	udiv	r0, r4, fp
        volt0_gas = A0_gas * ads_bitmv;
 80818f4:	f8d3 8000 	ldr.w	r8, [r3]
        volt_half_Vref = half_Vref * ads_bitmv;
 80818f8:	f009 f880 	bl	808a9fc <__aeabi_i2f>
 80818fc:	4641      	mov	r1, r8
 80818fe:	f009 f8d1 	bl	808aaa4 <__aeabi_fmul>
 8081902:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081904:	fbba f0fb 	udiv	r0, sl, fp
 8081908:	f009 f878 	bl	808a9fc <__aeabi_i2f>
 808190c:	4641      	mov	r1, r8
 808190e:	f009 f8c9 	bl	808aaa4 <__aeabi_fmul>
 8081912:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081914:	4620      	mov	r0, r4
 8081916:	f008 ffbb 	bl	808a890 <__aeabi_fsub>
 808191a:	4941      	ldr	r1, [pc, #260]	; (8081a20 <_Z10readAlpha2v+0x280>)
 808191c:	f009 f976 	bl	808ac0c <__aeabi_fdiv>
 8081920:	4605      	mov	r5, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081922:	fbb9 f0fb 	udiv	r0, r9, fp
 8081926:	f009 f869 	bl	808a9fc <__aeabi_i2f>
 808192a:	4641      	mov	r1, r8
 808192c:	f009 f8ba 	bl	808aaa4 <__aeabi_fmul>
 8081930:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081932:	4620      	mov	r0, r4
 8081934:	f008 ffac 	bl	808a890 <__aeabi_fsub>
 8081938:	493a      	ldr	r1, [pc, #232]	; (8081a24 <_Z10readAlpha2v+0x284>)
 808193a:	f009 f967 	bl	808ac0c <__aeabi_fdiv>
 808193e:	4604      	mov	r4, r0
        if(readTemperature() <= 15){
 8081940:	f7ff feb2 	bl	80816a8 <_Z15readTemperaturev>
 8081944:	4938      	ldr	r1, [pc, #224]	; (8081a28 <_Z10readAlpha2v+0x288>)
 8081946:	f009 fa55 	bl	808adf4 <__aeabi_fcmple>
 808194a:	b1e0      	cbz	r0, 8081986 <_Z10readAlpha2v+0x1e6>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 808194c:	4621      	mov	r1, r4
 808194e:	4628      	mov	r0, r5
 8081950:	f008 ff9e 	bl	808a890 <__aeabi_fsub>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081954:	4606      	mov	r6, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081956:	4630      	mov	r0, r6
 8081958:	f008 fbf6 	bl	808a148 <__aeabi_f2d>
 808195c:	a31e      	add	r3, pc, #120	; (adr r3, 80819d8 <_Z10readAlpha2v+0x238>)
 808195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081962:	f008 fd73 	bl	808a44c <__aeabi_ddiv>
 8081966:	f008 ff3f 	bl	808a7e8 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808196a:	2202      	movs	r2, #2
 808196c:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808196e:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081970:	a804      	add	r0, sp, #16
 8081972:	f006 fd47 	bl	8088404 <_ZN6StringC1Efi>
 8081976:	4668      	mov	r0, sp
 8081978:	a904      	add	r1, sp, #16
 808197a:	f006 fd17 	bl	80883ac <_ZN6StringaSEOS_>
 808197e:	a804      	add	r0, sp, #16
 8081980:	f006 fc80 	bl	8088284 <_ZN6StringD1Ev>
 8081984:	e747      	b.n	8081816 <_Z10readAlpha2v+0x76>
        else if(readTemperature() <= 25){
 8081986:	f7ff fe8f 	bl	80816a8 <_Z15readTemperaturev>
 808198a:	4928      	ldr	r1, [pc, #160]	; (8081a2c <_Z10readAlpha2v+0x28c>)
 808198c:	f009 fa32 	bl	808adf4 <__aeabi_fcmple>
 8081990:	b120      	cbz	r0, 808199c <_Z10readAlpha2v+0x1fc>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081992:	4621      	mov	r1, r4
 8081994:	4628      	mov	r0, r5
 8081996:	f008 ff7d 	bl	808a894 <__addsf3>
 808199a:	e7db      	b.n	8081954 <_Z10readAlpha2v+0x1b4>
        else if(readTemperature() > 25){
 808199c:	f7ff fe84 	bl	80816a8 <_Z15readTemperaturev>
 80819a0:	4922      	ldr	r1, [pc, #136]	; (8081a2c <_Z10readAlpha2v+0x28c>)
 80819a2:	f009 fa3b 	bl	808ae1c <__aeabi_fcmpgt>
 80819a6:	2800      	cmp	r0, #0
 80819a8:	d0d5      	beq.n	8081956 <_Z10readAlpha2v+0x1b6>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 80819aa:	4620      	mov	r0, r4
 80819ac:	f008 fbcc 	bl	808a148 <__aeabi_f2d>
 80819b0:	a30b      	add	r3, pc, #44	; (adr r3, 80819e0 <_Z10readAlpha2v+0x240>)
 80819b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80819b6:	f008 fc1f 	bl	808a1f8 <__aeabi_dmul>
 80819ba:	4680      	mov	r8, r0
 80819bc:	4628      	mov	r0, r5
 80819be:	4689      	mov	r9, r1
 80819c0:	f008 fbc2 	bl	808a148 <__aeabi_f2d>
 80819c4:	4602      	mov	r2, r0
 80819c6:	460b      	mov	r3, r1
 80819c8:	4640      	mov	r0, r8
 80819ca:	4649      	mov	r1, r9
 80819cc:	f008 fa5e 	bl	8089e8c <__adddf3>
 80819d0:	f008 ff0a 	bl	808a7e8 <__aeabi_d2f>
 80819d4:	e7be      	b.n	8081954 <_Z10readAlpha2v+0x1b4>
 80819d6:	bf00      	nop
 80819d8:	d4fdf3b6 	.word	0xd4fdf3b6
 80819dc:	3fd6e978 	.word	0x3fd6e978
 80819e0:	851eb852 	.word	0x851eb852
 80819e4:	3fe851eb 	.word	0x3fe851eb
 80819e8:	200003c8 	.word	0x200003c8
 80819ec:	0808f1d9 	.word	0x0808f1d9
 80819f0:	0808d43b 	.word	0x0808d43b
 80819f4:	200000c4 	.word	0x200000c4
 80819f8:	0808d451 	.word	0x0808d451
 80819fc:	20000492 	.word	0x20000492
 8081a00:	0808d486 	.word	0x0808d486
 8081a04:	0808d4ad 	.word	0x0808d4ad
 8081a08:	2000033e 	.word	0x2000033e
 8081a0c:	20000084 	.word	0x20000084
 8081a10:	447a0000 	.word	0x447a0000
 8081a14:	3ff40000 	.word	0x3ff40000
 8081a18:	3fe00000 	.word	0x3fe00000
 8081a1c:	0808d476 	.word	0x0808d476
 8081a20:	c2f00000 	.word	0xc2f00000
 8081a24:	c3160000 	.word	0xc3160000
 8081a28:	41700000 	.word	0x41700000
 8081a2c:	41c80000 	.word	0x41c80000

08081a30 <_Z8readCO_Bv>:
float readCO_B(void){
 8081a30:	b510      	push	{r4, lr}
    CO_float = readAlpha2();
 8081a32:	f7ff feb5 	bl	80817a0 <_Z10readAlpha2v>
    CO_float *= CO_slopeB;
 8081a36:	4b08      	ldr	r3, [pc, #32]	; (8081a58 <_Z8readCO_Bv+0x28>)
 8081a38:	6819      	ldr	r1, [r3, #0]
 8081a3a:	f009 f833 	bl	808aaa4 <__aeabi_fmul>
 8081a3e:	4604      	mov	r4, r0
    float_offset = CO_zeroB;
 8081a40:	4b06      	ldr	r3, [pc, #24]	; (8081a5c <_Z8readCO_Bv+0x2c>)
 8081a42:	6818      	ldr	r0, [r3, #0]
 8081a44:	f008 ffda 	bl	808a9fc <__aeabi_i2f>
    float_offset /= 1000;
 8081a48:	4905      	ldr	r1, [pc, #20]	; (8081a60 <_Z8readCO_Bv+0x30>)
 8081a4a:	f009 f8df 	bl	808ac0c <__aeabi_fdiv>
    CO_float += float_offset;
 8081a4e:	4621      	mov	r1, r4
 8081a50:	f008 ff20 	bl	808a894 <__addsf3>
}
 8081a54:	bd10      	pop	{r4, pc}
 8081a56:	bf00      	nop
 8081a58:	200002cc 	.word	0x200002cc
 8081a5c:	200002d8 	.word	0x200002d8
 8081a60:	447a0000 	.word	0x447a0000

08081a64 <_Z12writeLogFile6String>:



void writeLogFile(String data){
 8081a64:	b530      	push	{r4, r5, lr}
  if (sd.begin(CS)){
 8081a66:	2202      	movs	r2, #2
void writeLogFile(String data){
 8081a68:	4604      	mov	r4, r0
 8081a6a:	b085      	sub	sp, #20
  if (sd.begin(CS)){
 8081a6c:	210c      	movs	r1, #12
 8081a6e:	481d      	ldr	r0, [pc, #116]	; (8081ae4 <_Z12writeLogFile6String+0x80>)
 8081a70:	f7ff f996 	bl	8080da0 <_ZN5SdFat5beginEhh>
 8081a74:	b368      	cbz	r0, 8081ad2 <_Z12writeLogFile6String+0x6e>
      Serial.println("Writing data to log file.");
 8081a76:	f007 fe37 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081a7a:	491b      	ldr	r1, [pc, #108]	; (8081ae8 <_Z12writeLogFile6String+0x84>)
 8081a7c:	f006 fde7 	bl	808864e <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081a80:	4a1a      	ldr	r2, [pc, #104]	; (8081aec <_Z12writeLogFile6String+0x88>)
 8081a82:	491b      	ldr	r1, [pc, #108]	; (8081af0 <_Z12writeLogFile6String+0x8c>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081a84:	4d1b      	ldr	r5, [pc, #108]	; (8081af4 <_Z12writeLogFile6String+0x90>)
 8081a86:	2346      	movs	r3, #70	; 0x46
 8081a88:	6812      	ldr	r2, [r2, #0]
 8081a8a:	6809      	ldr	r1, [r1, #0]
 8081a8c:	481a      	ldr	r0, [pc, #104]	; (8081af8 <_Z12writeLogFile6String+0x94>)
 8081a8e:	f004 fd5c 	bl	808654a <_ZN7FatFile4openEPS_PKch>
 8081a92:	682b      	ldr	r3, [r5, #0]
 8081a94:	b99b      	cbnz	r3, 8081abe <_Z12writeLogFile6String+0x5a>
          log_file.println("File Start timestamp: ");
 8081a96:	4919      	ldr	r1, [pc, #100]	; (8081afc <_Z12writeLogFile6String+0x98>)
 8081a98:	4819      	ldr	r0, [pc, #100]	; (8081b00 <_Z12writeLogFile6String+0x9c>)
 8081a9a:	f006 fdd8 	bl	808864e <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081a9e:	f007 f8e6 	bl	8088c6e <_ZN9TimeClass3nowEv>
 8081aa2:	17c3      	asrs	r3, r0, #31
 8081aa4:	4602      	mov	r2, r0
 8081aa6:	4668      	mov	r0, sp
 8081aa8:	f006 ffdc 	bl	8088a64 <_ZN9TimeClass7timeStrEx>
          log_file.println(Time.timeStr());
 8081aac:	9900      	ldr	r1, [sp, #0]
 8081aae:	4814      	ldr	r0, [pc, #80]	; (8081b00 <_Z12writeLogFile6String+0x9c>)
 8081ab0:	f006 fdcd 	bl	808864e <_ZN5Print7printlnEPKc>
 8081ab4:	4668      	mov	r0, sp
 8081ab6:	f006 fbe5 	bl	8088284 <_ZN6StringD1Ev>
          log_file_started = 1;
 8081aba:	2301      	movs	r3, #1
 8081abc:	602b      	str	r3, [r5, #0]
      }
      log_file.println(data);
 8081abe:	6821      	ldr	r1, [r4, #0]
 8081ac0:	480f      	ldr	r0, [pc, #60]	; (8081b00 <_Z12writeLogFile6String+0x9c>)
 8081ac2:	f006 fdc4 	bl	808864e <_ZN5Print7printlnEPKc>

      log_file.close();
 8081ac6:	480c      	ldr	r0, [pc, #48]	; (8081af8 <_Z12writeLogFile6String+0x94>)
  }else{
    Serial.println("Unable to write to log file");
  }
}
 8081ac8:	b005      	add	sp, #20
 8081aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      log_file.close();
 8081ace:	f004 bd35 	b.w	808653c <_ZN7FatFile5closeEv>
    Serial.println("Unable to write to log file");
 8081ad2:	f007 fe09 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081ad6:	490b      	ldr	r1, [pc, #44]	; (8081b04 <_Z12writeLogFile6String+0xa0>)
}
 8081ad8:	b005      	add	sp, #20
 8081ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.println("Unable to write to log file");
 8081ade:	f006 bdb6 	b.w	808864e <_ZN5Print7printlnEPKc>
 8081ae2:	bf00      	nop
 8081ae4:	20000580 	.word	0x20000580
 8081ae8:	0808d4b1 	.word	0x0808d4b1
 8081aec:	200004d8 	.word	0x200004d8
 8081af0:	20000a80 	.word	0x20000a80
 8081af4:	20000514 	.word	0x20000514
 8081af8:	200004f0 	.word	0x200004f0
 8081afc:	0808d4cb 	.word	0x0808d4cb
 8081b00:	200004e8 	.word	0x200004e8
 8081b04:	0808d4e2 	.word	0x0808d4e2

08081b08 <_Z13readGpsStreamv>:
void readGpsStream(void){
 8081b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081b0c:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081b0e:	4668      	mov	r0, sp
 8081b10:	4996      	ldr	r1, [pc, #600]	; (8081d6c <_Z13readGpsStreamv+0x264>)
 8081b12:	f006 fc01 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
        if(prefix_string.equals("GGA")){
 8081b16:	4f96      	ldr	r7, [pc, #600]	; (8081d70 <_Z13readGpsStreamv+0x268>)
        }else if(gps_sentence.equals("init")){
 8081b18:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8081d6c <_Z13readGpsStreamv+0x264>
            Serial.println("Error reading GPS");
 8081b1c:	4e95      	ldr	r6, [pc, #596]	; (8081d74 <_Z13readGpsStreamv+0x26c>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081b1e:	f7ff f907 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 8081b22:	220d      	movs	r2, #13
 8081b24:	4601      	mov	r1, r0
 8081b26:	a808      	add	r0, sp, #32
 8081b28:	f006 fefc 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 8081b2c:	a908      	add	r1, sp, #32
 8081b2e:	4668      	mov	r0, sp
 8081b30:	f006 fc3c 	bl	80883ac <_ZN6StringaSEOS_>
 8081b34:	a808      	add	r0, sp, #32
 8081b36:	f006 fba5 	bl	8088284 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081b3a:	2307      	movs	r3, #7
 8081b3c:	2204      	movs	r2, #4
 8081b3e:	4669      	mov	r1, sp
 8081b40:	a804      	add	r0, sp, #16
 8081b42:	f006 fd01 	bl	8088548 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081b46:	4639      	mov	r1, r7
 8081b48:	a804      	add	r0, sp, #16
 8081b4a:	f006 fcdf 	bl	808850c <_ZNK6String6equalsEPKc>
 8081b4e:	4605      	mov	r5, r0
 8081b50:	2800      	cmp	r0, #0
 8081b52:	d153      	bne.n	8081bfc <_Z13readGpsStreamv+0xf4>
        }else if(gps_sentence.equals("init")){
 8081b54:	4641      	mov	r1, r8
 8081b56:	4668      	mov	r0, sp
 8081b58:	f006 fcd8 	bl	808850c <_ZNK6String6equalsEPKc>
 8081b5c:	4604      	mov	r4, r0
 8081b5e:	2800      	cmp	r0, #0
 8081b60:	d04f      	beq.n	8081c02 <_Z13readGpsStreamv+0xfa>
            Serial.println("Error reading GPS");
 8081b62:	f007 fdc1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081b66:	4631      	mov	r1, r6
 8081b68:	f006 fd71 	bl	808864e <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081b6c:	4631      	mov	r1, r6
 8081b6e:	a808      	add	r0, sp, #32
 8081b70:	f006 fbd2 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8081b74:	a808      	add	r0, sp, #32
 8081b76:	f7ff ff75 	bl	8081a64 <_Z12writeLogFile6String>
 8081b7a:	a808      	add	r0, sp, #32
 8081b7c:	f006 fb82 	bl	8088284 <_ZN6StringD1Ev>
            error = 1;
 8081b80:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4,7);
 8081b82:	a804      	add	r0, sp, #16
 8081b84:	f006 fb7e 	bl	8088284 <_ZN6StringD1Ev>
    while(!stringFound && !error){
 8081b88:	b385      	cbz	r5, 8081bec <_Z13readGpsStreamv+0xe4>
 8081b8a:	2400      	movs	r4, #0
 8081b8c:	4627      	mov	r7, r4
                        gps.set_horizontalDillution(hdString);
 8081b8e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8081d78 <_Z13readGpsStreamv+0x270>
                        status_word.status_int &= 0xFFF3;
 8081b92:	4e7a      	ldr	r6, [pc, #488]	; (8081d7c <_Z13readGpsStreamv+0x274>)
        for(int a = 0; a<gps_sentence.length(); a++){
 8081b94:	9b02      	ldr	r3, [sp, #8]
 8081b96:	42a3      	cmp	r3, r4
 8081b98:	d92a      	bls.n	8081bf0 <_Z13readGpsStreamv+0xe8>
            if(gps_sentence.charAt(a) == ','){
 8081b9a:	4621      	mov	r1, r4
 8081b9c:	4668      	mov	r0, sp
 8081b9e:	f006 fcd0 	bl	8088542 <_ZNK6String6charAtEj>
 8081ba2:	282c      	cmp	r0, #44	; 0x2c
                    if(gps_sentence.charAt(a+1)!=','){
 8081ba4:	f104 0501 	add.w	r5, r4, #1
            if(gps_sentence.charAt(a) == ','){
 8081ba8:	d11e      	bne.n	8081be8 <_Z13readGpsStreamv+0xe0>
                if(comma_counter == TIME_FIELD_INDEX){
 8081baa:	bb67      	cbnz	r7, 8081c06 <_Z13readGpsStreamv+0xfe>
                    if(gps_sentence.charAt(a+1)!=','){
 8081bac:	4629      	mov	r1, r5
 8081bae:	4668      	mov	r0, sp
 8081bb0:	f006 fcc7 	bl	8088542 <_ZNK6String6charAtEj>
 8081bb4:	282c      	cmp	r0, #44	; 0x2c
 8081bb6:	d016      	beq.n	8081be6 <_Z13readGpsStreamv+0xde>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081bb8:	f104 030b 	add.w	r3, r4, #11
 8081bbc:	462a      	mov	r2, r5
 8081bbe:	4669      	mov	r1, sp
 8081bc0:	a808      	add	r0, sp, #32
 8081bc2:	f006 fcc1 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081bc6:	4b6e      	ldr	r3, [pc, #440]	; (8081d80 <_Z13readGpsStreamv+0x278>)
 8081bc8:	681b      	ldr	r3, [r3, #0]
 8081bca:	b14b      	cbz	r3, 8081be0 <_Z13readGpsStreamv+0xd8>
                            Serial.print("GPS utc string: ");
 8081bcc:	f007 fd8c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081bd0:	496c      	ldr	r1, [pc, #432]	; (8081d84 <_Z13readGpsStreamv+0x27c>)
 8081bd2:	f006 fd29 	bl	8088628 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081bd6:	f007 fd87 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081bda:	9908      	ldr	r1, [sp, #32]
 8081bdc:	f006 fd37 	bl	808864e <_ZN5Print7printlnEPKc>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081be0:	a808      	add	r0, sp, #32
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081be2:	f006 fb4f 	bl	8088284 <_ZN6StringD1Ev>
                comma_counter++;
 8081be6:	3701      	adds	r7, #1
        for(int a = 0; a<gps_sentence.length(); a++){
 8081be8:	462c      	mov	r4, r5
 8081bea:	e7d3      	b.n	8081b94 <_Z13readGpsStreamv+0x8c>
    while(!stringFound && !error){
 8081bec:	2c00      	cmp	r4, #0
 8081bee:	d096      	beq.n	8081b1e <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 8081bf0:	4668      	mov	r0, sp
 8081bf2:	f006 fb47 	bl	8088284 <_ZN6StringD1Ev>
}
 8081bf6:	b00c      	add	sp, #48	; 0x30
 8081bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081bfc:	2400      	movs	r4, #0
            stringFound = 1;
 8081bfe:	2501      	movs	r5, #1
 8081c00:	e7bf      	b.n	8081b82 <_Z13readGpsStreamv+0x7a>
 8081c02:	4605      	mov	r5, r0
 8081c04:	e7bd      	b.n	8081b82 <_Z13readGpsStreamv+0x7a>
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081c06:	2f01      	cmp	r7, #1
 8081c08:	d12f      	bne.n	8081c6a <_Z13readGpsStreamv+0x162>
                    if(gps_sentence.charAt(a+1)!=','){
 8081c0a:	4629      	mov	r1, r5
 8081c0c:	4668      	mov	r0, sp
 8081c0e:	f006 fc98 	bl	8088542 <_ZNK6String6charAtEj>
 8081c12:	282c      	cmp	r0, #44	; 0x2c
 8081c14:	d0e7      	beq.n	8081be6 <_Z13readGpsStreamv+0xde>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081c16:	f104 030a 	add.w	r3, r4, #10
 8081c1a:	462a      	mov	r2, r5
 8081c1c:	4669      	mov	r1, sp
 8081c1e:	a804      	add	r0, sp, #16
 8081c20:	f006 fc92 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081c24:	4b56      	ldr	r3, [pc, #344]	; (8081d80 <_Z13readGpsStreamv+0x278>)
 8081c26:	681b      	ldr	r3, [r3, #0]
 8081c28:	b14b      	cbz	r3, 8081c3e <_Z13readGpsStreamv+0x136>
                          Serial.print("Latitude string: ");
 8081c2a:	f007 fd5d 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081c2e:	4956      	ldr	r1, [pc, #344]	; (8081d88 <_Z13readGpsStreamv+0x280>)
 8081c30:	f006 fcfa 	bl	8088628 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081c34:	f007 fd58 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081c38:	9904      	ldr	r1, [sp, #16]
 8081c3a:	f006 fcf5 	bl	8088628 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081c3e:	a904      	add	r1, sp, #16
 8081c40:	a808      	add	r0, sp, #32
 8081c42:	f006 fba8 	bl	8088396 <_ZN6StringC1ERKS_>
 8081c46:	f104 010c 	add.w	r1, r4, #12
 8081c4a:	4668      	mov	r0, sp
 8081c4c:	f006 fc79 	bl	8088542 <_ZNK6String6charAtEj>
 8081c50:	a908      	add	r1, sp, #32
 8081c52:	4602      	mov	r2, r0
 8081c54:	4640      	mov	r0, r8
 8081c56:	f003 f929 	bl	8084eac <_ZN3GPS15set_lat_decimalE6Stringc>
 8081c5a:	a808      	add	r0, sp, #32
 8081c5c:	f006 fb12 	bl	8088284 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081c60:	8833      	ldrh	r3, [r6, #0]
 8081c62:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081c66:	8033      	strh	r3, [r6, #0]
 8081c68:	e02c      	b.n	8081cc4 <_Z13readGpsStreamv+0x1bc>
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081c6a:	2f03      	cmp	r7, #3
 8081c6c:	d12c      	bne.n	8081cc8 <_Z13readGpsStreamv+0x1c0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081c6e:	4629      	mov	r1, r5
 8081c70:	4668      	mov	r0, sp
 8081c72:	f006 fc66 	bl	8088542 <_ZNK6String6charAtEj>
 8081c76:	282c      	cmp	r0, #44	; 0x2c
 8081c78:	d0b5      	beq.n	8081be6 <_Z13readGpsStreamv+0xde>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081c7a:	f104 030b 	add.w	r3, r4, #11
 8081c7e:	462a      	mov	r2, r5
 8081c80:	4669      	mov	r1, sp
 8081c82:	a804      	add	r0, sp, #16
 8081c84:	f006 fc60 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081c88:	4b3d      	ldr	r3, [pc, #244]	; (8081d80 <_Z13readGpsStreamv+0x278>)
 8081c8a:	681b      	ldr	r3, [r3, #0]
 8081c8c:	b14b      	cbz	r3, 8081ca2 <_Z13readGpsStreamv+0x19a>
                          Serial.print("longitude string: ");
 8081c8e:	f007 fd2b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081c92:	493e      	ldr	r1, [pc, #248]	; (8081d8c <_Z13readGpsStreamv+0x284>)
 8081c94:	f006 fcc8 	bl	8088628 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081c98:	f007 fd26 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081c9c:	9904      	ldr	r1, [sp, #16]
 8081c9e:	f006 fcc3 	bl	8088628 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081ca2:	a904      	add	r1, sp, #16
 8081ca4:	a808      	add	r0, sp, #32
 8081ca6:	f006 fb76 	bl	8088396 <_ZN6StringC1ERKS_>
 8081caa:	f104 010d 	add.w	r1, r4, #13
 8081cae:	4668      	mov	r0, sp
 8081cb0:	f006 fc47 	bl	8088542 <_ZNK6String6charAtEj>
 8081cb4:	a908      	add	r1, sp, #32
 8081cb6:	4602      	mov	r2, r0
 8081cb8:	4640      	mov	r0, r8
 8081cba:	f003 f93f 	bl	8084f3c <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(numberOfSatellitesString);
 8081cbe:	a808      	add	r0, sp, #32
 8081cc0:	f006 fae0 	bl	8088284 <_ZN6StringD1Ev>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081cc4:	a804      	add	r0, sp, #16
 8081cc6:	e78c      	b.n	8081be2 <_Z13readGpsStreamv+0xda>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081cc8:	2f06      	cmp	r7, #6
 8081cca:	d114      	bne.n	8081cf6 <_Z13readGpsStreamv+0x1ee>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ccc:	4629      	mov	r1, r5
 8081cce:	4668      	mov	r0, sp
 8081cd0:	f006 fc37 	bl	8088542 <_ZNK6String6charAtEj>
 8081cd4:	282c      	cmp	r0, #44	; 0x2c
 8081cd6:	d086      	beq.n	8081be6 <_Z13readGpsStreamv+0xde>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081cd8:	462a      	mov	r2, r5
 8081cda:	4669      	mov	r1, sp
 8081cdc:	1ce3      	adds	r3, r4, #3
 8081cde:	a804      	add	r0, sp, #16
 8081ce0:	f006 fc32 	bl	8088548 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081ce4:	a904      	add	r1, sp, #16
 8081ce6:	a808      	add	r0, sp, #32
 8081ce8:	f006 fb55 	bl	8088396 <_ZN6StringC1ERKS_>
 8081cec:	4640      	mov	r0, r8
 8081cee:	a908      	add	r1, sp, #32
 8081cf0:	f003 f96a 	bl	8084fc8 <_ZN3GPS14set_satellitesE6String>
 8081cf4:	e7e3      	b.n	8081cbe <_Z13readGpsStreamv+0x1b6>
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081cf6:	2f07      	cmp	r7, #7
 8081cf8:	f47f af75 	bne.w	8081be6 <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081cfc:	4629      	mov	r1, r5
 8081cfe:	4668      	mov	r0, sp
 8081d00:	f006 fc1f 	bl	8088542 <_ZNK6String6charAtEj>
 8081d04:	282c      	cmp	r0, #44	; 0x2c
 8081d06:	f43f af6e 	beq.w	8081be6 <_Z13readGpsStreamv+0xde>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081d0a:	462a      	mov	r2, r5
 8081d0c:	1ce3      	adds	r3, r4, #3
 8081d0e:	4669      	mov	r1, sp
 8081d10:	a804      	add	r0, sp, #16
 8081d12:	f006 fc19 	bl	8088548 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081d16:	a904      	add	r1, sp, #16
 8081d18:	a808      	add	r0, sp, #32
 8081d1a:	f006 fb3c 	bl	8088396 <_ZN6StringC1ERKS_>
 8081d1e:	a908      	add	r1, sp, #32
 8081d20:	4640      	mov	r0, r8
 8081d22:	f003 f959 	bl	8084fd8 <_ZN3GPS23set_horizontalDillutionE6String>
 8081d26:	a808      	add	r0, sp, #32
 8081d28:	f006 faac 	bl	8088284 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081d2c:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081d2e:	4640      	mov	r0, r8
                        status_word.status_int &= 0xFFF3;
 8081d30:	f023 030c 	bic.w	r3, r3, #12
 8081d34:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081d36:	f003 f967 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081d3a:	2801      	cmp	r0, #1
 8081d3c:	dc03      	bgt.n	8081d46 <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x000C;
 8081d3e:	8833      	ldrh	r3, [r6, #0]
 8081d40:	f043 030c 	orr.w	r3, r3, #12
 8081d44:	e78f      	b.n	8081c66 <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081d46:	4640      	mov	r0, r8
 8081d48:	f003 f95e 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081d4c:	2804      	cmp	r0, #4
 8081d4e:	dc03      	bgt.n	8081d58 <_Z13readGpsStreamv+0x250>
                            status_word.status_int |= 0x0008;
 8081d50:	8833      	ldrh	r3, [r6, #0]
 8081d52:	f043 0308 	orr.w	r3, r3, #8
 8081d56:	e786      	b.n	8081c66 <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 20){
 8081d58:	4640      	mov	r0, r8
 8081d5a:	f003 f955 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081d5e:	2813      	cmp	r0, #19
 8081d60:	dcb0      	bgt.n	8081cc4 <_Z13readGpsStreamv+0x1bc>
                            status_word.status_int |= 0x0004;
 8081d62:	8833      	ldrh	r3, [r6, #0]
 8081d64:	f043 0304 	orr.w	r3, r3, #4
 8081d68:	e77d      	b.n	8081c66 <_Z13readGpsStreamv+0x15e>
 8081d6a:	bf00      	nop
 8081d6c:	0808d4fe 	.word	0x0808d4fe
 8081d70:	0808d503 	.word	0x0808d503
 8081d74:	0808d507 	.word	0x0808d507
 8081d78:	20000448 	.word	0x20000448
 8081d7c:	20000a10 	.word	0x20000a10
 8081d80:	200003c8 	.word	0x200003c8
 8081d84:	0808d519 	.word	0x0808d519
 8081d88:	0808d52a 	.word	0x0808d52a
 8081d8c:	0808d53c 	.word	0x0808d53c

08081d90 <_Z17readGpsStreamDatev>:
void readGpsStreamDate(void){
 8081d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081d94:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081d96:	4668      	mov	r0, sp
 8081d98:	498a      	ldr	r1, [pc, #552]	; (8081fc4 <_Z17readGpsStreamDatev+0x234>)
 8081d9a:	f006 fabd 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
        if(prefix_string.equals("RMC")){
 8081d9e:	4f8a      	ldr	r7, [pc, #552]	; (8081fc8 <_Z17readGpsStreamDatev+0x238>)
        }else if(gps_sentence.equals("init")){
 8081da0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8081fc4 <_Z17readGpsStreamDatev+0x234>
            Serial.println("Error reading GPS RMC");
 8081da4:	4e89      	ldr	r6, [pc, #548]	; (8081fcc <_Z17readGpsStreamDatev+0x23c>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081da6:	f7fe ffc3 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 8081daa:	220d      	movs	r2, #13
 8081dac:	4601      	mov	r1, r0
 8081dae:	a808      	add	r0, sp, #32
 8081db0:	f006 fdb8 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 8081db4:	a908      	add	r1, sp, #32
 8081db6:	4668      	mov	r0, sp
 8081db8:	f006 faf8 	bl	80883ac <_ZN6StringaSEOS_>
 8081dbc:	a808      	add	r0, sp, #32
 8081dbe:	f006 fa61 	bl	8088284 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081dc2:	2307      	movs	r3, #7
 8081dc4:	2204      	movs	r2, #4
 8081dc6:	4669      	mov	r1, sp
 8081dc8:	a804      	add	r0, sp, #16
 8081dca:	f006 fbbd 	bl	8088548 <_ZNK6String9substringEjj>
        if(prefix_string.equals("RMC")){
 8081dce:	4639      	mov	r1, r7
 8081dd0:	a804      	add	r0, sp, #16
 8081dd2:	f006 fb9b 	bl	808850c <_ZNK6String6equalsEPKc>
 8081dd6:	4605      	mov	r5, r0
 8081dd8:	2800      	cmp	r0, #0
 8081dda:	d154      	bne.n	8081e86 <_Z17readGpsStreamDatev+0xf6>
        }else if(gps_sentence.equals("init")){
 8081ddc:	4641      	mov	r1, r8
 8081dde:	4668      	mov	r0, sp
 8081de0:	f006 fb94 	bl	808850c <_ZNK6String6equalsEPKc>
 8081de4:	4604      	mov	r4, r0
 8081de6:	2800      	cmp	r0, #0
 8081de8:	d050      	beq.n	8081e8c <_Z17readGpsStreamDatev+0xfc>
            Serial.println("Error reading GPS RMC");
 8081dea:	f007 fc7d 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081dee:	4631      	mov	r1, r6
 8081df0:	f006 fc2d 	bl	808864e <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081df4:	4631      	mov	r1, r6
 8081df6:	a808      	add	r0, sp, #32
 8081df8:	f006 fa8e 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8081dfc:	a808      	add	r0, sp, #32
 8081dfe:	f7ff fe31 	bl	8081a64 <_Z12writeLogFile6String>
 8081e02:	a808      	add	r0, sp, #32
 8081e04:	f006 fa3e 	bl	8088284 <_ZN6StringD1Ev>
            error = 1;
 8081e08:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4,7);
 8081e0a:	a804      	add	r0, sp, #16
 8081e0c:	f006 fa3a 	bl	8088284 <_ZN6StringD1Ev>
    while(!stringFound && !error){
 8081e10:	b38d      	cbz	r5, 8081e76 <_Z17readGpsStreamDatev+0xe6>
 8081e12:	2400      	movs	r4, #0
 8081e14:	4627      	mov	r7, r4
                        gps.set_horizontalDillution(hdString);
 8081e16:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8081fd0 <_Z17readGpsStreamDatev+0x240>
                        status_word.status_int &= 0xFFF3;
 8081e1a:	4d6e      	ldr	r5, [pc, #440]	; (8081fd4 <_Z17readGpsStreamDatev+0x244>)
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e1c:	9b02      	ldr	r3, [sp, #8]
 8081e1e:	42a3      	cmp	r3, r4
 8081e20:	d92b      	bls.n	8081e7a <_Z17readGpsStreamDatev+0xea>
            if(gps_sentence.charAt(a) == ','){
 8081e22:	4621      	mov	r1, r4
 8081e24:	4668      	mov	r0, sp
 8081e26:	f006 fb8c 	bl	8088542 <_ZNK6String6charAtEj>
 8081e2a:	282c      	cmp	r0, #44	; 0x2c
                    if(gps_sentence.charAt(a+1)!=','){
 8081e2c:	f104 0601 	add.w	r6, r4, #1
            if(gps_sentence.charAt(a) == ','){
 8081e30:	d11f      	bne.n	8081e72 <_Z17readGpsStreamDatev+0xe2>
                if(comma_counter == DATE_FIELD_INDEX){
 8081e32:	2f06      	cmp	r7, #6
 8081e34:	d12c      	bne.n	8081e90 <_Z17readGpsStreamDatev+0x100>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e36:	4631      	mov	r1, r6
 8081e38:	4668      	mov	r0, sp
 8081e3a:	f006 fb82 	bl	8088542 <_ZNK6String6charAtEj>
 8081e3e:	282c      	cmp	r0, #44	; 0x2c
 8081e40:	d016      	beq.n	8081e70 <_Z17readGpsStreamDatev+0xe0>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e42:	f104 030b 	add.w	r3, r4, #11
 8081e46:	4632      	mov	r2, r6
 8081e48:	4669      	mov	r1, sp
 8081e4a:	a808      	add	r0, sp, #32
 8081e4c:	f006 fb7c 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081e50:	4b61      	ldr	r3, [pc, #388]	; (8081fd8 <_Z17readGpsStreamDatev+0x248>)
 8081e52:	681b      	ldr	r3, [r3, #0]
 8081e54:	b14b      	cbz	r3, 8081e6a <_Z17readGpsStreamDatev+0xda>
                            Serial.print("GPS utc string: ");
 8081e56:	f007 fc47 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081e5a:	4960      	ldr	r1, [pc, #384]	; (8081fdc <_Z17readGpsStreamDatev+0x24c>)
 8081e5c:	f006 fbe4 	bl	8088628 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e60:	f007 fc42 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081e64:	9908      	ldr	r1, [sp, #32]
 8081e66:	f006 fbf2 	bl	808864e <_ZN5Print7printlnEPKc>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e6a:	a808      	add	r0, sp, #32
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081e6c:	f006 fa0a 	bl	8088284 <_ZN6StringD1Ev>
                comma_counter++;
 8081e70:	3701      	adds	r7, #1
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e72:	4634      	mov	r4, r6
 8081e74:	e7d2      	b.n	8081e1c <_Z17readGpsStreamDatev+0x8c>
    while(!stringFound && !error){
 8081e76:	2c00      	cmp	r4, #0
 8081e78:	d095      	beq.n	8081da6 <_Z17readGpsStreamDatev+0x16>
    String gps_sentence = "init";
 8081e7a:	4668      	mov	r0, sp
 8081e7c:	f006 fa02 	bl	8088284 <_ZN6StringD1Ev>
}
 8081e80:	b00c      	add	sp, #48	; 0x30
 8081e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081e86:	2400      	movs	r4, #0
            stringFound = 1;
 8081e88:	2501      	movs	r5, #1
 8081e8a:	e7be      	b.n	8081e0a <_Z17readGpsStreamDatev+0x7a>
 8081e8c:	4605      	mov	r5, r0
 8081e8e:	e7bc      	b.n	8081e0a <_Z17readGpsStreamDatev+0x7a>
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081e90:	2f01      	cmp	r7, #1
 8081e92:	d12f      	bne.n	8081ef4 <_Z17readGpsStreamDatev+0x164>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e94:	4631      	mov	r1, r6
 8081e96:	4668      	mov	r0, sp
 8081e98:	f006 fb53 	bl	8088542 <_ZNK6String6charAtEj>
 8081e9c:	282c      	cmp	r0, #44	; 0x2c
 8081e9e:	d0e7      	beq.n	8081e70 <_Z17readGpsStreamDatev+0xe0>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081ea0:	f104 030a 	add.w	r3, r4, #10
 8081ea4:	4632      	mov	r2, r6
 8081ea6:	4669      	mov	r1, sp
 8081ea8:	a804      	add	r0, sp, #16
 8081eaa:	f006 fb4d 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081eae:	4b4a      	ldr	r3, [pc, #296]	; (8081fd8 <_Z17readGpsStreamDatev+0x248>)
 8081eb0:	681b      	ldr	r3, [r3, #0]
 8081eb2:	b14b      	cbz	r3, 8081ec8 <_Z17readGpsStreamDatev+0x138>
                          Serial.print("Latitude string: ");
 8081eb4:	f007 fc18 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081eb8:	4949      	ldr	r1, [pc, #292]	; (8081fe0 <_Z17readGpsStreamDatev+0x250>)
 8081eba:	f006 fbb5 	bl	8088628 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081ebe:	f007 fc13 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081ec2:	9904      	ldr	r1, [sp, #16]
 8081ec4:	f006 fbb0 	bl	8088628 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081ec8:	a904      	add	r1, sp, #16
 8081eca:	a808      	add	r0, sp, #32
 8081ecc:	f006 fa63 	bl	8088396 <_ZN6StringC1ERKS_>
 8081ed0:	f104 010c 	add.w	r1, r4, #12
 8081ed4:	4668      	mov	r0, sp
 8081ed6:	f006 fb34 	bl	8088542 <_ZNK6String6charAtEj>
 8081eda:	a908      	add	r1, sp, #32
 8081edc:	4602      	mov	r2, r0
 8081ede:	4640      	mov	r0, r8
 8081ee0:	f002 ffe4 	bl	8084eac <_ZN3GPS15set_lat_decimalE6Stringc>
 8081ee4:	a808      	add	r0, sp, #32
 8081ee6:	f006 f9cd 	bl	8088284 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081eea:	882b      	ldrh	r3, [r5, #0]
 8081eec:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081ef0:	802b      	strh	r3, [r5, #0]
 8081ef2:	e02c      	b.n	8081f4e <_Z17readGpsStreamDatev+0x1be>
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081ef4:	2f03      	cmp	r7, #3
 8081ef6:	d12c      	bne.n	8081f52 <_Z17readGpsStreamDatev+0x1c2>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ef8:	4631      	mov	r1, r6
 8081efa:	4668      	mov	r0, sp
 8081efc:	f006 fb21 	bl	8088542 <_ZNK6String6charAtEj>
 8081f00:	282c      	cmp	r0, #44	; 0x2c
 8081f02:	d0b5      	beq.n	8081e70 <_Z17readGpsStreamDatev+0xe0>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081f04:	f104 030b 	add.w	r3, r4, #11
 8081f08:	4632      	mov	r2, r6
 8081f0a:	4669      	mov	r1, sp
 8081f0c:	a804      	add	r0, sp, #16
 8081f0e:	f006 fb1b 	bl	8088548 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f12:	4b31      	ldr	r3, [pc, #196]	; (8081fd8 <_Z17readGpsStreamDatev+0x248>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	b14b      	cbz	r3, 8081f2c <_Z17readGpsStreamDatev+0x19c>
                          Serial.print("longitude string: ");
 8081f18:	f007 fbe6 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081f1c:	4931      	ldr	r1, [pc, #196]	; (8081fe4 <_Z17readGpsStreamDatev+0x254>)
 8081f1e:	f006 fb83 	bl	8088628 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f22:	f007 fbe1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8081f26:	9904      	ldr	r1, [sp, #16]
 8081f28:	f006 fb7e 	bl	8088628 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f2c:	a904      	add	r1, sp, #16
 8081f2e:	a808      	add	r0, sp, #32
 8081f30:	f006 fa31 	bl	8088396 <_ZN6StringC1ERKS_>
 8081f34:	f104 010d 	add.w	r1, r4, #13
 8081f38:	4668      	mov	r0, sp
 8081f3a:	f006 fb02 	bl	8088542 <_ZNK6String6charAtEj>
 8081f3e:	a908      	add	r1, sp, #32
 8081f40:	4602      	mov	r2, r0
 8081f42:	4640      	mov	r0, r8
 8081f44:	f002 fffa 	bl	8084f3c <_ZN3GPS16set_long_decimalE6Stringc>
 8081f48:	a808      	add	r0, sp, #32
 8081f4a:	f006 f99b 	bl	8088284 <_ZN6StringD1Ev>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f4e:	a804      	add	r0, sp, #16
 8081f50:	e78c      	b.n	8081e6c <_Z17readGpsStreamDatev+0xdc>
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081f52:	2f07      	cmp	r7, #7
 8081f54:	d18c      	bne.n	8081e70 <_Z17readGpsStreamDatev+0xe0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f56:	4631      	mov	r1, r6
 8081f58:	4668      	mov	r0, sp
 8081f5a:	f006 faf2 	bl	8088542 <_ZNK6String6charAtEj>
 8081f5e:	282c      	cmp	r0, #44	; 0x2c
 8081f60:	d086      	beq.n	8081e70 <_Z17readGpsStreamDatev+0xe0>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f62:	4632      	mov	r2, r6
 8081f64:	1ce3      	adds	r3, r4, #3
 8081f66:	4669      	mov	r1, sp
 8081f68:	a804      	add	r0, sp, #16
 8081f6a:	f006 faed 	bl	8088548 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081f6e:	a904      	add	r1, sp, #16
 8081f70:	a808      	add	r0, sp, #32
 8081f72:	f006 fa10 	bl	8088396 <_ZN6StringC1ERKS_>
 8081f76:	a908      	add	r1, sp, #32
 8081f78:	4640      	mov	r0, r8
 8081f7a:	f003 f82d 	bl	8084fd8 <_ZN3GPS23set_horizontalDillutionE6String>
 8081f7e:	a808      	add	r0, sp, #32
 8081f80:	f006 f980 	bl	8088284 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081f84:	882b      	ldrh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081f86:	4640      	mov	r0, r8
                        status_word.status_int &= 0xFFF3;
 8081f88:	f023 030c 	bic.w	r3, r3, #12
 8081f8c:	802b      	strh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081f8e:	f003 f83b 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081f92:	2801      	cmp	r0, #1
 8081f94:	dc03      	bgt.n	8081f9e <_Z17readGpsStreamDatev+0x20e>
                            status_word.status_int |= 0x000C;
 8081f96:	882b      	ldrh	r3, [r5, #0]
 8081f98:	f043 030c 	orr.w	r3, r3, #12
 8081f9c:	e7a8      	b.n	8081ef0 <_Z17readGpsStreamDatev+0x160>
                        }else if(gps.get_horizontalDillution() < 5){
 8081f9e:	4640      	mov	r0, r8
 8081fa0:	f003 f832 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081fa4:	2804      	cmp	r0, #4
 8081fa6:	dc03      	bgt.n	8081fb0 <_Z17readGpsStreamDatev+0x220>
                            status_word.status_int |= 0x0008;
 8081fa8:	882b      	ldrh	r3, [r5, #0]
 8081faa:	f043 0308 	orr.w	r3, r3, #8
 8081fae:	e79f      	b.n	8081ef0 <_Z17readGpsStreamDatev+0x160>
                        }else if(gps.get_horizontalDillution() < 20){
 8081fb0:	4640      	mov	r0, r8
 8081fb2:	f003 f829 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8081fb6:	2813      	cmp	r0, #19
 8081fb8:	dcc9      	bgt.n	8081f4e <_Z17readGpsStreamDatev+0x1be>
                            status_word.status_int |= 0x0004;
 8081fba:	882b      	ldrh	r3, [r5, #0]
 8081fbc:	f043 0304 	orr.w	r3, r3, #4
 8081fc0:	e796      	b.n	8081ef0 <_Z17readGpsStreamDatev+0x160>
 8081fc2:	bf00      	nop
 8081fc4:	0808d4fe 	.word	0x0808d4fe
 8081fc8:	0808d561 	.word	0x0808d561
 8081fcc:	0808d54f 	.word	0x0808d54f
 8081fd0:	20000448 	.word	0x20000448
 8081fd4:	20000a10 	.word	0x20000a10
 8081fd8:	200003c8 	.word	0x200003c8
 8081fdc:	0808d519 	.word	0x0808d519
 8081fe0:	0808d52a 	.word	0x0808d52a
 8081fe4:	0808d53c 	.word	0x0808d53c

08081fe8 <_Z10readAlpha1v>:
float readAlpha1(void){
 8081fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(debugging_enabled){
 8081fec:	f8df a290 	ldr.w	sl, [pc, #656]	; 8082280 <_Z10readAlpha1v+0x298>
float readAlpha1(void){
 8081ff0:	b08b      	sub	sp, #44	; 0x2c
    String alpha1_ppmRounded;
 8081ff2:	49a4      	ldr	r1, [pc, #656]	; (8082284 <_Z10readAlpha1v+0x29c>)
 8081ff4:	a802      	add	r0, sp, #8
 8081ff6:	f006 f98f 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8081ffa:	f8da 3000 	ldr.w	r3, [sl]
 8081ffe:	b123      	cbz	r3, 808200a <_Z10readAlpha1v+0x22>
        Serial.println("Start of alpha read");
 8082000:	f007 fb72 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082004:	49a0      	ldr	r1, [pc, #640]	; (8082288 <_Z10readAlpha1v+0x2a0>)
 8082006:	f006 fb22 	bl	808864e <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 808200a:	4ba0      	ldr	r3, [pc, #640]	; (808228c <_Z10readAlpha1v+0x2a4>)
 808200c:	2100      	movs	r1, #0
 808200e:	8818      	ldrh	r0, [r3, #0]
 8082010:	f007 fe03 	bl	8089c1a <digitalWrite>
    if(Wire.requestFrom(0x49,1) == 0){
 8082014:	f007 fee0 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8082018:	2201      	movs	r2, #1
 808201a:	2149      	movs	r1, #73	; 0x49
 808201c:	f007 fcf9 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 8082020:	2800      	cmp	r0, #0
 8082022:	d160      	bne.n	80820e6 <_Z10readAlpha1v+0xfe>
      if(debugging_enabled){
 8082024:	f8da 3000 	ldr.w	r3, [sl]
 8082028:	b173      	cbz	r3, 8082048 <_Z10readAlpha1v+0x60>
        Serial.println("Couldn't communicate with LMP91000_1");
 808202a:	f007 fb5d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808202e:	4998      	ldr	r1, [pc, #608]	; (8082290 <_Z10readAlpha1v+0x2a8>)
 8082030:	f006 fb0d 	bl	808864e <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000_1");
 8082034:	4996      	ldr	r1, [pc, #600]	; (8082290 <_Z10readAlpha1v+0x2a8>)
            writeLogFile("Halfvolt higher than 0.5");
 8082036:	a806      	add	r0, sp, #24
 8082038:	f006 f96e 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808203c:	a806      	add	r0, sp, #24
 808203e:	f7ff fd11 	bl	8081a64 <_Z12writeLogFile6String>
 8082042:	a806      	add	r0, sp, #24
 8082044:	f006 f91e 	bl	8088284 <_ZN6StringD1Ev>
    if(lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 8082048:	2100      	movs	r1, #0
 808204a:	4892      	ldr	r0, [pc, #584]	; (8082294 <_Z10readAlpha1v+0x2ac>)
 808204c:	f002 fdbd 	bl	8084bca <_ZN8LMP910004readEh>
 8082050:	b988      	cbnz	r0, 8082076 <_Z10readAlpha1v+0x8e>
        if(debugging_enabled){
 8082052:	f8da 3000 	ldr.w	r3, [sl]
 8082056:	b173      	cbz	r3, 8082076 <_Z10readAlpha1v+0x8e>
            Serial.println("Status = 0 from LMP91000 status reg");
 8082058:	f007 fb46 	bl	80896e8 <_Z16_fetch_usbserialv>
 808205c:	498e      	ldr	r1, [pc, #568]	; (8082298 <_Z10readAlpha1v+0x2b0>)
 808205e:	f006 faf6 	bl	808864e <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8082062:	498e      	ldr	r1, [pc, #568]	; (808229c <_Z10readAlpha1v+0x2b4>)
 8082064:	a806      	add	r0, sp, #24
 8082066:	f006 f957 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808206a:	a806      	add	r0, sp, #24
 808206c:	f7ff fcfa 	bl	8081a64 <_Z12writeLogFile6String>
 8082070:	a806      	add	r0, sp, #24
 8082072:	f006 f907 	bl	8088284 <_ZN6StringD1Ev>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 8082076:	f007 feaf 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808207a:	2201      	movs	r2, #1
 808207c:	2149      	movs	r1, #73	; 0x49
 808207e:	f007 fcc8 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 8082082:	2800      	cmp	r0, #0
 8082084:	d15c      	bne.n	8082140 <_Z10readAlpha1v+0x158>
        alpha1_ppmRounded = "-99";
 8082086:	4986      	ldr	r1, [pc, #536]	; (80822a0 <_Z10readAlpha1v+0x2b8>)
 8082088:	a802      	add	r0, sp, #8
 808208a:	f006 f997 	bl	80883bc <_ZN6StringaSEPKc>
      digitalWrite(lmp91000_1_en, HIGH);  //disable
 808208e:	4b7f      	ldr	r3, [pc, #508]	; (808228c <_Z10readAlpha1v+0x2a4>)
 8082090:	2101      	movs	r1, #1
 8082092:	8818      	ldrh	r0, [r3, #0]
 8082094:	f007 fdc1 	bl	8089c1a <digitalWrite>
      if(debugging_enabled){
 8082098:	f8da 3000 	ldr.w	r3, [sl]
 808209c:	b1e3      	cbz	r3, 80820d8 <_Z10readAlpha1v+0xf0>
          Serial.print("CO measurements:  \n\r");
 808209e:	f007 fb23 	bl	80896e8 <_Z16_fetch_usbserialv>
 80820a2:	4980      	ldr	r1, [pc, #512]	; (80822a4 <_Z10readAlpha1v+0x2bc>)
 80820a4:	f006 fac0 	bl	8088628 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 80820a8:	f007 fb1e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80820ac:	4632      	mov	r2, r6
 80820ae:	497e      	ldr	r1, [pc, #504]	; (80822a8 <_Z10readAlpha1v+0x2c0>)
 80820b0:	f7fe fddf 	bl	8080c72 <_ZN5Print6printfEPKcz>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 80820b4:	f007 fb18 	bl	80896e8 <_Z16_fetch_usbserialv>
 80820b8:	462a      	mov	r2, r5
 80820ba:	497c      	ldr	r1, [pc, #496]	; (80822ac <_Z10readAlpha1v+0x2c4>)
 80820bc:	f7fe fdd9 	bl	8080c72 <_ZN5Print6printfEPKcz>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 80820c0:	f007 fb12 	bl	80896e8 <_Z16_fetch_usbserialv>
 80820c4:	463a      	mov	r2, r7
 80820c6:	497a      	ldr	r1, [pc, #488]	; (80822b0 <_Z10readAlpha1v+0x2c8>)
 80820c8:	f7fe fdd3 	bl	8080c72 <_ZN5Print6printfEPKcz>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 80820cc:	f007 fb0c 	bl	80896e8 <_Z16_fetch_usbserialv>
 80820d0:	4622      	mov	r2, r4
 80820d2:	4978      	ldr	r1, [pc, #480]	; (80822b4 <_Z10readAlpha1v+0x2cc>)
 80820d4:	f7fe fdcd 	bl	8080c72 <_ZN5Print6printfEPKcz>
    String alpha1_ppmRounded;
 80820d8:	a802      	add	r0, sp, #8
 80820da:	f006 f8d3 	bl	8088284 <_ZN6StringD1Ev>
}
 80820de:	4640      	mov	r0, r8
 80820e0:	b00b      	add	sp, #44	; 0x2c
 80820e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 80820e6:	2103      	movs	r1, #3
 80820e8:	4873      	ldr	r0, [pc, #460]	; (80822b8 <_Z10readAlpha1v+0x2d0>)
 80820ea:	f002 feb5 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 80820ee:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 80820f0:	f008 fc84 	bl	808a9fc <__aeabi_i2f>
 80820f4:	4b71      	ldr	r3, [pc, #452]	; (80822bc <_Z10readAlpha1v+0x2d4>)
 80820f6:	6819      	ldr	r1, [r3, #0]
 80820f8:	f008 fcd4 	bl	808aaa4 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 80820fc:	4970      	ldr	r1, [pc, #448]	; (80822c0 <_Z10readAlpha1v+0x2d8>)
 80820fe:	f008 fd85 	bl	808ac0c <__aeabi_fdiv>
 8082102:	f008 f821 	bl	808a148 <__aeabi_f2d>
 8082106:	4602      	mov	r2, r0
 8082108:	460b      	mov	r3, r1
 808210a:	e9cd 2300 	strd	r2, r3, [sp]
 808210e:	2200      	movs	r2, #0
 8082110:	4b6c      	ldr	r3, [pc, #432]	; (80822c4 <_Z10readAlpha1v+0x2dc>)
 8082112:	f007 feb9 	bl	8089e88 <__aeabi_dsub>
 8082116:	2200      	movs	r2, #0
 8082118:	4b6b      	ldr	r3, [pc, #428]	; (80822c8 <_Z10readAlpha1v+0x2e0>)
 808211a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808211e:	f008 fafb 	bl	808a718 <__aeabi_dcmpgt>
 8082122:	2800      	cmp	r0, #0
 8082124:	d090      	beq.n	8082048 <_Z10readAlpha1v+0x60>
          if(debugging_enabled){
 8082126:	f8da 3000 	ldr.w	r3, [sl]
 808212a:	2b00      	cmp	r3, #0
 808212c:	d08c      	beq.n	8082048 <_Z10readAlpha1v+0x60>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 808212e:	f007 fadb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8082136:	4965      	ldr	r1, [pc, #404]	; (80822cc <_Z10readAlpha1v+0x2e4>)
 8082138:	f7fe fd9b 	bl	8080c72 <_ZN5Print6printfEPKcz>
            writeLogFile("Halfvolt higher than 0.5");
 808213c:	4964      	ldr	r1, [pc, #400]	; (80822d0 <_Z10readAlpha1v+0x2e8>)
 808213e:	e77a      	b.n	8082036 <_Z10readAlpha1v+0x4e>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 8082140:	2100      	movs	r1, #0
 8082142:	4854      	ldr	r0, [pc, #336]	; (8082294 <_Z10readAlpha1v+0x2ac>)
 8082144:	f002 fd41 	bl	8084bca <_ZN8LMP910004readEh>
 8082148:	2800      	cmp	r0, #0
 808214a:	d09c      	beq.n	8082086 <_Z10readAlpha1v+0x9e>
 808214c:	2400      	movs	r4, #0
 808214e:	f04f 090a 	mov.w	r9, #10
 8082152:	4627      	mov	r7, r4
 8082154:	46a0      	mov	r8, r4
 8082156:	4626      	mov	r6, r4
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8082158:	4d57      	ldr	r5, [pc, #348]	; (80822b8 <_Z10readAlpha1v+0x2d0>)
 808215a:	2100      	movs	r1, #0
 808215c:	4628      	mov	r0, r5
 808215e:	f002 fe7b 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8082162:	2101      	movs	r1, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8082164:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8082166:	4628      	mov	r0, r5
 8082168:	f002 fe76 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 808216c:	2102      	movs	r1, #2
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 808216e:	4480      	add	r8, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8082170:	4628      	mov	r0, r5
 8082172:	f002 fe71 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8082176:	2103      	movs	r1, #3
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8082178:	4407      	add	r7, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 808217a:	4628      	mov	r0, r5
 808217c:	f002 fe6c 	bl	8084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8082180:	f1b9 0901 	subs.w	r9, r9, #1
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8082184:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8082186:	d1e8      	bne.n	808215a <_Z10readAlpha1v+0x172>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8082188:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 808218a:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 808218e:	4b4b      	ldr	r3, [pc, #300]	; (80822bc <_Z10readAlpha1v+0x2d4>)
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8082190:	fbb8 f5f0 	udiv	r5, r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082194:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8082198:	fbb6 f6f0 	udiv	r6, r6, r0
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 808219c:	fbb7 f7f0 	udiv	r7, r7, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 80821a0:	4620      	mov	r0, r4
 80821a2:	f008 fc2b 	bl	808a9fc <__aeabi_i2f>
 80821a6:	4649      	mov	r1, r9
 80821a8:	f008 fc7c 	bl	808aaa4 <__aeabi_fmul>
 80821ac:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 80821ae:	4630      	mov	r0, r6
 80821b0:	f008 fc24 	bl	808a9fc <__aeabi_i2f>
 80821b4:	4649      	mov	r1, r9
 80821b6:	f008 fc75 	bl	808aaa4 <__aeabi_fmul>
 80821ba:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 80821bc:	4640      	mov	r0, r8
 80821be:	f008 fb67 	bl	808a890 <__aeabi_fsub>
 80821c2:	4944      	ldr	r1, [pc, #272]	; (80822d4 <_Z10readAlpha1v+0x2ec>)
 80821c4:	f008 fd22 	bl	808ac0c <__aeabi_fdiv>
 80821c8:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 80821ca:	4628      	mov	r0, r5
 80821cc:	f008 fc16 	bl	808a9fc <__aeabi_i2f>
 80821d0:	4649      	mov	r1, r9
 80821d2:	f008 fc67 	bl	808aaa4 <__aeabi_fmul>
 80821d6:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 80821d8:	4640      	mov	r0, r8
 80821da:	f008 fb59 	bl	808a890 <__aeabi_fsub>
 80821de:	493e      	ldr	r1, [pc, #248]	; (80822d8 <_Z10readAlpha1v+0x2f0>)
 80821e0:	f008 fd14 	bl	808ac0c <__aeabi_fdiv>
 80821e4:	4680      	mov	r8, r0
        if(readTemperature() <= 15){
 80821e6:	f7ff fa5f 	bl	80816a8 <_Z15readTemperaturev>
 80821ea:	493c      	ldr	r1, [pc, #240]	; (80822dc <_Z10readAlpha1v+0x2f4>)
 80821ec:	f008 fe02 	bl	808adf4 <__aeabi_fcmple>
 80821f0:	b1d0      	cbz	r0, 8082228 <_Z10readAlpha1v+0x240>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 80821f2:	4641      	mov	r1, r8
 80821f4:	4658      	mov	r0, fp
 80821f6:	f008 fb4b 	bl	808a890 <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80821fa:	f007 ffa5 	bl	808a148 <__aeabi_f2d>
 80821fe:	a31c      	add	r3, pc, #112	; (adr r3, 8082270 <_Z10readAlpha1v+0x288>)
 8082200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082204:	f008 f922 	bl	808a44c <__aeabi_ddiv>
 8082208:	f008 faee 	bl	808a7e8 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808220c:	2202      	movs	r2, #2
 808220e:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082210:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082212:	a806      	add	r0, sp, #24
 8082214:	f006 f8f6 	bl	8088404 <_ZN6StringC1Efi>
 8082218:	a906      	add	r1, sp, #24
 808221a:	a802      	add	r0, sp, #8
 808221c:	f006 f8c6 	bl	80883ac <_ZN6StringaSEOS_>
 8082220:	a806      	add	r0, sp, #24
 8082222:	f006 f82f 	bl	8088284 <_ZN6StringD1Ev>
 8082226:	e732      	b.n	808208e <_Z10readAlpha1v+0xa6>
        else if(readTemperature() <= 25){
 8082228:	f7ff fa3e 	bl	80816a8 <_Z15readTemperaturev>
 808222c:	492c      	ldr	r1, [pc, #176]	; (80822e0 <_Z10readAlpha1v+0x2f8>)
 808222e:	f008 fde1 	bl	808adf4 <__aeabi_fcmple>
 8082232:	b120      	cbz	r0, 808223e <_Z10readAlpha1v+0x256>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8082234:	4641      	mov	r1, r8
 8082236:	4658      	mov	r0, fp
 8082238:	f008 fb2c 	bl	808a894 <__addsf3>
 808223c:	e7dd      	b.n	80821fa <_Z10readAlpha1v+0x212>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 808223e:	4640      	mov	r0, r8
 8082240:	f007 ff82 	bl	808a148 <__aeabi_f2d>
 8082244:	a30c      	add	r3, pc, #48	; (adr r3, 8082278 <_Z10readAlpha1v+0x290>)
 8082246:	e9d3 2300 	ldrd	r2, r3, [r3]
 808224a:	f007 ffd5 	bl	808a1f8 <__aeabi_dmul>
 808224e:	4680      	mov	r8, r0
 8082250:	4658      	mov	r0, fp
 8082252:	4689      	mov	r9, r1
 8082254:	f007 ff78 	bl	808a148 <__aeabi_f2d>
 8082258:	4602      	mov	r2, r0
 808225a:	460b      	mov	r3, r1
 808225c:	4640      	mov	r0, r8
 808225e:	4649      	mov	r1, r9
 8082260:	f007 fe14 	bl	8089e8c <__adddf3>
 8082264:	f008 fac0 	bl	808a7e8 <__aeabi_d2f>
 8082268:	e7c7      	b.n	80821fa <_Z10readAlpha1v+0x212>
 808226a:	bf00      	nop
 808226c:	f3af 8000 	nop.w
 8082270:	d4fdf3b6 	.word	0xd4fdf3b6
 8082274:	3fd6e978 	.word	0x3fd6e978
 8082278:	851eb852 	.word	0x851eb852
 808227c:	3fe851eb 	.word	0x3fe851eb
 8082280:	200003c8 	.word	0x200003c8
 8082284:	0808f1d9 	.word	0x0808f1d9
 8082288:	0808d565 	.word	0x0808d565
 808228c:	200000c0 	.word	0x200000c0
 8082290:	0808d579 	.word	0x0808d579
 8082294:	20000491 	.word	0x20000491
 8082298:	0808d5c9 	.word	0x0808d5c9
 808229c:	0808d5ed 	.word	0x0808d5ed
 80822a0:	0808d4ad 	.word	0x0808d4ad
 80822a4:	0808d600 	.word	0x0808d600
 80822a8:	0808d615 	.word	0x0808d615
 80822ac:	0808d622 	.word	0x0808d622
 80822b0:	0808d62f 	.word	0x0808d62f
 80822b4:	0808d63d 	.word	0x0808d63d
 80822b8:	20000338 	.word	0x20000338
 80822bc:	20000084 	.word	0x20000084
 80822c0:	447a0000 	.word	0x447a0000
 80822c4:	3ff40000 	.word	0x3ff40000
 80822c8:	3fe00000 	.word	0x3fe00000
 80822cc:	0808d59e 	.word	0x0808d59e
 80822d0:	0808d5b0 	.word	0x0808d5b0
 80822d4:	c2f00000 	.word	0xc2f00000
 80822d8:	c3160000 	.word	0xc3160000
 80822dc:	41700000 	.word	0x41700000
 80822e0:	41c80000 	.word	0x41c80000

080822e4 <_Z8readCO_Av>:
float readCO_A(void){
 80822e4:	b510      	push	{r4, lr}
    CO_float = readAlpha1();
 80822e6:	f7ff fe7f 	bl	8081fe8 <_Z10readAlpha1v>
    CO_float *= CO_slopeA;
 80822ea:	4b08      	ldr	r3, [pc, #32]	; (808230c <_Z8readCO_Av+0x28>)
 80822ec:	6819      	ldr	r1, [r3, #0]
 80822ee:	f008 fbd9 	bl	808aaa4 <__aeabi_fmul>
 80822f2:	4604      	mov	r4, r0
    float_offset = CO_zeroA;
 80822f4:	4b06      	ldr	r3, [pc, #24]	; (8082310 <_Z8readCO_Av+0x2c>)
 80822f6:	6818      	ldr	r0, [r3, #0]
 80822f8:	f008 fb80 	bl	808a9fc <__aeabi_i2f>
    float_offset /= 1000;
 80822fc:	4905      	ldr	r1, [pc, #20]	; (8082314 <_Z8readCO_Av+0x30>)
 80822fe:	f008 fc85 	bl	808ac0c <__aeabi_fdiv>
    CO_float += float_offset;
 8082302:	4621      	mov	r1, r4
 8082304:	f008 fac6 	bl	808a894 <__addsf3>
}
 8082308:	bd10      	pop	{r4, pc}
 808230a:	bf00      	nop
 808230c:	200002c8 	.word	0x200002c8
 8082310:	200002d4 	.word	0x200002d4
 8082314:	447a0000 	.word	0x447a0000

08082318 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8082318:	b510      	push	{r4, lr}
 808231a:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 808231c:	491d      	ldr	r1, [pc, #116]	; (8082394 <_Z12sendWifiInfov+0x7c>)
 808231e:	a808      	add	r0, sp, #32
 8082320:	f005 fffa 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082324:	491c      	ldr	r1, [pc, #112]	; (8082398 <_Z12sendWifiInfov+0x80>)
 8082326:	a804      	add	r0, sp, #16
 8082328:	f006 f835 	bl	8088396 <_ZN6StringC1ERKS_>
 808232c:	a904      	add	r1, sp, #16
 808232e:	a808      	add	r0, sp, #32
 8082330:	f006 f8cc 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 8082334:	4919      	ldr	r1, [pc, #100]	; (808239c <_Z12sendWifiInfov+0x84>)
 8082336:	f006 f8d5 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 808233a:	4604      	mov	r4, r0
 808233c:	4918      	ldr	r1, [pc, #96]	; (80823a0 <_Z12sendWifiInfov+0x88>)
 808233e:	a80c      	add	r0, sp, #48	; 0x30
 8082340:	f006 f829 	bl	8088396 <_ZN6StringC1ERKS_>
 8082344:	a90c      	add	r1, sp, #48	; 0x30
 8082346:	4620      	mov	r0, r4
 8082348:	f006 f8c0 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 808234c:	4915      	ldr	r1, [pc, #84]	; (80823a4 <_Z12sendWifiInfov+0x8c>)
 808234e:	f006 f8c9 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082352:	4601      	mov	r1, r0
 8082354:	4668      	mov	r0, sp
 8082356:	f006 f81e 	bl	8088396 <_ZN6StringC1ERKS_>
 808235a:	a80c      	add	r0, sp, #48	; 0x30
 808235c:	f005 ff92 	bl	8088284 <_ZN6StringD1Ev>
 8082360:	a804      	add	r0, sp, #16
 8082362:	f005 ff8f 	bl	8088284 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8082366:	a808      	add	r0, sp, #32
 8082368:	f005 ff8c 	bl	8088284 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 808236c:	f007 f9bc 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082370:	490d      	ldr	r1, [pc, #52]	; (80823a8 <_Z12sendWifiInfov+0x90>)
 8082372:	f006 f96c 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8082376:	f007 fcc1 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 808237a:	9900      	ldr	r1, [sp, #0]
 808237c:	f006 f967 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082380:	f007 f9b2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082384:	4909      	ldr	r1, [pc, #36]	; (80823ac <_Z12sendWifiInfov+0x94>)
 8082386:	f006 f962 	bl	808864e <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808238a:	4668      	mov	r0, sp
 808238c:	f005 ff7a 	bl	8088284 <_ZN6StringD1Ev>
}
 8082390:	b010      	add	sp, #64	; 0x40
 8082392:	bd10      	pop	{r4, pc}
 8082394:	0808d64d 	.word	0x0808d64d
 8082398:	20000a00 	.word	0x20000a00
 808239c:	0808d91e 	.word	0x0808d91e
 80823a0:	20000538 	.word	0x20000538
 80823a4:	0808ef33 	.word	0x0808ef33
 80823a8:	0808d650 	.word	0x0808d650
 80823ac:	0808d674 	.word	0x0808d674

080823b0 <_Z16goToSleepBatteryv>:
    enableLowPowerGPS();
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void){
 80823b0:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823b2:	4c2c      	ldr	r4, [pc, #176]	; (8082464 <_Z16goToSleepBatteryv+0xb4>)
 80823b4:	2101      	movs	r1, #1
 80823b6:	8820      	ldrh	r0, [r4, #0]
 80823b8:	f007 fc2f 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 80823bc:	20fa      	movs	r0, #250	; 0xfa
 80823be:	f006 fcb7 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823c2:	2100      	movs	r1, #0
 80823c4:	8820      	ldrh	r0, [r4, #0]
 80823c6:	f007 fc28 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 80823ca:	20fa      	movs	r0, #250	; 0xfa
 80823cc:	f006 fcb0 	bl	8088d30 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823d0:	2101      	movs	r1, #1
 80823d2:	8820      	ldrh	r0, [r4, #0]
 80823d4:	f007 fc21 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 80823d8:	20fa      	movs	r0, #250	; 0xfa
 80823da:	f006 fca9 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823de:	2100      	movs	r1, #0
 80823e0:	8820      	ldrh	r0, [r4, #0]
 80823e2:	f007 fc1a 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 80823e6:	20fa      	movs	r0, #250	; 0xfa
 80823e8:	f006 fca2 	bl	8088d30 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823ec:	2101      	movs	r1, #1
 80823ee:	8820      	ldrh	r0, [r4, #0]
 80823f0:	f007 fc13 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 80823f4:	20fa      	movs	r0, #250	; 0xfa
 80823f6:	f006 fc9b 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823fa:	2100      	movs	r1, #0
 80823fc:	8820      	ldrh	r0, [r4, #0]
 80823fe:	f007 fc0c 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 8082402:	20fa      	movs	r0, #250	; 0xfa
 8082404:	f006 fc94 	bl	8088d30 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082408:	2101      	movs	r1, #1
 808240a:	8820      	ldrh	r0, [r4, #0]
 808240c:	f007 fc05 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 8082410:	20fa      	movs	r0, #250	; 0xfa
 8082412:	f006 fc8d 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082416:	2100      	movs	r1, #0
 8082418:	8820      	ldrh	r0, [r4, #0]
 808241a:	f007 fbfe 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 808241e:	20fa      	movs	r0, #250	; 0xfa
 8082420:	f006 fc86 	bl	8088d30 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082424:	2101      	movs	r1, #1
 8082426:	8820      	ldrh	r0, [r4, #0]
 8082428:	f007 fbf7 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 808242c:	20fa      	movs	r0, #250	; 0xfa
 808242e:	f006 fc7f 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082432:	2100      	movs	r1, #0
 8082434:	8820      	ldrh	r0, [r4, #0]
 8082436:	f007 fbf0 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 808243a:	20fa      	movs	r0, #250	; 0xfa
 808243c:	f006 fc78 	bl	8088d30 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082440:	2101      	movs	r1, #1
 8082442:	8820      	ldrh	r0, [r4, #0]
 8082444:	f007 fbe9 	bl	8089c1a <digitalWrite>
    delay(250);                   // waits for a second
 8082448:	20fa      	movs	r0, #250	; 0xfa
 808244a:	f006 fc71 	bl	8088d30 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808244e:	8820      	ldrh	r0, [r4, #0]
 8082450:	2100      	movs	r1, #0
 8082452:	f007 fbe2 	bl	8089c1a <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 8082456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 808245a:	216b      	movs	r1, #107	; 0x6b
 808245c:	2007      	movs	r0, #7
 808245e:	f7fe bccd 	b.w	8080dfc <_Z13writeRegisterhh>
 8082462:	bf00      	nop
 8082464:	200000cc 	.word	0x200000cc

08082468 <_Z8resetESPv>:

void resetESP(void){
 8082468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 808246a:	4f17      	ldr	r7, [pc, #92]	; (80824c8 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 808246c:	4e17      	ldr	r6, [pc, #92]	; (80824cc <_Z8resetESPv+0x64>)
  digitalWrite(esp_wroom_en, LOW);
 808246e:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(blower_en, LOW);
 8082470:	4d17      	ldr	r5, [pc, #92]	; (80824d0 <_Z8resetESPv+0x68>)
  digitalWrite(esp_wroom_en, LOW);
 8082472:	2100      	movs	r1, #0
 8082474:	f007 fbd1 	bl	8089c1a <digitalWrite>
  digitalWrite(co2_en, LOW);
 8082478:	4c16      	ldr	r4, [pc, #88]	; (80824d4 <_Z8resetESPv+0x6c>)
  digitalWrite(plantower_en, LOW);
 808247a:	8830      	ldrh	r0, [r6, #0]
 808247c:	2100      	movs	r1, #0
 808247e:	f007 fbcc 	bl	8089c1a <digitalWrite>
  digitalWrite(blower_en, LOW);
 8082482:	8828      	ldrh	r0, [r5, #0]
 8082484:	2100      	movs	r1, #0
 8082486:	f007 fbc8 	bl	8089c1a <digitalWrite>
  digitalWrite(co2_en, LOW);
 808248a:	2100      	movs	r1, #0
 808248c:	8820      	ldrh	r0, [r4, #0]
 808248e:	f007 fbc4 	bl	8089c1a <digitalWrite>
  delay(1000);
 8082492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082496:	f006 fc4b 	bl	8088d30 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 808249a:	8838      	ldrh	r0, [r7, #0]
 808249c:	2101      	movs	r1, #1
 808249e:	f007 fbbc 	bl	8089c1a <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 80824a2:	8830      	ldrh	r0, [r6, #0]
 80824a4:	2101      	movs	r1, #1
 80824a6:	f007 fbb8 	bl	8089c1a <digitalWrite>
  digitalWrite(blower_en, HIGH);
 80824aa:	8828      	ldrh	r0, [r5, #0]
 80824ac:	2101      	movs	r1, #1
 80824ae:	f007 fbb4 	bl	8089c1a <digitalWrite>
  digitalWrite(co2_en, HIGH);
 80824b2:	8820      	ldrh	r0, [r4, #0]
 80824b4:	2101      	movs	r1, #1
 80824b6:	f007 fbb0 	bl	8089c1a <digitalWrite>
  delay(1000);
}
 80824ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 80824be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80824c2:	f006 bc35 	b.w	8088d30 <delay>
 80824c6:	bf00      	nop
 80824c8:	20000090 	.word	0x20000090
 80824cc:	200000c8 	.word	0x200000c8
 80824d0:	20000088 	.word	0x20000088
 80824d4:	2000008c 	.word	0x2000008c

080824d8 <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80824d8:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
{
 80824dc:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80824de:	4bc5      	ldr	r3, [pc, #788]	; (80827f4 <setup+0x31c>)
{
 80824e0:	b0a8      	sub	sp, #160	; 0xa0
    String init_log; //intialization error log
 80824e2:	49c5      	ldr	r1, [pc, #788]	; (80827f8 <setup+0x320>)
    pinMode(lmp91000_1_en, OUTPUT);
 80824e4:	4dc5      	ldr	r5, [pc, #788]	; (80827fc <setup+0x324>)
    String init_log; //intialization error log
 80824e6:	a801      	add	r0, sp, #4
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80824e8:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 80824ea:	4ec5      	ldr	r6, [pc, #788]	; (8082800 <setup+0x328>)
    String init_log; //intialization error log
 80824ec:	f005 ff14 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 80824f0:	2007      	movs	r0, #7
 80824f2:	f006 fc1b 	bl	8088d2c <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 80824f6:	2101      	movs	r1, #1
 80824f8:	8828      	ldrh	r0, [r5, #0]
 80824fa:	f007 fb7d 	bl	8089bf8 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80824fe:	2101      	movs	r1, #1
 8082500:	8830      	ldrh	r0, [r6, #0]
 8082502:	f007 fb79 	bl	8089bf8 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 8082506:	4bbf      	ldr	r3, [pc, #764]	; (8082804 <setup+0x32c>)
 8082508:	2101      	movs	r1, #1
 808250a:	8818      	ldrh	r0, [r3, #0]
 808250c:	f007 fb74 	bl	8089bf8 <pinMode>
    pinMode(plantower_en, OUTPUT);
 8082510:	4bbd      	ldr	r3, [pc, #756]	; (8082808 <setup+0x330>)
 8082512:	2101      	movs	r1, #1
 8082514:	8818      	ldrh	r0, [r3, #0]
 8082516:	f007 fb6f 	bl	8089bf8 <pinMode>
    pinMode(power_led_en, OUTPUT);
 808251a:	4bbc      	ldr	r3, [pc, #752]	; (808280c <setup+0x334>)
 808251c:	2101      	movs	r1, #1
 808251e:	8818      	ldrh	r0, [r3, #0]
 8082520:	f007 fb6a 	bl	8089bf8 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8082524:	4bba      	ldr	r3, [pc, #744]	; (8082810 <setup+0x338>)
 8082526:	2101      	movs	r1, #1
 8082528:	8818      	ldrh	r0, [r3, #0]
 808252a:	f007 fb65 	bl	8089bf8 <pinMode>
    pinMode(blower_en, OUTPUT);
 808252e:	4bb9      	ldr	r3, [pc, #740]	; (8082814 <setup+0x33c>)
 8082530:	2101      	movs	r1, #1
 8082532:	8818      	ldrh	r0, [r3, #0]
 8082534:	f007 fb60 	bl	8089bf8 <pinMode>
    pinMode(co2_en, OUTPUT);
 8082538:	4bb7      	ldr	r3, [pc, #732]	; (8082818 <setup+0x340>)
 808253a:	2101      	movs	r1, #1
 808253c:	8818      	ldrh	r0, [r3, #0]
 808253e:	f007 fb5b 	bl	8089bf8 <pinMode>
    readStoredVars();
 8082542:	f7fe fded 	bl	8081120 <_Z14readStoredVarsv>
    pmic.begin();
 8082546:	48b5      	ldr	r0, [pc, #724]	; (808281c <setup+0x344>)
 8082548:	f005 fbad 	bl	8087ca6 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 808254c:	f241 0170 	movw	r1, #4208	; 0x1070
 8082550:	48b2      	ldr	r0, [pc, #712]	; (808281c <setup+0x344>)
 8082552:	f005 fcdc 	bl	8087f0e <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 8082556:	48b1      	ldr	r0, [pc, #708]	; (808281c <setup+0x344>)
 8082558:	f005 fc84 	bl	8087e64 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 808255c:	4cb0      	ldr	r4, [pc, #704]	; (8082820 <setup+0x348>)
    writeRegister(0, 0b00110100);
 808255e:	2134      	movs	r1, #52	; 0x34
 8082560:	2000      	movs	r0, #0
 8082562:	f7fe fc4b 	bl	8080dfc <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8082566:	211b      	movs	r1, #27
 8082568:	2001      	movs	r0, #1
 808256a:	f7fe fc47 	bl	8080dfc <_Z13writeRegisterhh>
    powerCheck.loop();
 808256e:	4620      	mov	r0, r4
 8082570:	f002 fbd2 	bl	8084d18 <_ZN10PowerCheck4loopEv>
    if(powerCheck.getHasPower() == 0){
 8082574:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8082578:	2b00      	cmp	r3, #0
 808257a:	f040 8254 	bne.w	8082a26 <setup+0x54e>
        goToSleepBattery();
 808257e:	f7ff ff17 	bl	80823b0 <_Z16goToSleepBatteryv>
    digitalWrite(lmp91000_1_en, HIGH);
 8082582:	2101      	movs	r1, #1
 8082584:	8828      	ldrh	r0, [r5, #0]
 8082586:	f007 fb48 	bl	8089c1a <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808258a:	2101      	movs	r1, #1
 808258c:	8830      	ldrh	r0, [r6, #0]
 808258e:	f007 fb44 	bl	8089c1a <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8082592:	4b9e      	ldr	r3, [pc, #632]	; (808280c <setup+0x334>)
 8082594:	2101      	movs	r1, #1
 8082596:	8818      	ldrh	r0, [r3, #0]
 8082598:	f007 fb3f 	bl	8089c1a <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 808259c:	4b9a      	ldr	r3, [pc, #616]	; (8082808 <setup+0x330>)
 808259e:	2101      	movs	r1, #1
 80825a0:	8818      	ldrh	r0, [r3, #0]
 80825a2:	f007 fb3a 	bl	8089c1a <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80825a6:	4b9a      	ldr	r3, [pc, #616]	; (8082810 <setup+0x338>)
 80825a8:	2101      	movs	r1, #1
 80825aa:	8818      	ldrh	r0, [r3, #0]
 80825ac:	f007 fb35 	bl	8089c1a <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80825b0:	4b98      	ldr	r3, [pc, #608]	; (8082814 <setup+0x33c>)
 80825b2:	2101      	movs	r1, #1
 80825b4:	8818      	ldrh	r0, [r3, #0]
 80825b6:	f007 fb30 	bl	8089c1a <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80825ba:	4b97      	ldr	r3, [pc, #604]	; (8082818 <setup+0x340>)
 80825bc:	2101      	movs	r1, #1
 80825be:	8818      	ldrh	r0, [r3, #0]
 80825c0:	f007 fb2b 	bl	8089c1a <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80825c4:	4b8f      	ldr	r3, [pc, #572]	; (8082804 <setup+0x32c>)
 80825c6:	2101      	movs	r1, #1
 80825c8:	8818      	ldrh	r0, [r3, #0]
 80825ca:	f007 fb26 	bl	8089c1a <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80825ce:	4a95      	ldr	r2, [pc, #596]	; (8082824 <setup+0x34c>)
 80825d0:	4995      	ldr	r1, [pc, #596]	; (8082828 <setup+0x350>)
 80825d2:	4896      	ldr	r0, [pc, #600]	; (808282c <setup+0x354>)
 80825d4:	f006 fd73 	bl	80890be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80825d8:	2300      	movs	r3, #0
 80825da:	2202      	movs	r2, #2
 80825dc:	4994      	ldr	r1, [pc, #592]	; (8082830 <setup+0x358>)
 80825de:	4895      	ldr	r0, [pc, #596]	; (8082834 <setup+0x35c>)
 80825e0:	f005 faba 	bl	8087b58 <spark_variable>
    Serial1.begin(9600);
 80825e4:	f007 fb8a 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 80825e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80825ec:	f007 f98a 	bl	8089904 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 80825f0:	f7fe fb66 	bl	8080cc0 <_Z22__fetch_global_Serial4v>
 80825f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80825f8:	f007 f984 	bl	8089904 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 80825fc:	f7fe fb98 	bl	8080d30 <_Z22__fetch_global_Serial5v>
 8082600:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082604:	f007 f97e 	bl	8089904 <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 8082608:	f7fe fb5a 	bl	8080cc0 <_Z22__fetch_global_Serial4v>
 808260c:	f241 3188 	movw	r1, #5000	; 0x1388
 8082610:	f006 f972 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    delay(10000);
 8082614:	f242 7010 	movw	r0, #10000	; 0x2710
 8082618:	f006 fb8a 	bl	8088d30 <delay>
    Serial.begin(9600);
 808261c:	f007 f864 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082620:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082624:	f007 f854 	bl	80896d0 <_ZN9USBSerial5beginEl>
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8082628:	4b83      	ldr	r3, [pc, #524]	; (8082838 <setup+0x360>)
 808262a:	220a      	movs	r2, #10
 808262c:	6819      	ldr	r1, [r3, #0]
 808262e:	a805      	add	r0, sp, #20
 8082630:	f005 fed5 	bl	80883de <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8082634:	a905      	add	r1, sp, #20
 8082636:	a809      	add	r0, sp, #36	; 0x24
 8082638:	f005 fead 	bl	8088396 <_ZN6StringC1ERKS_>
 808263c:	497f      	ldr	r1, [pc, #508]	; (808283c <setup+0x364>)
 808263e:	a809      	add	r0, sp, #36	; 0x24
 8082640:	f005 ff50 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082644:	4604      	mov	r4, r0
 8082646:	f006 fb5b 	bl	8088d00 <_ZN9TimeClass4yearEv>
 808264a:	220a      	movs	r2, #10
 808264c:	4601      	mov	r1, r0
 808264e:	a80d      	add	r0, sp, #52	; 0x34
 8082650:	f005 fec5 	bl	80883de <_ZN6StringC1Eih>
 8082654:	a90d      	add	r1, sp, #52	; 0x34
 8082656:	4620      	mov	r0, r4
 8082658:	f005 ff38 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 808265c:	4604      	mov	r4, r0
 808265e:	f006 fb47 	bl	8088cf0 <_ZN9TimeClass5monthEv>
 8082662:	220a      	movs	r2, #10
 8082664:	4601      	mov	r1, r0
 8082666:	a811      	add	r0, sp, #68	; 0x44
 8082668:	f005 feb9 	bl	80883de <_ZN6StringC1Eih>
 808266c:	a911      	add	r1, sp, #68	; 0x44
 808266e:	4620      	mov	r0, r4
 8082670:	f005 ff2c 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 8082674:	4604      	mov	r4, r0
 8082676:	f006 fb2f 	bl	8088cd8 <_ZN9TimeClass3dayEv>
 808267a:	220a      	movs	r2, #10
 808267c:	4601      	mov	r1, r0
 808267e:	a815      	add	r0, sp, #84	; 0x54
 8082680:	f005 fead 	bl	80883de <_ZN6StringC1Eih>
 8082684:	4620      	mov	r0, r4
 8082686:	a915      	add	r1, sp, #84	; 0x54
 8082688:	f005 ff20 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 808268c:	496b      	ldr	r1, [pc, #428]	; (808283c <setup+0x364>)
 808268e:	f005 ff29 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082692:	4604      	mov	r4, r0
 8082694:	f006 fafc 	bl	8088c90 <_ZN9TimeClass4hourEv>
 8082698:	220a      	movs	r2, #10
 808269a:	4601      	mov	r1, r0
 808269c:	a819      	add	r0, sp, #100	; 0x64
 808269e:	f005 fe9e 	bl	80883de <_ZN6StringC1Eih>
 80826a2:	a919      	add	r1, sp, #100	; 0x64
 80826a4:	4620      	mov	r0, r4
 80826a6:	f005 ff11 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 80826aa:	4604      	mov	r4, r0
 80826ac:	f006 fafc 	bl	8088ca8 <_ZN9TimeClass6minuteEv>
 80826b0:	220a      	movs	r2, #10
 80826b2:	4601      	mov	r1, r0
 80826b4:	a81d      	add	r0, sp, #116	; 0x74
 80826b6:	f005 fe92 	bl	80883de <_ZN6StringC1Eih>
 80826ba:	a91d      	add	r1, sp, #116	; 0x74
 80826bc:	4620      	mov	r0, r4
 80826be:	f005 ff05 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 80826c2:	4604      	mov	r4, r0
 80826c4:	f006 fafc 	bl	8088cc0 <_ZN9TimeClass6secondEv>
 80826c8:	220a      	movs	r2, #10
 80826ca:	4601      	mov	r1, r0
 80826cc:	a821      	add	r0, sp, #132	; 0x84
 80826ce:	f005 fe86 	bl	80883de <_ZN6StringC1Eih>
 80826d2:	4620      	mov	r0, r4
 80826d4:	a921      	add	r1, sp, #132	; 0x84
 80826d6:	f005 fef9 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 80826da:	4959      	ldr	r1, [pc, #356]	; (8082840 <setup+0x368>)
 80826dc:	f005 ff02 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 80826e0:	4c58      	ldr	r4, [pc, #352]	; (8082844 <setup+0x36c>)
 80826e2:	4601      	mov	r1, r0
 80826e4:	4620      	mov	r0, r4
 80826e6:	f005 fe47 	bl	8088378 <_ZN6StringaSERKS_>
 80826ea:	a821      	add	r0, sp, #132	; 0x84
 80826ec:	f005 fdca 	bl	8088284 <_ZN6StringD1Ev>
 80826f0:	a81d      	add	r0, sp, #116	; 0x74
 80826f2:	f005 fdc7 	bl	8088284 <_ZN6StringD1Ev>
 80826f6:	a819      	add	r0, sp, #100	; 0x64
 80826f8:	f005 fdc4 	bl	8088284 <_ZN6StringD1Ev>
 80826fc:	a815      	add	r0, sp, #84	; 0x54
 80826fe:	f005 fdc1 	bl	8088284 <_ZN6StringD1Ev>
 8082702:	a811      	add	r0, sp, #68	; 0x44
 8082704:	f005 fdbe 	bl	8088284 <_ZN6StringD1Ev>
 8082708:	a80d      	add	r0, sp, #52	; 0x34
 808270a:	f005 fdbb 	bl	8088284 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808270e:	a809      	add	r0, sp, #36	; 0x24
 8082710:	f005 fdb8 	bl	8088284 <_ZN6StringD1Ev>
 8082714:	a805      	add	r0, sp, #20
 8082716:	f005 fdb5 	bl	8088284 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 808271a:	f006 ffe5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808271e:	494a      	ldr	r1, [pc, #296]	; (8082848 <setup+0x370>)
 8082720:	f005 ff95 	bl	808864e <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 8082724:	4949      	ldr	r1, [pc, #292]	; (808284c <setup+0x374>)
 8082726:	a821      	add	r0, sp, #132	; 0x84
 8082728:	f005 fdf6 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 808272c:	4621      	mov	r1, r4
 808272e:	a821      	add	r0, sp, #132	; 0x84
 8082730:	f005 fecc 	bl	80884cc <_ZplRK15StringSumHelperRK6String>
 8082734:	4601      	mov	r1, r0
 8082736:	4846      	ldr	r0, [pc, #280]	; (8082850 <setup+0x378>)
 8082738:	f005 fe1e 	bl	8088378 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 808273c:	a821      	add	r0, sp, #132	; 0x84
 808273e:	f005 fda1 	bl	8088284 <_ZN6StringD1Ev>
    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 8082742:	2202      	movs	r2, #2
 8082744:	210c      	movs	r1, #12
 8082746:	4843      	ldr	r0, [pc, #268]	; (8082854 <setup+0x37c>)
 8082748:	f7fe fb2a 	bl	8080da0 <_ZN5SdFat5beginEhh>
 808274c:	2800      	cmp	r0, #0
 808274e:	f000 817e 	beq.w	8082a4e <setup+0x576>
      Serial.print("Created new file to log to uSD card: ");
 8082752:	f006 ffc9 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082756:	4940      	ldr	r1, [pc, #256]	; (8082858 <setup+0x380>)
 8082758:	f005 ff66 	bl	8088628 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 808275c:	f006 ffc4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082760:	6821      	ldr	r1, [r4, #0]
    if(debugging_enabled)
 8082762:	4c3e      	ldr	r4, [pc, #248]	; (808285c <setup+0x384>)
        Serial.println("No uSD card detected.");
 8082764:	f005 ff73 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 8082768:	f006 ffbe 	bl	80896e8 <_Z16_fetch_usbserialv>
 808276c:	493c      	ldr	r1, [pc, #240]	; (8082860 <setup+0x388>)
 808276e:	f005 ff6e 	bl	808864e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082772:	6823      	ldr	r3, [r4, #0]
 8082774:	b14b      	cbz	r3, 808278a <setup+0x2b2>
        writeLogFile("Starting LMP91000 CO initialization");
 8082776:	493a      	ldr	r1, [pc, #232]	; (8082860 <setup+0x388>)
 8082778:	a821      	add	r0, sp, #132	; 0x84
 808277a:	f005 fdcd 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808277e:	a821      	add	r0, sp, #132	; 0x84
 8082780:	f7ff f970 	bl	8081a64 <_Z12writeLogFile6String>
 8082784:	a821      	add	r0, sp, #132	; 0x84
 8082786:	f005 fd7d 	bl	8088284 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 808278a:	f007 fb25 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808278e:	f007 f911 	bl	80899b4 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 8082792:	2100      	movs	r1, #0
 8082794:	8828      	ldrh	r0, [r5, #0]
 8082796:	f007 fa40 	bl	8089c1a <digitalWrite>
    if(lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 808279a:	2303      	movs	r3, #3
 808279c:	22b0      	movs	r2, #176	; 0xb0
 808279e:	2118      	movs	r1, #24
 80827a0:	4830      	ldr	r0, [pc, #192]	; (8082864 <setup+0x38c>)
 80827a2:	f002 fa63 	bl	8084c6c <_ZN8LMP910009configureEhhh>
 80827a6:	2800      	cmp	r0, #0
 80827a8:	f040 8155 	bne.w	8082a56 <setup+0x57e>
          Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80827ac:	f006 ff9c 	bl	80896e8 <_Z16_fetch_usbserialv>
 80827b0:	492d      	ldr	r1, [pc, #180]	; (8082868 <setup+0x390>)
 80827b2:	f005 ff4c 	bl	808864e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80827b6:	6823      	ldr	r3, [r4, #0]
 80827b8:	b14b      	cbz	r3, 80827ce <setup+0x2f6>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 80827ba:	492b      	ldr	r1, [pc, #172]	; (8082868 <setup+0x390>)
 80827bc:	a821      	add	r0, sp, #132	; 0x84
 80827be:	f005 fdab 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80827c2:	a821      	add	r0, sp, #132	; 0x84
 80827c4:	f7ff f94e 	bl	8081a64 <_Z12writeLogFile6String>
 80827c8:	a821      	add	r0, sp, #132	; 0x84
 80827ca:	f005 fd5b 	bl	8088284 <_ZN6StringD1Ev>
    ads1.begin();
 80827ce:	4827      	ldr	r0, [pc, #156]	; (808286c <setup+0x394>)
 80827d0:	f002 fb39 	bl	8084e46 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80827d4:	f007 fb00 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80827d8:	2201      	movs	r2, #1
 80827da:	2149      	movs	r1, #73	; 0x49
 80827dc:	f007 f919 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 80827e0:	2800      	cmp	r0, #0
 80827e2:	f040 814e 	bne.w	8082a82 <setup+0x5aa>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80827e6:	f006 ff7f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80827ea:	4921      	ldr	r1, [pc, #132]	; (8082870 <setup+0x398>)
 80827ec:	f005 ff2f 	bl	808864e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80827f0:	6823      	ldr	r3, [r4, #0]
 80827f2:	e03f      	b.n	8082874 <setup+0x39c>
 80827f4:	20000a10 	.word	0x20000a10
 80827f8:	0808f1d9 	.word	0x0808f1d9
 80827fc:	200000c0 	.word	0x200000c0
 8082800:	200000c4 	.word	0x200000c4
 8082804:	20000094 	.word	0x20000094
 8082808:	200000c8 	.word	0x200000c8
 808280c:	200000cc 	.word	0x200000cc
 8082810:	20000090 	.word	0x20000090
 8082814:	20000088 	.word	0x20000088
 8082818:	2000008c 	.word	0x2000008c
 808281c:	20000548 	.word	0x20000548
 8082820:	2000054c 	.word	0x2000054c
 8082824:	0808d67d 	.word	0x0808d67d
 8082828:	08080b71 	.word	0x08080b71
 808282c:	08089093 	.word	0x08089093
 8082830:	200002d4 	.word	0x200002d4
 8082834:	0808d68b 	.word	0x0808d68b
 8082838:	20000080 	.word	0x20000080
 808283c:	0808d6b1 	.word	0x0808d6b1
 8082840:	0808d694 	.word	0x0808d694
 8082844:	2000042c 	.word	0x2000042c
 8082848:	0808d699 	.word	0x0808d699
 808284c:	0808d6ae 	.word	0x0808d6ae
 8082850:	200004d8 	.word	0x200004d8
 8082854:	20000580 	.word	0x20000580
 8082858:	0808d6b3 	.word	0x0808d6b3
 808285c:	200003c8 	.word	0x200003c8
 8082860:	0808d6ef 	.word	0x0808d6ef
 8082864:	20000491 	.word	0x20000491
 8082868:	0808d713 	.word	0x0808d713
 808286c:	20000338 	.word	0x20000338
 8082870:	0808d779 	.word	0x0808d779
 8082874:	b14b      	cbz	r3, 808288a <setup+0x3b2>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082876:	4998      	ldr	r1, [pc, #608]	; (8082ad8 <setup+0x600>)
 8082878:	a821      	add	r0, sp, #132	; 0x84
 808287a:	f005 fd4d 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808287e:	a821      	add	r0, sp, #132	; 0x84
 8082880:	f7ff f8f0 	bl	8081a64 <_Z12writeLogFile6String>
 8082884:	a821      	add	r0, sp, #132	; 0x84
 8082886:	f005 fcfd 	bl	8088284 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000_2 initialization");
 808288a:	f006 ff2d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808288e:	4993      	ldr	r1, [pc, #588]	; (8082adc <setup+0x604>)
 8082890:	f005 fedd 	bl	808864e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082894:	6823      	ldr	r3, [r4, #0]
 8082896:	b14b      	cbz	r3, 80828ac <setup+0x3d4>
        writeLogFile("Starting LMP91000_2 initialization");
 8082898:	4990      	ldr	r1, [pc, #576]	; (8082adc <setup+0x604>)
 808289a:	a821      	add	r0, sp, #132	; 0x84
 808289c:	f005 fd3c 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80828a0:	a821      	add	r0, sp, #132	; 0x84
 80828a2:	f7ff f8df 	bl	8081a64 <_Z12writeLogFile6String>
 80828a6:	a821      	add	r0, sp, #132	; 0x84
 80828a8:	f005 fcec 	bl	8088284 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80828ac:	4d8c      	ldr	r5, [pc, #560]	; (8082ae0 <setup+0x608>)
    Wire.begin();   //this must be done for the LMP91000
 80828ae:	f007 fa93 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80828b2:	f007 f87f 	bl	80899b4 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80828b6:	2100      	movs	r1, #0
 80828b8:	8828      	ldrh	r0, [r5, #0]
 80828ba:	f007 f9ae 	bl	8089c1a <digitalWrite>
    if(lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80828be:	2303      	movs	r3, #3
 80828c0:	22b0      	movs	r2, #176	; 0xb0
 80828c2:	2118      	movs	r1, #24
 80828c4:	4887      	ldr	r0, [pc, #540]	; (8082ae4 <setup+0x60c>)
 80828c6:	f002 f9d1 	bl	8084c6c <_ZN8LMP910009configureEhhh>
 80828ca:	2800      	cmp	r0, #0
 80828cc:	f040 80de 	bne.w	8082a8c <setup+0x5b4>
          Serial.println("Couldn't communicate with LMP91000 for 2");
 80828d0:	f006 ff0a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80828d4:	4984      	ldr	r1, [pc, #528]	; (8082ae8 <setup+0x610>)
 80828d6:	f005 feba 	bl	808864e <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 80828da:	4983      	ldr	r1, [pc, #524]	; (8082ae8 <setup+0x610>)
 80828dc:	a821      	add	r0, sp, #132	; 0x84
 80828de:	f005 fd1b 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80828e2:	a821      	add	r0, sp, #132	; 0x84
 80828e4:	f7ff f8be 	bl	8081a64 <_Z12writeLogFile6String>
 80828e8:	a821      	add	r0, sp, #132	; 0x84
 80828ea:	f005 fccb 	bl	8088284 <_ZN6StringD1Ev>
    ads2.begin();
 80828ee:	487f      	ldr	r0, [pc, #508]	; (8082aec <setup+0x614>)
 80828f0:	f002 faa9 	bl	8084e46 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80828f4:	f007 fa70 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80828f8:	2201      	movs	r2, #1
 80828fa:	214a      	movs	r1, #74	; 0x4a
 80828fc:	f007 f889 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 8082900:	2800      	cmp	r0, #0
 8082902:	f040 80d9 	bne.w	8082ab8 <setup+0x5e0>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082906:	f006 feef 	bl	80896e8 <_Z16_fetch_usbserialv>
 808290a:	4973      	ldr	r1, [pc, #460]	; (8082ad8 <setup+0x600>)
 808290c:	f005 fe9f 	bl	808864e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082910:	6823      	ldr	r3, [r4, #0]
 8082912:	b14b      	cbz	r3, 8082928 <setup+0x450>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082914:	4970      	ldr	r1, [pc, #448]	; (8082ad8 <setup+0x600>)
 8082916:	a821      	add	r0, sp, #132	; 0x84
 8082918:	f005 fcfe 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808291c:	a821      	add	r0, sp, #132	; 0x84
 808291e:	f7ff f8a1 	bl	8081a64 <_Z12writeLogFile6String>
 8082922:	a821      	add	r0, sp, #132	; 0x84
 8082924:	f005 fcae 	bl	8088284 <_ZN6StringD1Ev>
    if(!t6713.begin()){
 8082928:	4871      	ldr	r0, [pc, #452]	; (8082af0 <setup+0x618>)
 808292a:	f002 fb7d 	bl	8085028 <_ZN13Telaire_T67135beginEv>
 808292e:	b958      	cbnz	r0, 8082948 <setup+0x470>
      if(debugging_enabled)
 8082930:	6823      	ldr	r3, [r4, #0]
 8082932:	b14b      	cbz	r3, 8082948 <setup+0x470>
          writeLogFile("Could not find a valid T6713");
 8082934:	496f      	ldr	r1, [pc, #444]	; (8082af4 <setup+0x61c>)
 8082936:	a821      	add	r0, sp, #132	; 0x84
 8082938:	f005 fcee 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808293c:	a821      	add	r0, sp, #132	; 0x84
 808293e:	f7ff f891 	bl	8081a64 <_Z12writeLogFile6String>
 8082942:	a821      	add	r0, sp, #132	; 0x84
 8082944:	f005 fc9e 	bl	8088284 <_ZN6StringD1Ev>
    if (!bme.begin()) {
 8082948:	2177      	movs	r1, #119	; 0x77
 808294a:	486b      	ldr	r0, [pc, #428]	; (8082af8 <setup+0x620>)
 808294c:	f004 fa58 	bl	8086e00 <_ZN15Adafruit_BME6805beginEh>
 8082950:	2800      	cmp	r0, #0
 8082952:	f040 80b6 	bne.w	8082ac2 <setup+0x5ea>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 8082956:	f006 fec7 	bl	80896e8 <_Z16_fetch_usbserialv>
 808295a:	4968      	ldr	r1, [pc, #416]	; (8082afc <setup+0x624>)
 808295c:	f005 fe77 	bl	808864e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082960:	6823      	ldr	r3, [r4, #0]
 8082962:	b14b      	cbz	r3, 8082978 <setup+0x4a0>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8082964:	4965      	ldr	r1, [pc, #404]	; (8082afc <setup+0x624>)
        writeLogFile("Initialized BME Sensor");
 8082966:	a821      	add	r0, sp, #132	; 0x84
 8082968:	f005 fcd6 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808296c:	a821      	add	r0, sp, #132	; 0x84
 808296e:	f7ff f879 	bl	8081a64 <_Z12writeLogFile6String>
 8082972:	a821      	add	r0, sp, #132	; 0x84
 8082974:	f005 fc86 	bl	8088284 <_ZN6StringD1Ev>
#if Wiring_LogConfig
    bool enableFeature(LoggingFeature feature);
#endif

    String version() {
        SystemVersionInfo info = {};
 8082978:	241c      	movs	r4, #28
    bme.setTemperatureOversampling(BME680_OS_8X);
 808297a:	2104      	movs	r1, #4
 808297c:	485e      	ldr	r0, [pc, #376]	; (8082af8 <setup+0x620>)
 808297e:	f004 f979 	bl	8086c74 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8082982:	2102      	movs	r1, #2
 8082984:	485c      	ldr	r0, [pc, #368]	; (8082af8 <setup+0x620>)
 8082986:	f004 f982 	bl	8086c8e <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 808298a:	2103      	movs	r1, #3
 808298c:	485a      	ldr	r0, [pc, #360]	; (8082af8 <setup+0x620>)
 808298e:	f004 f98b 	bl	8086ca8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8082992:	2102      	movs	r1, #2
 8082994:	4858      	ldr	r0, [pc, #352]	; (8082af8 <setup+0x620>)
 8082996:	f004 f994 	bl	8086cc2 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 808299a:	2296      	movs	r2, #150	; 0x96
 808299c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80829a0:	4855      	ldr	r0, [pc, #340]	; (8082af8 <setup+0x620>)
 80829a2:	f004 f959 	bl	8086c58 <_ZN15Adafruit_BME68012setGasHeaterEtt>
    resetESP();
 80829a6:	f7ff fd5f 	bl	8082468 <_Z8resetESPv>
    Serial.println("ESP reset!");
 80829aa:	f006 fe9d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80829ae:	4954      	ldr	r1, [pc, #336]	; (8082b00 <setup+0x628>)
 80829b0:	f005 fe4d 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 80829b4:	f006 fe98 	bl	80896e8 <_Z16_fetch_usbserialv>
 80829b8:	4952      	ldr	r1, [pc, #328]	; (8082b04 <setup+0x62c>)
 80829ba:	f005 fe35 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 80829be:	f006 fe93 	bl	80896e8 <_Z16_fetch_usbserialv>
 80829c2:	220a      	movs	r2, #10
 80829c4:	2146      	movs	r1, #70	; 0x46
 80829c6:	f7fe f93e 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.print("Build: ");
 80829ca:	f006 fe8d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80829ce:	494e      	ldr	r1, [pc, #312]	; (8082b08 <setup+0x630>)
 80829d0:	f005 fe2a 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 80829d4:	f006 fe88 	bl	80896e8 <_Z16_fetch_usbserialv>
 80829d8:	220a      	movs	r2, #10
 80829da:	210d      	movs	r1, #13
 80829dc:	f7fe f933 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    enableContinuousGPS();
 80829e0:	f7fe fe3a 	bl	8081658 <_Z19enableContinuousGPSv>
 80829e4:	4622      	mov	r2, r4
 80829e6:	2100      	movs	r1, #0
 80829e8:	a821      	add	r0, sp, #132	; 0x84
 80829ea:	f008 fcbe 	bl	808b36a <memset>
        info.size = sizeof(SystemVersionInfo);

        system_version_info(&info, nullptr);
 80829ee:	2100      	movs	r1, #0
 80829f0:	a821      	add	r0, sp, #132	; 0x84
        info.size = sizeof(SystemVersionInfo);
 80829f2:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
        system_version_info(&info, nullptr);
 80829f6:	f005 f809 	bl	8087a0c <system_version_info>
        return String(info.versionString);
 80829fa:	a923      	add	r1, sp, #140	; 0x8c
 80829fc:	a81d      	add	r0, sp, #116	; 0x74
 80829fe:	f005 fc8b 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("System version: %s", (const char*)System.version());
 8082a02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8082a04:	4941      	ldr	r1, [pc, #260]	; (8082b0c <setup+0x634>)
 8082a06:	4842      	ldr	r0, [pc, #264]	; (8082b10 <setup+0x638>)
 8082a08:	f7fe f941 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
 8082a0c:	a81d      	add	r0, sp, #116	; 0x74
 8082a0e:	f005 fc39 	bl	8088284 <_ZN6StringD1Ev>
    Serial.println(HEADER_STRING);
 8082a12:	f006 fe69 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082a16:	493f      	ldr	r1, [pc, #252]	; (8082b14 <setup+0x63c>)
 8082a18:	f005 fe19 	bl	808864e <_ZN5Print7printlnEPKc>
    String init_log; //intialization error log
 8082a1c:	a801      	add	r0, sp, #4
 8082a1e:	f005 fc31 	bl	8088284 <_ZN6StringD1Ev>
}
 8082a22:	b028      	add	sp, #160	; 0xa0
 8082a24:	bd70      	pop	{r4, r5, r6, pc}
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8082a26:	4b3c      	ldr	r3, [pc, #240]	; (8082b18 <setup+0x640>)
 8082a28:	681b      	ldr	r3, [r3, #0]
 8082a2a:	2b01      	cmp	r3, #1
 8082a2c:	f47f ada9 	bne.w	8082582 <setup+0xaa>
 8082a30:	483a      	ldr	r0, [pc, #232]	; (8082b1c <setup+0x644>)
 8082a32:	f006 f9fd 	bl	8088e30 <_ZN9FuelGauge6getSoCEv>
 8082a36:	493a      	ldr	r1, [pc, #232]	; (8082b20 <setup+0x648>)
 8082a38:	f008 f9d2 	bl	808ade0 <__aeabi_fcmplt>
 8082a3c:	2800      	cmp	r0, #0
 8082a3e:	f43f ada0 	beq.w	8082582 <setup+0xaa>
 8082a42:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8082a46:	2b00      	cmp	r3, #0
 8082a48:	f47f ad9b 	bne.w	8082582 <setup+0xaa>
 8082a4c:	e597      	b.n	808257e <setup+0xa6>
        Serial.println("No uSD card detected.");
 8082a4e:	f006 fe4b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082a52:	4934      	ldr	r1, [pc, #208]	; (8082b24 <setup+0x64c>)
 8082a54:	e685      	b.n	8082762 <setup+0x28a>
          Serial.println("Initialized LMP91000_1 for CO");
 8082a56:	f006 fe47 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082a5a:	4933      	ldr	r1, [pc, #204]	; (8082b28 <setup+0x650>)
 8082a5c:	f005 fdf7 	bl	808864e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082a60:	6823      	ldr	r3, [r4, #0]
 8082a62:	b14b      	cbz	r3, 8082a78 <setup+0x5a0>
            writeLogFile("Initialized LMP91000 for CO");
 8082a64:	4931      	ldr	r1, [pc, #196]	; (8082b2c <setup+0x654>)
 8082a66:	a821      	add	r0, sp, #132	; 0x84
 8082a68:	f005 fc56 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8082a6c:	a821      	add	r0, sp, #132	; 0x84
 8082a6e:	f7fe fff9 	bl	8081a64 <_Z12writeLogFile6String>
 8082a72:	a821      	add	r0, sp, #132	; 0x84
 8082a74:	f005 fc06 	bl	8088284 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082a78:	2101      	movs	r1, #1
 8082a7a:	8828      	ldrh	r0, [r5, #0]
 8082a7c:	f007 f8cd 	bl	8089c1a <digitalWrite>
 8082a80:	e6a5      	b.n	80827ce <setup+0x2f6>
      ads1.setGain(GAIN_TWOTHIRDS);
 8082a82:	2100      	movs	r1, #0
 8082a84:	482a      	ldr	r0, [pc, #168]	; (8082b30 <setup+0x658>)
 8082a86:	f002 f9e5 	bl	8084e54 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8082a8a:	e6fe      	b.n	808288a <setup+0x3b2>
          Serial.println("Initialized LMP91000 for CO 2");
 8082a8c:	f006 fe2c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082a90:	4928      	ldr	r1, [pc, #160]	; (8082b34 <setup+0x65c>)
 8082a92:	f005 fddc 	bl	808864e <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 8082a96:	6823      	ldr	r3, [r4, #0]
 8082a98:	b14b      	cbz	r3, 8082aae <setup+0x5d6>
            writeLogFile("Initialized LMP91000 for CO 2");
 8082a9a:	4926      	ldr	r1, [pc, #152]	; (8082b34 <setup+0x65c>)
 8082a9c:	a821      	add	r0, sp, #132	; 0x84
 8082a9e:	f005 fc3b 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8082aa2:	a821      	add	r0, sp, #132	; 0x84
 8082aa4:	f7fe ffde 	bl	8081a64 <_Z12writeLogFile6String>
 8082aa8:	a821      	add	r0, sp, #132	; 0x84
 8082aaa:	f005 fbeb 	bl	8088284 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 8082aae:	2101      	movs	r1, #1
 8082ab0:	8828      	ldrh	r0, [r5, #0]
 8082ab2:	f007 f8b2 	bl	8089c1a <digitalWrite>
 8082ab6:	e71a      	b.n	80828ee <setup+0x416>
      ads2.setGain(GAIN_TWOTHIRDS);
 8082ab8:	2100      	movs	r1, #0
 8082aba:	480c      	ldr	r0, [pc, #48]	; (8082aec <setup+0x614>)
 8082abc:	f002 f9ca 	bl	8084e54 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8082ac0:	e732      	b.n	8082928 <setup+0x450>
      Serial.println("Initialized BME Sensor");
 8082ac2:	f006 fe11 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082ac6:	491c      	ldr	r1, [pc, #112]	; (8082b38 <setup+0x660>)
 8082ac8:	f005 fdc1 	bl	808864e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082acc:	6823      	ldr	r3, [r4, #0]
 8082ace:	2b00      	cmp	r3, #0
 8082ad0:	f43f af52 	beq.w	8082978 <setup+0x4a0>
        writeLogFile("Initialized BME Sensor");
 8082ad4:	4918      	ldr	r1, [pc, #96]	; (8082b38 <setup+0x660>)
 8082ad6:	e746      	b.n	8082966 <setup+0x48e>
 8082ad8:	0808d779 	.word	0x0808d779
 8082adc:	0808d7ac 	.word	0x0808d7ac
 8082ae0:	200000c4 	.word	0x200000c4
 8082ae4:	20000492 	.word	0x20000492
 8082ae8:	0808d7cf 	.word	0x0808d7cf
 8082aec:	2000033e 	.word	0x2000033e
 8082af0:	20000a20 	.word	0x20000a20
 8082af4:	0808d816 	.word	0x0808d816
 8082af8:	20000348 	.word	0x20000348
 8082afc:	0808d833 	.word	0x0808d833
 8082b00:	0808d87e 	.word	0x0808d87e
 8082b04:	0808d889 	.word	0x0808d889
 8082b08:	0808d896 	.word	0x0808d896
 8082b0c:	0808d89e 	.word	0x0808d89e
 8082b10:	20000a9c 	.word	0x20000a9c
 8082b14:	0808d8b1 	.word	0x0808d8b1
 8082b18:	20000344 	.word	0x20000344
 8082b1c:	2000043c 	.word	0x2000043c
 8082b20:	41a00000 	.word	0x41a00000
 8082b24:	0808d6d9 	.word	0x0808d6d9
 8082b28:	0808d73f 	.word	0x0808d73f
 8082b2c:	0808d75d 	.word	0x0808d75d
 8082b30:	20000338 	.word	0x20000338
 8082b34:	0808d7f8 	.word	0x0808d7f8
 8082b38:	0808d867 	.word	0x0808d867

08082b3c <_Z12outputCOtoPIv>:
  Serial.println("Exiting serial menu...");

}

void outputCOtoPI(void)
{
 8082b3c:	b500      	push	{lr}
    // String CO_string = "*";
    // Serial.println("Outputting CO to PI.");
    

    // CO_string += String(measurement_number, 0) + ",";
    String CO_string = String(DEVICE_id)+",";
 8082b3e:	4bb7      	ldr	r3, [pc, #732]	; (8082e1c <_Z12outputCOtoPIv+0x2e0>)
{
 8082b40:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = String(DEVICE_id)+",";
 8082b42:	6819      	ldr	r1, [r3, #0]
 8082b44:	220a      	movs	r2, #10
 8082b46:	a806      	add	r0, sp, #24
 8082b48:	f005 fc49 	bl	80883de <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8082b4c:	a906      	add	r1, sp, #24
 8082b4e:	a80a      	add	r0, sp, #40	; 0x28
 8082b50:	f005 fc21 	bl	8088396 <_ZN6StringC1ERKS_>
 8082b54:	49b2      	ldr	r1, [pc, #712]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082b56:	a80a      	add	r0, sp, #40	; 0x28
 8082b58:	f005 fcc4 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082b5c:	4601      	mov	r1, r0
 8082b5e:	a802      	add	r0, sp, #8
 8082b60:	f005 fc19 	bl	8088396 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 8082b64:	a80a      	add	r0, sp, #40	; 0x28
 8082b66:	f005 fb8d 	bl	8088284 <_ZN6StringD1Ev>
 8082b6a:	a806      	add	r0, sp, #24
 8082b6c:	f005 fb8a 	bl	8088284 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 2) + ",";
 8082b70:	4bac      	ldr	r3, [pc, #688]	; (8082e24 <_Z12outputCOtoPIv+0x2e8>)
 8082b72:	2202      	movs	r2, #2
 8082b74:	6819      	ldr	r1, [r3, #0]
 8082b76:	a806      	add	r0, sp, #24
 8082b78:	f005 fc44 	bl	8088404 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082b7c:	a906      	add	r1, sp, #24
 8082b7e:	a80a      	add	r0, sp, #40	; 0x28
 8082b80:	f005 fc09 	bl	8088396 <_ZN6StringC1ERKS_>
 8082b84:	49a6      	ldr	r1, [pc, #664]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082b86:	a80a      	add	r0, sp, #40	; 0x28
 8082b88:	f005 fcac 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082b8c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082b8e:	a802      	add	r0, sp, #8
 8082b90:	f005 fc7c 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082b94:	a80a      	add	r0, sp, #40	; 0x28
 8082b96:	f005 fb75 	bl	8088284 <_ZN6StringD1Ev>
 8082b9a:	a806      	add	r0, sp, #24
 8082b9c:	f005 fb72 	bl	8088284 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 2) + ",";
 8082ba0:	4ba1      	ldr	r3, [pc, #644]	; (8082e28 <_Z12outputCOtoPIv+0x2ec>)
 8082ba2:	2202      	movs	r2, #2
 8082ba4:	6819      	ldr	r1, [r3, #0]
 8082ba6:	a806      	add	r0, sp, #24
 8082ba8:	f005 fc2c 	bl	8088404 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082bac:	a906      	add	r1, sp, #24
 8082bae:	a80a      	add	r0, sp, #40	; 0x28
 8082bb0:	f005 fbf1 	bl	8088396 <_ZN6StringC1ERKS_>
 8082bb4:	499a      	ldr	r1, [pc, #616]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082bb6:	a80a      	add	r0, sp, #40	; 0x28
 8082bb8:	f005 fc94 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082bbc:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082bbe:	a802      	add	r0, sp, #8
 8082bc0:	f005 fc64 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082bc4:	a80a      	add	r0, sp, #40	; 0x28
 8082bc6:	f005 fb5d 	bl	8088284 <_ZN6StringD1Ev>
 8082bca:	a806      	add	r0, sp, #24
 8082bcc:	f005 fb5a 	bl	8088284 <_ZN6StringD1Ev>
    CO_string += String(CO2_float, 1) + ",";
 8082bd0:	4b96      	ldr	r3, [pc, #600]	; (8082e2c <_Z12outputCOtoPIv+0x2f0>)
 8082bd2:	2201      	movs	r2, #1
 8082bd4:	6819      	ldr	r1, [r3, #0]
 8082bd6:	a806      	add	r0, sp, #24
 8082bd8:	f005 fc14 	bl	8088404 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082bdc:	a906      	add	r1, sp, #24
 8082bde:	a80a      	add	r0, sp, #40	; 0x28
 8082be0:	f005 fbd9 	bl	8088396 <_ZN6StringC1ERKS_>
 8082be4:	498e      	ldr	r1, [pc, #568]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082be6:	a80a      	add	r0, sp, #40	; 0x28
 8082be8:	f005 fc7c 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082bec:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082bee:	a802      	add	r0, sp, #8
 8082bf0:	f005 fc4c 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082bf4:	a80a      	add	r0, sp, #40	; 0x28
 8082bf6:	f005 fb45 	bl	8088284 <_ZN6StringD1Ev>
 8082bfa:	a806      	add	r0, sp, #24
 8082bfc:	f005 fb42 	bl	8088284 <_ZN6StringD1Ev>
    CO_string += String(bme.pressure/100.0, 1) +",";
 8082c00:	4b8b      	ldr	r3, [pc, #556]	; (8082e30 <_Z12outputCOtoPIv+0x2f4>)
 8082c02:	6858      	ldr	r0, [r3, #4]
 8082c04:	f007 faa0 	bl	808a148 <__aeabi_f2d>
 8082c08:	2200      	movs	r2, #0
 8082c0a:	4b8a      	ldr	r3, [pc, #552]	; (8082e34 <_Z12outputCOtoPIv+0x2f8>)
 8082c0c:	f007 fc1e 	bl	808a44c <__aeabi_ddiv>
 8082c10:	460b      	mov	r3, r1
 8082c12:	2101      	movs	r1, #1
 8082c14:	4602      	mov	r2, r0
 8082c16:	9100      	str	r1, [sp, #0]
 8082c18:	a806      	add	r0, sp, #24
 8082c1a:	f005 fc0a 	bl	8088432 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082c1e:	a906      	add	r1, sp, #24
 8082c20:	a80a      	add	r0, sp, #40	; 0x28
 8082c22:	f005 fbb8 	bl	8088396 <_ZN6StringC1ERKS_>
 8082c26:	497e      	ldr	r1, [pc, #504]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082c28:	a80a      	add	r0, sp, #40	; 0x28
 8082c2a:	f005 fc5b 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082c2e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082c30:	a802      	add	r0, sp, #8
 8082c32:	f005 fc2b 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082c36:	a80a      	add	r0, sp, #40	; 0x28
 8082c38:	f005 fb24 	bl	8088284 <_ZN6StringD1Ev>
 8082c3c:	a806      	add	r0, sp, #24
 8082c3e:	f005 fb21 	bl	8088284 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8082c42:	487d      	ldr	r0, [pc, #500]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082c44:	f002 f9d4 	bl	8084ff0 <_ZN3GPS12get_latitudeEv>
 8082c48:	2200      	movs	r2, #0
 8082c4a:	2300      	movs	r3, #0
 8082c4c:	f007 fd3c 	bl	808a6c8 <__aeabi_dcmpeq>
 8082c50:	2800      	cmp	r0, #0
 8082c52:	f040 80d8 	bne.w	8082e06 <_Z12outputCOtoPIv+0x2ca>
        if(gps.get_nsIndicator() == 0){
 8082c56:	4878      	ldr	r0, [pc, #480]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082c58:	f002 f9db 	bl	8085012 <_ZN3GPS15get_nsIndicatorEv>
 8082c5c:	b918      	cbnz	r0, 8082c66 <_Z12outputCOtoPIv+0x12a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082c5e:	4977      	ldr	r1, [pc, #476]	; (8082e3c <_Z12outputCOtoPIv+0x300>)
 8082c60:	a802      	add	r0, sp, #8
 8082c62:	f005 fc17 	bl	8088494 <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 8082c66:	4874      	ldr	r0, [pc, #464]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082c68:	f002 f9c2 	bl	8084ff0 <_ZN3GPS12get_latitudeEv>
 8082c6c:	460b      	mov	r3, r1
 8082c6e:	2106      	movs	r1, #6
 8082c70:	4602      	mov	r2, r0
 8082c72:	9100      	str	r1, [sp, #0]
 8082c74:	a806      	add	r0, sp, #24
 8082c76:	f005 fbdc 	bl	8088432 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082c7a:	a906      	add	r1, sp, #24
 8082c7c:	a80a      	add	r0, sp, #40	; 0x28
 8082c7e:	f005 fb8a 	bl	8088396 <_ZN6StringC1ERKS_>
        
    }else{
        CO_string += String(geolocation_latitude)+ ",";
 8082c82:	4967      	ldr	r1, [pc, #412]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082c84:	a80a      	add	r0, sp, #40	; 0x28
 8082c86:	f005 fc2d 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082c8a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082c8c:	a802      	add	r0, sp, #8
 8082c8e:	f005 fbfd 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082c92:	a80a      	add	r0, sp, #40	; 0x28
 8082c94:	f005 faf6 	bl	8088284 <_ZN6StringD1Ev>
 8082c98:	a806      	add	r0, sp, #24
 8082c9a:	f005 faf3 	bl	8088284 <_ZN6StringD1Ev>
    }

    if(gps.get_longitude() != 0){
 8082c9e:	4866      	ldr	r0, [pc, #408]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082ca0:	f002 f9ab 	bl	8084ffa <_ZN3GPS13get_longitudeEv>
 8082ca4:	2200      	movs	r2, #0
 8082ca6:	2300      	movs	r3, #0
 8082ca8:	f007 fd0e 	bl	808a6c8 <__aeabi_dcmpeq>
 8082cac:	2800      	cmp	r0, #0
 8082cae:	f040 80af 	bne.w	8082e10 <_Z12outputCOtoPIv+0x2d4>
        if(gps.get_ewIndicator() == 0x01){
 8082cb2:	4861      	ldr	r0, [pc, #388]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082cb4:	f002 f9b0 	bl	8085018 <_ZN3GPS15get_ewIndicatorEv>
 8082cb8:	2801      	cmp	r0, #1
 8082cba:	d103      	bne.n	8082cc4 <_Z12outputCOtoPIv+0x188>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082cbc:	495f      	ldr	r1, [pc, #380]	; (8082e3c <_Z12outputCOtoPIv+0x300>)
 8082cbe:	a802      	add	r0, sp, #8
 8082cc0:	f005 fbe8 	bl	8088494 <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 8082cc4:	485c      	ldr	r0, [pc, #368]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082cc6:	f002 f998 	bl	8084ffa <_ZN3GPS13get_longitudeEv>
 8082cca:	460b      	mov	r3, r1
 8082ccc:	2106      	movs	r1, #6
 8082cce:	4602      	mov	r2, r0
 8082cd0:	9100      	str	r1, [sp, #0]
 8082cd2:	a806      	add	r0, sp, #24
 8082cd4:	f005 fbad 	bl	8088432 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082cd8:	a906      	add	r1, sp, #24
 8082cda:	a80a      	add	r0, sp, #40	; 0x28
 8082cdc:	f005 fb5b 	bl	8088396 <_ZN6StringC1ERKS_>
    }else{
        CO_string += String(geolocation_longitude) + ",";
 8082ce0:	494f      	ldr	r1, [pc, #316]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082ce2:	a80a      	add	r0, sp, #40	; 0x28
 8082ce4:	f005 fbfe 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082ce8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082cea:	a802      	add	r0, sp, #8
 8082cec:	f005 fbce 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082cf0:	a80a      	add	r0, sp, #40	; 0x28
 8082cf2:	f005 fac7 	bl	8088284 <_ZN6StringD1Ev>
 8082cf6:	a806      	add	r0, sp, #24
 8082cf8:	f005 fac4 	bl	8088284 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082cfc:	484e      	ldr	r0, [pc, #312]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082cfe:	f002 f97c 	bl	8084ffa <_ZN3GPS13get_longitudeEv>
 8082d02:	2200      	movs	r2, #0
 8082d04:	2300      	movs	r3, #0
 8082d06:	f007 fcdf 	bl	808a6c8 <__aeabi_dcmpeq>
 8082d0a:	2800      	cmp	r0, #0
 8082d0c:	f040 80a6 	bne.w	8082e5c <_Z12outputCOtoPIv+0x320>
    {
        CO_string += String(gps.get_satellites())+",";
 8082d10:	4849      	ldr	r0, [pc, #292]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082d12:	f002 f977 	bl	8085004 <_ZN3GPS14get_satellitesEv>
 8082d16:	220a      	movs	r2, #10
 8082d18:	4601      	mov	r1, r0
 8082d1a:	a806      	add	r0, sp, #24
 8082d1c:	f005 fb5f 	bl	80883de <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8082d20:	a906      	add	r1, sp, #24
 8082d22:	a80a      	add	r0, sp, #40	; 0x28
 8082d24:	f005 fb37 	bl	8088396 <_ZN6StringC1ERKS_>
 8082d28:	493d      	ldr	r1, [pc, #244]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082d2a:	a80a      	add	r0, sp, #40	; 0x28
 8082d2c:	f005 fbda 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082d30:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082d32:	a802      	add	r0, sp, #8
 8082d34:	f005 fbaa 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082d38:	a80a      	add	r0, sp, #40	; 0x28
 8082d3a:	f005 faa3 	bl	8088284 <_ZN6StringD1Ev>
 8082d3e:	a806      	add	r0, sp, #24
 8082d40:	f005 faa0 	bl	8088284 <_ZN6StringD1Ev>
    }
    else
    {
        CO_string += "0,";
    }
    if (gps.get_longitude() != 0) {
 8082d44:	483c      	ldr	r0, [pc, #240]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082d46:	f002 f958 	bl	8084ffa <_ZN3GPS13get_longitudeEv>
 8082d4a:	2200      	movs	r2, #0
 8082d4c:	2300      	movs	r3, #0
 8082d4e:	f007 fcbb 	bl	808a6c8 <__aeabi_dcmpeq>
 8082d52:	2800      	cmp	r0, #0
 8082d54:	f040 8087 	bne.w	8082e66 <_Z12outputCOtoPIv+0x32a>
        CO_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 8082d58:	4837      	ldr	r0, [pc, #220]	; (8082e38 <_Z12outputCOtoPIv+0x2fc>)
 8082d5a:	f002 f955 	bl	8085008 <_ZN3GPS23get_horizontalDillutionEv>
 8082d5e:	f007 f9e1 	bl	808a124 <__aeabi_i2d>
 8082d62:	2200      	movs	r2, #0
 8082d64:	4b36      	ldr	r3, [pc, #216]	; (8082e40 <_Z12outputCOtoPIv+0x304>)
 8082d66:	f007 fb71 	bl	808a44c <__aeabi_ddiv>
 8082d6a:	460b      	mov	r3, r1
 8082d6c:	2106      	movs	r1, #6
 8082d6e:	4602      	mov	r2, r0
 8082d70:	9100      	str	r1, [sp, #0]
 8082d72:	a806      	add	r0, sp, #24
 8082d74:	f005 fb5d 	bl	8088432 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082d78:	a906      	add	r1, sp, #24
 8082d7a:	a80a      	add	r0, sp, #40	; 0x28
 8082d7c:	f005 fb0b 	bl	8088396 <_ZN6StringC1ERKS_>
    } else {
        CO_string += String(geolocation_accuracy) + ",";
 8082d80:	4927      	ldr	r1, [pc, #156]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082d82:	a80a      	add	r0, sp, #40	; 0x28
 8082d84:	f005 fbae 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082d88:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082d8a:	a802      	add	r0, sp, #8
 8082d8c:	f005 fb7e 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082d90:	a80a      	add	r0, sp, #40	; 0x28
 8082d92:	f005 fa77 	bl	8088284 <_ZN6StringD1Ev>
 8082d96:	a806      	add	r0, sp, #24
 8082d98:	f005 fa74 	bl	8088284 <_ZN6StringD1Ev>
    }

    CO_string += String(fuel.getSoC(), 2)+",";
 8082d9c:	4829      	ldr	r0, [pc, #164]	; (8082e44 <_Z12outputCOtoPIv+0x308>)
 8082d9e:	f006 f847 	bl	8088e30 <_ZN9FuelGauge6getSoCEv>
 8082da2:	2202      	movs	r2, #2
 8082da4:	4601      	mov	r1, r0
 8082da6:	a806      	add	r0, sp, #24
 8082da8:	f005 fb2c 	bl	8088404 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082dac:	a906      	add	r1, sp, #24
 8082dae:	a80a      	add	r0, sp, #40	; 0x28
 8082db0:	f005 faf1 	bl	8088396 <_ZN6StringC1ERKS_>
 8082db4:	491a      	ldr	r1, [pc, #104]	; (8082e20 <_Z12outputCOtoPIv+0x2e4>)
 8082db6:	a80a      	add	r0, sp, #40	; 0x28
 8082db8:	f005 fb94 	bl	80884e4 <_ZplRK15StringSumHelperPKc>
 8082dbc:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082dbe:	a802      	add	r0, sp, #8
 8082dc0:	f005 fb64 	bl	808848c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082dc4:	a80a      	add	r0, sp, #40	; 0x28
 8082dc6:	f005 fa5d 	bl	8088284 <_ZN6StringD1Ev>
 8082dca:	a806      	add	r0, sp, #24
 8082dcc:	f005 fa5a 	bl	8088284 <_ZN6StringD1Ev>
    CO_string += String(Time.format(systemTime, "%y/%m/%d,%H:%M:%S"));
 8082dd0:	4b1d      	ldr	r3, [pc, #116]	; (8082e48 <_Z12outputCOtoPIv+0x30c>)
 8082dd2:	a80a      	add	r0, sp, #40	; 0x28
 8082dd4:	9300      	str	r3, [sp, #0]
 8082dd6:	4b1d      	ldr	r3, [pc, #116]	; (8082e4c <_Z12outputCOtoPIv+0x310>)
 8082dd8:	491d      	ldr	r1, [pc, #116]	; (8082e50 <_Z12outputCOtoPIv+0x314>)
 8082dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082dde:	f005 fee7 	bl	8088bb0 <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082de2:	a90a      	add	r1, sp, #40	; 0x28
 8082de4:	a802      	add	r0, sp, #8
 8082de6:	f005 fb51 	bl	808848c <_ZN6String6concatERKS_>
 8082dea:	a80a      	add	r0, sp, #40	; 0x28
 8082dec:	f005 fa4a 	bl	8088284 <_ZN6StringD1Ev>
    //get a current time string
    
    // CO_string += "\n\r&";
    // Serial1.print(CO_string);
    Serial.println(CO_string);
 8082df0:	f006 fc7a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082df4:	9902      	ldr	r1, [sp, #8]
 8082df6:	f005 fc2a 	bl	808864e <_ZN5Print7printlnEPKc>
    String CO_string = String(DEVICE_id)+",";
 8082dfa:	a802      	add	r0, sp, #8
 8082dfc:	f005 fa42 	bl	8088284 <_ZN6StringD1Ev>
    //send ending delimeter
    //Serial1.print("&");
}
 8082e00:	b00f      	add	sp, #60	; 0x3c
 8082e02:	f85d fb04 	ldr.w	pc, [sp], #4
        CO_string += String(geolocation_latitude)+ ",";
 8082e06:	4913      	ldr	r1, [pc, #76]	; (8082e54 <_Z12outputCOtoPIv+0x318>)
 8082e08:	a806      	add	r0, sp, #24
 8082e0a:	f005 fa85 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8082e0e:	e734      	b.n	8082c7a <_Z12outputCOtoPIv+0x13e>
        CO_string += String(geolocation_longitude) + ",";
 8082e10:	4911      	ldr	r1, [pc, #68]	; (8082e58 <_Z12outputCOtoPIv+0x31c>)
 8082e12:	a806      	add	r0, sp, #24
 8082e14:	f005 fa80 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8082e18:	e75e      	b.n	8082cd8 <_Z12outputCOtoPIv+0x19c>
 8082e1a:	bf00      	nop
 8082e1c:	20000080 	.word	0x20000080
 8082e20:	0808d91e 	.word	0x0808d91e
 8082e24:	200002c0 	.word	0x200002c0
 8082e28:	200002c4 	.word	0x200002c4
 8082e2c:	200002b0 	.word	0x200002b0
 8082e30:	20000348 	.word	0x20000348
 8082e34:	40590000 	.word	0x40590000
 8082e38:	20000448 	.word	0x20000448
 8082e3c:	0808d91b 	.word	0x0808d91b
 8082e40:	40240000 	.word	0x40240000
 8082e44:	2000043c 	.word	0x2000043c
 8082e48:	0808d920 	.word	0x0808d920
 8082e4c:	20000a18 	.word	0x20000a18
 8082e50:	20000aa0 	.word	0x20000aa0
 8082e54:	200000a6 	.word	0x200000a6
 8082e58:	200000b2 	.word	0x200000b2
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082e5c:	4904      	ldr	r1, [pc, #16]	; (8082e70 <_Z12outputCOtoPIv+0x334>)
 8082e5e:	a802      	add	r0, sp, #8
 8082e60:	f005 fb18 	bl	8088494 <_ZN6String6concatEPKc>
 8082e64:	e76e      	b.n	8082d44 <_Z12outputCOtoPIv+0x208>
        CO_string += String(geolocation_accuracy) + ",";
 8082e66:	4903      	ldr	r1, [pc, #12]	; (8082e74 <_Z12outputCOtoPIv+0x338>)
 8082e68:	a806      	add	r0, sp, #24
 8082e6a:	f005 fa55 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8082e6e:	e783      	b.n	8082d78 <_Z12outputCOtoPIv+0x23c>
 8082e70:	0808d91d 	.word	0x0808d91d
 8082e74:	200000a0 	.word	0x200000a0

08082e78 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8082e78:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8082e7a:	481d      	ldr	r0, [pc, #116]	; (8082ef0 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082e7c:	f004 ff6c 	bl	8087d58 <_ZN4PMIC20getInputCurrentLimitEv>
 8082e80:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8082e82:	f006 fc31 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082e86:	462a      	mov	r2, r5
 8082e88:	491a      	ldr	r1, [pc, #104]	; (8082ef4 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8082e8a:	f7fd fef2 	bl	8080c72 <_ZN5Print6printfEPKcz>

    if(inputCurrent == 100){
 8082e8e:	2d64      	cmp	r5, #100	; 0x64
 8082e90:	d01f      	beq.n	8082ed2 <_Z26serialIncreaseInputCurrentv+0x5a>
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8082e92:	2d96      	cmp	r5, #150	; 0x96
 8082e94:	d01f      	beq.n	8082ed6 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8082e96:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082e9a:	d01f      	beq.n	8082edc <_Z26serialIncreaseInputCurrentv+0x64>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8082e9c:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8082ea0:	d01f      	beq.n	8082ee2 <_Z26serialIncreaseInputCurrentv+0x6a>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8082ea2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082ea6:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8082eaa:	d007      	beq.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8082eac:	42a5      	cmp	r5, r4
 8082eae:	d01b      	beq.n	8082ee8 <_Z26serialIncreaseInputCurrentv+0x70>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 8082eb0:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8082eb4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082eb8:	bf18      	it	ne
 8082eba:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8082ebc:	b2a1      	uxth	r1, r4
 8082ebe:	480c      	ldr	r0, [pc, #48]	; (8082ef0 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082ec0:	f004 ff89 	bl	8087dd6 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8082ec4:	f006 fc10 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082ec8:	4622      	mov	r2, r4
 8082eca:	490b      	ldr	r1, [pc, #44]	; (8082ef8 <_Z26serialIncreaseInputCurrentv+0x80>)
 8082ecc:	f7fd fed1 	bl	8080c72 <_ZN5Print6printfEPKcz>
}
 8082ed0:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 8082ed2:	2496      	movs	r4, #150	; 0x96
 8082ed4:	e7f2      	b.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 8082ed6:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8082eda:	e7ef      	b.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 8082edc:	f44f 7461 	mov.w	r4, #900	; 0x384
 8082ee0:	e7ec      	b.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 8082ee2:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8082ee6:	e7e9      	b.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 8082ee8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8082eec:	e7e6      	b.n	8082ebc <_Z26serialIncreaseInputCurrentv+0x44>
 8082eee:	bf00      	nop
 8082ef0:	20000548 	.word	0x20000548
 8082ef4:	0808d932 	.word	0x0808d932
 8082ef8:	0808d950 	.word	0x0808d950

08082efc <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void){
 8082efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8082efe:	482d      	ldr	r0, [pc, #180]	; (8082fb4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082f00:	f004 ff36 	bl	8087d70 <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 8082f04:	f010 0f80 	tst.w	r0, #128	; 0x80
 8082f08:	bf0c      	ite	eq
 8082f0a:	2500      	moveq	r5, #0
 8082f0c:	f44f 6500 	movne.w	r5, #2048	; 0x800
    byte chargeCurrent = pmic.getChargeCurrent();
 8082f10:	4604      	mov	r4, r0
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8082f12:	0643      	lsls	r3, r0, #25
        total_current += 1024;
 8082f14:	bf48      	it	mi
 8082f16:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8082f1a:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8082f1c:	bf48      	it	mi
 8082f1e:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8082f22:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 8082f24:	bf48      	it	mi
 8082f26:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8082f2a:	0721      	lsls	r1, r4, #28
        total_current += 128;
 8082f2c:	bf48      	it	mi
 8082f2e:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8082f30:	0762      	lsls	r2, r4, #29
        total_current += 64;
 8082f32:	bf48      	it	mi
 8082f34:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
 8082f36:	3404      	adds	r4, #4
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8082f38:	f006 fbd6 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082f3c:	491e      	ldr	r1, [pc, #120]	; (8082fb8 <_Z27serialIncreaseChargeCurrentv+0xbc>)
 8082f3e:	462a      	mov	r2, r5
 8082f40:	f7fd fe97 	bl	8080c72 <_ZN5Print6printfEPKcz>
    total_current = 0;

    if(chargeCurrent & 0x80){
 8082f44:	0623      	lsls	r3, r4, #24
    bool bit7 = 0;
 8082f46:	bf58      	it	pl
 8082f48:	2100      	movpl	r1, #0
    chargeCurrent += 4;
 8082f4a:	b2e0      	uxtb	r0, r4
    total_current = 0;
 8082f4c:	bf52      	itee	pl
 8082f4e:	460c      	movpl	r4, r1
        total_current += 2048;
 8082f50:	f44f 6400 	movmi.w	r4, #2048	; 0x800
        bit7 = 1;
 8082f54:	2101      	movmi	r1, #1
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8082f56:	f010 0240 	ands.w	r2, r0, #64	; 0x40
        total_current += 1024;
 8082f5a:	bf1c      	itt	ne
 8082f5c:	f504 6480 	addne.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8082f60:	2201      	movne	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8082f62:	f010 0320 	ands.w	r3, r0, #32
        total_current += 512;
        bit5 = 1;
 8082f66:	bf1c      	itt	ne
 8082f68:	2301      	movne	r3, #1
        total_current += 512;
 8082f6a:	f504 7400 	addne.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8082f6e:	f010 0510 	ands.w	r5, r0, #16
        total_current += 256;
 8082f72:	bf1c      	itt	ne
 8082f74:	f504 7480 	addne.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8082f78:	2501      	movne	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8082f7a:	f010 0608 	ands.w	r6, r0, #8
        total_current += 128;
 8082f7e:	bf1c      	itt	ne
 8082f80:	3480      	addne	r4, #128	; 0x80
        bit3 = 1;
 8082f82:	2601      	movne	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8082f84:	f010 0004 	ands.w	r0, r0, #4
        total_current += 64;
        bit2 = 1;
 8082f88:	bf18      	it	ne
 8082f8a:	2001      	movne	r0, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082f8c:	9500      	str	r5, [sp, #0]
 8082f8e:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8082f92:	4808      	ldr	r0, [pc, #32]	; (8082fb4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8082f94:	bf18      	it	ne
 8082f96:	3440      	addne	r4, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082f98:	f004 ff7f 	bl	8087e9a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8082f9c:	4805      	ldr	r0, [pc, #20]	; (8082fb4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082f9e:	f004 fee7 	bl	8087d70 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8082fa2:	f006 fba1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082fa6:	4622      	mov	r2, r4
 8082fa8:	4904      	ldr	r1, [pc, #16]	; (8082fbc <_Z27serialIncreaseChargeCurrentv+0xc0>)
 8082faa:	f7fd fe62 	bl	8080c72 <_ZN5Print6printfEPKcz>
}
 8082fae:	b004      	add	sp, #16
 8082fb0:	bd70      	pop	{r4, r5, r6, pc}
 8082fb2:	bf00      	nop
 8082fb4:	20000548 	.word	0x20000548
 8082fb8:	0808d96e 	.word	0x0808d96e
 8082fbc:	0808d997 	.word	0x0808d997

08082fc0 <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void){
 8082fc0:	b530      	push	{r4, r5, lr}
	const char * c_str() const { return buffer; }
 8082fc2:	4d5a      	ldr	r5, [pc, #360]	; (808312c <_Z24serialGetWifiCredentialsv+0x16c>)
 8082fc4:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082fc6:	f006 fb8f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082fca:	4959      	ldr	r1, [pc, #356]	; (8083130 <_Z24serialGetWifiCredentialsv+0x170>)
 8082fcc:	f005 fb2c 	bl	8088628 <_ZN5Print5printEPKc>
 8082fd0:	4c58      	ldr	r4, [pc, #352]	; (8083134 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 8082fd2:	f006 fb89 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082fd6:	6829      	ldr	r1, [r5, #0]
 8082fd8:	f005 fb39 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082fdc:	f006 fb84 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082fe0:	4955      	ldr	r1, [pc, #340]	; (8083138 <_Z24serialGetWifiCredentialsv+0x178>)
 8082fe2:	f005 fb21 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082fe6:	f006 fb7f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082fea:	6821      	ldr	r1, [r4, #0]
 8082fec:	f005 fb2f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082ff0:	f006 fb7a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082ff4:	4951      	ldr	r1, [pc, #324]	; (808313c <_Z24serialGetWifiCredentialsv+0x17c>)
 8082ff6:	f005 fb2a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082ffa:	f006 fb75 	bl	80896e8 <_Z16_fetch_usbserialv>
 8082ffe:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083002:	f005 fc79 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083006:	f006 fb6f 	bl	80896e8 <_Z16_fetch_usbserialv>
 808300a:	220d      	movs	r2, #13
 808300c:	4601      	mov	r1, r0
 808300e:	4668      	mov	r0, sp
 8083010:	f005 fc88 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8083014:	4668      	mov	r0, sp
 8083016:	494a      	ldr	r1, [pc, #296]	; (8083140 <_Z24serialGetWifiCredentialsv+0x180>)
 8083018:	f005 fa78 	bl	808850c <_ZNK6String6equalsEPKc>
 808301c:	2800      	cmp	r0, #0
 808301e:	d074      	beq.n	808310a <_Z24serialGetWifiCredentialsv+0x14a>
        Serial.println("Password correct!");
 8083020:	f006 fb62 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083024:	4947      	ldr	r1, [pc, #284]	; (8083144 <_Z24serialGetWifiCredentialsv+0x184>)
 8083026:	f005 fb12 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 808302a:	f006 fb5d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808302e:	4946      	ldr	r1, [pc, #280]	; (8083148 <_Z24serialGetWifiCredentialsv+0x188>)
 8083030:	f005 fb0d 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8083034:	f006 fb58 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083038:	f24c 3150 	movw	r1, #50000	; 0xc350
 808303c:	f005 fc5c 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8083040:	f006 fb52 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083044:	220d      	movs	r2, #13
 8083046:	4601      	mov	r1, r0
 8083048:	a804      	add	r0, sp, #16
 808304a:	f005 fc6b 	bl	8088924 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 808304e:	f006 fb4b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083052:	493e      	ldr	r1, [pc, #248]	; (808314c <_Z24serialGetWifiCredentialsv+0x18c>)
 8083054:	f005 fae8 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8083058:	f006 fb46 	bl	80896e8 <_Z16_fetch_usbserialv>
 808305c:	9904      	ldr	r1, [sp, #16]
 808305e:	f005 faf6 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8083062:	f006 fb41 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083066:	493a      	ldr	r1, [pc, #232]	; (8083150 <_Z24serialGetWifiCredentialsv+0x190>)
 8083068:	f005 faf1 	bl	808864e <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 808306c:	f006 fb3c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083070:	220d      	movs	r2, #13
 8083072:	4601      	mov	r1, r0
 8083074:	a808      	add	r0, sp, #32
 8083076:	f005 fc55 	bl	8088924 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 808307a:	4936      	ldr	r1, [pc, #216]	; (8083154 <_Z24serialGetWifiCredentialsv+0x194>)
 808307c:	a808      	add	r0, sp, #32
 808307e:	f005 fa45 	bl	808850c <_ZNK6String6equalsEPKc>
 8083082:	2800      	cmp	r0, #0
 8083084:	d04c      	beq.n	8083120 <_Z24serialGetWifiCredentialsv+0x160>
            Serial.println("Saving new ssid");
 8083086:	f006 fb2f 	bl	80896e8 <_Z16_fetch_usbserialv>
 808308a:	4933      	ldr	r1, [pc, #204]	; (8083158 <_Z24serialGetWifiCredentialsv+0x198>)
 808308c:	f005 fadf 	bl	808864e <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8083090:	a904      	add	r1, sp, #16
 8083092:	4628      	mov	r0, r5
 8083094:	f005 f970 	bl	8088378 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8083098:	f006 fb26 	bl	80896e8 <_Z16_fetch_usbserialv>
 808309c:	492f      	ldr	r1, [pc, #188]	; (808315c <_Z24serialGetWifiCredentialsv+0x19c>)
 808309e:	f005 fad6 	bl	808864e <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 80830a2:	f006 fb21 	bl	80896e8 <_Z16_fetch_usbserialv>
 80830a6:	220d      	movs	r2, #13
 80830a8:	4601      	mov	r1, r0
 80830aa:	a80c      	add	r0, sp, #48	; 0x30
 80830ac:	f005 fc3a 	bl	8088924 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 80830b0:	f006 fb1a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80830b4:	492a      	ldr	r1, [pc, #168]	; (8083160 <_Z24serialGetWifiCredentialsv+0x1a0>)
 80830b6:	f005 fab7 	bl	8088628 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 80830ba:	f006 fb15 	bl	80896e8 <_Z16_fetch_usbserialv>
 80830be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80830c0:	f005 fac5 	bl	808864e <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 80830c4:	f006 fb10 	bl	80896e8 <_Z16_fetch_usbserialv>
 80830c8:	220d      	movs	r2, #13
 80830ca:	4601      	mov	r1, r0
 80830cc:	a810      	add	r0, sp, #64	; 0x40
 80830ce:	f005 fc29 	bl	8088924 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 80830d2:	4920      	ldr	r1, [pc, #128]	; (8083154 <_Z24serialGetWifiCredentialsv+0x194>)
 80830d4:	a810      	add	r0, sp, #64	; 0x40
 80830d6:	f005 fa19 	bl	808850c <_ZNK6String6equalsEPKc>
 80830da:	b1d8      	cbz	r0, 8083114 <_Z24serialGetWifiCredentialsv+0x154>
                Serial.println("Saving new password");
 80830dc:	f006 fb04 	bl	80896e8 <_Z16_fetch_usbserialv>
 80830e0:	4920      	ldr	r1, [pc, #128]	; (8083164 <_Z24serialGetWifiCredentialsv+0x1a4>)
 80830e2:	f005 fab4 	bl	808864e <_ZN5Print7printlnEPKc>
                password = tempPassword;
 80830e6:	a90c      	add	r1, sp, #48	; 0x30
 80830e8:	4620      	mov	r0, r4
 80830ea:	f005 f945 	bl	8088378 <_ZN6StringaSERKS_>
                sendWifiInfo();
 80830ee:	f7ff f913 	bl	8082318 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 80830f2:	a810      	add	r0, sp, #64	; 0x40
 80830f4:	f005 f8c6 	bl	8088284 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 80830f8:	a80c      	add	r0, sp, #48	; 0x30
 80830fa:	f005 f8c3 	bl	8088284 <_ZN6StringD1Ev>
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
            return;
 80830fe:	a808      	add	r0, sp, #32
 8083100:	f005 f8c0 	bl	8088284 <_ZN6StringD1Ev>
 8083104:	a804      	add	r0, sp, #16
 8083106:	f005 f8bd 	bl	8088284 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 808310a:	4668      	mov	r0, sp
 808310c:	f005 f8ba 	bl	8088284 <_ZN6StringD1Ev>
        }
    }
}
 8083110:	b015      	add	sp, #84	; 0x54
 8083112:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 8083114:	f006 fae8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083118:	4913      	ldr	r1, [pc, #76]	; (8083168 <_Z24serialGetWifiCredentialsv+0x1a8>)
 808311a:	f005 fa98 	bl	808864e <_ZN5Print7printlnEPKc>
 808311e:	e7e8      	b.n	80830f2 <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 8083120:	f006 fae2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083124:	4910      	ldr	r1, [pc, #64]	; (8083168 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8083126:	f005 fa92 	bl	808864e <_ZN5Print7printlnEPKc>
 808312a:	e7e8      	b.n	80830fe <_Z24serialGetWifiCredentialsv+0x13e>
 808312c:	20000a00 	.word	0x20000a00
 8083130:	0808d9b5 	.word	0x0808d9b5
 8083134:	20000538 	.word	0x20000538
 8083138:	0808d9cb 	.word	0x0808d9cb
 808313c:	0808d9e5 	.word	0x0808d9e5
 8083140:	0808da17 	.word	0x0808da17
 8083144:	0808da1d 	.word	0x0808da1d
 8083148:	0808da2f 	.word	0x0808da2f
 808314c:	0808da3f 	.word	0x0808da3f
 8083150:	0808da57 	.word	0x0808da57
 8083154:	0808e39c 	.word	0x0808e39c
 8083158:	0808da6d 	.word	0x0808da6d
 808315c:	0808da7d 	.word	0x0808da7d
 8083160:	0808da90 	.word	0x0808da90
 8083164:	0808daac 	.word	0x0808daac
 8083168:	0808dac0 	.word	0x0808dac0

0808316c <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 808316c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 808316e:	f006 fabb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083172:	491a      	ldr	r1, [pc, #104]	; (80831dc <_Z26serialSetSensibleIotEnablev+0x70>)
 8083174:	f005 fa6b 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083178:	f006 fab6 	bl	80896e8 <_Z16_fetch_usbserialv>
 808317c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083180:	f005 fbba 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083184:	f006 fab0 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083188:	220d      	movs	r2, #13
 808318a:	4601      	mov	r1, r0
 808318c:	4668      	mov	r0, sp
 808318e:	f005 fbc9 	bl	8088924 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083192:	4668      	mov	r0, sp
 8083194:	4912      	ldr	r1, [pc, #72]	; (80831e0 <_Z26serialSetSensibleIotEnablev+0x74>)
 8083196:	f005 f9b9 	bl	808850c <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 808319a:	b1c0      	cbz	r0, 80831ce <_Z26serialSetSensibleIotEnablev+0x62>
        Serial.println("Password correct!");
 808319c:	f006 faa4 	bl	80896e8 <_Z16_fetch_usbserialv>
 80831a0:	4910      	ldr	r1, [pc, #64]	; (80831e4 <_Z26serialSetSensibleIotEnablev+0x78>)
 80831a2:	f005 fa54 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 80831a6:	f006 fa9f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80831aa:	490f      	ldr	r1, [pc, #60]	; (80831e8 <_Z26serialSetSensibleIotEnablev+0x7c>)
 80831ac:	f005 fa4f 	bl	808864e <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 80831b0:	2301      	movs	r3, #1
 80831b2:	4c0e      	ldr	r4, [pc, #56]	; (80831ec <_Z26serialSetSensibleIotEnablev+0x80>)
 80831b4:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80831b6:	f006 fdc5 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80831ba:	2204      	movs	r2, #4
 80831bc:	4621      	mov	r1, r4
 80831be:	208c      	movs	r0, #140	; 0x8c
 80831c0:	f004 fa74 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 80831c4:	4668      	mov	r0, sp
 80831c6:	f005 f85d 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80831ca:	b004      	add	sp, #16
 80831cc:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 80831ce:	f006 fa8b 	bl	80896e8 <_Z16_fetch_usbserialv>
 80831d2:	4907      	ldr	r1, [pc, #28]	; (80831f0 <_Z26serialSetSensibleIotEnablev+0x84>)
 80831d4:	f005 fa3b 	bl	808864e <_ZN5Print7printlnEPKc>
 80831d8:	e7f4      	b.n	80831c4 <_Z26serialSetSensibleIotEnablev+0x58>
 80831da:	bf00      	nop
 80831dc:	0808dad3 	.word	0x0808dad3
 80831e0:	0808db16 	.word	0x0808db16
 80831e4:	0808da1d 	.word	0x0808da1d
 80831e8:	0808db21 	.word	0x0808db21
 80831ec:	200009f8 	.word	0x200009f8
 80831f0:	0808db42 	.word	0x0808db42

080831f4 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 80831f4:	b530      	push	{r4, r5, lr}
 80831f6:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 80831f8:	f006 fa76 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 80831fc:	4d35      	ldr	r5, [pc, #212]	; (80832d4 <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 80831fe:	f005 fa1a 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8083202:	f006 fa71 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083206:	4934      	ldr	r1, [pc, #208]	; (80832d8 <_Z17serialGetDeviceIdv+0xe4>)
 8083208:	f005 fa0e 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 808320c:	f006 fa6c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083210:	220a      	movs	r2, #10
 8083212:	6829      	ldr	r1, [r5, #0]
 8083214:	f7fd fd17 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println("Please enter password in order to change the ID");
 8083218:	f006 fa66 	bl	80896e8 <_Z16_fetch_usbserialv>
 808321c:	492f      	ldr	r1, [pc, #188]	; (80832dc <_Z17serialGetDeviceIdv+0xe8>)
 808321e:	f005 fa16 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083222:	f006 fa61 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083226:	f24c 3150 	movw	r1, #50000	; 0xc350
 808322a:	f005 fb65 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808322e:	f006 fa5b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083232:	220d      	movs	r2, #13
 8083234:	4601      	mov	r1, r0
 8083236:	4668      	mov	r0, sp
 8083238:	f005 fb74 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 808323c:	4668      	mov	r0, sp
 808323e:	4928      	ldr	r1, [pc, #160]	; (80832e0 <_Z17serialGetDeviceIdv+0xec>)
 8083240:	f005 f964 	bl	808850c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083244:	2800      	cmp	r0, #0
 8083246:	d03f      	beq.n	80832c8 <_Z17serialGetDeviceIdv+0xd4>
        Serial.println("Password correct!");
 8083248:	f006 fa4e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808324c:	4925      	ldr	r1, [pc, #148]	; (80832e4 <_Z17serialGetDeviceIdv+0xf0>)
 808324e:	f005 f9fe 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8083252:	f006 fa49 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083256:	4924      	ldr	r1, [pc, #144]	; (80832e8 <_Z17serialGetDeviceIdv+0xf4>)
 8083258:	f005 f9f9 	bl	808864e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 808325c:	f006 fa44 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083260:	220d      	movs	r2, #13
 8083262:	4601      	mov	r1, r0
 8083264:	a804      	add	r0, sp, #16
 8083266:	f005 fb5d 	bl	8088924 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808326a:	a804      	add	r0, sp, #16
 808326c:	f005 f98e 	bl	808858c <_ZNK6String5toIntEv>
 8083270:	4604      	mov	r4, r0
        Serial.println("");
 8083272:	f006 fa39 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083276:	491d      	ldr	r1, [pc, #116]	; (80832ec <_Z17serialGetDeviceIdv+0xf8>)
 8083278:	f005 f9e9 	bl	808864e <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 808327c:	f242 730c 	movw	r3, #9996	; 0x270c
 8083280:	1ea2      	subs	r2, r4, #2
 8083282:	429a      	cmp	r2, r3
 8083284:	d81a      	bhi.n	80832bc <_Z17serialGetDeviceIdv+0xc8>
            Serial.print("\n\rNew Device ID:");
 8083286:	f006 fa2f 	bl	80896e8 <_Z16_fetch_usbserialv>
 808328a:	4919      	ldr	r1, [pc, #100]	; (80832f0 <_Z17serialGetDeviceIdv+0xfc>)
 808328c:	f005 f9cc 	bl	8088628 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083290:	f006 fa2a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083294:	220a      	movs	r2, #10
 8083296:	4621      	mov	r1, r4
 8083298:	f7fd fcd5 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
            DEVICE_id = tempValue;
 808329c:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 808329e:	f006 fd51 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80832a2:	2204      	movs	r2, #4
 80832a4:	4629      	mov	r1, r5
 80832a6:	2000      	movs	r0, #0
 80832a8:	f004 fa00 	bl	80876ac <HAL_EEPROM_Put>
        String tempString = Serial.readStringUntil('\r');
 80832ac:	a804      	add	r0, sp, #16
 80832ae:	f004 ffe9 	bl	8088284 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80832b2:	4668      	mov	r0, sp
 80832b4:	f004 ffe6 	bl	8088284 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80832b8:	b009      	add	sp, #36	; 0x24
 80832ba:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80832bc:	f006 fa14 	bl	80896e8 <_Z16_fetch_usbserialv>
 80832c0:	490c      	ldr	r1, [pc, #48]	; (80832f4 <_Z17serialGetDeviceIdv+0x100>)
 80832c2:	f005 f9c4 	bl	808864e <_ZN5Print7printlnEPKc>
 80832c6:	e7f1      	b.n	80832ac <_Z17serialGetDeviceIdv+0xb8>
        Serial.println("\n\rIncorrect password!");
 80832c8:	f006 fa0e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80832cc:	490a      	ldr	r1, [pc, #40]	; (80832f8 <_Z17serialGetDeviceIdv+0x104>)
 80832ce:	f005 f9be 	bl	808864e <_ZN5Print7printlnEPKc>
 80832d2:	e7ee      	b.n	80832b2 <_Z17serialGetDeviceIdv+0xbe>
 80832d4:	20000080 	.word	0x20000080
 80832d8:	0808db58 	.word	0x0808db58
 80832dc:	0808db6b 	.word	0x0808db6b
 80832e0:	0808da17 	.word	0x0808da17
 80832e4:	0808da1d 	.word	0x0808da1d
 80832e8:	0808db9b 	.word	0x0808db9b
 80832ec:	0808f1d9 	.word	0x0808f1d9
 80832f0:	0808dbb0 	.word	0x0808dbb0
 80832f4:	0808dbc1 	.word	0x0808dbc1
 80832f8:	0808db42 	.word	0x0808db42

080832fc <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 80832fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 80832fe:	f006 f9f3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083302:	f005 f998 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8083306:	f006 f9ef 	bl	80896e8 <_Z16_fetch_usbserialv>
 808330a:	4914      	ldr	r1, [pc, #80]	; (808335c <_Z19serialResetSettingsv+0x60>)
 808330c:	f005 f99f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083310:	f006 f9ea 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083314:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083318:	f005 faee 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808331c:	f006 f9e4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083320:	220d      	movs	r2, #13
 8083322:	4601      	mov	r1, r0
 8083324:	4668      	mov	r0, sp
 8083326:	f005 fafd 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 808332a:	4668      	mov	r0, sp
 808332c:	490c      	ldr	r1, [pc, #48]	; (8083360 <_Z19serialResetSettingsv+0x64>)
 808332e:	f005 f8ed 	bl	808850c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083332:	b160      	cbz	r0, 808334e <_Z19serialResetSettingsv+0x52>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8083334:	f006 f9d8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083338:	490a      	ldr	r1, [pc, #40]	; (8083364 <_Z19serialResetSettingsv+0x68>)
 808333a:	f005 f988 	bl	808864e <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 808333e:	f7fd fd79 	bl	8080e34 <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 8083342:	4668      	mov	r0, sp
 8083344:	f004 ff9e 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083348:	b005      	add	sp, #20
 808334a:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 808334e:	f006 f9cb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083352:	4905      	ldr	r1, [pc, #20]	; (8083368 <_Z19serialResetSettingsv+0x6c>)
 8083354:	f005 f97b 	bl	808864e <_ZN5Print7printlnEPKc>
 8083358:	e7f3      	b.n	8083342 <_Z19serialResetSettingsv+0x46>
 808335a:	bf00      	nop
 808335c:	0808dbd2 	.word	0x0808dbd2
 8083360:	0808da17 	.word	0x0808da17
 8083364:	0808dc0b 	.word	0x0808dc0b
 8083368:	0808db42 	.word	0x0808db42

0808336c <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 808336c:	b510      	push	{r4, lr}
 808336e:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8083370:	f006 f9ba 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083374:	4920      	ldr	r1, [pc, #128]	; (80833f8 <_Z17serialGetTimeDatev+0x8c>)
 8083376:	f005 f96a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808337a:	f006 f9b5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808337e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083382:	f005 fab9 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083386:	f006 f9af 	bl	80896e8 <_Z16_fetch_usbserialv>
 808338a:	220d      	movs	r2, #13
 808338c:	4601      	mov	r1, r0
 808338e:	4668      	mov	r0, sp
 8083390:	f005 fac8 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083394:	4668      	mov	r0, sp
 8083396:	f005 f8f9 	bl	808858c <_ZNK6String5toIntEv>
 808339a:	4604      	mov	r4, r0
    Serial.println("");
 808339c:	f006 f9a4 	bl	80896e8 <_Z16_fetch_usbserialv>
 80833a0:	4916      	ldr	r1, [pc, #88]	; (80833fc <_Z17serialGetTimeDatev+0x90>)
 80833a2:	f005 f954 	bl	808864e <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 80833a6:	4b16      	ldr	r3, [pc, #88]	; (8083400 <_Z17serialGetTimeDatev+0x94>)
 80833a8:	429c      	cmp	r4, r3
 80833aa:	dd1e      	ble.n	80833ea <_Z17serialGetTimeDatev+0x7e>
        Time.setTime(tempValue);
 80833ac:	17e1      	asrs	r1, r4, #31
 80833ae:	4620      	mov	r0, r4
 80833b0:	f005 fb44 	bl	8088a3c <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 80833b4:	f006 f998 	bl	80896e8 <_Z16_fetch_usbserialv>
 80833b8:	4912      	ldr	r1, [pc, #72]	; (8083404 <_Z17serialGetTimeDatev+0x98>)
 80833ba:	f005 f935 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 80833be:	f006 f993 	bl	80896e8 <_Z16_fetch_usbserialv>
 80833c2:	4604      	mov	r4, r0
 80833c4:	f005 fc53 	bl	8088c6e <_ZN9TimeClass3nowEv>
 80833c8:	4602      	mov	r2, r0
 80833ca:	17c3      	asrs	r3, r0, #31
 80833cc:	a804      	add	r0, sp, #16
 80833ce:	f005 fb49 	bl	8088a64 <_ZN9TimeClass7timeStrEx>
 80833d2:	4620      	mov	r0, r4
 80833d4:	9904      	ldr	r1, [sp, #16]
 80833d6:	f005 f93a 	bl	808864e <_ZN5Print7printlnEPKc>
 80833da:	a804      	add	r0, sp, #16
 80833dc:	f004 ff52 	bl	8088284 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80833e0:	4668      	mov	r0, sp
 80833e2:	f004 ff4f 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80833e6:	b008      	add	sp, #32
 80833e8:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80833ea:	f006 f97d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80833ee:	4906      	ldr	r1, [pc, #24]	; (8083408 <_Z17serialGetTimeDatev+0x9c>)
 80833f0:	f005 f92d 	bl	808864e <_ZN5Print7printlnEPKc>
 80833f4:	e7f4      	b.n	80833e0 <_Z17serialGetTimeDatev+0x74>
 80833f6:	bf00      	nop
 80833f8:	0808dc7a 	.word	0x0808dc7a
 80833fc:	0808f1d9 	.word	0x0808f1d9
 8083400:	39942ef5 	.word	0x39942ef5
 8083404:	0808dcb5 	.word	0x0808dcb5
 8083408:	0808dbc1 	.word	0x0808dbc1

0808340c <_Z13serialGetZonev>:

void serialGetZone(void){
 808340c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 808340e:	f006 f96b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083412:	4920      	ldr	r1, [pc, #128]	; (8083494 <_Z13serialGetZonev+0x88>)
 8083414:	f005 f91b 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083418:	f006 f966 	bl	80896e8 <_Z16_fetch_usbserialv>
 808341c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083420:	f005 fa6a 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083424:	f006 f960 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083428:	220d      	movs	r2, #13
 808342a:	4601      	mov	r1, r0
 808342c:	a802      	add	r0, sp, #8
 808342e:	f005 fa79 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083432:	a802      	add	r0, sp, #8
 8083434:	f005 f8aa 	bl	808858c <_ZNK6String5toIntEv>
 8083438:	9001      	str	r0, [sp, #4]
    Serial.println("");
 808343a:	f006 f955 	bl	80896e8 <_Z16_fetch_usbserialv>
 808343e:	4916      	ldr	r1, [pc, #88]	; (8083498 <_Z13serialGetZonev+0x8c>)
 8083440:	f005 f905 	bl	808864e <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8083444:	9801      	ldr	r0, [sp, #4]
 8083446:	f100 030c 	add.w	r3, r0, #12
 808344a:	2b1a      	cmp	r3, #26
 808344c:	d81c      	bhi.n	8083488 <_Z13serialGetZonev+0x7c>
        Time.zone(tempValue);
 808344e:	f007 fad5 	bl	808a9fc <__aeabi_i2f>
 8083452:	f005 fad5 	bl	8088a00 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 8083456:	f006 f947 	bl	80896e8 <_Z16_fetch_usbserialv>
 808345a:	4910      	ldr	r1, [pc, #64]	; (808349c <_Z13serialGetZonev+0x90>)
 808345c:	f005 f8e4 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083460:	f006 f942 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083464:	220a      	movs	r2, #10
 8083466:	9901      	ldr	r1, [sp, #4]
 8083468:	f7fd fbed 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 808346c:	f006 fc6a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083470:	2204      	movs	r2, #4
 8083472:	2054      	movs	r0, #84	; 0x54
 8083474:	eb0d 0102 	add.w	r1, sp, r2
 8083478:	f004 f918 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 808347c:	a802      	add	r0, sp, #8
 808347e:	f004 ff01 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083482:	b007      	add	sp, #28
 8083484:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 8083488:	f006 f92e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808348c:	4904      	ldr	r1, [pc, #16]	; (80834a0 <_Z13serialGetZonev+0x94>)
 808348e:	f005 f8de 	bl	808864e <_ZN5Print7printlnEPKc>
 8083492:	e7f3      	b.n	808347c <_Z13serialGetZonev+0x70>
 8083494:	0808dcc8 	.word	0x0808dcc8
 8083498:	0808f1d9 	.word	0x0808f1d9
 808349c:	0808dcf3 	.word	0x0808dcf3
 80834a0:	0808dbc1 	.word	0x0808dbc1

080834a4 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 80834a4:	b510      	push	{r4, lr}
 80834a6:	b086      	sub	sp, #24
    Serial.println();
 80834a8:	f006 f91e 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 80834ac:	4c29      	ldr	r4, [pc, #164]	; (8083554 <_Z20serialGetAverageTimev+0xb0>)
    Serial.println();
 80834ae:	f005 f8c2 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 80834b2:	f006 f919 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834b6:	4928      	ldr	r1, [pc, #160]	; (8083558 <_Z20serialGetAverageTimev+0xb4>)
 80834b8:	f005 f8b6 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 80834bc:	f006 f914 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834c0:	220a      	movs	r2, #10
 80834c2:	6821      	ldr	r1, [r4, #0]
 80834c4:	f7fd fba4 	bl	8080c10 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    Serial.println("(~2 second) measurements");
 80834c8:	f006 f90e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834cc:	4923      	ldr	r1, [pc, #140]	; (808355c <_Z20serialGetAverageTimev+0xb8>)
 80834ce:	f005 f8be 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 80834d2:	f006 f909 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834d6:	4922      	ldr	r1, [pc, #136]	; (8083560 <_Z20serialGetAverageTimev+0xbc>)
 80834d8:	f005 f8a6 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834dc:	f006 f904 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834e4:	f005 fa08 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834e8:	f006 f8fe 	bl	80896e8 <_Z16_fetch_usbserialv>
 80834ec:	220d      	movs	r2, #13
 80834ee:	4601      	mov	r1, r0
 80834f0:	a802      	add	r0, sp, #8
 80834f2:	f005 fa17 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80834f6:	a802      	add	r0, sp, #8
 80834f8:	f005 f848 	bl	808858c <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 80834fc:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8083500:	9001      	str	r0, [sp, #4]
    if(tempValue >= 1 && tempValue < 10000){
 8083502:	3801      	subs	r0, #1
 8083504:	4298      	cmp	r0, r3
 8083506:	d81e      	bhi.n	8083546 <_Z20serialGetAverageTimev+0xa2>
        Serial.print("\n\rNew Frequency: ");
 8083508:	f006 f8ee 	bl	80896e8 <_Z16_fetch_usbserialv>
 808350c:	4915      	ldr	r1, [pc, #84]	; (8083564 <_Z20serialGetAverageTimev+0xc0>)
 808350e:	f005 f88b 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083512:	f006 f8e9 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083516:	220a      	movs	r2, #10
 8083518:	9901      	ldr	r1, [sp, #4]
 808351a:	f7fd fb94 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        Serial.println("(~2 second) measurements");
 808351e:	f006 f8e3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083522:	490e      	ldr	r1, [pc, #56]	; (808355c <_Z20serialGetAverageTimev+0xb8>)
 8083524:	f005 f893 	bl	808864e <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8083528:	9b01      	ldr	r3, [sp, #4]
 808352a:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 808352c:	f006 fc0a 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083530:	2204      	movs	r2, #4
 8083532:	2074      	movs	r0, #116	; 0x74
 8083534:	eb0d 0102 	add.w	r1, sp, r2
 8083538:	f004 f8b8 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 808353c:	a802      	add	r0, sp, #8
 808353e:	f004 fea1 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083542:	b006      	add	sp, #24
 8083544:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083546:	f006 f8cf 	bl	80896e8 <_Z16_fetch_usbserialv>
 808354a:	4907      	ldr	r1, [pc, #28]	; (8083568 <_Z20serialGetAverageTimev+0xc4>)
 808354c:	f005 f87f 	bl	808864e <_ZN5Print7printlnEPKc>
 8083550:	e7f4      	b.n	808353c <_Z20serialGetAverageTimev+0x98>
 8083552:	bf00      	nop
 8083554:	20000520 	.word	0x20000520
 8083558:	0808dd0b 	.word	0x0808dd0b
 808355c:	0808dd1f 	.word	0x0808dd1f
 8083560:	0808dd38 	.word	0x0808dd38
 8083564:	0808dd4b 	.word	0x0808dd4b
 8083568:	0808dbc1 	.word	0x0808dbc1
 808356c:	00000000 	.word	0x00000000

08083570 <_Z17serialGetCoSlopeAv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlopeA(void){
 8083570:	b530      	push	{r4, r5, lr}
 8083572:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8083574:	f006 f8b8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083578:	f005 f85d 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current CO_A slope:");
 808357c:	f006 f8b4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083580:	4937      	ldr	r1, [pc, #220]	; (8083660 <_Z17serialGetCoSlopeAv+0xf0>)
 8083582:	f005 f851 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8083586:	f006 f8af 	bl	80896e8 <_Z16_fetch_usbserialv>
 808358a:	4604      	mov	r4, r0
 808358c:	4d35      	ldr	r5, [pc, #212]	; (8083664 <_Z17serialGetCoSlopeAv+0xf4>)
 808358e:	2202      	movs	r2, #2
 8083590:	6829      	ldr	r1, [r5, #0]
 8083592:	a806      	add	r0, sp, #24
 8083594:	f004 ff36 	bl	8088404 <_ZN6StringC1Efi>
 8083598:	9906      	ldr	r1, [sp, #24]
 808359a:	4620      	mov	r0, r4
 808359c:	f005 f844 	bl	8088628 <_ZN5Print5printEPKc>
 80835a0:	a806      	add	r0, sp, #24
 80835a2:	f004 fe6f 	bl	8088284 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80835a6:	f006 f89f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80835aa:	492f      	ldr	r1, [pc, #188]	; (8083668 <_Z17serialGetCoSlopeAv+0xf8>)
 80835ac:	f005 f84f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO_A slope\n\r");
 80835b0:	f006 f89a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80835b4:	492d      	ldr	r1, [pc, #180]	; (808366c <_Z17serialGetCoSlopeAv+0xfc>)
 80835b6:	f005 f837 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80835ba:	f006 f895 	bl	80896e8 <_Z16_fetch_usbserialv>
 80835be:	f24c 3150 	movw	r1, #50000	; 0xc350
 80835c2:	f005 f999 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80835c6:	f006 f88f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80835ca:	220d      	movs	r2, #13
 80835cc:	4601      	mov	r1, r0
 80835ce:	a802      	add	r0, sp, #8
 80835d0:	f005 f9a8 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80835d4:	a802      	add	r0, sp, #8
 80835d6:	f004 ffde 	bl	8088596 <_ZNK6String7toFloatEv>
 80835da:	4604      	mov	r4, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 80835dc:	f006 fdb4 	bl	808a148 <__aeabi_f2d>
 80835e0:	a31d      	add	r3, pc, #116	; (adr r3, 8083658 <_Z17serialGetCoSlopeAv+0xe8>)
 80835e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835e6:	f007 f88d 	bl	808a704 <__aeabi_dcmpge>
 80835ea:	b370      	cbz	r0, 808364a <_Z17serialGetCoSlopeAv+0xda>
 80835ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80835f0:	4620      	mov	r0, r4
 80835f2:	f007 fbf5 	bl	808ade0 <__aeabi_fcmplt>
 80835f6:	b340      	cbz	r0, 808364a <_Z17serialGetCoSlopeAv+0xda>
        CO_slopeA = tempfloat;
        tempfloat *= 100;
 80835f8:	491d      	ldr	r1, [pc, #116]	; (8083670 <_Z17serialGetCoSlopeAv+0x100>)
 80835fa:	4620      	mov	r0, r4
        CO_slopeA = tempfloat;
 80835fc:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 80835fe:	f007 fa51 	bl	808aaa4 <__aeabi_fmul>
        tempValue = tempfloat;
 8083602:	f007 fc15 	bl	808ae30 <__aeabi_f2iz>
 8083606:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO_A slope: ");
 8083608:	f006 f86e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808360c:	4919      	ldr	r1, [pc, #100]	; (8083674 <_Z17serialGetCoSlopeAv+0x104>)
 808360e:	f005 f80b 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA,2));
 8083612:	f006 f869 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083616:	4604      	mov	r4, r0
 8083618:	2202      	movs	r2, #2
 808361a:	6829      	ldr	r1, [r5, #0]
 808361c:	a806      	add	r0, sp, #24
 808361e:	f004 fef1 	bl	8088404 <_ZN6StringC1Efi>
 8083622:	9906      	ldr	r1, [sp, #24]
 8083624:	4620      	mov	r0, r4
 8083626:	f005 f812 	bl	808864e <_ZN5Print7printlnEPKc>
 808362a:	a806      	add	r0, sp, #24
 808362c:	f004 fe2a 	bl	8088284 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEA_MEM_ADDRESS, tempValue);
 8083630:	f006 fb88 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083634:	2204      	movs	r2, #4
 8083636:	2010      	movs	r0, #16
 8083638:	eb0d 0102 	add.w	r1, sp, r2
 808363c:	f004 f836 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 8083640:	a802      	add	r0, sp, #8
 8083642:	f004 fe1f 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083646:	b00b      	add	sp, #44	; 0x2c
 8083648:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808364a:	f006 f84d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808364e:	490a      	ldr	r1, [pc, #40]	; (8083678 <_Z17serialGetCoSlopeAv+0x108>)
 8083650:	f004 fffd 	bl	808864e <_ZN5Print7printlnEPKc>
 8083654:	e7f4      	b.n	8083640 <_Z17serialGetCoSlopeAv+0xd0>
 8083656:	bf00      	nop
 8083658:	9999999a 	.word	0x9999999a
 808365c:	3fb99999 	.word	0x3fb99999
 8083660:	0808dd9d 	.word	0x0808dd9d
 8083664:	200002c8 	.word	0x200002c8
 8083668:	0808dd70 	.word	0x0808dd70
 808366c:	0808ddb1 	.word	0x0808ddb1
 8083670:	42c80000 	.word	0x42c80000
 8083674:	0808ddc8 	.word	0x0808ddc8
 8083678:	0808dbc1 	.word	0x0808dbc1
 808367c:	00000000 	.word	0x00000000

08083680 <_Z17serialGetCoSlopeBv>:
void serialGetCoSlopeB(void){
 8083680:	b530      	push	{r4, r5, lr}
 8083682:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8083684:	f006 f830 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083688:	f004 ffd5 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current CO_B slope:");
 808368c:	f006 f82c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083690:	4937      	ldr	r1, [pc, #220]	; (8083770 <_Z17serialGetCoSlopeBv+0xf0>)
 8083692:	f004 ffc9 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeB, 2));
 8083696:	f006 f827 	bl	80896e8 <_Z16_fetch_usbserialv>
 808369a:	4604      	mov	r4, r0
 808369c:	4d35      	ldr	r5, [pc, #212]	; (8083774 <_Z17serialGetCoSlopeBv+0xf4>)
 808369e:	2202      	movs	r2, #2
 80836a0:	6829      	ldr	r1, [r5, #0]
 80836a2:	a806      	add	r0, sp, #24
 80836a4:	f004 feae 	bl	8088404 <_ZN6StringC1Efi>
 80836a8:	9906      	ldr	r1, [sp, #24]
 80836aa:	4620      	mov	r0, r4
 80836ac:	f004 ffbc 	bl	8088628 <_ZN5Print5printEPKc>
 80836b0:	a806      	add	r0, sp, #24
 80836b2:	f004 fde7 	bl	8088284 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80836b6:	f006 f817 	bl	80896e8 <_Z16_fetch_usbserialv>
 80836ba:	492f      	ldr	r1, [pc, #188]	; (8083778 <_Z17serialGetCoSlopeBv+0xf8>)
 80836bc:	f004 ffc7 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO_B slope\n\r");
 80836c0:	f006 f812 	bl	80896e8 <_Z16_fetch_usbserialv>
 80836c4:	492d      	ldr	r1, [pc, #180]	; (808377c <_Z17serialGetCoSlopeBv+0xfc>)
 80836c6:	f004 ffaf 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80836ca:	f006 f80d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80836ce:	f24c 3150 	movw	r1, #50000	; 0xc350
 80836d2:	f005 f911 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80836d6:	f006 f807 	bl	80896e8 <_Z16_fetch_usbserialv>
 80836da:	220d      	movs	r2, #13
 80836dc:	4601      	mov	r1, r0
 80836de:	a802      	add	r0, sp, #8
 80836e0:	f005 f920 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80836e4:	a802      	add	r0, sp, #8
 80836e6:	f004 ff56 	bl	8088596 <_ZNK6String7toFloatEv>
 80836ea:	4604      	mov	r4, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 80836ec:	f006 fd2c 	bl	808a148 <__aeabi_f2d>
 80836f0:	a31d      	add	r3, pc, #116	; (adr r3, 8083768 <_Z17serialGetCoSlopeBv+0xe8>)
 80836f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80836f6:	f007 f805 	bl	808a704 <__aeabi_dcmpge>
 80836fa:	b370      	cbz	r0, 808375a <_Z17serialGetCoSlopeBv+0xda>
 80836fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083700:	4620      	mov	r0, r4
 8083702:	f007 fb6d 	bl	808ade0 <__aeabi_fcmplt>
 8083706:	b340      	cbz	r0, 808375a <_Z17serialGetCoSlopeBv+0xda>
        CO_slopeB = tempfloat;
        tempfloat *= 100;
 8083708:	491d      	ldr	r1, [pc, #116]	; (8083780 <_Z17serialGetCoSlopeBv+0x100>)
 808370a:	4620      	mov	r0, r4
        CO_slopeB = tempfloat;
 808370c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808370e:	f007 f9c9 	bl	808aaa4 <__aeabi_fmul>
        tempValue = tempfloat;
 8083712:	f007 fb8d 	bl	808ae30 <__aeabi_f2iz>
 8083716:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO_B slope: ");
 8083718:	f005 ffe6 	bl	80896e8 <_Z16_fetch_usbserialv>
 808371c:	4919      	ldr	r1, [pc, #100]	; (8083784 <_Z17serialGetCoSlopeBv+0x104>)
 808371e:	f004 ff83 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeB,2));
 8083722:	f005 ffe1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083726:	4604      	mov	r4, r0
 8083728:	2202      	movs	r2, #2
 808372a:	6829      	ldr	r1, [r5, #0]
 808372c:	a806      	add	r0, sp, #24
 808372e:	f004 fe69 	bl	8088404 <_ZN6StringC1Efi>
 8083732:	9906      	ldr	r1, [sp, #24]
 8083734:	4620      	mov	r0, r4
 8083736:	f004 ff8a 	bl	808864e <_ZN5Print7printlnEPKc>
 808373a:	a806      	add	r0, sp, #24
 808373c:	f004 fda2 	bl	8088284 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEB_MEM_ADDRESS, tempValue);
 8083740:	f006 fb00 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083744:	2204      	movs	r2, #4
 8083746:	2098      	movs	r0, #152	; 0x98
 8083748:	eb0d 0102 	add.w	r1, sp, r2
 808374c:	f003 ffae 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 8083750:	a802      	add	r0, sp, #8
 8083752:	f004 fd97 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083756:	b00b      	add	sp, #44	; 0x2c
 8083758:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808375a:	f005 ffc5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808375e:	490a      	ldr	r1, [pc, #40]	; (8083788 <_Z17serialGetCoSlopeBv+0x108>)
 8083760:	f004 ff75 	bl	808864e <_ZN5Print7printlnEPKc>
 8083764:	e7f4      	b.n	8083750 <_Z17serialGetCoSlopeBv+0xd0>
 8083766:	bf00      	nop
 8083768:	9999999a 	.word	0x9999999a
 808376c:	3fb99999 	.word	0x3fb99999
 8083770:	0808dddb 	.word	0x0808dddb
 8083774:	200002cc 	.word	0x200002cc
 8083778:	0808dd70 	.word	0x0808dd70
 808377c:	0808ddef 	.word	0x0808ddef
 8083780:	42c80000 	.word	0x42c80000
 8083784:	0808de06 	.word	0x0808de06
 8083788:	0808dbc1 	.word	0x0808dbc1

0808378c <_Z16serialGetCoZeroAv>:

void serialGetCoZeroA(void){
 808378c:	b510      	push	{r4, lr}
 808378e:	b086      	sub	sp, #24
    Serial.println();
 8083790:	f005 ffaa 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 8083794:	4c27      	ldr	r4, [pc, #156]	; (8083834 <_Z16serialGetCoZeroAv+0xa8>)
    Serial.println();
 8083796:	f004 ff4e 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 808379a:	f005 ffa5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808379e:	4926      	ldr	r1, [pc, #152]	; (8083838 <_Z16serialGetCoZeroAv+0xac>)
 80837a0:	f004 ff42 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 80837a4:	f005 ffa0 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837a8:	220a      	movs	r2, #10
 80837aa:	6821      	ldr	r1, [r4, #0]
 80837ac:	f7fd fa30 	bl	8080c10 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    Serial.println(" ppb");
 80837b0:	f005 ff9a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837b4:	4921      	ldr	r1, [pc, #132]	; (808383c <_Z16serialGetCoZeroAv+0xb0>)
 80837b6:	f004 ff4a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO_A Zero\n\r");
 80837ba:	f005 ff95 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837be:	4920      	ldr	r1, [pc, #128]	; (8083840 <_Z16serialGetCoZeroAv+0xb4>)
 80837c0:	f004 ff32 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80837c4:	f005 ff90 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837c8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80837cc:	f005 f894 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80837d0:	f005 ff8a 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837d4:	220d      	movs	r2, #13
 80837d6:	4601      	mov	r1, r0
 80837d8:	a802      	add	r0, sp, #8
 80837da:	f005 f8a3 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80837de:	a802      	add	r0, sp, #8
 80837e0:	f004 fed4 	bl	808858c <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 80837e4:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 80837e8:	9001      	str	r0, [sp, #4]
    if(tempValue >= -5000 && tempValue < 5000){
 80837ea:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80837ee:	3008      	adds	r0, #8
 80837f0:	4298      	cmp	r0, r3
 80837f2:	d819      	bhi.n	8083828 <_Z16serialGetCoZeroAv+0x9c>
        Serial.print("\n\rNew CO_A zero: ");
 80837f4:	f005 ff78 	bl	80896e8 <_Z16_fetch_usbserialv>
 80837f8:	4912      	ldr	r1, [pc, #72]	; (8083844 <_Z16serialGetCoZeroAv+0xb8>)
 80837fa:	f004 ff15 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80837fe:	f005 ff73 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083802:	220a      	movs	r2, #10
 8083804:	9901      	ldr	r1, [sp, #4]
 8083806:	f7fd fa1e 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        CO_zeroA = tempValue;
 808380a:	9b01      	ldr	r3, [sp, #4]
 808380c:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZEROA_MEM_ADDRESS, tempValue);
 808380e:	f006 fa99 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083812:	2204      	movs	r2, #4
 8083814:	200c      	movs	r0, #12
 8083816:	eb0d 0102 	add.w	r1, sp, r2
 808381a:	f003 ff47 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 808381e:	a802      	add	r0, sp, #8
 8083820:	f004 fd30 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083824:	b006      	add	sp, #24
 8083826:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083828:	f005 ff5e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808382c:	4906      	ldr	r1, [pc, #24]	; (8083848 <_Z16serialGetCoZeroAv+0xbc>)
 808382e:	f004 ff0e 	bl	808864e <_ZN5Print7printlnEPKc>
 8083832:	e7f4      	b.n	808381e <_Z16serialGetCoZeroAv+0x92>
 8083834:	200002d4 	.word	0x200002d4
 8083838:	0808de19 	.word	0x0808de19
 808383c:	0808de2c 	.word	0x0808de2c
 8083840:	0808de31 	.word	0x0808de31
 8083844:	0808de47 	.word	0x0808de47
 8083848:	0808dbc1 	.word	0x0808dbc1

0808384c <_Z16serialGetCoZeroBv>:

void serialGetCoZeroB(void){
 808384c:	b510      	push	{r4, lr}
 808384e:	b086      	sub	sp, #24
    Serial.println();
 8083850:	f005 ff4a 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_B zero:");
    Serial.print(CO_zeroB);
 8083854:	4c27      	ldr	r4, [pc, #156]	; (80838f4 <_Z16serialGetCoZeroBv+0xa8>)
    Serial.println();
 8083856:	f004 feee 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current CO_B zero:");
 808385a:	f005 ff45 	bl	80896e8 <_Z16_fetch_usbserialv>
 808385e:	4926      	ldr	r1, [pc, #152]	; (80838f8 <_Z16serialGetCoZeroBv+0xac>)
 8083860:	f004 fee2 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.print(CO_zeroB);
 8083864:	f005 ff40 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083868:	220a      	movs	r2, #10
 808386a:	6821      	ldr	r1, [r4, #0]
 808386c:	f7fd f9d0 	bl	8080c10 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    Serial.println(" ppb");
 8083870:	f005 ff3a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083874:	4921      	ldr	r1, [pc, #132]	; (80838fc <_Z16serialGetCoZeroBv+0xb0>)
 8083876:	f004 feea 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO_B Zero\n\r");
 808387a:	f005 ff35 	bl	80896e8 <_Z16_fetch_usbserialv>
 808387e:	4920      	ldr	r1, [pc, #128]	; (8083900 <_Z16serialGetCoZeroBv+0xb4>)
 8083880:	f004 fed2 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083884:	f005 ff30 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083888:	f24c 3150 	movw	r1, #50000	; 0xc350
 808388c:	f005 f834 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083890:	f005 ff2a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083894:	220d      	movs	r2, #13
 8083896:	4601      	mov	r1, r0
 8083898:	a802      	add	r0, sp, #8
 808389a:	f005 f843 	bl	8088924 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808389e:	a802      	add	r0, sp, #8
 80838a0:	f004 fe74 	bl	808858c <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 80838a4:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 80838a8:	9001      	str	r0, [sp, #4]
    if(tempValue >= -5000 && tempValue < 5000){
 80838aa:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80838ae:	3008      	adds	r0, #8
 80838b0:	4298      	cmp	r0, r3
 80838b2:	d819      	bhi.n	80838e8 <_Z16serialGetCoZeroBv+0x9c>
        Serial.print("\n\rNew CO_B zero: ");
 80838b4:	f005 ff18 	bl	80896e8 <_Z16_fetch_usbserialv>
 80838b8:	4912      	ldr	r1, [pc, #72]	; (8083904 <_Z16serialGetCoZeroBv+0xb8>)
 80838ba:	f004 feb5 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80838be:	f005 ff13 	bl	80896e8 <_Z16_fetch_usbserialv>
 80838c2:	220a      	movs	r2, #10
 80838c4:	9901      	ldr	r1, [sp, #4]
 80838c6:	f7fd f9be 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        CO_zeroB = tempValue;
 80838ca:	9b01      	ldr	r3, [sp, #4]
 80838cc:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZEROB_MEM_ADDRESS, tempValue);
 80838ce:	f006 fa39 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80838d2:	2204      	movs	r2, #4
 80838d4:	2094      	movs	r0, #148	; 0x94
 80838d6:	eb0d 0102 	add.w	r1, sp, r2
 80838da:	f003 fee7 	bl	80876ac <HAL_EEPROM_Put>
    String tempString = Serial.readStringUntil('\r');
 80838de:	a802      	add	r0, sp, #8
 80838e0:	f004 fcd0 	bl	8088284 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80838e4:	b006      	add	sp, #24
 80838e6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80838e8:	f005 fefe 	bl	80896e8 <_Z16_fetch_usbserialv>
 80838ec:	4906      	ldr	r1, [pc, #24]	; (8083908 <_Z16serialGetCoZeroBv+0xbc>)
 80838ee:	f004 feae 	bl	808864e <_ZN5Print7printlnEPKc>
 80838f2:	e7f4      	b.n	80838de <_Z16serialGetCoZeroBv+0x92>
 80838f4:	200002d8 	.word	0x200002d8
 80838f8:	0808de59 	.word	0x0808de59
 80838fc:	0808de2c 	.word	0x0808de2c
 8083900:	0808de6c 	.word	0x0808de6c
 8083904:	0808de82 	.word	0x0808de82
 8083908:	0808dbc1 	.word	0x0808dbc1

0808390c <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 808390c:	b530      	push	{r4, r5, lr}
 808390e:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083910:	f005 feea 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8083914:	4d35      	ldr	r5, [pc, #212]	; (80839ec <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 8083916:	f004 fe8e 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 808391a:	f005 fee5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808391e:	4934      	ldr	r1, [pc, #208]	; (80839f0 <_Z19serialGetLowerLimitv+0xe4>)
 8083920:	f004 fe82 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8083924:	f005 fee0 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083928:	220a      	movs	r2, #10
 808392a:	6829      	ldr	r1, [r5, #0]
 808392c:	f7fd f98b 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println("Please enter password in order to change the lower limit");
 8083930:	f005 feda 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083934:	492f      	ldr	r1, [pc, #188]	; (80839f4 <_Z19serialGetLowerLimitv+0xe8>)
 8083936:	f004 fe8a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808393a:	f005 fed5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808393e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083942:	f004 ffd9 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083946:	f005 fecf 	bl	80896e8 <_Z16_fetch_usbserialv>
 808394a:	220d      	movs	r2, #13
 808394c:	4601      	mov	r1, r0
 808394e:	4668      	mov	r0, sp
 8083950:	f004 ffe8 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 8083954:	4668      	mov	r0, sp
 8083956:	4928      	ldr	r1, [pc, #160]	; (80839f8 <_Z19serialGetLowerLimitv+0xec>)
 8083958:	f004 fdd8 	bl	808850c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 808395c:	2800      	cmp	r0, #0
 808395e:	d03f      	beq.n	80839e0 <_Z19serialGetLowerLimitv+0xd4>
        Serial.println("Password correct!");
 8083960:	f005 fec2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083964:	4925      	ldr	r1, [pc, #148]	; (80839fc <_Z19serialGetLowerLimitv+0xf0>)
 8083966:	f004 fe72 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 808396a:	f005 febd 	bl	80896e8 <_Z16_fetch_usbserialv>
 808396e:	4924      	ldr	r1, [pc, #144]	; (8083a00 <_Z19serialGetLowerLimitv+0xf4>)
 8083970:	f004 fe6d 	bl	808864e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083974:	f005 feb8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083978:	220d      	movs	r2, #13
 808397a:	4601      	mov	r1, r0
 808397c:	a804      	add	r0, sp, #16
 808397e:	f004 ffd1 	bl	8088924 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083982:	a804      	add	r0, sp, #16
 8083984:	f004 fe02 	bl	808858c <_ZNK6String5toIntEv>
 8083988:	4604      	mov	r4, r0
        Serial.println("");
 808398a:	f005 fead 	bl	80896e8 <_Z16_fetch_usbserialv>
 808398e:	491d      	ldr	r1, [pc, #116]	; (8083a04 <_Z19serialGetLowerLimitv+0xf8>)
 8083990:	f004 fe5d 	bl	808864e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8083994:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8083998:	1e62      	subs	r2, r4, #1
 808399a:	429a      	cmp	r2, r3
 808399c:	d81a      	bhi.n	80839d4 <_Z19serialGetLowerLimitv+0xc8>
            Serial.print("\n\rNew lower limit:");
 808399e:	f005 fea3 	bl	80896e8 <_Z16_fetch_usbserialv>
 80839a2:	4919      	ldr	r1, [pc, #100]	; (8083a08 <_Z19serialGetLowerLimitv+0xfc>)
 80839a4:	f004 fe40 	bl	8088628 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80839a8:	f005 fe9e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80839ac:	220a      	movs	r2, #10
 80839ae:	4621      	mov	r1, r4
 80839b0:	f7fd f949 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
            gas_lower_limit = tempValue;
 80839b4:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 80839b6:	f006 f9c5 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80839ba:	2204      	movs	r2, #4
 80839bc:	4629      	mov	r1, r5
 80839be:	204c      	movs	r0, #76	; 0x4c
 80839c0:	f003 fe74 	bl	80876ac <HAL_EEPROM_Put>
        String tempString = Serial.readStringUntil('\r');
 80839c4:	a804      	add	r0, sp, #16
 80839c6:	f004 fc5d 	bl	8088284 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80839ca:	4668      	mov	r0, sp
 80839cc:	f004 fc5a 	bl	8088284 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80839d0:	b009      	add	sp, #36	; 0x24
 80839d2:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80839d4:	f005 fe88 	bl	80896e8 <_Z16_fetch_usbserialv>
 80839d8:	490c      	ldr	r1, [pc, #48]	; (8083a0c <_Z19serialGetLowerLimitv+0x100>)
 80839da:	f004 fe38 	bl	808864e <_ZN5Print7printlnEPKc>
 80839de:	e7f1      	b.n	80839c4 <_Z19serialGetLowerLimitv+0xb8>
        Serial.println("\n\rIncorrect password!");
 80839e0:	f005 fe82 	bl	80896e8 <_Z16_fetch_usbserialv>
 80839e4:	490a      	ldr	r1, [pc, #40]	; (8083a10 <_Z19serialGetLowerLimitv+0x104>)
 80839e6:	f004 fe32 	bl	808864e <_ZN5Print7printlnEPKc>
 80839ea:	e7ee      	b.n	80839ca <_Z19serialGetLowerLimitv+0xbe>
 80839ec:	20000098 	.word	0x20000098
 80839f0:	0808decf 	.word	0x0808decf
 80839f4:	0808dee4 	.word	0x0808dee4
 80839f8:	0808da17 	.word	0x0808da17
 80839fc:	0808da1d 	.word	0x0808da1d
 8083a00:	0808df1d 	.word	0x0808df1d
 8083a04:	0808f1d9 	.word	0x0808f1d9
 8083a08:	0808df36 	.word	0x0808df36
 8083a0c:	0808dbc1 	.word	0x0808dbc1
 8083a10:	0808db42 	.word	0x0808db42

08083a14 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8083a14:	b530      	push	{r4, r5, lr}
 8083a16:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083a18:	f005 fe66 	bl	80896e8 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8083a1c:	4d35      	ldr	r5, [pc, #212]	; (8083af4 <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 8083a1e:	f004 fe0a 	bl	8088636 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8083a22:	f005 fe61 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a26:	4934      	ldr	r1, [pc, #208]	; (8083af8 <_Z19serialGetUpperLimitv+0xe4>)
 8083a28:	f004 fdfe 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8083a2c:	f005 fe5c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a30:	220a      	movs	r2, #10
 8083a32:	6829      	ldr	r1, [r5, #0]
 8083a34:	f7fd f907 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println("Please enter password in order to change the upper limit");
 8083a38:	f005 fe56 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a3c:	492f      	ldr	r1, [pc, #188]	; (8083afc <_Z19serialGetUpperLimitv+0xe8>)
 8083a3e:	f004 fe06 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083a42:	f005 fe51 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a46:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083a4a:	f004 ff55 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083a4e:	f005 fe4b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a52:	220d      	movs	r2, #13
 8083a54:	4601      	mov	r1, r0
 8083a56:	4668      	mov	r0, sp
 8083a58:	f004 ff64 	bl	8088924 <_ZN6Stream15readStringUntilEc>
 8083a5c:	4668      	mov	r0, sp
 8083a5e:	4928      	ldr	r1, [pc, #160]	; (8083b00 <_Z19serialGetUpperLimitv+0xec>)
 8083a60:	f004 fd54 	bl	808850c <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083a64:	2800      	cmp	r0, #0
 8083a66:	d03f      	beq.n	8083ae8 <_Z19serialGetUpperLimitv+0xd4>
        Serial.println("Password correct!");
 8083a68:	f005 fe3e 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a6c:	4925      	ldr	r1, [pc, #148]	; (8083b04 <_Z19serialGetUpperLimitv+0xf0>)
 8083a6e:	f004 fdee 	bl	808864e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8083a72:	f005 fe39 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a76:	4924      	ldr	r1, [pc, #144]	; (8083b08 <_Z19serialGetUpperLimitv+0xf4>)
 8083a78:	f004 fde9 	bl	808864e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083a7c:	f005 fe34 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a80:	220d      	movs	r2, #13
 8083a82:	4601      	mov	r1, r0
 8083a84:	a804      	add	r0, sp, #16
 8083a86:	f004 ff4d 	bl	8088924 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083a8a:	a804      	add	r0, sp, #16
 8083a8c:	f004 fd7e 	bl	808858c <_ZNK6String5toIntEv>
 8083a90:	4604      	mov	r4, r0
        Serial.println("");
 8083a92:	f005 fe29 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083a96:	491d      	ldr	r1, [pc, #116]	; (8083b0c <_Z19serialGetUpperLimitv+0xf8>)
 8083a98:	f004 fdd9 	bl	808864e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8083a9c:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8083aa0:	1e62      	subs	r2, r4, #1
 8083aa2:	429a      	cmp	r2, r3
 8083aa4:	d81a      	bhi.n	8083adc <_Z19serialGetUpperLimitv+0xc8>
            Serial.print("\n\rNew upper limit:");
 8083aa6:	f005 fe1f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083aaa:	4919      	ldr	r1, [pc, #100]	; (8083b10 <_Z19serialGetUpperLimitv+0xfc>)
 8083aac:	f004 fdbc 	bl	8088628 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083ab0:	f005 fe1a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ab4:	220a      	movs	r2, #10
 8083ab6:	4621      	mov	r1, r4
 8083ab8:	f7fd f8c5 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
            gas_upper_limit = tempValue;
 8083abc:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8083abe:	f006 f941 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083ac2:	2204      	movs	r2, #4
 8083ac4:	4629      	mov	r1, r5
 8083ac6:	2050      	movs	r0, #80	; 0x50
 8083ac8:	f003 fdf0 	bl	80876ac <HAL_EEPROM_Put>
        String tempString = Serial.readStringUntil('\r');
 8083acc:	a804      	add	r0, sp, #16
 8083ace:	f004 fbd9 	bl	8088284 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8083ad2:	4668      	mov	r0, sp
 8083ad4:	f004 fbd6 	bl	8088284 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083ad8:	b009      	add	sp, #36	; 0x24
 8083ada:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8083adc:	f005 fe04 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ae0:	490c      	ldr	r1, [pc, #48]	; (8083b14 <_Z19serialGetUpperLimitv+0x100>)
 8083ae2:	f004 fdb4 	bl	808864e <_ZN5Print7printlnEPKc>
 8083ae6:	e7f1      	b.n	8083acc <_Z19serialGetUpperLimitv+0xb8>
        Serial.println("\n\rIncorrect password!");
 8083ae8:	f005 fdfe 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083aec:	490a      	ldr	r1, [pc, #40]	; (8083b18 <_Z19serialGetUpperLimitv+0x104>)
 8083aee:	f004 fdae 	bl	808864e <_ZN5Print7printlnEPKc>
 8083af2:	e7ee      	b.n	8083ad2 <_Z19serialGetUpperLimitv+0xbe>
 8083af4:	2000009c 	.word	0x2000009c
 8083af8:	0808df49 	.word	0x0808df49
 8083afc:	0808df5e 	.word	0x0808df5e
 8083b00:	0808da17 	.word	0x0808da17
 8083b04:	0808da1d 	.word	0x0808da1d
 8083b08:	0808df97 	.word	0x0808df97
 8083b0c:	0808f1d9 	.word	0x0808f1d9
 8083b10:	0808dfb0 	.word	0x0808dfb0
 8083b14:	0808dbc1 	.word	0x0808dbc1
 8083b18:	0808db42 	.word	0x0808db42

08083b1c <_Z20readAlpha1Constantlyv>:

void readAlpha1Constantly(void){
 8083b1c:	b570      	push	{r4, r5, r6, lr}
    while(!Serial.available()){
        CO_float_A = readCO_A();
 8083b1e:	4d0c      	ldr	r5, [pc, #48]	; (8083b50 <_Z20readAlpha1Constantlyv+0x34>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8083b20:	4e0c      	ldr	r6, [pc, #48]	; (8083b54 <_Z20readAlpha1Constantlyv+0x38>)
    while(!Serial.available()){
 8083b22:	f005 fde1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b26:	6803      	ldr	r3, [r0, #0]
 8083b28:	691b      	ldr	r3, [r3, #16]
 8083b2a:	4798      	blx	r3
 8083b2c:	b978      	cbnz	r0, 8083b4e <_Z20readAlpha1Constantlyv+0x32>
        CO_float_A = readCO_A();
 8083b2e:	f7fe fbd9 	bl	80822e4 <_Z8readCO_Av>
 8083b32:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8083b34:	f005 fdd8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b38:	4604      	mov	r4, r0
 8083b3a:	6828      	ldr	r0, [r5, #0]
 8083b3c:	f006 fb04 	bl	808a148 <__aeabi_f2d>
 8083b40:	4602      	mov	r2, r0
 8083b42:	460b      	mov	r3, r1
 8083b44:	4620      	mov	r0, r4
 8083b46:	4631      	mov	r1, r6
 8083b48:	f7fd f893 	bl	8080c72 <_ZN5Print6printfEPKcz>
    while(!Serial.available()){
 8083b4c:	e7e9      	b.n	8083b22 <_Z20readAlpha1Constantlyv+0x6>
    }
}
 8083b4e:	bd70      	pop	{r4, r5, r6, pc}
 8083b50:	200002c0 	.word	0x200002c0
 8083b54:	0808dfc3 	.word	0x0808dfc3

08083b58 <_Z23outputSerialMenuOptionsv>:
void outputSerialMenuOptions(void){
 8083b58:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083b5a:	f005 fdc5 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b5e:	49a2      	ldr	r1, [pc, #648]	; (8083de8 <_Z23outputSerialMenuOptionsv+0x290>)
 8083b60:	f004 fd75 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO_A slope");
 8083b64:	f005 fdc0 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b68:	49a0      	ldr	r1, [pc, #640]	; (8083dec <_Z23outputSerialMenuOptionsv+0x294>)
 8083b6a:	f004 fd70 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO_A zero");
 8083b6e:	f005 fdbb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b72:	499f      	ldr	r1, [pc, #636]	; (8083df0 <_Z23outputSerialMenuOptionsv+0x298>)
 8083b74:	f004 fd6b 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO_B slope");
 8083b78:	f005 fdb6 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b7c:	499d      	ldr	r1, [pc, #628]	; (8083df4 <_Z23outputSerialMenuOptionsv+0x29c>)
 8083b7e:	f004 fd66 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO_B zero");
 8083b82:	f005 fdb1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b86:	499c      	ldr	r1, [pc, #624]	; (8083df8 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083b88:	f004 fd61 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083b8c:	f005 fdac 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b90:	499a      	ldr	r1, [pc, #616]	; (8083dfc <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083b92:	f004 fd5c 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083b96:	f005 fda7 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083b9a:	4999      	ldr	r1, [pc, #612]	; (8083e00 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083b9c:	f004 fd57 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083ba0:	f005 fda2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ba4:	4997      	ldr	r1, [pc, #604]	; (8083e04 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083ba6:	f004 fd52 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083baa:	f005 fd9d 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bae:	4996      	ldr	r1, [pc, #600]	; (8083e08 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083bb0:	f004 fd4d 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083bb4:	f005 fd98 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bb8:	4994      	ldr	r1, [pc, #592]	; (8083e0c <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083bba:	f004 fd48 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083bbe:	f005 fd93 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bc2:	4993      	ldr	r1, [pc, #588]	; (8083e10 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083bc4:	f004 fd43 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083bc8:	f005 fd8e 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bcc:	4991      	ldr	r1, [pc, #580]	; (8083e14 <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083bce:	f004 fd3e 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083bd2:	f005 fd89 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bd6:	4990      	ldr	r1, [pc, #576]	; (8083e18 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083bd8:	f004 fd39 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083bdc:	f005 fd84 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083be0:	498e      	ldr	r1, [pc, #568]	; (8083e1c <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083be2:	f004 fd34 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083be6:	f005 fd7f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bea:	498d      	ldr	r1, [pc, #564]	; (8083e20 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083bec:	f004 fd2f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083bf0:	f005 fd7a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bf4:	498b      	ldr	r1, [pc, #556]	; (8083e24 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083bf6:	f004 fd2a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083bfa:	f005 fd75 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083bfe:	498a      	ldr	r1, [pc, #552]	; (8083e28 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083c00:	f004 fd25 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083c04:	f005 fd70 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c08:	4988      	ldr	r1, [pc, #544]	; (8083e2c <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083c0a:	f004 fd20 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083c0e:	f005 fd6b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c12:	4987      	ldr	r1, [pc, #540]	; (8083e30 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083c14:	f004 fd1b 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083c18:	f005 fd66 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c1c:	4985      	ldr	r1, [pc, #532]	; (8083e34 <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083c1e:	f004 fd16 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083c22:	f005 fd61 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c26:	4984      	ldr	r1, [pc, #528]	; (8083e38 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8083c28:	f004 fd11 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083c2c:	f005 fd5c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c30:	4982      	ldr	r1, [pc, #520]	; (8083e3c <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083c32:	f004 fd0c 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083c36:	f005 fd57 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c3a:	4981      	ldr	r1, [pc, #516]	; (8083e40 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8083c3c:	f004 fd07 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8083c40:	f005 fd52 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c44:	497f      	ldr	r1, [pc, #508]	; (8083e44 <_Z23outputSerialMenuOptionsv+0x2ec>)
 8083c46:	f004 fd02 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8083c4a:	f005 fd4d 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c4e:	497e      	ldr	r1, [pc, #504]	; (8083e48 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083c50:	f004 fcfd 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083c54:	f005 fd48 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c58:	497c      	ldr	r1, [pc, #496]	; (8083e4c <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083c5a:	f004 fcf8 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8083c5e:	f005 fd43 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c62:	497b      	ldr	r1, [pc, #492]	; (8083e50 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083c64:	f004 fcf3 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083c68:	f005 fd3e 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c6c:	4979      	ldr	r1, [pc, #484]	; (8083e54 <_Z23outputSerialMenuOptionsv+0x2fc>)
 8083c6e:	f004 fcee 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8083c72:	f005 fd39 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c76:	4978      	ldr	r1, [pc, #480]	; (8083e58 <_Z23outputSerialMenuOptionsv+0x300>)
 8083c78:	f004 fce9 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083c7c:	f005 fd34 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c80:	4976      	ldr	r1, [pc, #472]	; (8083e5c <_Z23outputSerialMenuOptionsv+0x304>)
 8083c82:	f004 fce4 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083c86:	f005 fd2f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c8a:	4975      	ldr	r1, [pc, #468]	; (8083e60 <_Z23outputSerialMenuOptionsv+0x308>)
 8083c8c:	f004 fcdf 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083c90:	f005 fd2a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c94:	4973      	ldr	r1, [pc, #460]	; (8083e64 <_Z23outputSerialMenuOptionsv+0x30c>)
 8083c96:	f004 fcda 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083c9a:	f005 fd25 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083c9e:	4972      	ldr	r1, [pc, #456]	; (8083e68 <_Z23outputSerialMenuOptionsv+0x310>)
 8083ca0:	f004 fcd5 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083ca4:	f005 fd20 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ca8:	4970      	ldr	r1, [pc, #448]	; (8083e6c <_Z23outputSerialMenuOptionsv+0x314>)
 8083caa:	f004 fcd0 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083cae:	f005 fd1b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cb2:	496f      	ldr	r1, [pc, #444]	; (8083e70 <_Z23outputSerialMenuOptionsv+0x318>)
 8083cb4:	f004 fccb 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083cb8:	f005 fd16 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cbc:	496d      	ldr	r1, [pc, #436]	; (8083e74 <_Z23outputSerialMenuOptionsv+0x31c>)
 8083cbe:	f004 fcc6 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 8083cc2:	f005 fd11 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cc6:	496c      	ldr	r1, [pc, #432]	; (8083e78 <_Z23outputSerialMenuOptionsv+0x320>)
 8083cc8:	f004 fcc1 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083ccc:	f005 fd0c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cd0:	496a      	ldr	r1, [pc, #424]	; (8083e7c <_Z23outputSerialMenuOptionsv+0x324>)
 8083cd2:	f004 fcbc 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083cd6:	f005 fd07 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cda:	4969      	ldr	r1, [pc, #420]	; (8083e80 <_Z23outputSerialMenuOptionsv+0x328>)
 8083cdc:	f004 fcb7 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083ce0:	f005 fd02 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ce4:	4967      	ldr	r1, [pc, #412]	; (8083e84 <_Z23outputSerialMenuOptionsv+0x32c>)
 8083ce6:	f004 fcb2 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083cea:	f005 fcfd 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cee:	4966      	ldr	r1, [pc, #408]	; (8083e88 <_Z23outputSerialMenuOptionsv+0x330>)
 8083cf0:	f004 fcad 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083cf4:	f005 fcf8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083cf8:	4964      	ldr	r1, [pc, #400]	; (8083e8c <_Z23outputSerialMenuOptionsv+0x334>)
 8083cfa:	f004 fca8 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083cfe:	f005 fcf3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d02:	4963      	ldr	r1, [pc, #396]	; (8083e90 <_Z23outputSerialMenuOptionsv+0x338>)
 8083d04:	f004 fca3 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083d08:	f005 fcee 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d0c:	4961      	ldr	r1, [pc, #388]	; (8083e94 <_Z23outputSerialMenuOptionsv+0x33c>)
 8083d0e:	f004 fc9e 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083d12:	f005 fce9 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d16:	4960      	ldr	r1, [pc, #384]	; (8083e98 <_Z23outputSerialMenuOptionsv+0x340>)
 8083d18:	f004 fc99 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083d1c:	f005 fce4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d20:	495e      	ldr	r1, [pc, #376]	; (8083e9c <_Z23outputSerialMenuOptionsv+0x344>)
 8083d22:	f004 fc94 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083d26:	f005 fcdf 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d2a:	495d      	ldr	r1, [pc, #372]	; (8083ea0 <_Z23outputSerialMenuOptionsv+0x348>)
 8083d2c:	f004 fc8f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083d30:	f005 fcda 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d34:	495b      	ldr	r1, [pc, #364]	; (8083ea4 <_Z23outputSerialMenuOptionsv+0x34c>)
 8083d36:	f004 fc8a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083d3a:	f005 fcd5 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d3e:	495a      	ldr	r1, [pc, #360]	; (8083ea8 <_Z23outputSerialMenuOptionsv+0x350>)
 8083d40:	f004 fc85 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083d44:	f005 fcd0 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d48:	4958      	ldr	r1, [pc, #352]	; (8083eac <_Z23outputSerialMenuOptionsv+0x354>)
 8083d4a:	f004 fc80 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083d4e:	f005 fccb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d52:	4957      	ldr	r1, [pc, #348]	; (8083eb0 <_Z23outputSerialMenuOptionsv+0x358>)
 8083d54:	f004 fc7b 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083d58:	f005 fcc6 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d5c:	4955      	ldr	r1, [pc, #340]	; (8083eb4 <_Z23outputSerialMenuOptionsv+0x35c>)
 8083d5e:	f004 fc76 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083d62:	f005 fcc1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d66:	4954      	ldr	r1, [pc, #336]	; (8083eb8 <_Z23outputSerialMenuOptionsv+0x360>)
 8083d68:	f004 fc71 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083d6c:	f005 fcbc 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d70:	4952      	ldr	r1, [pc, #328]	; (8083ebc <_Z23outputSerialMenuOptionsv+0x364>)
 8083d72:	f004 fc6c 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083d76:	f005 fcb7 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d7a:	4951      	ldr	r1, [pc, #324]	; (8083ec0 <_Z23outputSerialMenuOptionsv+0x368>)
 8083d7c:	f004 fc67 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083d80:	f005 fcb2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d84:	494f      	ldr	r1, [pc, #316]	; (8083ec4 <_Z23outputSerialMenuOptionsv+0x36c>)
 8083d86:	f004 fc62 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083d8a:	f005 fcad 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d8e:	494e      	ldr	r1, [pc, #312]	; (8083ec8 <_Z23outputSerialMenuOptionsv+0x370>)
 8083d90:	f004 fc5d 	bl	808864e <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083d94:	f005 fca8 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083d98:	494c      	ldr	r1, [pc, #304]	; (8083ecc <_Z23outputSerialMenuOptionsv+0x374>)
 8083d9a:	f004 fc58 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083d9e:	f005 fca3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083da2:	494b      	ldr	r1, [pc, #300]	; (8083ed0 <_Z23outputSerialMenuOptionsv+0x378>)
 8083da4:	f004 fc53 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083da8:	f005 fc9e 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083dac:	4949      	ldr	r1, [pc, #292]	; (8083ed4 <_Z23outputSerialMenuOptionsv+0x37c>)
 8083dae:	f004 fc4e 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083db2:	f005 fc99 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083db6:	4948      	ldr	r1, [pc, #288]	; (8083ed8 <_Z23outputSerialMenuOptionsv+0x380>)
 8083db8:	f004 fc49 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083dbc:	f005 fc94 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083dc0:	4946      	ldr	r1, [pc, #280]	; (8083edc <_Z23outputSerialMenuOptionsv+0x384>)
 8083dc2:	f004 fc44 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083dc6:	f005 fc8f 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083dca:	4945      	ldr	r1, [pc, #276]	; (8083ee0 <_Z23outputSerialMenuOptionsv+0x388>)
 8083dcc:	f004 fc3f 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083dd0:	f005 fc8a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083dd4:	4943      	ldr	r1, [pc, #268]	; (8083ee4 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083dd6:	f004 fc3a 	bl	808864e <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083dda:	f005 fc85 	bl	80896e8 <_Z16_fetch_usbserialv>
  }
 8083dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 8083de2:	4941      	ldr	r1, [pc, #260]	; (8083ee8 <_Z23outputSerialMenuOptionsv+0x390>)
 8083de4:	f004 bc33 	b.w	808864e <_ZN5Print7printlnEPKc>
 8083de8:	0808dfd3 	.word	0x0808dfd3
 8083dec:	0808dfe9 	.word	0x0808dfe9
 8083df0:	0808dfff 	.word	0x0808dfff
 8083df4:	0808e014 	.word	0x0808e014
 8083df8:	0808e02a 	.word	0x0808e02a
 8083dfc:	0808e03f 	.word	0x0808e03f
 8083e00:	0808e054 	.word	0x0808e054
 8083e04:	0808e068 	.word	0x0808e068
 8083e08:	0808e07f 	.word	0x0808e07f
 8083e0c:	0808e095 	.word	0x0808e095
 8083e10:	0808e0ab 	.word	0x0808e0ab
 8083e14:	0808e0c0 	.word	0x0808e0c0
 8083e18:	0808e0dd 	.word	0x0808e0dd
 8083e1c:	0808e0f9 	.word	0x0808e0f9
 8083e20:	0808e113 	.word	0x0808e113
 8083e24:	0808e12c 	.word	0x0808e12c
 8083e28:	0808e146 	.word	0x0808e146
 8083e2c:	0808e15f 	.word	0x0808e15f
 8083e30:	0808e17b 	.word	0x0808e17b
 8083e34:	0808e198 	.word	0x0808e198
 8083e38:	0808e1b1 	.word	0x0808e1b1
 8083e3c:	0808e1cd 	.word	0x0808e1cd
 8083e40:	0808e1e5 	.word	0x0808e1e5
 8083e44:	0808e1fe 	.word	0x0808e1fe
 8083e48:	0808e217 	.word	0x0808e217
 8083e4c:	0808e22b 	.word	0x0808e22b
 8083e50:	0808e240 	.word	0x0808e240
 8083e54:	0808e25b 	.word	0x0808e25b
 8083e58:	0808e276 	.word	0x0808e276
 8083e5c:	0808e28c 	.word	0x0808e28c
 8083e60:	0808e29d 	.word	0x0808e29d
 8083e64:	0808e2af 	.word	0x0808e2af
 8083e68:	0808e2c0 	.word	0x0808e2c0
 8083e6c:	0808e2d2 	.word	0x0808e2d2
 8083e70:	0808e2fb 	.word	0x0808e2fb
 8083e74:	0808e324 	.word	0x0808e324
 8083e78:	0808e353 	.word	0x0808e353
 8083e7c:	0808e379 	.word	0x0808e379
 8083e80:	0808e39e 	.word	0x0808e39e
 8083e84:	0808e3c6 	.word	0x0808e3c6
 8083e88:	0808e406 	.word	0x0808e406
 8083e8c:	0808e449 	.word	0x0808e449
 8083e90:	0808e473 	.word	0x0808e473
 8083e94:	0808e4b6 	.word	0x0808e4b6
 8083e98:	0808e4fc 	.word	0x0808e4fc
 8083e9c:	0808e530 	.word	0x0808e530
 8083ea0:	0808e54e 	.word	0x0808e54e
 8083ea4:	0808e572 	.word	0x0808e572
 8083ea8:	0808e58d 	.word	0x0808e58d
 8083eac:	0808e5b7 	.word	0x0808e5b7
 8083eb0:	0808e5ec 	.word	0x0808e5ec
 8083eb4:	0808e610 	.word	0x0808e610
 8083eb8:	0808e624 	.word	0x0808e624
 8083ebc:	0808e640 	.word	0x0808e640
 8083ec0:	0808e665 	.word	0x0808e665
 8083ec4:	0808e689 	.word	0x0808e689
 8083ec8:	0808e6ae 	.word	0x0808e6ae
 8083ecc:	0808e6d6 	.word	0x0808e6d6
 8083ed0:	0808e702 	.word	0x0808e702
 8083ed4:	0808e745 	.word	0x0808e745
 8083ed8:	0808e777 	.word	0x0808e777
 8083edc:	0808e79d 	.word	0x0808e79d
 8083ee0:	0808e803 	.word	0x0808e803
 8083ee4:	0808e867 	.word	0x0808e867
 8083ee8:	0808e87c 	.word	0x0808e87c

08083eec <_Z10serialMenuv>:
  incomingByte = '0';
 8083eec:	2330      	movs	r3, #48	; 0x30
void serialMenu(){
 8083eee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  incomingByte = '0';
 8083ef2:	4e9e      	ldr	r6, [pc, #632]	; (808416c <_Z10serialMenuv+0x280>)
        if(car_topper_power_en == 1){
 8083ef4:	4c9e      	ldr	r4, [pc, #632]	; (8084170 <_Z10serialMenuv+0x284>)
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8083ef6:	4f9f      	ldr	r7, [pc, #636]	; (8084174 <_Z10serialMenuv+0x288>)
void serialMenu(){
 8083ef8:	b08b      	sub	sp, #44	; 0x2c
  incomingByte = '0';
 8083efa:	7033      	strb	r3, [r6, #0]
    Serial.print("Menu>");
 8083efc:	f005 fbf4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f00:	499d      	ldr	r1, [pc, #628]	; (8084178 <_Z10serialMenuv+0x28c>)
 8083f02:	f004 fb91 	bl	8088628 <_ZN5Print5printEPKc>
    Serial.flush();
 8083f06:	f005 fbef 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f0a:	6803      	ldr	r3, [r0, #0]
 8083f0c:	69db      	ldr	r3, [r3, #28]
 8083f0e:	4798      	blx	r3
    while(!Serial.available());
 8083f10:	f005 fbea 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f14:	6803      	ldr	r3, [r0, #0]
 8083f16:	691b      	ldr	r3, [r3, #16]
 8083f18:	4798      	blx	r3
 8083f1a:	2800      	cmp	r0, #0
 8083f1c:	d0f8      	beq.n	8083f10 <_Z10serialMenuv+0x24>
    incomingByte = Serial.read();
 8083f1e:	f005 fbe3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f22:	6803      	ldr	r3, [r0, #0]
 8083f24:	695b      	ldr	r3, [r3, #20]
 8083f26:	4798      	blx	r3
 8083f28:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8083f2a:	2861      	cmp	r0, #97	; 0x61
    incomingByte = Serial.read();
 8083f2c:	7030      	strb	r0, [r6, #0]
    if(incomingByte == 'a'){
 8083f2e:	d108      	bne.n	8083f42 <_Z10serialMenuv+0x56>
        serialGetCoSlopeA();
 8083f30:	f7ff fb1e 	bl	8083570 <_Z17serialGetCoSlopeAv>
  while(incomingByte!= 'x')
 8083f34:	7833      	ldrb	r3, [r6, #0]
 8083f36:	2b78      	cmp	r3, #120	; 0x78
 8083f38:	d1e0      	bne.n	8083efc <_Z10serialMenuv+0x10>
  Serial.println("Exiting serial menu...");
 8083f3a:	f005 fbd5 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f3e:	498f      	ldr	r1, [pc, #572]	; (808417c <_Z10serialMenuv+0x290>)
 8083f40:	e324      	b.n	808458c <_Z10serialMenuv+0x6a0>
    }else if(incomingByte == 'b'){
 8083f42:	2862      	cmp	r0, #98	; 0x62
 8083f44:	d102      	bne.n	8083f4c <_Z10serialMenuv+0x60>
        serialGetCoZeroA();
 8083f46:	f7ff fc21 	bl	808378c <_Z16serialGetCoZeroAv>
 8083f4a:	e7f3      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'c'){
 8083f4c:	2863      	cmp	r0, #99	; 0x63
 8083f4e:	d102      	bne.n	8083f56 <_Z10serialMenuv+0x6a>
        serialGetCoSlopeB();
 8083f50:	f7ff fb96 	bl	8083680 <_Z17serialGetCoSlopeBv>
 8083f54:	e7ee      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'd'){
 8083f56:	2864      	cmp	r0, #100	; 0x64
 8083f58:	d102      	bne.n	8083f60 <_Z10serialMenuv+0x74>
        serialGetCoZeroB();
 8083f5a:	f7ff fc77 	bl	808384c <_Z16serialGetCoZeroBv>
 8083f5e:	e7e9      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'q'){
 8083f60:	2871      	cmp	r0, #113	; 0x71
 8083f62:	d10f      	bne.n	8083f84 <_Z10serialMenuv+0x98>
        Serial.println("Serial debugging enabled.");
 8083f64:	f005 fbc0 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f68:	4985      	ldr	r1, [pc, #532]	; (8084180 <_Z10serialMenuv+0x294>)
 8083f6a:	f004 fb70 	bl	808864e <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8083f6e:	2301      	movs	r3, #1
 8083f70:	4d84      	ldr	r5, [pc, #528]	; (8084184 <_Z10serialMenuv+0x298>)
        debugging_enabled = 0;
 8083f72:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8083f74:	f005 fee6 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8083f78:	2204      	movs	r2, #4
 8083f7a:	4629      	mov	r1, r5
 8083f7c:	2048      	movs	r0, #72	; 0x48
 8083f7e:	f003 fb95 	bl	80876ac <HAL_EEPROM_Put>
        return t;
 8083f82:	e7d7      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'r'){
 8083f84:	2872      	cmp	r0, #114	; 0x72
 8083f86:	d107      	bne.n	8083f98 <_Z10serialMenuv+0xac>
        Serial.println("Serial debugging disabled.");
 8083f88:	f005 fbae 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083f8c:	497e      	ldr	r1, [pc, #504]	; (8084188 <_Z10serialMenuv+0x29c>)
 8083f8e:	f004 fb5e 	bl	808864e <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8083f92:	4d7c      	ldr	r5, [pc, #496]	; (8084184 <_Z10serialMenuv+0x298>)
 8083f94:	2300      	movs	r3, #0
 8083f96:	e7ec      	b.n	8083f72 <_Z10serialMenuv+0x86>
    }else if(incomingByte == 's'){
 8083f98:	2873      	cmp	r0, #115	; 0x73
 8083f9a:	d10e      	bne.n	8083fba <_Z10serialMenuv+0xce>
        Serial.println(String(HEADER_STRING));
 8083f9c:	f005 fba4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083fa0:	4605      	mov	r5, r0
 8083fa2:	497a      	ldr	r1, [pc, #488]	; (808418c <_Z10serialMenuv+0x2a0>)
 8083fa4:	a806      	add	r0, sp, #24
 8083fa6:	f004 f9b7 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8083faa:	4628      	mov	r0, r5
 8083fac:	9906      	ldr	r1, [sp, #24]
 8083fae:	f004 fb4e 	bl	808864e <_ZN5Print7printlnEPKc>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8083fb2:	a806      	add	r0, sp, #24
 8083fb4:	f004 f966 	bl	8088284 <_ZN6StringD1Ev>
 8083fb8:	e7bc      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 't'){
 8083fba:	2874      	cmp	r0, #116	; 0x74
 8083fbc:	d102      	bne.n	8083fc4 <_Z10serialMenuv+0xd8>
        serialGetTimeDate();
 8083fbe:	f7ff f9d5 	bl	808336c <_Z17serialGetTimeDatev>
 8083fc2:	e7b7      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'u'){
 8083fc4:	2875      	cmp	r0, #117	; 0x75
 8083fc6:	d102      	bne.n	8083fce <_Z10serialMenuv+0xe2>
        serialGetZone();
 8083fc8:	f7ff fa20 	bl	808340c <_Z13serialGetZonev>
 8083fcc:	e7b2      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'v'){
 8083fce:	2876      	cmp	r0, #118	; 0x76
 8083fd0:	d102      	bne.n	8083fd8 <_Z10serialMenuv+0xec>
        serialGetDeviceId();
 8083fd2:	f7ff f90f 	bl	80831f4 <_Z17serialGetDeviceIdv>
 8083fd6:	e7ad      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'w'){
 8083fd8:	2877      	cmp	r0, #119	; 0x77
 8083fda:	d102      	bne.n	8083fe2 <_Z10serialMenuv+0xf6>
        serialGetWifiCredentials();
 8083fdc:	f7fe fff0 	bl	8082fc0 <_Z24serialGetWifiCredentialsv>
 8083fe0:	e7a8      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'y'){
 8083fe2:	2879      	cmp	r0, #121	; 0x79
 8083fe4:	d113      	bne.n	808400e <_Z10serialMenuv+0x122>
        if(serial_cellular_enabled == 0){
 8083fe6:	4d6a      	ldr	r5, [pc, #424]	; (8084190 <_Z10serialMenuv+0x2a4>)
 8083fe8:	682b      	ldr	r3, [r5, #0]
 8083fea:	b963      	cbnz	r3, 8084006 <_Z10serialMenuv+0x11a>
            Serial.println("Enabling Cellular.");
 8083fec:	f005 fb7c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8083ff0:	4968      	ldr	r1, [pc, #416]	; (8084194 <_Z10serialMenuv+0x2a8>)
            Serial.println("Cellular already enabled.");
 8083ff2:	f004 fb2c 	bl	808864e <_ZN5Print7printlnEPKc>
        serial_cellular_enabled = 1;
 8083ff6:	2301      	movs	r3, #1
        serial_cellular_enabled = 0;
 8083ff8:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8083ffa:	f005 fea3 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8083ffe:	2204      	movs	r2, #4
 8084000:	2044      	movs	r0, #68	; 0x44
 8084002:	4963      	ldr	r1, [pc, #396]	; (8084190 <_Z10serialMenuv+0x2a4>)
 8084004:	e7bb      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Cellular already enabled.");
 8084006:	f005 fb6f 	bl	80896e8 <_Z16_fetch_usbserialv>
 808400a:	4963      	ldr	r1, [pc, #396]	; (8084198 <_Z10serialMenuv+0x2ac>)
 808400c:	e7f1      	b.n	8083ff2 <_Z10serialMenuv+0x106>
    }else if(incomingByte == 'z'){
 808400e:	287a      	cmp	r0, #122	; 0x7a
 8084010:	d117      	bne.n	8084042 <_Z10serialMenuv+0x156>
        if(serial_cellular_enabled == 1){
 8084012:	4d5f      	ldr	r5, [pc, #380]	; (8084190 <_Z10serialMenuv+0x2a4>)
 8084014:	682b      	ldr	r3, [r5, #0]
 8084016:	2b01      	cmp	r3, #1
 8084018:	d10d      	bne.n	8084036 <_Z10serialMenuv+0x14a>
            Serial.println("Disabling Cellular");
 808401a:	f005 fb65 	bl	80896e8 <_Z16_fetch_usbserialv>
 808401e:	495f      	ldr	r1, [pc, #380]	; (808419c <_Z10serialMenuv+0x2b0>)
 8084020:	f004 fb15 	bl	808864e <_ZN5Print7printlnEPKc>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8084024:	2300      	movs	r3, #0
 8084026:	485e      	ldr	r0, [pc, #376]	; (80841a0 <_Z10serialMenuv+0x2b4>)
 8084028:	461a      	mov	r2, r3
 808402a:	4619      	mov	r1, r3
 808402c:	6840      	ldr	r0, [r0, #4]
 808402e:	f003 fd5b 	bl	8087ae8 <network_off>
        serial_cellular_enabled = 0;
 8084032:	2300      	movs	r3, #0
 8084034:	e7e0      	b.n	8083ff8 <_Z10serialMenuv+0x10c>
            Serial.println("Cellular already disabled.");
 8084036:	f005 fb57 	bl	80896e8 <_Z16_fetch_usbserialv>
 808403a:	495a      	ldr	r1, [pc, #360]	; (80841a4 <_Z10serialMenuv+0x2b8>)
 808403c:	f004 fb07 	bl	808864e <_ZN5Print7printlnEPKc>
 8084040:	e7f7      	b.n	8084032 <_Z10serialMenuv+0x146>
    }else if(incomingByte == 'F'){
 8084042:	2846      	cmp	r0, #70	; 0x46
 8084044:	d111      	bne.n	808406a <_Z10serialMenuv+0x17e>
        if(temperature_units == CELCIUS){
 8084046:	4b58      	ldr	r3, [pc, #352]	; (80841a8 <_Z10serialMenuv+0x2bc>)
 8084048:	681a      	ldr	r2, [r3, #0]
 808404a:	2a01      	cmp	r2, #1
 808404c:	d102      	bne.n	8084054 <_Z10serialMenuv+0x168>
            temperature_units = FARENHEIT;
 808404e:	2200      	movs	r2, #0
            temperature_units = CELCIUS;
 8084050:	601a      	str	r2, [r3, #0]
 8084052:	e004      	b.n	808405e <_Z10serialMenuv+0x172>
            Serial.println("Temperature units already set to Fareneit.");
 8084054:	f005 fb48 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084058:	4954      	ldr	r1, [pc, #336]	; (80841ac <_Z10serialMenuv+0x2c0>)
 808405a:	f004 faf8 	bl	808864e <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808405e:	f005 fe71 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8084062:	2204      	movs	r2, #4
 8084064:	2060      	movs	r0, #96	; 0x60
 8084066:	4950      	ldr	r1, [pc, #320]	; (80841a8 <_Z10serialMenuv+0x2bc>)
 8084068:	e789      	b.n	8083f7e <_Z10serialMenuv+0x92>
    }else if(incomingByte == 'C'){
 808406a:	2843      	cmp	r0, #67	; 0x43
 808406c:	d108      	bne.n	8084080 <_Z10serialMenuv+0x194>
        if(temperature_units == FARENHEIT){
 808406e:	4b4e      	ldr	r3, [pc, #312]	; (80841a8 <_Z10serialMenuv+0x2bc>)
 8084070:	681a      	ldr	r2, [r3, #0]
 8084072:	b90a      	cbnz	r2, 8084078 <_Z10serialMenuv+0x18c>
            temperature_units = CELCIUS;
 8084074:	2201      	movs	r2, #1
 8084076:	e7eb      	b.n	8084050 <_Z10serialMenuv+0x164>
            Serial.println("Temperature units already set to Celcius.");
 8084078:	f005 fb36 	bl	80896e8 <_Z16_fetch_usbserialv>
 808407c:	494c      	ldr	r1, [pc, #304]	; (80841b0 <_Z10serialMenuv+0x2c4>)
 808407e:	e7ec      	b.n	808405a <_Z10serialMenuv+0x16e>
    }else if(incomingByte == 'D'){
 8084080:	2844      	cmp	r0, #68	; 0x44
 8084082:	d114      	bne.n	80840ae <_Z10serialMenuv+0x1c2>
        if(new_temperature_sensor_enabled == 1){
 8084084:	4b4b      	ldr	r3, [pc, #300]	; (80841b4 <_Z10serialMenuv+0x2c8>)
 8084086:	681a      	ldr	r2, [r3, #0]
 8084088:	2a01      	cmp	r2, #1
 808408a:	d10c      	bne.n	80840a6 <_Z10serialMenuv+0x1ba>
            new_temperature_sensor_enabled = 0;
 808408c:	2200      	movs	r2, #0
 808408e:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8084090:	f005 fb2a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084094:	4948      	ldr	r1, [pc, #288]	; (80841b8 <_Z10serialMenuv+0x2cc>)
            Serial.println("Temperature sensor already disabled");
 8084096:	f004 fada 	bl	808864e <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808409a:	f005 fe53 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808409e:	2204      	movs	r2, #4
 80840a0:	2068      	movs	r0, #104	; 0x68
 80840a2:	4944      	ldr	r1, [pc, #272]	; (80841b4 <_Z10serialMenuv+0x2c8>)
 80840a4:	e76b      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Temperature sensor already disabled");
 80840a6:	f005 fb1f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80840aa:	4944      	ldr	r1, [pc, #272]	; (80841bc <_Z10serialMenuv+0x2d0>)
 80840ac:	e7f3      	b.n	8084096 <_Z10serialMenuv+0x1aa>
    }else if(incomingByte == 'E'){
 80840ae:	2845      	cmp	r0, #69	; 0x45
 80840b0:	d10d      	bne.n	80840ce <_Z10serialMenuv+0x1e2>
        if(new_temperature_sensor_enabled == 1){
 80840b2:	4b40      	ldr	r3, [pc, #256]	; (80841b4 <_Z10serialMenuv+0x2c8>)
 80840b4:	681a      	ldr	r2, [r3, #0]
 80840b6:	2a01      	cmp	r2, #1
 80840b8:	d103      	bne.n	80840c2 <_Z10serialMenuv+0x1d6>
            Serial.println("Temperature sensor already enabled");
 80840ba:	f005 fb15 	bl	80896e8 <_Z16_fetch_usbserialv>
 80840be:	4940      	ldr	r1, [pc, #256]	; (80841c0 <_Z10serialMenuv+0x2d4>)
 80840c0:	e7e9      	b.n	8084096 <_Z10serialMenuv+0x1aa>
            new_temperature_sensor_enabled = 1;
 80840c2:	2201      	movs	r2, #1
 80840c4:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 80840c6:	f005 fb0f 	bl	80896e8 <_Z16_fetch_usbserialv>
 80840ca:	493e      	ldr	r1, [pc, #248]	; (80841c4 <_Z10serialMenuv+0x2d8>)
 80840cc:	e7e3      	b.n	8084096 <_Z10serialMenuv+0x1aa>
    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 80840ce:	2847      	cmp	r0, #71	; 0x47
 80840d0:	d114      	bne.n	80840fc <_Z10serialMenuv+0x210>
        if(ozone_analog_enabled == 1){
 80840d2:	4b3d      	ldr	r3, [pc, #244]	; (80841c8 <_Z10serialMenuv+0x2dc>)
 80840d4:	681a      	ldr	r2, [r3, #0]
 80840d6:	2a01      	cmp	r2, #1
 80840d8:	d10a      	bne.n	80840f0 <_Z10serialMenuv+0x204>
            Serial.println("Analog reading of ozone already enabled");
 80840da:	f005 fb05 	bl	80896e8 <_Z16_fetch_usbserialv>
 80840de:	493b      	ldr	r1, [pc, #236]	; (80841cc <_Z10serialMenuv+0x2e0>)
            Serial.println("Analog reading of ozone now enabled");
 80840e0:	f004 fab5 	bl	808864e <_ZN5Print7printlnEPKc>
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80840e4:	f005 fe2e 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80840e8:	2204      	movs	r2, #4
 80840ea:	206c      	movs	r0, #108	; 0x6c
 80840ec:	4936      	ldr	r1, [pc, #216]	; (80841c8 <_Z10serialMenuv+0x2dc>)
 80840ee:	e746      	b.n	8083f7e <_Z10serialMenuv+0x92>
            ozone_analog_enabled = 1;
 80840f0:	2201      	movs	r2, #1
 80840f2:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 80840f4:	f005 faf8 	bl	80896e8 <_Z16_fetch_usbserialv>
 80840f8:	4935      	ldr	r1, [pc, #212]	; (80841d0 <_Z10serialMenuv+0x2e4>)
 80840fa:	e7f1      	b.n	80840e0 <_Z10serialMenuv+0x1f4>
    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 80840fc:	2848      	cmp	r0, #72	; 0x48
 80840fe:	d10c      	bne.n	808411a <_Z10serialMenuv+0x22e>
        if(ozone_analog_enabled == 0){
 8084100:	4b31      	ldr	r3, [pc, #196]	; (80841c8 <_Z10serialMenuv+0x2dc>)
 8084102:	681a      	ldr	r2, [r3, #0]
 8084104:	b91a      	cbnz	r2, 808410e <_Z10serialMenuv+0x222>
            Serial.println("Digital reading of ozone already enabled");
 8084106:	f005 faef 	bl	80896e8 <_Z16_fetch_usbserialv>
 808410a:	4932      	ldr	r1, [pc, #200]	; (80841d4 <_Z10serialMenuv+0x2e8>)
 808410c:	e7e8      	b.n	80840e0 <_Z10serialMenuv+0x1f4>
            ozone_analog_enabled = 0;
 808410e:	2200      	movs	r2, #0
 8084110:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 8084112:	f005 fae9 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084116:	4930      	ldr	r1, [pc, #192]	; (80841d8 <_Z10serialMenuv+0x2ec>)
 8084118:	e7e2      	b.n	80840e0 <_Z10serialMenuv+0x1f4>
    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 808411a:	2849      	cmp	r0, #73	; 0x49
 808411c:	d102      	bne.n	8084124 <_Z10serialMenuv+0x238>
        serialGetAverageTime();
 808411e:	f7ff f9c1 	bl	80834a4 <_Z20serialGetAverageTimev>
 8084122:	e707      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'J'){
 8084124:	284a      	cmp	r0, #74	; 0x4a
 8084126:	d107      	bne.n	8084138 <_Z10serialMenuv+0x24c>
        resetESP();
 8084128:	f7fe f99e 	bl	8082468 <_Z8resetESPv>
        Serial.println("ESP reset!");
 808412c:	f005 fadc 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084130:	492a      	ldr	r1, [pc, #168]	; (80841dc <_Z10serialMenuv+0x2f0>)
            Serial.println("ABC logic already enabled");
 8084132:	f004 fa8c 	bl	808864e <_ZN5Print7printlnEPKc>
 8084136:	e6fd      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'K'){
 8084138:	284b      	cmp	r0, #75	; 0x4b
 808413a:	d107      	bne.n	808414c <_Z10serialMenuv+0x260>
      Serial.println("Outputting GPS continuously");
 808413c:	f005 fad4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084140:	4927      	ldr	r1, [pc, #156]	; (80841e0 <_Z10serialMenuv+0x2f4>)
 8084142:	f004 fa84 	bl	808864e <_ZN5Print7printlnEPKc>
      echoGps();
 8084146:	f7fd fa2f 	bl	80815a8 <_Z7echoGpsv>
 808414a:	e6f3      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'L'){
 808414c:	284c      	cmp	r0, #76	; 0x4c
 808414e:	d102      	bne.n	8084156 <_Z10serialMenuv+0x26a>
      serialResetSettings();
 8084150:	f7ff f8d4 	bl	80832fc <_Z19serialResetSettingsv>
 8084154:	e6ee      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'M'){
 8084156:	284d      	cmp	r0, #77	; 0x4d
 8084158:	d155      	bne.n	8084206 <_Z10serialMenuv+0x31a>
      if(battery_threshold_enable == 1){
 808415a:	4d22      	ldr	r5, [pc, #136]	; (80841e4 <_Z10serialMenuv+0x2f8>)
 808415c:	682b      	ldr	r3, [r5, #0]
 808415e:	2b01      	cmp	r3, #1
 8084160:	d144      	bne.n	80841ec <_Z10serialMenuv+0x300>
          Serial.println("Battery threshold already enabled");
 8084162:	f005 fac1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084166:	4920      	ldr	r1, [pc, #128]	; (80841e8 <_Z10serialMenuv+0x2fc>)
 8084168:	e7e3      	b.n	8084132 <_Z10serialMenuv+0x246>
 808416a:	bf00      	nop
 808416c:	20000490 	.word	0x20000490
 8084170:	200003c0 	.word	0x200003c0
 8084174:	42c80000 	.word	0x42c80000
 8084178:	0808e890 	.word	0x0808e890
 808417c:	0808ef1b 	.word	0x0808ef1b
 8084180:	0808e896 	.word	0x0808e896
 8084184:	200003c8 	.word	0x200003c8
 8084188:	0808e8b0 	.word	0x0808e8b0
 808418c:	0808d8b1 	.word	0x0808d8b1
 8084190:	200009fc 	.word	0x200009fc
 8084194:	0808e8cb 	.word	0x0808e8cb
 8084198:	0808e8de 	.word	0x0808e8de
 808419c:	0808e8f8 	.word	0x0808e8f8
 80841a0:	20000b30 	.word	0x20000b30
 80841a4:	0808e90b 	.word	0x0808e90b
 80841a8:	20000a30 	.word	0x20000a30
 80841ac:	0808e926 	.word	0x0808e926
 80841b0:	0808e951 	.word	0x0808e951
 80841b4:	20000524 	.word	0x20000524
 80841b8:	0808e97b 	.word	0x0808e97b
 80841bc:	0808e99c 	.word	0x0808e99c
 80841c0:	0808e9c0 	.word	0x0808e9c0
 80841c4:	0808e9e3 	.word	0x0808e9e3
 80841c8:	2000052c 	.word	0x2000052c
 80841cc:	0808ea01 	.word	0x0808ea01
 80841d0:	0808ea29 	.word	0x0808ea29
 80841d4:	0808ea4d 	.word	0x0808ea4d
 80841d8:	0808ea76 	.word	0x0808ea76
 80841dc:	0808d87e 	.word	0x0808d87e
 80841e0:	0808ea9b 	.word	0x0808ea9b
 80841e4:	20000344 	.word	0x20000344
 80841e8:	0808eab7 	.word	0x0808eab7
          Serial.println("Enabling battery threshold limiting");
 80841ec:	f005 fa7c 	bl	80896e8 <_Z16_fetch_usbserialv>
 80841f0:	49aa      	ldr	r1, [pc, #680]	; (808449c <_Z10serialMenuv+0x5b0>)
 80841f2:	f004 fa2c 	bl	808864e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 80841f6:	2301      	movs	r3, #1
          battery_threshold_enable = 0;
 80841f8:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80841fa:	f005 fda3 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80841fe:	2204      	movs	r2, #4
 8084200:	4629      	mov	r1, r5
 8084202:	2078      	movs	r0, #120	; 0x78
 8084204:	e6bb      	b.n	8083f7e <_Z10serialMenuv+0x92>
    }else if(incomingByte == 'N'){
 8084206:	284e      	cmp	r0, #78	; 0x4e
 8084208:	d10d      	bne.n	8084226 <_Z10serialMenuv+0x33a>
      if(battery_threshold_enable == 0){
 808420a:	4da5      	ldr	r5, [pc, #660]	; (80844a0 <_Z10serialMenuv+0x5b4>)
 808420c:	682b      	ldr	r3, [r5, #0]
 808420e:	b91b      	cbnz	r3, 8084218 <_Z10serialMenuv+0x32c>
          Serial.println("Battery threshold already disabled");
 8084210:	f005 fa6a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084214:	49a3      	ldr	r1, [pc, #652]	; (80844a4 <_Z10serialMenuv+0x5b8>)
 8084216:	e78c      	b.n	8084132 <_Z10serialMenuv+0x246>
          Serial.println("Disabling battery threshold limiting");
 8084218:	f005 fa66 	bl	80896e8 <_Z16_fetch_usbserialv>
 808421c:	49a2      	ldr	r1, [pc, #648]	; (80844a8 <_Z10serialMenuv+0x5bc>)
 808421e:	f004 fa16 	bl	808864e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 8084222:	2300      	movs	r3, #0
 8084224:	e7e8      	b.n	80841f8 <_Z10serialMenuv+0x30c>
    }else if(incomingByte == 'O'){
 8084226:	284f      	cmp	r0, #79	; 0x4f
 8084228:	d107      	bne.n	808423a <_Z10serialMenuv+0x34e>
        Serial.println("Enabling low power for gps");
 808422a:	f005 fa5d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808422e:	499f      	ldr	r1, [pc, #636]	; (80844ac <_Z10serialMenuv+0x5c0>)
 8084230:	f004 fa0d 	bl	808864e <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 8084234:	f7fd fa24 	bl	8081680 <_Z17enableLowPowerGPSv>
 8084238:	e67c      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte  == 'P'){
 808423a:	2850      	cmp	r0, #80	; 0x50
 808423c:	d109      	bne.n	8084252 <_Z10serialMenuv+0x366>
        Serial.println("Turning off batfet");
 808423e:	f005 fa53 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084242:	499b      	ldr	r1, [pc, #620]	; (80844b0 <_Z10serialMenuv+0x5c4>)
 8084244:	f004 fa03 	bl	808864e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 8084248:	216b      	movs	r1, #107	; 0x6b
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 808424a:	2007      	movs	r0, #7
 808424c:	f7fc fdd6 	bl	8080dfc <_Z13writeRegisterhh>
 8084250:	e670      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Q'){
 8084252:	2851      	cmp	r0, #81	; 0x51
 8084254:	d106      	bne.n	8084264 <_Z10serialMenuv+0x378>
        Serial.println("Allowing batfet to turn on");
 8084256:	f005 fa47 	bl	80896e8 <_Z16_fetch_usbserialv>
 808425a:	4996      	ldr	r1, [pc, #600]	; (80844b4 <_Z10serialMenuv+0x5c8>)
 808425c:	f004 f9f7 	bl	808864e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 8084260:	214b      	movs	r1, #75	; 0x4b
 8084262:	e7f2      	b.n	808424a <_Z10serialMenuv+0x35e>
    }else if(incomingByte == 'R'){
 8084264:	2852      	cmp	r0, #82	; 0x52
 8084266:	d118      	bne.n	808429a <_Z10serialMenuv+0x3ae>
        if(abc_logic_enabled){
 8084268:	4d93      	ldr	r5, [pc, #588]	; (80844b8 <_Z10serialMenuv+0x5cc>)
 808426a:	682b      	ldr	r3, [r5, #0]
 808426c:	b18b      	cbz	r3, 8084292 <_Z10serialMenuv+0x3a6>
            Serial.println("Disabling ABC logic for CO2 sensor");
 808426e:	f005 fa3b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084272:	4992      	ldr	r1, [pc, #584]	; (80844bc <_Z10serialMenuv+0x5d0>)
 8084274:	f004 f9eb 	bl	808864e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 8084278:	2300      	movs	r3, #0
 808427a:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 808427c:	f005 fd62 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8084280:	2204      	movs	r2, #4
 8084282:	4629      	mov	r1, r5
 8084284:	207c      	movs	r0, #124	; 0x7c
 8084286:	f003 fa11 	bl	80876ac <HAL_EEPROM_Put>
            t6713.disableABCLogic();
 808428a:	488d      	ldr	r0, [pc, #564]	; (80844c0 <_Z10serialMenuv+0x5d4>)
 808428c:	f001 f82b 	bl	80852e6 <_ZN13Telaire_T671315disableABCLogicEv>
 8084290:	e650      	b.n	8083f34 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already disabled");
 8084292:	f005 fa29 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084296:	498b      	ldr	r1, [pc, #556]	; (80844c4 <_Z10serialMenuv+0x5d8>)
 8084298:	e74b      	b.n	8084132 <_Z10serialMenuv+0x246>
    }else if(incomingByte == 'S'){
 808429a:	2853      	cmp	r0, #83	; 0x53
 808429c:	d118      	bne.n	80842d0 <_Z10serialMenuv+0x3e4>
        if(!abc_logic_enabled){
 808429e:	4d86      	ldr	r5, [pc, #536]	; (80844b8 <_Z10serialMenuv+0x5cc>)
 80842a0:	682b      	ldr	r3, [r5, #0]
 80842a2:	b98b      	cbnz	r3, 80842c8 <_Z10serialMenuv+0x3dc>
            Serial.println("Enabling abc logic for CO2 sensor");
 80842a4:	f005 fa20 	bl	80896e8 <_Z16_fetch_usbserialv>
 80842a8:	4987      	ldr	r1, [pc, #540]	; (80844c8 <_Z10serialMenuv+0x5dc>)
 80842aa:	f004 f9d0 	bl	808864e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 80842ae:	2301      	movs	r3, #1
 80842b0:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80842b2:	f005 fd47 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80842b6:	2204      	movs	r2, #4
 80842b8:	4629      	mov	r1, r5
 80842ba:	207c      	movs	r0, #124	; 0x7c
 80842bc:	f003 f9f6 	bl	80876ac <HAL_EEPROM_Put>
            t6713.enableABCLogic();
 80842c0:	487f      	ldr	r0, [pc, #508]	; (80844c0 <_Z10serialMenuv+0x5d4>)
 80842c2:	f001 f835 	bl	8085330 <_ZN13Telaire_T671314enableABCLogicEv>
 80842c6:	e635      	b.n	8083f34 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already enabled");
 80842c8:	f005 fa0e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80842cc:	497f      	ldr	r1, [pc, #508]	; (80844cc <_Z10serialMenuv+0x5e0>)
 80842ce:	e730      	b.n	8084132 <_Z10serialMenuv+0x246>
    }else if(incomingByte == 'T'){
 80842d0:	2854      	cmp	r0, #84	; 0x54
 80842d2:	d116      	bne.n	8084302 <_Z10serialMenuv+0x416>
        if(!hih8120_enabled){
 80842d4:	4d7e      	ldr	r5, [pc, #504]	; (80844d0 <_Z10serialMenuv+0x5e4>)
 80842d6:	682b      	ldr	r3, [r5, #0]
 80842d8:	b963      	cbnz	r3, 80842f4 <_Z10serialMenuv+0x408>
            Serial.println("Enabling HIH8120 RH sensor");
 80842da:	f005 fa05 	bl	80896e8 <_Z16_fetch_usbserialv>
 80842de:	497d      	ldr	r1, [pc, #500]	; (80844d4 <_Z10serialMenuv+0x5e8>)
 80842e0:	f004 f9b5 	bl	808864e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 80842e4:	2301      	movs	r3, #1
            hih8120_enabled = 0;
 80842e6:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80842e8:	f005 fd2c 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80842ec:	2204      	movs	r2, #4
 80842ee:	4629      	mov	r1, r5
 80842f0:	2080      	movs	r0, #128	; 0x80
 80842f2:	e644      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Disabling HIH8120 RH sensor");
 80842f4:	f005 f9f8 	bl	80896e8 <_Z16_fetch_usbserialv>
 80842f8:	4977      	ldr	r1, [pc, #476]	; (80844d8 <_Z10serialMenuv+0x5ec>)
 80842fa:	f004 f9a8 	bl	808864e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 80842fe:	2300      	movs	r3, #0
 8084300:	e7f1      	b.n	80842e6 <_Z10serialMenuv+0x3fa>
    }else if(incomingByte == 'U'){
 8084302:	2855      	cmp	r0, #85	; 0x55
 8084304:	d116      	bne.n	8084334 <_Z10serialMenuv+0x448>
        if(!CO_socket){
 8084306:	4d75      	ldr	r5, [pc, #468]	; (80844dc <_Z10serialMenuv+0x5f0>)
 8084308:	682b      	ldr	r3, [r5, #0]
 808430a:	b963      	cbnz	r3, 8084326 <_Z10serialMenuv+0x43a>
            Serial.println("Now reading CO from U20-Alpha2");
 808430c:	f005 f9ec 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084310:	4973      	ldr	r1, [pc, #460]	; (80844e0 <_Z10serialMenuv+0x5f4>)
 8084312:	f004 f99c 	bl	808864e <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 8084316:	2301      	movs	r3, #1
            CO_socket = 0;
 8084318:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 808431a:	f005 fd13 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 808431e:	2204      	movs	r2, #4
 8084320:	4629      	mov	r1, r5
 8084322:	2084      	movs	r0, #132	; 0x84
 8084324:	e62b      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Now reading CO from U19-Alpha1");
 8084326:	f005 f9df 	bl	80896e8 <_Z16_fetch_usbserialv>
 808432a:	496e      	ldr	r1, [pc, #440]	; (80844e4 <_Z10serialMenuv+0x5f8>)
 808432c:	f004 f98f 	bl	808864e <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 8084330:	2300      	movs	r3, #0
 8084332:	e7f1      	b.n	8084318 <_Z10serialMenuv+0x42c>
    }else if(incomingByte == 'V'){
 8084334:	2856      	cmp	r0, #86	; 0x56
 8084336:	d108      	bne.n	808434a <_Z10serialMenuv+0x45e>
        Serial.println("Reseting the CO2 sensor");
 8084338:	f005 f9d6 	bl	80896e8 <_Z16_fetch_usbserialv>
 808433c:	496a      	ldr	r1, [pc, #424]	; (80844e8 <_Z10serialMenuv+0x5fc>)
 808433e:	f004 f986 	bl	808864e <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 8084342:	485f      	ldr	r0, [pc, #380]	; (80844c0 <_Z10serialMenuv+0x5d4>)
 8084344:	f000 ffaa 	bl	808529c <_ZN13Telaire_T671311resetSensorEv>
 8084348:	e5f4      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '1'){
 808434a:	2831      	cmp	r0, #49	; 0x31
 808434c:	d102      	bne.n	8084354 <_Z10serialMenuv+0x468>
        serialGetLowerLimit();
 808434e:	f7ff fadd 	bl	808390c <_Z19serialGetLowerLimitv>
 8084352:	e5ef      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '2'){
 8084354:	2832      	cmp	r0, #50	; 0x32
 8084356:	d102      	bne.n	808435e <_Z10serialMenuv+0x472>
        serialGetUpperLimit();
 8084358:	f7ff fb5c 	bl	8083a14 <_Z19serialGetUpperLimitv>
 808435c:	e5ea      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '3'){
 808435e:	2833      	cmp	r0, #51	; 0x33
 8084360:	d116      	bne.n	8084390 <_Z10serialMenuv+0x4a4>
        Serial.print("APP Version: ");
 8084362:	f005 f9c1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084366:	4961      	ldr	r1, [pc, #388]	; (80844ec <_Z10serialMenuv+0x600>)
 8084368:	f004 f95e 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 808436c:	f005 f9bc 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084370:	220a      	movs	r2, #10
 8084372:	2146      	movs	r1, #70	; 0x46
 8084374:	f7fc fc67 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        Serial.print("Build: ");
 8084378:	f005 f9b6 	bl	80896e8 <_Z16_fetch_usbserialv>
 808437c:	495c      	ldr	r1, [pc, #368]	; (80844f0 <_Z10serialMenuv+0x604>)
 808437e:	f004 f953 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 8084382:	f005 f9b1 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084386:	220a      	movs	r2, #10
 8084388:	210d      	movs	r1, #13
 808438a:	f7fc fc5c 	bl	8080c46 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
 808438e:	e5d1      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '4'){
 8084390:	2834      	cmp	r0, #52	; 0x34
 8084392:	d113      	bne.n	80843bc <_Z10serialMenuv+0x4d0>
        if(ozone_enabled == 0){
 8084394:	4d57      	ldr	r5, [pc, #348]	; (80844f4 <_Z10serialMenuv+0x608>)
 8084396:	682b      	ldr	r3, [r5, #0]
 8084398:	b963      	cbnz	r3, 80843b4 <_Z10serialMenuv+0x4c8>
            Serial.println("Enabling Ozone");
 808439a:	f005 f9a5 	bl	80896e8 <_Z16_fetch_usbserialv>
 808439e:	4956      	ldr	r1, [pc, #344]	; (80844f8 <_Z10serialMenuv+0x60c>)
            Serial.println("Ozone already enabled");
 80843a0:	f004 f955 	bl	808864e <_ZN5Print7printlnEPKc>
        ozone_enabled = 1;
 80843a4:	2301      	movs	r3, #1
        ozone_enabled = 0;
 80843a6:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 80843a8:	f005 fccc 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80843ac:	2204      	movs	r2, #4
 80843ae:	2058      	movs	r0, #88	; 0x58
 80843b0:	4950      	ldr	r1, [pc, #320]	; (80844f4 <_Z10serialMenuv+0x608>)
 80843b2:	e5e4      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Ozone already enabled");
 80843b4:	f005 f998 	bl	80896e8 <_Z16_fetch_usbserialv>
 80843b8:	4950      	ldr	r1, [pc, #320]	; (80844fc <_Z10serialMenuv+0x610>)
 80843ba:	e7f1      	b.n	80843a0 <_Z10serialMenuv+0x4b4>
    }else if(incomingByte == '5'){
 80843bc:	2835      	cmp	r0, #53	; 0x35
 80843be:	d10e      	bne.n	80843de <_Z10serialMenuv+0x4f2>
        if(ozone_enabled == 1){
 80843c0:	4d4c      	ldr	r5, [pc, #304]	; (80844f4 <_Z10serialMenuv+0x608>)
 80843c2:	682b      	ldr	r3, [r5, #0]
 80843c4:	2b01      	cmp	r3, #1
 80843c6:	d106      	bne.n	80843d6 <_Z10serialMenuv+0x4ea>
            Serial.println("Disabling Ozone");
 80843c8:	f005 f98e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80843cc:	494c      	ldr	r1, [pc, #304]	; (8084500 <_Z10serialMenuv+0x614>)
            Serial.println("Ozone already disabled");
 80843ce:	f004 f93e 	bl	808864e <_ZN5Print7printlnEPKc>
        ozone_enabled = 0;
 80843d2:	2300      	movs	r3, #0
 80843d4:	e7e7      	b.n	80843a6 <_Z10serialMenuv+0x4ba>
            Serial.println("Ozone already disabled");
 80843d6:	f005 f987 	bl	80896e8 <_Z16_fetch_usbserialv>
 80843da:	494a      	ldr	r1, [pc, #296]	; (8084504 <_Z10serialMenuv+0x618>)
 80843dc:	e7f7      	b.n	80843ce <_Z10serialMenuv+0x4e2>
    }else if(incomingByte == '6'){
 80843de:	2836      	cmp	r0, #54	; 0x36
 80843e0:	d113      	bne.n	808440a <_Z10serialMenuv+0x51e>
        if(voc_enabled == 0){
 80843e2:	4d49      	ldr	r5, [pc, #292]	; (8084508 <_Z10serialMenuv+0x61c>)
 80843e4:	682b      	ldr	r3, [r5, #0]
 80843e6:	b963      	cbnz	r3, 8084402 <_Z10serialMenuv+0x516>
            Serial.println("Enabling VOC's");
 80843e8:	f005 f97e 	bl	80896e8 <_Z16_fetch_usbserialv>
 80843ec:	4947      	ldr	r1, [pc, #284]	; (808450c <_Z10serialMenuv+0x620>)
            Serial.println("VOC's already enabled");
 80843ee:	f004 f92e 	bl	808864e <_ZN5Print7printlnEPKc>
        voc_enabled = 1;
 80843f2:	2301      	movs	r3, #1
        voc_enabled = 0;
 80843f4:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80843f6:	f005 fca5 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80843fa:	2204      	movs	r2, #4
 80843fc:	205c      	movs	r0, #92	; 0x5c
 80843fe:	4942      	ldr	r1, [pc, #264]	; (8084508 <_Z10serialMenuv+0x61c>)
 8084400:	e5bd      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("VOC's already enabled");
 8084402:	f005 f971 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084406:	4942      	ldr	r1, [pc, #264]	; (8084510 <_Z10serialMenuv+0x624>)
 8084408:	e7f1      	b.n	80843ee <_Z10serialMenuv+0x502>
    }else if(incomingByte == '7'){
 808440a:	2837      	cmp	r0, #55	; 0x37
 808440c:	d10e      	bne.n	808442c <_Z10serialMenuv+0x540>
        if(voc_enabled == 1){
 808440e:	4d3e      	ldr	r5, [pc, #248]	; (8084508 <_Z10serialMenuv+0x61c>)
 8084410:	682b      	ldr	r3, [r5, #0]
 8084412:	2b01      	cmp	r3, #1
 8084414:	d106      	bne.n	8084424 <_Z10serialMenuv+0x538>
            Serial.println("Disabling VOC's");
 8084416:	f005 f967 	bl	80896e8 <_Z16_fetch_usbserialv>
 808441a:	493e      	ldr	r1, [pc, #248]	; (8084514 <_Z10serialMenuv+0x628>)
            Serial.println("VOC's already disabled");
 808441c:	f004 f917 	bl	808864e <_ZN5Print7printlnEPKc>
        voc_enabled = 0;
 8084420:	2300      	movs	r3, #0
 8084422:	e7e7      	b.n	80843f4 <_Z10serialMenuv+0x508>
            Serial.println("VOC's already disabled");
 8084424:	f005 f960 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084428:	493b      	ldr	r1, [pc, #236]	; (8084518 <_Z10serialMenuv+0x62c>)
 808442a:	e7f7      	b.n	808441c <_Z10serialMenuv+0x530>
    }else if(incomingByte == '8'){
 808442c:	2838      	cmp	r0, #56	; 0x38
 808442e:	d126      	bne.n	808447e <_Z10serialMenuv+0x592>
        Serial.print("Fault: ");
 8084430:	f005 f95a 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084434:	4939      	ldr	r1, [pc, #228]	; (808451c <_Z10serialMenuv+0x630>)
 8084436:	f004 f8f7 	bl	8088628 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 808443a:	4839      	ldr	r0, [pc, #228]	; (8084520 <_Z10serialMenuv+0x634>)
 808443c:	f003 fc9e 	bl	8087d7c <_ZN4PMIC8getFaultEv>
 8084440:	4680      	mov	r8, r0
        Serial.println(fault);
 8084442:	f005 f951 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084446:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8084448:	220a      	movs	r2, #10
 808444a:	4641      	mov	r1, r8
 808444c:	f004 f913 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 8084450:	4628      	mov	r0, r5
 8084452:	f004 f8f0 	bl	8088636 <_ZN5Print7printlnEv>
        Serial.print("System status: ");
 8084456:	f005 f947 	bl	80896e8 <_Z16_fetch_usbserialv>
 808445a:	4932      	ldr	r1, [pc, #200]	; (8084524 <_Z10serialMenuv+0x638>)
 808445c:	f004 f8e4 	bl	8088628 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 8084460:	482f      	ldr	r0, [pc, #188]	; (8084520 <_Z10serialMenuv+0x634>)
 8084462:	f003 fc88 	bl	8087d76 <_ZN4PMIC15getSystemStatusEv>
 8084466:	4680      	mov	r8, r0
        Serial.println(systemStatus);
 8084468:	f005 f93e 	bl	80896e8 <_Z16_fetch_usbserialv>
 808446c:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 808446e:	220a      	movs	r2, #10
 8084470:	4641      	mov	r1, r8
 8084472:	f004 f900 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 8084476:	4628      	mov	r0, r5
 8084478:	f004 f8dd 	bl	8088636 <_ZN5Print7printlnEv>
        return n;
 808447c:	e55a      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '9'){
 808447e:	2839      	cmp	r0, #57	; 0x39
 8084480:	d102      	bne.n	8084488 <_Z10serialMenuv+0x59c>
        serialIncreaseChargeCurrent();
 8084482:	f7fe fd3b 	bl	8082efc <_Z27serialIncreaseChargeCurrentv>
 8084486:	e555      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '0'){
 8084488:	2830      	cmp	r0, #48	; 0x30
 808448a:	d102      	bne.n	8084492 <_Z10serialMenuv+0x5a6>
        serialIncreaseInputCurrent();
 808448c:	f7fe fcf4 	bl	8082e78 <_Z26serialIncreaseInputCurrentv>
 8084490:	e550      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'A'){
 8084492:	2841      	cmp	r0, #65	; 0x41
 8084494:	d148      	bne.n	8084528 <_Z10serialMenuv+0x63c>
        readAlpha1Constantly();
 8084496:	f7ff fb41 	bl	8083b1c <_Z20readAlpha1Constantlyv>
 808449a:	e54b      	b.n	8083f34 <_Z10serialMenuv+0x48>
 808449c:	0808ead9 	.word	0x0808ead9
 80844a0:	20000344 	.word	0x20000344
 80844a4:	0808eafd 	.word	0x0808eafd
 80844a8:	0808eb20 	.word	0x0808eb20
 80844ac:	0808eb45 	.word	0x0808eb45
 80844b0:	0808eb60 	.word	0x0808eb60
 80844b4:	0808eb73 	.word	0x0808eb73
 80844b8:	20000334 	.word	0x20000334
 80844bc:	0808eb8e 	.word	0x0808eb8e
 80844c0:	20000a20 	.word	0x20000a20
 80844c4:	0808ebb1 	.word	0x0808ebb1
 80844c8:	0808ebcc 	.word	0x0808ebcc
 80844cc:	0808ebee 	.word	0x0808ebee
 80844d0:	2000048c 	.word	0x2000048c
 80844d4:	0808ec08 	.word	0x0808ec08
 80844d8:	0808ec23 	.word	0x0808ec23
 80844dc:	200002d0 	.word	0x200002d0
 80844e0:	0808ec3f 	.word	0x0808ec3f
 80844e4:	0808ec5e 	.word	0x0808ec5e
 80844e8:	0808ec7d 	.word	0x0808ec7d
 80844ec:	0808ec95 	.word	0x0808ec95
 80844f0:	0808d896 	.word	0x0808d896
 80844f4:	20000530 	.word	0x20000530
 80844f8:	0808eca3 	.word	0x0808eca3
 80844fc:	0808ecb2 	.word	0x0808ecb2
 8084500:	0808ecc8 	.word	0x0808ecc8
 8084504:	0808ecd8 	.word	0x0808ecd8
 8084508:	20000a34 	.word	0x20000a34
 808450c:	0808ecef 	.word	0x0808ecef
 8084510:	0808ecfe 	.word	0x0808ecfe
 8084514:	0808ed14 	.word	0x0808ed14
 8084518:	0808ed24 	.word	0x0808ed24
 808451c:	0808ed3b 	.word	0x0808ed3b
 8084520:	20000548 	.word	0x20000548
 8084524:	0808ed43 	.word	0x0808ed43
    }else if(incomingByte == 'B'){
 8084528:	2842      	cmp	r0, #66	; 0x42
 808452a:	d116      	bne.n	808455a <_Z10serialMenuv+0x66e>
        if(output_only_particles == 1){
 808452c:	4b6d      	ldr	r3, [pc, #436]	; (80846e4 <_Z10serialMenuv+0x7f8>)
 808452e:	681a      	ldr	r2, [r3, #0]
 8084530:	2a01      	cmp	r2, #1
 8084532:	d10c      	bne.n	808454e <_Z10serialMenuv+0x662>
            output_only_particles = 0;
 8084534:	2200      	movs	r2, #0
 8084536:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 8084538:	f005 f8d6 	bl	80896e8 <_Z16_fetch_usbserialv>
 808453c:	496a      	ldr	r1, [pc, #424]	; (80846e8 <_Z10serialMenuv+0x7fc>)
            Serial.println("Outputting only PM");
 808453e:	f004 f886 	bl	808864e <_ZN5Print7printlnEPKc>
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8084542:	f005 fbff 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8084546:	2204      	movs	r2, #4
 8084548:	2064      	movs	r0, #100	; 0x64
 808454a:	4966      	ldr	r1, [pc, #408]	; (80846e4 <_Z10serialMenuv+0x7f8>)
 808454c:	e517      	b.n	8083f7e <_Z10serialMenuv+0x92>
            output_only_particles = 1;
 808454e:	2201      	movs	r2, #1
 8084550:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8084552:	f005 f8c9 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084556:	4965      	ldr	r1, [pc, #404]	; (80846ec <_Z10serialMenuv+0x800>)
 8084558:	e7f1      	b.n	808453e <_Z10serialMenuv+0x652>
    }else if(incomingByte == '!'){
 808455a:	2821      	cmp	r0, #33	; 0x21
 808455c:	d13c      	bne.n	80845d8 <_Z10serialMenuv+0x6ec>
        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 808455e:	f005 f8c3 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084562:	4963      	ldr	r1, [pc, #396]	; (80846f0 <_Z10serialMenuv+0x804>)
 8084564:	f004 f873 	bl	808864e <_ZN5Print7printlnEPKc>
            if (! bme.performReading()) {
 8084568:	4d62      	ldr	r5, [pc, #392]	; (80846f4 <_Z10serialMenuv+0x808>)
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 808456a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80846f8 <_Z10serialMenuv+0x80c>
        while(!Serial.available()){
 808456e:	f005 f8bb 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084572:	6803      	ldr	r3, [r0, #0]
 8084574:	691b      	ldr	r3, [r3, #16]
 8084576:	4798      	blx	r3
 8084578:	2800      	cmp	r0, #0
 808457a:	f47f acdb 	bne.w	8083f34 <_Z10serialMenuv+0x48>
            if (! bme.performReading()) {
 808457e:	485d      	ldr	r0, [pc, #372]	; (80846f4 <_Z10serialMenuv+0x808>)
 8084580:	f002 faf8 	bl	8086b74 <_ZN15Adafruit_BME68014performReadingEv>
 8084584:	b938      	cbnz	r0, 8084596 <_Z10serialMenuv+0x6aa>
              Serial.println("Failed to read BME680");
 8084586:	f005 f8af 	bl	80896e8 <_Z16_fetch_usbserialv>
 808458a:	495c      	ldr	r1, [pc, #368]	; (80846fc <_Z10serialMenuv+0x810>)
}
 808458c:	b00b      	add	sp, #44	; 0x2c
 808458e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.println("Exiting serial menu...");
 8084592:	f004 b85c 	b.w	808864e <_ZN5Print7printlnEPKc>
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8084596:	f005 f8a7 	bl	80896e8 <_Z16_fetch_usbserialv>
 808459a:	4639      	mov	r1, r7
 808459c:	4680      	mov	r8, r0
 808459e:	68e8      	ldr	r0, [r5, #12]
 80845a0:	f006 fb34 	bl	808ac0c <__aeabi_fdiv>
 80845a4:	f005 fdd0 	bl	808a148 <__aeabi_f2d>
 80845a8:	4682      	mov	sl, r0
 80845aa:	68a8      	ldr	r0, [r5, #8]
 80845ac:	468b      	mov	fp, r1
 80845ae:	f005 fdcb 	bl	808a148 <__aeabi_f2d>
 80845b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80845b6:	6868      	ldr	r0, [r5, #4]
 80845b8:	f005 fdc6 	bl	808a148 <__aeabi_f2d>
 80845bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80845c0:	6828      	ldr	r0, [r5, #0]
 80845c2:	f005 fdc1 	bl	808a148 <__aeabi_f2d>
 80845c6:	4652      	mov	r2, sl
 80845c8:	e9cd 0100 	strd	r0, r1, [sp]
 80845cc:	465b      	mov	r3, fp
 80845ce:	4649      	mov	r1, r9
 80845d0:	4640      	mov	r0, r8
 80845d2:	f7fc fb4e 	bl	8080c72 <_ZN5Print6printfEPKcz>
        while(!Serial.available()){
 80845d6:	e7ca      	b.n	808456e <_Z10serialMenuv+0x682>
    }else if(incomingByte == '@'){
 80845d8:	2840      	cmp	r0, #64	; 0x40
 80845da:	d113      	bne.n	8084604 <_Z10serialMenuv+0x718>
        if(sensible_iot_en == 1){
 80845dc:	4d48      	ldr	r5, [pc, #288]	; (8084700 <_Z10serialMenuv+0x814>)
 80845de:	682b      	ldr	r3, [r5, #0]
 80845e0:	2b01      	cmp	r3, #1
 80845e2:	d10c      	bne.n	80845fe <_Z10serialMenuv+0x712>
            Serial.println("Disabling sensible iot data push.");
 80845e4:	f005 f880 	bl	80896e8 <_Z16_fetch_usbserialv>
 80845e8:	4946      	ldr	r1, [pc, #280]	; (8084704 <_Z10serialMenuv+0x818>)
 80845ea:	f004 f830 	bl	808864e <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 80845ee:	2300      	movs	r3, #0
 80845f0:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80845f2:	f005 fba7 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 80845f6:	2204      	movs	r2, #4
 80845f8:	4629      	mov	r1, r5
 80845fa:	208c      	movs	r0, #140	; 0x8c
 80845fc:	e4bf      	b.n	8083f7e <_Z10serialMenuv+0x92>
            serialSetSensibleIotEnable();
 80845fe:	f7fe fdb5 	bl	808316c <_Z26serialSetSensibleIotEnablev>
 8084602:	e497      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '#'){
 8084604:	2823      	cmp	r0, #35	; 0x23
 8084606:	d115      	bne.n	8084634 <_Z10serialMenuv+0x748>
        if(car_topper_power_en == 1){
 8084608:	6823      	ldr	r3, [r4, #0]
 808460a:	2b01      	cmp	r3, #1
 808460c:	d10c      	bne.n	8084628 <_Z10serialMenuv+0x73c>
            car_topper_power_en = 0;
 808460e:	2300      	movs	r3, #0
 8084610:	6023      	str	r3, [r4, #0]
            Serial.println("Disabling car topper power.  ");
 8084612:	f005 f869 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084616:	493c      	ldr	r1, [pc, #240]	; (8084708 <_Z10serialMenuv+0x81c>)
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8084618:	f004 f819 	bl	808864e <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 808461c:	f005 fb92 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8084620:	2204      	movs	r2, #4
 8084622:	4621      	mov	r1, r4
 8084624:	2090      	movs	r0, #144	; 0x90
 8084626:	e4aa      	b.n	8083f7e <_Z10serialMenuv+0x92>
            car_topper_power_en = 1;
 8084628:	2301      	movs	r3, #1
 808462a:	6023      	str	r3, [r4, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808462c:	f005 f85c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084630:	4936      	ldr	r1, [pc, #216]	; (808470c <_Z10serialMenuv+0x820>)
 8084632:	e7f1      	b.n	8084618 <_Z10serialMenuv+0x72c>
    }else if(incomingByte == 'W'){
 8084634:	2857      	cmp	r0, #87	; 0x57
 8084636:	d117      	bne.n	8084668 <_Z10serialMenuv+0x77c>
        if(google_location_en == 1){
 8084638:	4d35      	ldr	r5, [pc, #212]	; (8084710 <_Z10serialMenuv+0x824>)
 808463a:	682b      	ldr	r3, [r5, #0]
 808463c:	2b01      	cmp	r3, #1
 808463e:	d10c      	bne.n	808465a <_Z10serialMenuv+0x76e>
            Serial.println("Disabling google location services.");
 8084640:	f005 f852 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084644:	4933      	ldr	r1, [pc, #204]	; (8084714 <_Z10serialMenuv+0x828>)
 8084646:	f004 f802 	bl	808864e <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 808464a:	2300      	movs	r3, #0
            google_location_en = 1;
 808464c:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 808464e:	f005 fb79 	bl	8089d44 <_Z21__fetch_global_EEPROMv>
 8084652:	2204      	movs	r2, #4
 8084654:	4629      	mov	r1, r5
 8084656:	2088      	movs	r0, #136	; 0x88
 8084658:	e491      	b.n	8083f7e <_Z10serialMenuv+0x92>
            Serial.println("Enabling google location services.");
 808465a:	f005 f845 	bl	80896e8 <_Z16_fetch_usbserialv>
 808465e:	492e      	ldr	r1, [pc, #184]	; (8084718 <_Z10serialMenuv+0x82c>)
 8084660:	f003 fff5 	bl	808864e <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 8084664:	2301      	movs	r3, #1
 8084666:	e7f1      	b.n	808464c <_Z10serialMenuv+0x760>
    }else if(incomingByte == 'X'){
 8084668:	2858      	cmp	r0, #88	; 0x58
 808466a:	d107      	bne.n	808467c <_Z10serialMenuv+0x790>
            t6713.calibrate(1);
 808466c:	2101      	movs	r1, #1
 808466e:	482b      	ldr	r0, [pc, #172]	; (808471c <_Z10serialMenuv+0x830>)
 8084670:	f000 fe84 	bl	808537c <_ZN13Telaire_T67139calibrateEi>
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 8084674:	22b4      	movs	r2, #180	; 0xb4
 8084676:	4b2a      	ldr	r3, [pc, #168]	; (8084720 <_Z10serialMenuv+0x834>)
 8084678:	601a      	str	r2, [r3, #0]
 808467a:	e45b      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Z'){
 808467c:	285a      	cmp	r0, #90	; 0x5a
 808467e:	d126      	bne.n	80846ce <_Z10serialMenuv+0x7e2>
        Serial.println("Getting cellular information, this may take a while...");
 8084680:	f005 f832 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084684:	4927      	ldr	r1, [pc, #156]	; (8084724 <_Z10serialMenuv+0x838>)
 8084686:	f003 ffe2 	bl	808864e <_ZN5Print7printlnEPKc>
        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 808468a:	a806      	add	r0, sp, #24
 808468c:	4926      	ldr	r1, [pc, #152]	; (8084728 <_Z10serialMenuv+0x83c>)
 808468e:	f002 fde3 	bl	8087258 <_ZNK19CellularHelperClass7getIMEIEv>
 8084692:	9a06      	ldr	r2, [sp, #24]
 8084694:	4925      	ldr	r1, [pc, #148]	; (808472c <_Z10serialMenuv+0x840>)
 8084696:	4826      	ldr	r0, [pc, #152]	; (8084730 <_Z10serialMenuv+0x844>)
 8084698:	f7fc faf9 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
 808469c:	a806      	add	r0, sp, #24
 808469e:	f003 fdf1 	bl	8088284 <_ZN6StringD1Ev>
        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80846a2:	a806      	add	r0, sp, #24
 80846a4:	4920      	ldr	r1, [pc, #128]	; (8084728 <_Z10serialMenuv+0x83c>)
 80846a6:	f002 fdf3 	bl	8087290 <_ZNK19CellularHelperClass7getIMSIEv>
 80846aa:	9a06      	ldr	r2, [sp, #24]
 80846ac:	4921      	ldr	r1, [pc, #132]	; (8084734 <_Z10serialMenuv+0x848>)
 80846ae:	4820      	ldr	r0, [pc, #128]	; (8084730 <_Z10serialMenuv+0x844>)
 80846b0:	f7fc faed 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
 80846b4:	a806      	add	r0, sp, #24
 80846b6:	f003 fde5 	bl	8088284 <_ZN6StringD1Ev>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80846ba:	a806      	add	r0, sp, #24
 80846bc:	491a      	ldr	r1, [pc, #104]	; (8084728 <_Z10serialMenuv+0x83c>)
 80846be:	f002 fded 	bl	808729c <_ZNK19CellularHelperClass8getICCIDEv>
 80846c2:	9a06      	ldr	r2, [sp, #24]
 80846c4:	491c      	ldr	r1, [pc, #112]	; (8084738 <_Z10serialMenuv+0x84c>)
 80846c6:	481a      	ldr	r0, [pc, #104]	; (8084730 <_Z10serialMenuv+0x844>)
 80846c8:	f7fc fae1 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
 80846cc:	e471      	b.n	8083fb2 <_Z10serialMenuv+0xc6>
    }else if(incomingByte == '*'){
 80846ce:	282a      	cmp	r0, #42	; 0x2a
 80846d0:	d102      	bne.n	80846d8 <_Z10serialMenuv+0x7ec>
        outputCOtoPI();
 80846d2:	f7fe fa33 	bl	8082b3c <_Z12outputCOtoPIv>
 80846d6:	e42d      	b.n	8083f34 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '?'){
 80846d8:	283f      	cmp	r0, #63	; 0x3f
 80846da:	f47f ac2b 	bne.w	8083f34 <_Z10serialMenuv+0x48>
        outputSerialMenuOptions();
 80846de:	f7ff fa3b 	bl	8083b58 <_Z23outputSerialMenuOptionsv>
 80846e2:	e427      	b.n	8083f34 <_Z10serialMenuv+0x48>
 80846e4:	20000528 	.word	0x20000528
 80846e8:	0808ed53 	.word	0x0808ed53
 80846ec:	0808ed67 	.word	0x0808ed67
 80846f0:	0808ed7a 	.word	0x0808ed7a
 80846f4:	20000348 	.word	0x20000348
 80846f8:	0808edcb 	.word	0x0808edcb
 80846fc:	0808edb5 	.word	0x0808edb5
 8084700:	200009f8 	.word	0x200009f8
 8084704:	0808edfc 	.word	0x0808edfc
 8084708:	0808ee1e 	.word	0x0808ee1e
 808470c:	0808ee3c 	.word	0x0808ee3c
 8084710:	20000444 	.word	0x20000444
 8084714:	0808ee84 	.word	0x0808ee84
 8084718:	0808eea8 	.word	0x0808eea8
 808471c:	20000a20 	.word	0x20000a20
 8084720:	200003c4 	.word	0x200003c4
 8084724:	0808eecb 	.word	0x0808eecb
 8084728:	20000a88 	.word	0x20000a88
 808472c:	0808ef02 	.word	0x0808ef02
 8084730:	20000a9c 	.word	0x20000a9c
 8084734:	0808ef0a 	.word	0x0808ef0a
 8084738:	0808ef12 	.word	0x0808ef12

0808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808473c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808473e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8084740:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8084742:	b17c      	cbz	r4, 8084764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8084744:	6863      	ldr	r3, [r4, #4]
 8084746:	3b01      	subs	r3, #1
 8084748:	6063      	str	r3, [r4, #4]
 808474a:	b95b      	cbnz	r3, 8084764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 808474c:	6823      	ldr	r3, [r4, #0]
 808474e:	4620      	mov	r0, r4
 8084750:	689b      	ldr	r3, [r3, #8]
 8084752:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084754:	68a3      	ldr	r3, [r4, #8]
 8084756:	3b01      	subs	r3, #1
 8084758:	60a3      	str	r3, [r4, #8]
 808475a:	b91b      	cbnz	r3, 8084764 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808475c:	6823      	ldr	r3, [r4, #0]
 808475e:	4620      	mov	r0, r4
 8084760:	68db      	ldr	r3, [r3, #12]
 8084762:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8084764:	4628      	mov	r0, r5
 8084766:	bd38      	pop	{r3, r4, r5, pc}

08084768 <_Z16getEspAQSyncDatav>:
void getEspAQSyncData(void){
 8084768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if(counterIndex > MAX_COUNTER_INDEX){
 808476c:	f20f 1908 	addw	r9, pc, #264	; 0x108
 8084770:	e9d9 8900 	ldrd	r8, r9, [r9]
void getEspAQSyncData(void){
 8084774:	b08f      	sub	sp, #60	; 0x3c
    String getAQSyncData = "Z&";
 8084776:	4942      	ldr	r1, [pc, #264]	; (8084880 <_Z16getEspAQSyncDatav+0x118>)
 8084778:	a802      	add	r0, sp, #8
 808477a:	f003 fdcd 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = " ";
 808477e:	4941      	ldr	r1, [pc, #260]	; (8084884 <_Z16getEspAQSyncDatav+0x11c>)
 8084780:	a806      	add	r0, sp, #24
 8084782:	f003 fdc9 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    Serial1.setTimeout(3000);
 8084786:	f005 fab9 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 808478a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 808478e:	f004 f8b3 	bl	80888f8 <_ZN6Stream10setTimeoutEm>
    double counterIndex = 0;
 8084792:	2400      	movs	r4, #0
 8084794:	2500      	movs	r5, #0
    bool timeOut = false;
 8084796:	f04f 0a00 	mov.w	sl, #0
      counterIndex++;
 808479a:	2600      	movs	r6, #0
 808479c:	4f3a      	ldr	r7, [pc, #232]	; (8084888 <_Z16getEspAQSyncDatav+0x120>)
        if(debugging_enabled){
 808479e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 808488c <_Z16getEspAQSyncDatav+0x124>
    while(!Serial1.available() && timeOut == false){
 80847a2:	f005 faab 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 80847a6:	6803      	ldr	r3, [r0, #0]
 80847a8:	691b      	ldr	r3, [r3, #16]
 80847aa:	4798      	blx	r3
 80847ac:	b9e8      	cbnz	r0, 80847ea <_Z16getEspAQSyncDatav+0x82>
 80847ae:	f1ba 0f00 	cmp.w	sl, #0
 80847b2:	d11a      	bne.n	80847ea <_Z16getEspAQSyncDatav+0x82>
      counterIndex++;
 80847b4:	4632      	mov	r2, r6
 80847b6:	463b      	mov	r3, r7
 80847b8:	4620      	mov	r0, r4
 80847ba:	4629      	mov	r1, r5
 80847bc:	f005 fb66 	bl	8089e8c <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 80847c0:	4642      	mov	r2, r8
 80847c2:	464b      	mov	r3, r9
      counterIndex++;
 80847c4:	4604      	mov	r4, r0
 80847c6:	460d      	mov	r5, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 80847c8:	f005 ffa6 	bl	808a718 <__aeabi_dcmpgt>
 80847cc:	2800      	cmp	r0, #0
 80847ce:	d0e8      	beq.n	80847a2 <_Z16getEspAQSyncDatav+0x3a>
        if(debugging_enabled){
 80847d0:	f8db 3000 	ldr.w	r3, [fp]
 80847d4:	b133      	cbz	r3, 80847e4 <_Z16getEspAQSyncDatav+0x7c>
          Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 80847d6:	f004 ff87 	bl	80896e8 <_Z16_fetch_usbserialv>
 80847da:	4622      	mov	r2, r4
 80847dc:	462b      	mov	r3, r5
 80847de:	492c      	ldr	r1, [pc, #176]	; (8084890 <_Z16getEspAQSyncDatav+0x128>)
 80847e0:	f7fc fa47 	bl	8080c72 <_ZN5Print6printfEPKcz>
        timeOut = true;
 80847e4:	f04f 0a01 	mov.w	sl, #1
 80847e8:	e7db      	b.n	80847a2 <_Z16getEspAQSyncDatav+0x3a>
    delay(10);
 80847ea:	200a      	movs	r0, #10
 80847ec:	f004 faa0 	bl	8088d30 <delay>
    recievedData = Serial1.readString();
 80847f0:	f005 fa84 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 80847f4:	4601      	mov	r1, r0
 80847f6:	a80a      	add	r0, sp, #40	; 0x28
 80847f8:	f004 f880 	bl	80888fc <_ZN6Stream10readStringEv>
 80847fc:	a90a      	add	r1, sp, #40	; 0x28
 80847fe:	a806      	add	r0, sp, #24
 8084800:	f003 fdd4 	bl	80883ac <_ZN6StringaSEOS_>
 8084804:	a80a      	add	r0, sp, #40	; 0x28
 8084806:	f003 fd3d 	bl	8088284 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808480a:	f003 f9bd 	bl	8087b88 <spark_cloud_flag_connected>
    if(Particle.connected() && serial_cellular_enabled){
 808480e:	b940      	cbnz	r0, 8084822 <_Z16getEspAQSyncDatav+0xba>
    String recievedData = " ";
 8084810:	a806      	add	r0, sp, #24
 8084812:	f003 fd37 	bl	8088284 <_ZN6StringD1Ev>
    String getAQSyncData = "Z&";
 8084816:	a802      	add	r0, sp, #8
 8084818:	f003 fd34 	bl	8088284 <_ZN6StringD1Ev>
}
 808481c:	b00f      	add	sp, #60	; 0x3c
 808481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(Particle.connected() && serial_cellular_enabled){
 8084822:	4b1c      	ldr	r3, [pc, #112]	; (8084894 <_Z16getEspAQSyncDatav+0x12c>)
 8084824:	681b      	ldr	r3, [r3, #0]
 8084826:	2b00      	cmp	r3, #0
 8084828:	d0f2      	beq.n	8084810 <_Z16getEspAQSyncDatav+0xa8>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 808482a:	4b1b      	ldr	r3, [pc, #108]	; (8084898 <_Z16getEspAQSyncDatav+0x130>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808482c:	9a06      	ldr	r2, [sp, #24]
 808482e:	781b      	ldrb	r3, [r3, #0]
 8084830:	491a      	ldr	r1, [pc, #104]	; (808489c <_Z16getEspAQSyncDatav+0x134>)
 8084832:	f88d 3000 	strb.w	r3, [sp]
 8084836:	a80a      	add	r0, sp, #40	; 0x28
 8084838:	233c      	movs	r3, #60	; 0x3c
 808483a:	f004 fd37 	bl	80892ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808483e:	a80b      	add	r0, sp, #44	; 0x2c
 8084840:	f7ff ff7c 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084844:	f002 ff1a 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084848:	4b15      	ldr	r3, [pc, #84]	; (80848a0 <_Z16getEspAQSyncDatav+0x138>)
 808484a:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 808484c:	f003 f994 	bl	8087b78 <spark_process>
            if(debugging_enabled){
 8084850:	4b0e      	ldr	r3, [pc, #56]	; (808488c <_Z16getEspAQSyncDatav+0x124>)
 8084852:	681b      	ldr	r3, [r3, #0]
 8084854:	2b00      	cmp	r3, #0
 8084856:	d0db      	beq.n	8084810 <_Z16getEspAQSyncDatav+0xa8>
              Serial.println("Published AQSync data!");
 8084858:	f004 ff46 	bl	80896e8 <_Z16_fetch_usbserialv>
 808485c:	4911      	ldr	r1, [pc, #68]	; (80848a4 <_Z16getEspAQSyncDatav+0x13c>)
 808485e:	f003 fef6 	bl	808864e <_ZN5Print7printlnEPKc>
              writeLogFile("Published AQSync data!");
 8084862:	4910      	ldr	r1, [pc, #64]	; (80848a4 <_Z16getEspAQSyncDatav+0x13c>)
 8084864:	a80a      	add	r0, sp, #40	; 0x28
 8084866:	f003 fd57 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 808486a:	a80a      	add	r0, sp, #40	; 0x28
 808486c:	f7fd f8fa 	bl	8081a64 <_Z12writeLogFile6String>
 8084870:	a80a      	add	r0, sp, #40	; 0x28
 8084872:	f003 fd07 	bl	8088284 <_ZN6StringD1Ev>
 8084876:	e7cb      	b.n	8084810 <_Z16getEspAQSyncDatav+0xa8>
 8084878:	00000000 	.word	0x00000000
 808487c:	40cd4c00 	.word	0x40cd4c00
 8084880:	0808ef32 	.word	0x0808ef32
 8084884:	0808ee3a 	.word	0x0808ee3a
 8084888:	3ff00000 	.word	0x3ff00000
 808488c:	200003c8 	.word	0x200003c8
 8084890:	0808ef35 	.word	0x0808ef35
 8084894:	200009fc 	.word	0x200009fc
 8084898:	20000308 	.word	0x20000308
 808489c:	0808ef70 	.word	0x0808ef70
 80848a0:	20000b80 	.word	0x20000b80
 80848a4:	0808ef77 	.word	0x0808ef77

080848a8 <loop>:
void loop() {
 80848a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    measurement_number++;
 80848ac:	4c5e      	ldr	r4, [pc, #376]	; (8084a28 <loop+0x180>)
void loop() {
 80848ae:	b089      	sub	sp, #36	; 0x24
    measurement_number++;
 80848b0:	2200      	movs	r2, #0
 80848b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80848b6:	4b5d      	ldr	r3, [pc, #372]	; (8084a2c <loop+0x184>)
 80848b8:	f005 fae8 	bl	8089e8c <__adddf3>
 80848bc:	e9c4 0100 	strd	r0, r1, [r4]
    CO_float_A = readCO_A();
 80848c0:	f7fd fd10 	bl	80822e4 <_Z8readCO_Av>
 80848c4:	4b5a      	ldr	r3, [pc, #360]	; (8084a30 <loop+0x188>)
    CO2_float = readCO2();
 80848c6:	4d5b      	ldr	r5, [pc, #364]	; (8084a34 <loop+0x18c>)
    CO_float_A = readCO_A();
 80848c8:	6018      	str	r0, [r3, #0]
    CO_float_B = readCO_B();
 80848ca:	f7fd f8b1 	bl	8081a30 <_Z8readCO_Bv>
 80848ce:	4b5a      	ldr	r3, [pc, #360]	; (8084a38 <loop+0x190>)
    if (! bme.performReading()) {
 80848d0:	4c5a      	ldr	r4, [pc, #360]	; (8084a3c <loop+0x194>)
    CO_float_B = readCO_B();
 80848d2:	6018      	str	r0, [r3, #0]
    CO2_float = readCO2();
 80848d4:	f7fc fe36 	bl	8081544 <_Z7readCO2v>
 80848d8:	6028      	str	r0, [r5, #0]
    if (! bme.performReading()) {
 80848da:	4620      	mov	r0, r4
 80848dc:	f002 f94a 	bl	8086b74 <_ZN15Adafruit_BME68014performReadingEv>
 80848e0:	b988      	cbnz	r0, 8084906 <loop+0x5e>
      Serial.println("Failed to read BME680");
 80848e2:	f004 ff01 	bl	80896e8 <_Z16_fetch_usbserialv>
 80848e6:	4956      	ldr	r1, [pc, #344]	; (8084a40 <loop+0x198>)
 80848e8:	f003 feb1 	bl	808864e <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 80848ec:	4954      	ldr	r1, [pc, #336]	; (8084a40 <loop+0x198>)
 80848ee:	a804      	add	r0, sp, #16
 80848f0:	f003 fd12 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80848f4:	a804      	add	r0, sp, #16
 80848f6:	f7fd f8b5 	bl	8081a64 <_Z12writeLogFile6String>
 80848fa:	a804      	add	r0, sp, #16
 80848fc:	f003 fcc2 	bl	8088284 <_ZN6StringD1Ev>
}
 8084900:	b009      	add	sp, #36	; 0x24
 8084902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if(debugging_enabled){
 8084906:	4e4f      	ldr	r6, [pc, #316]	; (8084a44 <loop+0x19c>)
 8084908:	6833      	ldr	r3, [r6, #0]
 808490a:	b1d3      	cbz	r3, 8084942 <loop+0x9a>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 808490c:	f004 feec 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084910:	4607      	mov	r7, r0
 8084912:	6820      	ldr	r0, [r4, #0]
 8084914:	f005 fc18 	bl	808a148 <__aeabi_f2d>
 8084918:	4680      	mov	r8, r0
 808491a:	68a0      	ldr	r0, [r4, #8]
 808491c:	4689      	mov	r9, r1
 808491e:	f005 fc13 	bl	808a148 <__aeabi_f2d>
 8084922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084926:	4948      	ldr	r1, [pc, #288]	; (8084a48 <loop+0x1a0>)
 8084928:	6860      	ldr	r0, [r4, #4]
 808492a:	f006 f96f 	bl	808ac0c <__aeabi_fdiv>
 808492e:	f005 fc0b 	bl	808a148 <__aeabi_f2d>
 8084932:	4642      	mov	r2, r8
 8084934:	e9cd 0100 	strd	r0, r1, [sp]
 8084938:	464b      	mov	r3, r9
 808493a:	4638      	mov	r0, r7
 808493c:	4943      	ldr	r1, [pc, #268]	; (8084a4c <loop+0x1a4>)
 808493e:	f7fc f998 	bl	8080c72 <_ZN5Print6printfEPKcz>
    float pressure_correction = bme.pressure/100;
 8084942:	4941      	ldr	r1, [pc, #260]	; (8084a48 <loop+0x1a0>)
 8084944:	6860      	ldr	r0, [r4, #4]
 8084946:	f006 f961 	bl	808ac0c <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 808494a:	493f      	ldr	r1, [pc, #252]	; (8084a48 <loop+0x1a0>)
    float pressure_correction = bme.pressure/100;
 808494c:	4604      	mov	r4, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 808494e:	f006 fa65 	bl	808ae1c <__aeabi_fcmpgt>
 8084952:	b168      	cbz	r0, 8084970 <loop+0xc8>
 8084954:	4620      	mov	r0, r4
 8084956:	493e      	ldr	r1, [pc, #248]	; (8084a50 <loop+0x1a8>)
 8084958:	f006 fa42 	bl	808ade0 <__aeabi_fcmplt>
 808495c:	b140      	cbz	r0, 8084970 <loop+0xc8>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 808495e:	493d      	ldr	r1, [pc, #244]	; (8084a54 <loop+0x1ac>)
 8084960:	4620      	mov	r0, r4
 8084962:	f006 f953 	bl	808ac0c <__aeabi_fdiv>
 8084966:	4601      	mov	r1, r0
        CO2_float *= pressure_correction;
 8084968:	6828      	ldr	r0, [r5, #0]
 808496a:	f006 f89b 	bl	808aaa4 <__aeabi_fmul>
 808496e:	6028      	str	r0, [r5, #0]
    readGpsStream();
 8084970:	f7fd f8ca 	bl	8081b08 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8084974:	f7fd fa0c 	bl	8081d90 <_Z17readGpsStreamDatev>
    systemTime = Time.now();
 8084978:	f004 f979 	bl	8088c6e <_ZN9TimeClass3nowEv>
 808497c:	4b36      	ldr	r3, [pc, #216]	; (8084a58 <loop+0x1b0>)
 808497e:	17c2      	asrs	r2, r0, #31
 8084980:	e9c3 0200 	strd	r0, r2, [r3]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084984:	4b35      	ldr	r3, [pc, #212]	; (8084a5c <loop+0x1b4>)
	void loop();

	/**
	 * Returns true if the Electron has power, either a USB host (computer), USB charger, or VIN power.
	 */
	bool getHasPower() const { return hasPower; }
 8084986:	4d36      	ldr	r5, [pc, #216]	; (8084a60 <loop+0x1b8>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084988:	681a      	ldr	r2, [r3, #0]
 808498a:	4b36      	ldr	r3, [pc, #216]	; (8084a64 <loop+0x1bc>)
 808498c:	601a      	str	r2, [r3, #0]
    getEspAQSyncData();
 808498e:	f7ff feeb 	bl	8084768 <_Z16getEspAQSyncDatav>
    outputCOtoPI();
 8084992:	f7fe f8d3 	bl	8082b3c <_Z12outputCOtoPIv>
    if (powerCheck.getHasPower() == 0){
 8084996:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 808499a:	b90b      	cbnz	r3, 80849a0 <loop+0xf8>
        goToSleepBattery();
 808499c:	f7fd fd08 	bl	80823b0 <_Z16goToSleepBatteryv>
    if (Serial.available() > 0) {
 80849a0:	f004 fea2 	bl	80896e8 <_Z16_fetch_usbserialv>
 80849a4:	6803      	ldr	r3, [r0, #0]
 80849a6:	691b      	ldr	r3, [r3, #16]
 80849a8:	4798      	blx	r3
 80849aa:	2800      	cmp	r0, #0
 80849ac:	dd1c      	ble.n	80849e8 <loop+0x140>
        incomingByte = Serial.read();
 80849ae:	f004 fe9b 	bl	80896e8 <_Z16_fetch_usbserialv>
 80849b2:	6803      	ldr	r3, [r0, #0]
 80849b4:	4c2c      	ldr	r4, [pc, #176]	; (8084a68 <loop+0x1c0>)
 80849b6:	695b      	ldr	r3, [r3, #20]
 80849b8:	4798      	blx	r3
        if(debugging_enabled){
 80849ba:	6833      	ldr	r3, [r6, #0]
        incomingByte = Serial.read();
 80849bc:	7020      	strb	r0, [r4, #0]
        if(debugging_enabled){
 80849be:	b14b      	cbz	r3, 80849d4 <loop+0x12c>
            Serial.print("incomming byte:");
 80849c0:	f004 fe92 	bl	80896e8 <_Z16_fetch_usbserialv>
 80849c4:	4929      	ldr	r1, [pc, #164]	; (8084a6c <loop+0x1c4>)
 80849c6:	f003 fe2f 	bl	8088628 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 80849ca:	f004 fe8d 	bl	80896e8 <_Z16_fetch_usbserialv>
 80849ce:	7821      	ldrb	r1, [r4, #0]
 80849d0:	f003 fe47 	bl	8088662 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 80849d4:	f004 fe88 	bl	80896e8 <_Z16_fetch_usbserialv>
 80849d8:	7821      	ldrb	r1, [r4, #0]
 80849da:	f003 fe42 	bl	8088662 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 80849de:	7823      	ldrb	r3, [r4, #0]
 80849e0:	2b6d      	cmp	r3, #109	; 0x6d
 80849e2:	d101      	bne.n	80849e8 <loop+0x140>
          serialMenu();
 80849e4:	f7ff fa82 	bl	8083eec <_Z10serialMenuv>
    powerCheck.loop();
 80849e8:	481d      	ldr	r0, [pc, #116]	; (8084a60 <loop+0x1b8>)
 80849ea:	f000 f995 	bl	8084d18 <_ZN10PowerCheck4loopEv>
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 80849ee:	4b20      	ldr	r3, [pc, #128]	; (8084a70 <loop+0x1c8>)
 80849f0:	681b      	ldr	r3, [r3, #0]
 80849f2:	2b01      	cmp	r3, #1
 80849f4:	d184      	bne.n	8084900 <loop+0x58>
 80849f6:	481f      	ldr	r0, [pc, #124]	; (8084a74 <loop+0x1cc>)
 80849f8:	f004 fa1a 	bl	8088e30 <_ZN9FuelGauge6getSoCEv>
 80849fc:	491e      	ldr	r1, [pc, #120]	; (8084a78 <loop+0x1d0>)
 80849fe:	f006 f9ef 	bl	808ade0 <__aeabi_fcmplt>
 8084a02:	2800      	cmp	r0, #0
 8084a04:	f43f af7c 	beq.w	8084900 <loop+0x58>
 8084a08:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8084a0c:	2b00      	cmp	r3, #0
 8084a0e:	f47f af77 	bne.w	8084900 <loop+0x58>
        Serial.println("Going to sleep because battery is below 20% charge");
 8084a12:	f004 fe69 	bl	80896e8 <_Z16_fetch_usbserialv>
 8084a16:	4919      	ldr	r1, [pc, #100]	; (8084a7c <loop+0x1d4>)
 8084a18:	f003 fe19 	bl	808864e <_ZN5Print7printlnEPKc>
}
 8084a1c:	b009      	add	sp, #36	; 0x24
 8084a1e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        goToSleepBattery();
 8084a22:	f7fd bcc5 	b.w	80823b0 <_Z16goToSleepBatteryv>
 8084a26:	bf00      	nop
 8084a28:	20000518 	.word	0x20000518
 8084a2c:	3ff00000 	.word	0x3ff00000
 8084a30:	200002c0 	.word	0x200002c0
 8084a34:	200002b0 	.word	0x200002b0
 8084a38:	200002c4 	.word	0x200002c4
 8084a3c:	20000348 	.word	0x20000348
 8084a40:	0808edb5 	.word	0x0808edb5
 8084a44:	200003c8 	.word	0x200003c8
 8084a48:	42c80000 	.word	0x42c80000
 8084a4c:	0808edd8 	.word	0x0808edd8
 8084a50:	44bb8000 	.word	0x44bb8000
 8084a54:	447d5000 	.word	0x447d5000
 8084a58:	20000a18 	.word	0x20000a18
 8084a5c:	200000d4 	.word	0x200000d4
 8084a60:	2000054c 	.word	0x2000054c
 8084a64:	20000aa4 	.word	0x20000aa4
 8084a68:	20000490 	.word	0x20000490
 8084a6c:	0808ef8e 	.word	0x0808ef8e
 8084a70:	20000344 	.word	0x20000344
 8084a74:	2000043c 	.word	0x2000043c
 8084a78:	41a00000 	.word	0x41a00000
 8084a7c:	0808ef9e 	.word	0x0808ef9e

08084a80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
  }
 8084a80:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 8084a82:	2501      	movs	r5, #1
              error_(SYSTEM_ERROR_NONE) {
 8084a84:	2400      	movs	r4, #0
 8084a86:	4b35      	ldr	r3, [pc, #212]	; (8084b5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xdc>)
GoogleMapsDeviceLocator locator;
 8084a88:	4835      	ldr	r0, [pc, #212]	; (8084b60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xe0>)
 8084a8a:	701d      	strb	r5, [r3, #0]
 8084a8c:	f002 fa82 	bl	8086f94 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8084a90:	4b34      	ldr	r3, [pc, #208]	; (8084b64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xe4>)
    SleepResult() {}
 8084a92:	4a35      	ldr	r2, [pc, #212]	; (8084b68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xe8>)
              error_(SYSTEM_ERROR_NONE) {
 8084a94:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 8084a98:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 8084a9a:	2003      	movs	r0, #3
 8084a9c:	f002 ff9e 	bl	80879dc <set_system_mode>
SYSTEM_THREAD(ENABLED);
 8084aa0:	4621      	mov	r1, r4
 8084aa2:	4628      	mov	r0, r5
 8084aa4:	f002 ffaa 	bl	80879fc <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 8084aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8084aac:	482f      	ldr	r0, [pc, #188]	; (8084b6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xec>)
 8084aae:	f002 f84f 	bl	8086b50 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8084ab2:	482f      	ldr	r0, [pc, #188]	; (8084b70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xf0>)
 8084ab4:	f000 fab7 	bl	8085026 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8084ab8:	482e      	ldr	r0, [pc, #184]	; (8084b74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xf4>)
 8084aba:	f000 f885 	bl	8084bc8 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8084abe:	482e      	ldr	r0, [pc, #184]	; (8084b78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xf8>)
 8084ac0:	f000 f882 	bl	8084bc8 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8084ac4:	2149      	movs	r1, #73	; 0x49
 8084ac6:	482d      	ldr	r0, [pc, #180]	; (8084b7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0xfc>)
 8084ac8:	f000 f9b6 	bl	8084e38 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8084acc:	214a      	movs	r1, #74	; 0x4a
 8084ace:	482c      	ldr	r0, [pc, #176]	; (8084b80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x100>)
 8084ad0:	f000 f9b2 	bl	8084e38 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8084ad4:	4621      	mov	r1, r4
 8084ad6:	482b      	ldr	r0, [pc, #172]	; (8084b84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x104>)
 8084ad8:	f004 f95f 	bl	8088d9a <_ZN9FuelGaugeC1Eb>
PMIC pmic;
 8084adc:	4621      	mov	r1, r4
 8084ade:	482a      	ldr	r0, [pc, #168]	; (8084b88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x108>)
 8084ae0:	f003 f8d9 	bl	8087c96 <_ZN4PMICC1Eb>
PowerCheck powerCheck;
 8084ae4:	4829      	ldr	r0, [pc, #164]	; (8084b8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x10c>)
 8084ae6:	f000 f8fd 	bl	8084ce4 <_ZN10PowerCheckC1Ev>
HIH61XX hih(0x27);
 8084aea:	2127      	movs	r1, #39	; 0x27
 8084aec:	4828      	ldr	r0, [pc, #160]	; (8084b90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x110>)
 8084aee:	f002 fc85 	bl	80873fc <_ZN7HIH61XXC1Eh>
  SdFat() {
 8084af2:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
 8084af6:	4b27      	ldr	r3, [pc, #156]	; (8084b94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x114>)
String fileName;
 8084af8:	4827      	ldr	r0, [pc, #156]	; (8084b98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x118>)
 8084afa:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 8084afe:	4a27      	ldr	r2, [pc, #156]	; (8084b9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x11c>)
 8084b00:	605c      	str	r4, [r3, #4]
 8084b02:	601a      	str	r2, [r3, #0]
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8084b04:	4a26      	ldr	r2, [pc, #152]	; (8084ba0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x120>)
 8084b06:	f8c3 4440 	str.w	r4, [r3, #1088]	; 0x440
 8084b0a:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
 8084b0e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8084b12:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
  SdFile() {}
 8084b16:	4a23      	ldr	r2, [pc, #140]	; (8084ba4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x124>)
    Print() : write_error(0) {}
 8084b18:	4b23      	ldr	r3, [pc, #140]	; (8084ba8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x128>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8084b1a:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8084b1e:	601a      	str	r2, [r3, #0]
 8084b20:	4b22      	ldr	r3, [pc, #136]	; (8084bac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x12c>)
 8084b22:	601a      	str	r2, [r3, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084b28:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8084b2c:	4b20      	ldr	r3, [pc, #128]	; (8084bb0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x130>)
 8084b2e:	605c      	str	r4, [r3, #4]
 8084b30:	609a      	str	r2, [r3, #8]
 8084b32:	611c      	str	r4, [r3, #16]
  File() {}
 8084b34:	4a1f      	ldr	r2, [pc, #124]	; (8084bb4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x134>)
 8084b36:	4c20      	ldr	r4, [pc, #128]	; (8084bb8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x138>)
 8084b38:	601a      	str	r2, [r3, #0]
 8084b3a:	4621      	mov	r1, r4
 8084b3c:	f003 fbec 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
String logFileName;
 8084b40:	4621      	mov	r1, r4
 8084b42:	481e      	ldr	r0, [pc, #120]	; (8084bbc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x13c>)
 8084b44:	f003 fbe8 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
String ssid; //wifi network name
 8084b48:	4621      	mov	r1, r4
 8084b4a:	481d      	ldr	r0, [pc, #116]	; (8084bc0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x140>)
 8084b4c:	f003 fbe4 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
String password; //wifi network password
 8084b50:	4621      	mov	r1, r4
  }
 8084b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String password; //wifi network password
 8084b56:	481b      	ldr	r0, [pc, #108]	; (8084bc4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x144>)
 8084b58:	f003 bbde 	b.w	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8084b5c:	20000308 	.word	0x20000308
 8084b60:	20000494 	.word	0x20000494
 8084b64:	200002f4 	.word	0x200002f4
 8084b68:	ffff0000 	.word	0xffff0000
 8084b6c:	20000348 	.word	0x20000348
 8084b70:	20000a20 	.word	0x20000a20
 8084b74:	20000491 	.word	0x20000491
 8084b78:	20000492 	.word	0x20000492
 8084b7c:	20000338 	.word	0x20000338
 8084b80:	2000033e 	.word	0x2000033e
 8084b84:	2000043c 	.word	0x2000043c
 8084b88:	20000548 	.word	0x20000548
 8084b8c:	2000054c 	.word	0x2000054c
 8084b90:	20000480 	.word	0x20000480
 8084b94:	20000580 	.word	0x20000580
 8084b98:	2000042c 	.word	0x2000042c
 8084b9c:	0808f01c 	.word	0x0808f01c
 8084ba0:	0808f0b8 	.word	0x0808f0b8
 8084ba4:	0808f004 	.word	0x0808f004
 8084ba8:	200003cc 	.word	0x200003cc
 8084bac:	200004e8 	.word	0x200004e8
 8084bb0:	200003f8 	.word	0x200003f8
 8084bb4:	0808efdc 	.word	0x0808efdc
 8084bb8:	0808f1d9 	.word	0x0808f1d9
 8084bbc:	200004d8 	.word	0x200004d8
 8084bc0:	20000a00 	.word	0x20000a00
 8084bc4:	20000538 	.word	0x20000538

08084bc8 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8084bc8:	4770      	bx	lr

08084bca <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8084bca:	b510      	push	{r4, lr}
 8084bcc:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084bce:	f005 f903 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084bd2:	2148      	movs	r1, #72	; 0x48
 8084bd4:	f004 ff24 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084bd8:	f005 f8fe 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084bdc:	6803      	ldr	r3, [r0, #0]
 8084bde:	4621      	mov	r1, r4
 8084be0:	689b      	ldr	r3, [r3, #8]
 8084be2:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8084be4:	f005 f8f8 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084be8:	2100      	movs	r1, #0
 8084bea:	f004 ff34 	bl	8089a56 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8084bee:	f005 f8f3 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084bf2:	2301      	movs	r3, #1
 8084bf4:	2148      	movs	r1, #72	; 0x48
 8084bf6:	461a      	mov	r2, r3
 8084bf8:	f004 fef9 	bl	80899ee <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 8084bfc:	f005 f8ec 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c00:	6803      	ldr	r3, [r0, #0]
 8084c02:	691b      	ldr	r3, [r3, #16]
 8084c04:	4798      	blx	r3
 8084c06:	b128      	cbz	r0, 8084c14 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8084c08:	f005 f8e6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c0c:	6803      	ldr	r3, [r0, #0]
 8084c0e:	695b      	ldr	r3, [r3, #20]
 8084c10:	4798      	blx	r3
 8084c12:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8084c14:	bd10      	pop	{r4, pc}

08084c16 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8084c16:	b570      	push	{r4, r5, r6, lr}
 8084c18:	4616      	mov	r6, r2
 8084c1a:	460c      	mov	r4, r1
 8084c1c:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084c1e:	f005 f8db 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c22:	2148      	movs	r1, #72	; 0x48
 8084c24:	f004 fefc 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084c28:	f005 f8d6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c2c:	6803      	ldr	r3, [r0, #0]
 8084c2e:	4621      	mov	r1, r4
 8084c30:	689b      	ldr	r3, [r3, #8]
 8084c32:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8084c34:	f005 f8d0 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c38:	6803      	ldr	r3, [r0, #0]
 8084c3a:	4631      	mov	r1, r6
 8084c3c:	689b      	ldr	r3, [r3, #8]
 8084c3e:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8084c40:	f005 f8ca 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084c44:	2101      	movs	r1, #1
 8084c46:	f004 ff06 	bl	8089a56 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 8084c4a:	4621      	mov	r1, r4
 8084c4c:	4628      	mov	r0, r5
}
 8084c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 8084c52:	f7ff bfba 	b.w	8084bca <_ZN8LMP910004readEh>

08084c56 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8084c56:	2100      	movs	r1, #0
 8084c58:	f7ff bfb7 	b.w	8084bca <_ZN8LMP910004readEh>

08084c5c <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8084c5c:	2201      	movs	r2, #1
 8084c5e:	4611      	mov	r1, r2
 8084c60:	f7ff bfd9 	b.w	8084c16 <_ZN8LMP910005writeEhh>

08084c64 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8084c64:	2200      	movs	r2, #0
 8084c66:	2101      	movs	r1, #1
 8084c68:	f7ff bfd5 	b.w	8084c16 <_ZN8LMP910005writeEhh>

08084c6c <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8084c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084c70:	4604      	mov	r4, r0
 8084c72:	4688      	mov	r8, r1
 8084c74:	4617      	mov	r7, r2
 8084c76:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8084c78:	f7ff ffed 	bl	8084c56 <_ZN8LMP910006statusEv>
 8084c7c:	2801      	cmp	r0, #1
 8084c7e:	4605      	mov	r5, r0
 8084c80:	d117      	bne.n	8084cb2 <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 8084c82:	4620      	mov	r0, r4
 8084c84:	f7ff ffee 	bl	8084c64 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8084c88:	4642      	mov	r2, r8
 8084c8a:	2110      	movs	r1, #16
 8084c8c:	4620      	mov	r0, r4
 8084c8e:	f7ff ffc2 	bl	8084c16 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8084c92:	463a      	mov	r2, r7
 8084c94:	2111      	movs	r1, #17
 8084c96:	4620      	mov	r0, r4
 8084c98:	f7ff ffbd 	bl	8084c16 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8084c9c:	4632      	mov	r2, r6
 8084c9e:	2112      	movs	r1, #18
 8084ca0:	4620      	mov	r0, r4
 8084ca2:	f7ff ffb8 	bl	8084c16 <_ZN8LMP910005writeEhh>
            lock();
 8084ca6:	4620      	mov	r0, r4
 8084ca8:	f7ff ffd8 	bl	8084c5c <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 8084cac:	4628      	mov	r0, r5
 8084cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 8084cb2:	2500      	movs	r5, #0
 8084cb4:	e7fa      	b.n	8084cac <_ZN8LMP910009configureEhhh+0x40>
	...

08084cb8 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084cb8:	b510      	push	{r4, lr}
 8084cba:	4604      	mov	r4, r0
 8084cbc:	4b03      	ldr	r3, [pc, #12]	; (8084ccc <_ZN10PowerCheckD1Ev+0x14>)
 8084cbe:	f840 3b14 	str.w	r3, [r0], #20
 8084cc2:	f003 f807 	bl	8087cd4 <_ZN4PMICD1Ev>
}
 8084cc6:	4620      	mov	r0, r4
 8084cc8:	bd10      	pop	{r4, pc}
 8084cca:	bf00      	nop
 8084ccc:	0808f058 	.word	0x0808f058

08084cd0 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8084cd0:	b510      	push	{r4, lr}
 8084cd2:	4604      	mov	r4, r0
}
 8084cd4:	f7ff fff0 	bl	8084cb8 <_ZN10PowerCheckD1Ev>
 8084cd8:	4620      	mov	r0, r4
 8084cda:	2124      	movs	r1, #36	; 0x24
 8084cdc:	f7fb f9f1 	bl	80800c2 <_ZdlPvj>
 8084ce0:	4620      	mov	r0, r4
 8084ce2:	bd10      	pop	{r4, pc}

08084ce4 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8084ce4:	b538      	push	{r3, r4, r5, lr}
 8084ce6:	4b0b      	ldr	r3, [pc, #44]	; (8084d14 <_ZN10PowerCheckC1Ev+0x30>)
 8084ce8:	2500      	movs	r5, #0
 8084cea:	2232      	movs	r2, #50	; 0x32
 8084cec:	6003      	str	r3, [r0, #0]
 8084cee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8084cf2:	4604      	mov	r4, r0
 8084cf4:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8084cf8:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8084cfc:	4629      	mov	r1, r5
 8084cfe:	3014      	adds	r0, #20
 8084d00:	f002 ffc9 	bl	8087c96 <_ZN4PMICC1Eb>
 8084d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 8084d08:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8084d0a:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8084d0e:	6223      	str	r3, [r4, #32]
}
 8084d10:	bd38      	pop	{r3, r4, r5, pc}
 8084d12:	bf00      	nop
 8084d14:	0808f058 	.word	0x0808f058

08084d18 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 8084d18:	b510      	push	{r4, lr}
 8084d1a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8084d1c:	f002 fcae 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8084d20:	68e3      	ldr	r3, [r4, #12]
 8084d22:	1ac0      	subs	r0, r0, r3
 8084d24:	6863      	ldr	r3, [r4, #4]
 8084d26:	4298      	cmp	r0, r3
 8084d28:	d31a      	bcc.n	8084d60 <_ZN10PowerCheck4loopEv+0x48>
 8084d2a:	f002 fca7 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8084d2e:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8084d30:	f104 0014 	add.w	r0, r4, #20
 8084d34:	f003 f81f 	bl	8087d76 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8084d38:	f010 0304 	ands.w	r3, r0, #4
 8084d3c:	d00b      	beq.n	8084d56 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8084d3e:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8084d42:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 8084d46:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084d48:	bf1f      	itttt	ne
 8084d4a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8084d4c:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 8084d50:	3301      	addne	r3, #1
 8084d52:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8084d54:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8084d56:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 8084d5a:	69a3      	ldr	r3, [r4, #24]
 8084d5c:	3301      	adds	r3, #1
 8084d5e:	61a3      	str	r3, [r4, #24]
 8084d60:	f002 fc8c 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8084d64:	6923      	ldr	r3, [r4, #16]
 8084d66:	1ac0      	subs	r0, r0, r3
 8084d68:	68a3      	ldr	r3, [r4, #8]
 8084d6a:	4298      	cmp	r0, r3
 8084d6c:	d914      	bls.n	8084d98 <_ZN10PowerCheck4loopEv+0x80>
 8084d6e:	f002 fc85 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084d72:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 8084d74:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084d76:	2b0a      	cmp	r3, #10
 8084d78:	dc0f      	bgt.n	8084d9a <_ZN10PowerCheck4loopEv+0x82>
 8084d7a:	2301      	movs	r3, #1
 8084d7c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084d80:	f894 3020 	ldrb.w	r3, [r4, #32]
 8084d84:	3b01      	subs	r3, #1
 8084d86:	2b01      	cmp	r3, #1
 8084d88:	bf8c      	ite	hi
 8084d8a:	2300      	movhi	r3, #0
 8084d8c:	2301      	movls	r3, #1
 8084d8e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8084d92:	2300      	movs	r3, #0
		changeCount = 0;
 8084d94:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 8084d98:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084d9a:	69e2      	ldr	r2, [r4, #28]
 8084d9c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8084da0:	ddeb      	ble.n	8084d7a <_ZN10PowerCheck4loopEv+0x62>
 8084da2:	2300      	movs	r3, #0
 8084da4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084da8:	e7f1      	b.n	8084d8e <_ZN10PowerCheck4loopEv+0x76>

08084daa <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8084daa:	b510      	push	{r4, lr}
 8084dac:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084dae:	f005 f813 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084db2:	6803      	ldr	r3, [r0, #0]
 8084db4:	4621      	mov	r1, r4
}
 8084db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 8084dba:	689b      	ldr	r3, [r3, #8]
 8084dbc:	4718      	bx	r3

08084dbe <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 8084dbe:	b508      	push	{r3, lr}
  return Wire.read();
 8084dc0:	f005 f80a 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084dc4:	6803      	ldr	r3, [r0, #0]
 8084dc6:	695b      	ldr	r3, [r3, #20]
 8084dc8:	4798      	blx	r3
}
 8084dca:	b2c0      	uxtb	r0, r0
 8084dcc:	bd08      	pop	{r3, pc}

08084dce <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8084dce:	b570      	push	{r4, r5, r6, lr}
 8084dd0:	4606      	mov	r6, r0
 8084dd2:	460d      	mov	r5, r1
 8084dd4:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8084dd6:	f004 ffff 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084dda:	4631      	mov	r1, r6
 8084ddc:	f004 fe1c 	bl	8089a18 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8084de0:	4628      	mov	r0, r5
 8084de2:	f7ff ffe2 	bl	8084daa <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8084de6:	0a20      	lsrs	r0, r4, #8
 8084de8:	f7ff ffdf 	bl	8084daa <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8084dec:	b2e0      	uxtb	r0, r4
 8084dee:	f7ff ffdc 	bl	8084daa <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084df2:	f004 fff1 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 8084df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8084dfa:	f004 be30 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>

08084dfe <_ZL12readRegisterhh.constprop.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8084dfe:	b510      	push	{r4, lr}
 8084e00:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8084e02:	f004 ffe9 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084e06:	4621      	mov	r1, r4
 8084e08:	f004 fe06 	bl	8089a18 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8084e0c:	2000      	movs	r0, #0
 8084e0e:	f7ff ffcc 	bl	8084daa <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084e12:	f004 ffe1 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084e16:	f004 fe22 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8084e1a:	f004 ffdd 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8084e1e:	4621      	mov	r1, r4
 8084e20:	2202      	movs	r2, #2
 8084e22:	f004 fdf6 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8084e26:	f7ff ffca 	bl	8084dbe <_ZL7i2creadv>
 8084e2a:	4604      	mov	r4, r0
 8084e2c:	f7ff ffc7 	bl	8084dbe <_ZL7i2creadv>
 8084e30:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8084e34:	b280      	uxth	r0, r0
 8084e36:	bd10      	pop	{r4, pc}

08084e38 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084e38:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8084e3a:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084e3c:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084e3e:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084e40:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8084e42:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8084e44:	4770      	bx	lr

08084e46 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8084e46:	b508      	push	{r3, lr}
  Wire.begin();
 8084e48:	f004 ffc6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 8084e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8084e50:	f004 bdb0 	b.w	80899b4 <_ZN7TwoWire5beginEv>

08084e54 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8084e54:	8081      	strh	r1, [r0, #4]
}
 8084e56:	4770      	bx	lr

08084e58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8084e58:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8084e5a:	b510      	push	{r4, lr}
 8084e5c:	4604      	mov	r4, r0
  if (channel > 3)
 8084e5e:	d822      	bhi.n	8084ea6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8084e60:	2902      	cmp	r1, #2
  config |= m_gain;
 8084e62:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8084e64:	d019      	beq.n	8084e9a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8084e66:	2903      	cmp	r1, #3
 8084e68:	d01a      	beq.n	8084ea0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 8084e6a:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8084e6c:	bf14      	ite	ne
 8084e6e:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8084e72:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084e76:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8084e7a:	2101      	movs	r1, #1
 8084e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084e80:	7820      	ldrb	r0, [r4, #0]
 8084e82:	f7ff ffa4 	bl	8084dce <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8084e86:	7860      	ldrb	r0, [r4, #1]
 8084e88:	f003 ff52 	bl	8088d30 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8084e8c:	7820      	ldrb	r0, [r4, #0]
 8084e8e:	f7ff ffb6 	bl	8084dfe <_ZL12readRegisterhh.constprop.0>
 8084e92:	78a3      	ldrb	r3, [r4, #2]
 8084e94:	4118      	asrs	r0, r3
 8084e96:	b280      	uxth	r0, r0
}
 8084e98:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8084e9a:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8084e9e:	e7ea      	b.n	8084e76 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084ea0:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8084ea4:	e7e7      	b.n	8084e76 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 8084ea6:	2000      	movs	r0, #0
 8084ea8:	e7f6      	b.n	8084e98 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

08084eac <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8084eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084eb0:	460e      	mov	r6, r1
 8084eb2:	b088      	sub	sp, #32
 8084eb4:	4604      	mov	r4, r0
 8084eb6:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8084eb8:	4668      	mov	r0, sp
 8084eba:	2302      	movs	r3, #2
 8084ebc:	2200      	movs	r2, #0
 8084ebe:	f003 fb43 	bl	8088548 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8084ec2:	230a      	movs	r3, #10
 8084ec4:	2202      	movs	r2, #2
 8084ec6:	4631      	mov	r1, r6
 8084ec8:	a804      	add	r0, sp, #16
 8084eca:	f003 fb3d 	bl	8088548 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8084ece:	4668      	mov	r0, sp
 8084ed0:	f003 fb5c 	bl	808858c <_ZNK6String5toIntEv>
 8084ed4:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8084ed6:	a804      	add	r0, sp, #16
 8084ed8:	f003 fb58 	bl	808858c <_ZNK6String5toIntEv>
 8084edc:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8084ede:	4668      	mov	r0, sp
 8084ee0:	f003 fb54 	bl	808858c <_ZNK6String5toIntEv>
 8084ee4:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084ee6:	a804      	add	r0, sp, #16
 8084ee8:	f003 fb55 	bl	8088596 <_ZNK6String7toFloatEv>
 8084eec:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 8084eee:	4630      	mov	r0, r6
 8084ef0:	f005 f918 	bl	808a124 <__aeabi_i2d>
 8084ef4:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8084ef6:	4640      	mov	r0, r8
    latitude = whole_part;
 8084ef8:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8084efa:	f005 f925 	bl	808a148 <__aeabi_f2d>
    latitude += (frac_part)/60;
 8084efe:	2200      	movs	r2, #0
 8084f00:	4b0d      	ldr	r3, [pc, #52]	; (8084f38 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 8084f02:	f005 faa3 	bl	808a44c <__aeabi_ddiv>
 8084f06:	460b      	mov	r3, r1
 8084f08:	4602      	mov	r2, r0
 8084f0a:	4639      	mov	r1, r7
 8084f0c:	4630      	mov	r0, r6
 8084f0e:	f004 ffbd 	bl	8089e8c <__adddf3>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8084f12:	2d53      	cmp	r5, #83	; 0x53
 8084f14:	bf0c      	ite	eq
 8084f16:	2300      	moveq	r3, #0
 8084f18:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 8084f1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 8084f20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8084f24:	a804      	add	r0, sp, #16
 8084f26:	f003 f9ad 	bl	8088284 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 8084f2a:	4668      	mov	r0, sp
 8084f2c:	f003 f9aa 	bl	8088284 <_ZN6StringD1Ev>
    }
}
 8084f30:	b008      	add	sp, #32
 8084f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084f36:	bf00      	nop
 8084f38:	404e0000 	.word	0x404e0000

08084f3c <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8084f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f40:	460e      	mov	r6, r1
 8084f42:	b088      	sub	sp, #32
 8084f44:	4604      	mov	r4, r0
 8084f46:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8084f48:	4668      	mov	r0, sp
 8084f4a:	2303      	movs	r3, #3
 8084f4c:	2200      	movs	r2, #0
 8084f4e:	f003 fafb 	bl	8088548 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8084f52:	230a      	movs	r3, #10
 8084f54:	2203      	movs	r2, #3
 8084f56:	4631      	mov	r1, r6
 8084f58:	a804      	add	r0, sp, #16
 8084f5a:	f003 faf5 	bl	8088548 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8084f5e:	4668      	mov	r0, sp
 8084f60:	f003 fb14 	bl	808858c <_ZNK6String5toIntEv>
 8084f64:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8084f66:	a804      	add	r0, sp, #16
 8084f68:	f003 fb10 	bl	808858c <_ZNK6String5toIntEv>
 8084f6c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8084f6e:	4668      	mov	r0, sp
 8084f70:	f003 fb0c 	bl	808858c <_ZNK6String5toIntEv>
 8084f74:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084f76:	a804      	add	r0, sp, #16
 8084f78:	f003 fb0d 	bl	8088596 <_ZNK6String7toFloatEv>
 8084f7c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 8084f7e:	4630      	mov	r0, r6
 8084f80:	f005 f8d0 	bl	808a124 <__aeabi_i2d>
 8084f84:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8084f86:	4640      	mov	r0, r8
    longitude = whole_part;
 8084f88:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8084f8a:	f005 f8dd 	bl	808a148 <__aeabi_f2d>
    longitude += (frac_part)/60;
 8084f8e:	2200      	movs	r2, #0
 8084f90:	4b0c      	ldr	r3, [pc, #48]	; (8084fc4 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8084f92:	f005 fa5b 	bl	808a44c <__aeabi_ddiv>
 8084f96:	4602      	mov	r2, r0
 8084f98:	460b      	mov	r3, r1
 8084f9a:	4630      	mov	r0, r6
 8084f9c:	4639      	mov	r1, r7
 8084f9e:	f004 ff75 	bl	8089e8c <__adddf3>
    if(ewString == 'E'){
 8084fa2:	3d45      	subs	r5, #69	; 0x45
 8084fa4:	bf18      	it	ne
 8084fa6:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 8084fa8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 8084fac:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 8084fb0:	a804      	add	r0, sp, #16
 8084fb2:	f003 f967 	bl	8088284 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 8084fb6:	4668      	mov	r0, sp
 8084fb8:	f003 f964 	bl	8088284 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8084fbc:	b008      	add	sp, #32
 8084fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084fc2:	bf00      	nop
 8084fc4:	404e0000 	.word	0x404e0000

08084fc8 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8084fc8:	b510      	push	{r4, lr}
 8084fca:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8084fcc:	4608      	mov	r0, r1
 8084fce:	f003 fadd 	bl	808858c <_ZNK6String5toIntEv>
 8084fd2:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8084fd4:	bd10      	pop	{r4, pc}
	...

08084fd8 <_ZN3GPS23set_horizontalDillutionE6String>:

void GPS::set_horizontalDillution(String hdString){
 8084fd8:	b510      	push	{r4, lr}
 8084fda:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8084fdc:	4608      	mov	r0, r1
 8084fde:	f003 fada 	bl	8088596 <_ZNK6String7toFloatEv>
    temp_float *= 10;
 8084fe2:	4902      	ldr	r1, [pc, #8]	; (8084fec <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8084fe4:	f005 fd5e 	bl	808aaa4 <__aeabi_fmul>

    horizontal_dillution = temp_float;
 8084fe8:	6320      	str	r0, [r4, #48]	; 0x30
}
 8084fea:	bd10      	pop	{r4, pc}
 8084fec:	41200000 	.word	0x41200000

08084ff0 <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 8084ff0:	f100 0108 	add.w	r1, r0, #8
 8084ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084ff8:	4770      	bx	lr

08084ffa <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8084ffa:	f100 0110 	add.w	r1, r0, #16
 8084ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085002:	4770      	bx	lr

08085004 <_ZN3GPS14get_satellitesEv>:

int GPS::get_satellites(void){
    return satellites_used;
}
 8085004:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8085006:	4770      	bx	lr

08085008 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_horizontalDillution(void){
 8085008:	b508      	push	{r3, lr}
    return horizontal_dillution;
 808500a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 808500c:	f005 ff10 	bl	808ae30 <__aeabi_f2iz>
}
 8085010:	bd08      	pop	{r3, pc}

08085012 <_ZN3GPS15get_nsIndicatorEv>:
    return longFrac;
}

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8085012:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8085016:	4770      	bx	lr

08085018 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8085018:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 808501c:	4770      	bx	lr

0808501e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 808501e:	6803      	ldr	r3, [r0, #0]
 8085020:	b2c9      	uxtb	r1, r1
 8085022:	689b      	ldr	r3, [r3, #8]
 8085024:	4718      	bx	r3

08085026 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8085026:	4770      	bx	lr

08085028 <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 8085028:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 808502a:	f004 fed5 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808502e:	2115      	movs	r1, #21
 8085030:	f004 fcf6 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8085034:	f004 fed0 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085038:	2104      	movs	r1, #4
 808503a:	f7ff fff0 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808503e:	f004 fecb 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085042:	2113      	movs	r1, #19
 8085044:	f7ff ffeb 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8085048:	f004 fec6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808504c:	218b      	movs	r1, #139	; 0x8b
 808504e:	f7ff ffe6 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8085052:	f004 fec1 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085056:	2100      	movs	r1, #0
 8085058:	f7ff ffe1 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 808505c:	f004 febc 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085060:	2101      	movs	r1, #1
 8085062:	f7ff ffdc 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

  // end transmission
  Wire.endTransmission();
 8085066:	f004 feb7 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808506a:	f004 fcf8 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808506e:	f004 feb3 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085072:	2204      	movs	r2, #4
 8085074:	2115      	movs	r1, #21
 8085076:	f004 fccc 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
  while(Wire.available() == 0);
 808507a:	f004 fead 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808507e:	6803      	ldr	r3, [r0, #0]
 8085080:	691b      	ldr	r3, [r3, #16]
 8085082:	4798      	blx	r3
 8085084:	2800      	cmp	r0, #0
 8085086:	d0f8      	beq.n	808507a <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 8085088:	f004 fea6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808508c:	6803      	ldr	r3, [r0, #0]
 808508e:	695b      	ldr	r3, [r3, #20]
 8085090:	4798      	blx	r3
  byte_count = Wire.read();
 8085092:	f004 fea1 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085096:	6803      	ldr	r3, [r0, #0]
 8085098:	695b      	ldr	r3, [r3, #20]
 808509a:	4798      	blx	r3
  MSB = Wire.read();
 808509c:	f004 fe9c 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850a0:	6803      	ldr	r3, [r0, #0]
 80850a2:	695b      	ldr	r3, [r3, #20]
 80850a4:	4798      	blx	r3
 80850a6:	4604      	mov	r4, r0
  LSB = Wire.read();
 80850a8:	f004 fe96 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850ac:	6803      	ldr	r3, [r0, #0]
  Serial.print("MSB: ");
  Serial.println(MSB);
  Serial.print("LSB: ");
  Serial.println(LSB);
  #endif
  int ppm = MSB*256 + LSB;
 80850ae:	b2e4      	uxtb	r4, r4
  LSB = Wire.read();
 80850b0:	695b      	ldr	r3, [r3, #20]
 80850b2:	4798      	blx	r3
  int ppm = MSB*256 + LSB;
 80850b4:	b2c0      	uxtb	r0, r0
 80850b6:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 80850ba:	3800      	subs	r0, #0
 80850bc:	bf18      	it	ne
 80850be:	2001      	movne	r0, #1
 80850c0:	bd10      	pop	{r4, pc}

080850c2 <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 80850c2:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 80850c4:	f004 fe88 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850c8:	2115      	movs	r1, #21
 80850ca:	f004 fca9 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 80850ce:	f004 fe83 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850d2:	2104      	movs	r1, #4
 80850d4:	f7ff ffa3 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80850d8:	f004 fe7e 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850dc:	2113      	movs	r1, #19
 80850de:	f7ff ff9e 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80850e2:	f004 fe79 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850e6:	218b      	movs	r1, #139	; 0x8b
 80850e8:	f7ff ff99 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80850ec:	f004 fe74 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850f0:	2100      	movs	r1, #0
 80850f2:	f7ff ff94 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80850f6:	f004 fe6f 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80850fa:	2101      	movs	r1, #1
 80850fc:	f7ff ff8f 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

  // end transmission
  Wire.endTransmission();
 8085100:	f004 fe6a 	bl	8089dd8 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 8085104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission();
 8085108:	f004 bca9 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>

0808510c <_ZN13Telaire_T67137readPPMEv>:

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 808510c:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 808510e:	f7ff ffd8 	bl	80850c2 <_ZN13Telaire_T67138queryPPMEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8085112:	f004 fe61 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085116:	2204      	movs	r2, #4
 8085118:	2115      	movs	r1, #21
 808511a:	f004 fc7a 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>

   while(Wire.available() == 0);
 808511e:	f004 fe5b 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085122:	6803      	ldr	r3, [r0, #0]
 8085124:	691b      	ldr	r3, [r3, #16]
 8085126:	4798      	blx	r3
 8085128:	2800      	cmp	r0, #0
 808512a:	d0f8      	beq.n	808511e <_ZN13Telaire_T67137readPPMEv+0x12>
   func_code = Wire.read();
 808512c:	f004 fe54 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085130:	6803      	ldr	r3, [r0, #0]
 8085132:	695b      	ldr	r3, [r3, #20]
 8085134:	4798      	blx	r3
   byte_count = Wire.read();
 8085136:	f004 fe4f 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808513a:	6803      	ldr	r3, [r0, #0]
 808513c:	695b      	ldr	r3, [r3, #20]
 808513e:	4798      	blx	r3
   MSB = Wire.read();
 8085140:	f004 fe4a 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085144:	6803      	ldr	r3, [r0, #0]
 8085146:	695b      	ldr	r3, [r3, #20]
 8085148:	4798      	blx	r3
 808514a:	4604      	mov	r4, r0
   LSB = Wire.read();
 808514c:	f004 fe44 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085150:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8085152:	0224      	lsls	r4, r4, #8
   LSB = Wire.read();
 8085154:	695b      	ldr	r3, [r3, #20]
 8085156:	4798      	blx	r3
   return ((MSB<<8)|LSB);
 8085158:	b2a4      	uxth	r4, r4
 808515a:	b2c0      	uxtb	r0, r0
}
 808515c:	4320      	orrs	r0, r4
 808515e:	bd10      	pop	{r4, pc}

08085160 <_ZN13Telaire_T671310readStatusEi>:

void Telaire_T6713::readStatus(int debugging)
{
 8085160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085164:	460c      	mov	r4, r1
  byte func_code, byte_count, MSB, LSB;
  func_code = 0;
  byte_count = 0;
  MSB = 0;
  LSB = 0;
  Wire.beginTransmission(ADDR_6713);
 8085166:	f004 fe37 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808516a:	2115      	movs	r1, #21
 808516c:	f004 fc58 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
  //Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  //Wire.write(0x01);

  // Function code = 0x04
  Wire.write(0x04);
 8085170:	f004 fe32 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085174:	2104      	movs	r1, #4
 8085176:	f7ff ff52 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808517a:	f004 fe2d 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808517e:	2113      	movs	r1, #19
 8085180:	f7ff ff4d 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8A);
 8085184:	f004 fe28 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085188:	218a      	movs	r1, #138	; 0x8a
 808518a:	f7ff ff48 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 808518e:	f004 fe23 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085192:	2100      	movs	r1, #0
 8085194:	f7ff ff43 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8085198:	f004 fe1e 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808519c:	2101      	movs	r1, #1
 808519e:	f7ff ff3e 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

  // end transmission
   Wire.endTransmission();
 80851a2:	f004 fe19 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851a6:	f004 fc5a 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 80851aa:	b124      	cbz	r4, 80851b6 <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 80851ac:	f004 fa9c 	bl	80896e8 <_Z16_fetch_usbserialv>
 80851b0:	4935      	ldr	r1, [pc, #212]	; (8085288 <_ZN13Telaire_T671310readStatusEi+0x128>)
 80851b2:	f003 fa4c 	bl	808864e <_ZN5Print7printlnEPKc>
   }
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80851b6:	f004 fe0f 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851ba:	2204      	movs	r2, #4
 80851bc:	2115      	movs	r1, #21
 80851be:	f004 fc28 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>

   while(Wire.available() == 0);
 80851c2:	f004 fe09 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851c6:	6803      	ldr	r3, [r0, #0]
 80851c8:	691b      	ldr	r3, [r3, #16]
 80851ca:	4798      	blx	r3
 80851cc:	2800      	cmp	r0, #0
 80851ce:	d0f8      	beq.n	80851c2 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 80851d0:	f004 fe02 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851d4:	6803      	ldr	r3, [r0, #0]
 80851d6:	695b      	ldr	r3, [r3, #20]
 80851d8:	4798      	blx	r3
 80851da:	4680      	mov	r8, r0
   byte_count = Wire.read();
 80851dc:	f004 fdfc 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851e0:	6803      	ldr	r3, [r0, #0]
 80851e2:	695b      	ldr	r3, [r3, #20]
 80851e4:	4798      	blx	r3
 80851e6:	4607      	mov	r7, r0
   MSB = Wire.read();
 80851e8:	f004 fdf6 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851ec:	6803      	ldr	r3, [r0, #0]
 80851ee:	695b      	ldr	r3, [r3, #20]
 80851f0:	4798      	blx	r3
 80851f2:	4606      	mov	r6, r0
   LSB = Wire.read();
 80851f4:	f004 fdf0 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80851f8:	6803      	ldr	r3, [r0, #0]
 80851fa:	695b      	ldr	r3, [r3, #20]
 80851fc:	4798      	blx	r3
 80851fe:	4605      	mov	r5, r0
   if(debugging){
 8085200:	2c00      	cmp	r4, #0
 8085202:	d03e      	beq.n	8085282 <_ZN13Telaire_T671310readStatusEi+0x122>
       Serial.print("Func code: ");
 8085204:	f004 fa70 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085208:	4920      	ldr	r1, [pc, #128]	; (808528c <_ZN13Telaire_T671310readStatusEi+0x12c>)
 808520a:	f003 fa0d 	bl	8088628 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 808520e:	f004 fa6b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085212:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 8085214:	2210      	movs	r2, #16
 8085216:	fa5f f188 	uxtb.w	r1, r8
 808521a:	f003 fa2c 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 808521e:	4620      	mov	r0, r4
 8085220:	f003 fa09 	bl	8088636 <_ZN5Print7printlnEv>
       Serial.print("byte count: ");
 8085224:	f004 fa60 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085228:	4919      	ldr	r1, [pc, #100]	; (8085290 <_ZN13Telaire_T671310readStatusEi+0x130>)
 808522a:	f003 f9fd 	bl	8088628 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 808522e:	f004 fa5b 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085232:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 8085234:	2210      	movs	r2, #16
 8085236:	b2f9      	uxtb	r1, r7
 8085238:	f003 fa1d 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 808523c:	4620      	mov	r0, r4
 808523e:	f003 f9fa 	bl	8088636 <_ZN5Print7printlnEv>
       Serial.print("MSB: ");
 8085242:	f004 fa51 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085246:	4913      	ldr	r1, [pc, #76]	; (8085294 <_ZN13Telaire_T671310readStatusEi+0x134>)
 8085248:	f003 f9ee 	bl	8088628 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808524c:	f004 fa4c 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085250:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 8085252:	2202      	movs	r2, #2
 8085254:	b2f1      	uxtb	r1, r6
 8085256:	f003 fa0e 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 808525a:	4620      	mov	r0, r4
 808525c:	f003 f9eb 	bl	8088636 <_ZN5Print7printlnEv>
       Serial.print("LSB: ");
 8085260:	f004 fa42 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085264:	490c      	ldr	r1, [pc, #48]	; (8085298 <_ZN13Telaire_T671310readStatusEi+0x138>)
 8085266:	f003 f9df 	bl	8088628 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 808526a:	f004 fa3d 	bl	80896e8 <_Z16_fetch_usbserialv>
 808526e:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 8085270:	b2e9      	uxtb	r1, r5
 8085272:	2202      	movs	r2, #2
 8085274:	f003 f9ff 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 8085278:	4620      	mov	r0, r4
   }

}
 808527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808527e:	f003 b9da 	b.w	8088636 <_ZN5Print7printlnEv>
 8085282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085286:	bf00      	nop
 8085288:	0808f060 	.word	0x0808f060
 808528c:	0808f07a 	.word	0x0808f07a
 8085290:	0808f086 	.word	0x0808f086
 8085294:	0808f093 	.word	0x0808f093
 8085298:	0808f099 	.word	0x0808f099

0808529c <_ZN13Telaire_T671311resetSensorEv>:

void Telaire_T6713::resetSensor()
{
 808529c:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808529e:	f004 fd9b 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852a2:	2115      	movs	r1, #21
 80852a4:	f004 fbbc 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80852a8:	f004 fd96 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852ac:	2105      	movs	r1, #5
 80852ae:	f7ff feb6 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80852b2:	f004 fd91 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852b6:	2103      	movs	r1, #3
 80852b8:	f7ff feb1 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80852bc:	f004 fd8c 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852c0:	21e8      	movs	r1, #232	; 0xe8
 80852c2:	f7ff feac 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80852c6:	f004 fd87 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852ca:	21ff      	movs	r1, #255	; 0xff
 80852cc:	f7ff fea7 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 80852d0:	f004 fd82 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852d4:	2100      	movs	r1, #0
 80852d6:	f7ff fea2 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

  // end transmission
   Wire.endTransmission();
 80852da:	f004 fd7d 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 80852de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 80852e2:	f004 bbbc 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>

080852e6 <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 80852e6:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80852e8:	f004 fd76 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852ec:	2115      	movs	r1, #21
 80852ee:	f004 fb97 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80852f2:	f004 fd71 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80852f6:	2105      	movs	r1, #5
 80852f8:	f7ff fe91 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80852fc:	f004 fd6c 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085300:	2103      	movs	r1, #3
 8085302:	f7ff fe8c 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8085306:	f004 fd67 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808530a:	21ee      	movs	r1, #238	; 0xee
 808530c:	f7ff fe87 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8085310:	f004 fd62 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085314:	2100      	movs	r1, #0
 8085316:	f7ff fe82 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808531a:	f004 fd5d 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808531e:	2100      	movs	r1, #0
 8085320:	f7ff fe7d 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

    // end transmission
    Wire.endTransmission();
 8085324:	f004 fd58 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 8085328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 808532c:	f004 bb97 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>

08085330 <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 8085330:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085332:	f004 fd51 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085336:	2115      	movs	r1, #21
 8085338:	f004 fb72 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808533c:	f004 fd4c 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085340:	2105      	movs	r1, #5
 8085342:	f7ff fe6c 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085346:	f004 fd47 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808534a:	2103      	movs	r1, #3
 808534c:	f7ff fe67 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8085350:	f004 fd42 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085354:	21ee      	movs	r1, #238	; 0xee
 8085356:	f7ff fe62 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808535a:	f004 fd3d 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808535e:	21ff      	movs	r1, #255	; 0xff
 8085360:	f7ff fe5d 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8085364:	f004 fd38 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085368:	2100      	movs	r1, #0
 808536a:	f7ff fe58 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

    // end transmission
    Wire.endTransmission();
 808536e:	f004 fd33 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 8085372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8085376:	f004 bb72 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>
	...

0808537c <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 808537c:	b508      	push	{r3, lr}
    if(debugging){
 808537e:	b121      	cbz	r1, 808538a <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8085380:	f004 f9b2 	bl	80896e8 <_Z16_fetch_usbserialv>
 8085384:	4913      	ldr	r1, [pc, #76]	; (80853d4 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8085386:	f003 f962 	bl	808864e <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 808538a:	f004 fd25 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808538e:	2115      	movs	r1, #21
 8085390:	f004 fb46 	bl	8089a20 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085394:	f004 fd20 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8085398:	2105      	movs	r1, #5
 808539a:	f7ff fe40 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808539e:	f004 fd1b 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80853a2:	2103      	movs	r1, #3
 80853a4:	f7ff fe3b 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80853a8:	f004 fd16 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80853ac:	21ec      	movs	r1, #236	; 0xec
 80853ae:	f7ff fe36 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80853b2:	f004 fd11 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80853b6:	21ff      	movs	r1, #255	; 0xff
 80853b8:	f7ff fe31 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80853bc:	f004 fd0c 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80853c0:	2100      	movs	r1, #0
 80853c2:	f7ff fe2c 	bl	808501e <_ZN7TwoWire5writeEi.isra.0>

    // end transmission
    Wire.endTransmission();
 80853c6:	f004 fd07 	bl	8089dd8 <_Z19__fetch_global_Wirev>
}
 80853ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80853ce:	f004 bb46 	b.w	8089a5e <_ZN7TwoWire15endTransmissionEv>
 80853d2:	bf00      	nop
 80853d4:	0808f09f 	.word	0x0808f09f

080853d8 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80853d8:	2904      	cmp	r1, #4
 80853da:	d804      	bhi.n	80853e6 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
 80853dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80853e0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 80853e4:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80853e6:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80853e8:	bf9b      	ittet	ls
 80853ea:	f101 31ff 	addls.w	r1, r1, #4294967295
 80853ee:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80853f2:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 80853f4:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80853f6:	bf84      	itt	hi
 80853f8:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80853fc:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
 80853fe:	4770      	bx	lr

08085400 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8085400:	b510      	push	{r4, lr}
 8085402:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8085404:	3028      	adds	r0, #40	; 0x28
 8085406:	f001 f9c1 	bl	808678c <_ZN8FatCache4syncEv>
 808540a:	b128      	cbz	r0, 8085418 <_ZN9FatVolume9cacheSyncEv+0x18>
 808540c:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8085410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8085414:	f001 b9ba 	b.w	808678c <_ZN8FatCache4syncEv>
  }
 8085418:	bd10      	pop	{r4, pc}

0808541a <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
 808541a:	1e41      	subs	r1, r0, #1
 808541c:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 8085420:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8085422:	0842      	lsrs	r2, r0, #1
 8085424:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 8085428:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808542c:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 808542e:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8085430:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 8085434:	d1f5      	bne.n	8085422 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
 8085436:	4770      	bx	lr

08085438 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8085438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808543c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808543e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8085442:	2b20      	cmp	r3, #32
 8085444:	d0fa      	beq.n	808543c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 8085446:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085448:	4d69      	ldr	r5, [pc, #420]	; (80855f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
  fname->lfn = path;
 808544a:	608e      	str	r6, [r1, #8]
    c = path[len];
 808544c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 808544e:	b1c3      	cbz	r3, 8085482 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 8085450:	2b2f      	cmp	r3, #47	; 0x2f
 8085452:	d016      	beq.n	8085482 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085454:	2b5c      	cmp	r3, #92	; 0x5c
 8085456:	d102      	bne.n	808545e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8085458:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 808545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808545e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 8085462:	b2c0      	uxtb	r0, r0
 8085464:	281d      	cmp	r0, #29
 8085466:	d803      	bhi.n	8085470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 8085468:	fa25 f000 	lsr.w	r0, r5, r0
 808546c:	07c0      	lsls	r0, r0, #31
 808546e:	d4f3      	bmi.n	8085458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8085470:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 8085474:	283c      	cmp	r0, #60	; 0x3c
 8085476:	d0ef      	beq.n	8085458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 8085478:	3b20      	subs	r3, #32
 808547a:	2b5e      	cmp	r3, #94	; 0x5e
 808547c:	d8ec      	bhi.n	8085458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 808547e:	3401      	adds	r4, #1
    c = path[len];
 8085480:	e7e4      	b.n	808544c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 8085482:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 8085484:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8085486:	4607      	mov	r7, r0
 8085488:	f810 5b01 	ldrb.w	r5, [r0], #1
 808548c:	2d20      	cmp	r5, #32
 808548e:	d0fa      	beq.n	8085486 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8085490:	2d2f      	cmp	r5, #47	; 0x2f
 8085492:	d0f8      	beq.n	8085486 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 8085494:	6017      	str	r7, [r2, #0]
  while (len) {
 8085496:	b14c      	cbz	r4, 80854ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 8085498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 808549c:	2a2e      	cmp	r2, #46	; 0x2e
 808549e:	d001      	beq.n	80854a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 80854a0:	2a20      	cmp	r2, #32
 80854a2:	d101      	bne.n	80854a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 80854a4:	3c01      	subs	r4, #1
  while (len) {
 80854a6:	e7f6      	b.n	8085496 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 80854a8:	2cff      	cmp	r4, #255	; 0xff
 80854aa:	dcd5      	bgt.n	8085458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 80854ac:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80854b0:	f04f 0800 	mov.w	r8, #0
    fname->sfn[k] = ' ';
 80854b4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
 80854b8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
 80854ba:	f8c1 300d 	str.w	r3, [r1, #13]
 80854be:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80854c0:	f816 3008 	ldrb.w	r3, [r6, r8]
 80854c4:	2b2e      	cmp	r3, #46	; 0x2e
 80854c6:	d001      	beq.n	80854cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
 80854c8:	2b20      	cmp	r3, #32
 80854ca:	d102      	bne.n	80854d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
 80854cc:	f108 0801 	add.w	r8, r8, #1
 80854d0:	e7f6      	b.n	80854c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
 80854d2:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80854d6:	1e65      	subs	r5, r4, #1
  is83 = !si;
 80854d8:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80854da:	1c6b      	adds	r3, r5, #1
 80854dc:	d002      	beq.n	80854e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
 80854de:	5d73      	ldrb	r3, [r6, r5]
 80854e0:	2b2e      	cmp	r3, #46	; 0x2e
 80854e2:	d114      	bne.n	808550e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80854e4:	f04f 0900 	mov.w	r9, #0
 80854e8:	2707      	movs	r7, #7
 80854ea:	464a      	mov	r2, r9
 80854ec:	46ca      	mov	sl, r9
 80854ee:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 80854f2:	45a0      	cmp	r8, r4
 80854f4:	da68      	bge.n	80855c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
 80854f6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 80854fa:	2b20      	cmp	r3, #32
 80854fc:	d003      	beq.n	8085506 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
 80854fe:	2b2e      	cmp	r3, #46	; 0x2e
 8085500:	d107      	bne.n	8085512 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
 8085502:	45a8      	cmp	r8, r5
 8085504:	d012      	beq.n	808552c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
 8085506:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8085508:	f108 0801 	add.w	r8, r8, #1
 808550c:	e7f1      	b.n	80854f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808550e:	3d01      	subs	r5, #1
 8085510:	e7e3      	b.n	80854da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
 8085512:	2b22      	cmp	r3, #34	; 0x22
 8085514:	d008      	beq.n	8085528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8085516:	2b7c      	cmp	r3, #124	; 0x7c
 8085518:	d006      	beq.n	8085528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808551a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 808551e:	f1bc 0f05 	cmp.w	ip, #5
 8085522:	d80a      	bhi.n	808553a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
 8085524:	2b2d      	cmp	r3, #45	; 0x2d
 8085526:	d012      	beq.n	808554e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
 8085528:	45a8      	cmp	r8, r5
 808552a:	d15b      	bne.n	80855e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
 808552c:	2f0a      	cmp	r7, #10
 808552e:	d04a      	beq.n	80855c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
 8085530:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8085532:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085534:	f04f 0e10 	mov.w	lr, #16
 8085538:	e7e6      	b.n	8085508 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
 808553a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808553e:	f1bc 0f05 	cmp.w	ip, #5
 8085542:	d9f1      	bls.n	8085528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
 8085544:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8085548:	f1bc 0f02 	cmp.w	ip, #2
 808554c:	d9ec      	bls.n	8085528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
 808554e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8085552:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8085556:	d8e7      	bhi.n	8085528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
 8085558:	45a8      	cmp	r8, r5
 808555a:	d0e7      	beq.n	808552c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 808555c:	42ba      	cmp	r2, r7
 808555e:	d830      	bhi.n	80855c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
 8085560:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8085564:	f1bc 0f19 	cmp.w	ip, #25
 8085568:	d81a      	bhi.n	80855a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
 808556a:	3b20      	subs	r3, #32
        lc |= bit;
 808556c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 8085570:	b2db      	uxtb	r3, r3
        lc |= bit;
 8085572:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 8085576:	f102 0c01 	add.w	ip, r2, #1
 808557a:	fa5f fc8c 	uxtb.w	ip, ip
 808557e:	440a      	add	r2, r1
      if (i < 7) {
 8085580:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 8085584:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8085586:	d801      	bhi.n	808558c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
 8085588:	f881 c00c 	strb.w	ip, [r1, #12]
 808558c:	4662      	mov	r2, ip
 808558e:	e7bb      	b.n	8085508 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
 8085590:	45a8      	cmp	r8, r5
 8085592:	dc18      	bgt.n	80855c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
 8085594:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8085596:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8085598:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 808559a:	f04f 0e10 	mov.w	lr, #16
 808559e:	e7b2      	b.n	8085506 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
 80855a0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80855a4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80855a8:	bf98      	it	ls
 80855aa:	ea4e 0a0a 	orrls.w	sl, lr, sl
 80855ae:	e7e2      	b.n	8085576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80855b0:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 80855b2:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80855b4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80855b6:	4419      	add	r1, r3
 80855b8:	237e      	movs	r3, #126	; 0x7e
 80855ba:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80855bc:	2331      	movs	r3, #49	; 0x31
 80855be:	738b      	strb	r3, [r1, #14]
 80855c0:	e74b      	b.n	808545a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 80855c2:	2f0a      	cmp	r7, #10
 80855c4:	d1e4      	bne.n	8085590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
 80855c6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 80855c8:	7b4b      	ldrb	r3, [r1, #13]
 80855ca:	2b20      	cmp	r3, #32
 80855cc:	f43f af44 	beq.w	8085458 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 80855d0:	2800      	cmp	r0, #0
 80855d2:	d0ed      	beq.n	80855b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80855d4:	ea1a 0f09 	tst.w	sl, r9
 80855d8:	bf18      	it	ne
 80855da:	f04f 0902 	movne.w	r9, #2
 80855de:	f881 9000 	strb.w	r9, [r1]
 80855e2:	e73a      	b.n	808545a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 80855e4:	42ba      	cmp	r2, r7
 80855e6:	d8ec      	bhi.n	80855c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
 80855e8:	2000      	movs	r0, #0
      c = '_';
 80855ea:	235f      	movs	r3, #95	; 0x5f
 80855ec:	e7c3      	b.n	8085576 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
 80855ee:	bf00      	nop
 80855f0:	31000101 	.word	0x31000101

080855f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80855f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80855f8:	4606      	mov	r6, r0
 80855fa:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80855fc:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80855fe:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8085600:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8085604:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8085608:	6861      	ldr	r1, [r4, #4]
 808560a:	68a2      	ldr	r2, [r4, #8]
 808560c:	186b      	adds	r3, r5, r1
 808560e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8085610:	4411      	add	r1, r2
 8085612:	4291      	cmp	r1, r2
 8085614:	d006      	beq.n	8085624 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8085616:	f812 0b01 	ldrb.w	r0, [r2], #1
 808561a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808561e:	4043      	eors	r3, r0
 8085620:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8085622:	e7f6      	b.n	8085612 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8085624:	f1b9 0f03 	cmp.w	r9, #3
 8085628:	bf28      	it	cs
 808562a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808562e:	f109 0204 	add.w	r2, r9, #4
 8085632:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8085634:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085638:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808563a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808563c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808563e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085640:	bf94      	ite	ls
 8085642:	3130      	addls	r1, #48	; 0x30
 8085644:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085646:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085648:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 808564a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808564e:	d1f1      	bne.n	8085634 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8085650:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8085654:	2100      	movs	r1, #0
 8085656:	4630      	mov	r0, r6
 8085658:	735f      	strb	r7, [r3, #13]
 808565a:	f000 fe9f 	bl	808639c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 808565e:	2101      	movs	r1, #1
 8085660:	4630      	mov	r0, r6
 8085662:	f000 fe7c 	bl	808635e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8085666:	4601      	mov	r1, r0
 8085668:	b928      	cbnz	r0, 8085676 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 808566a:	7870      	ldrb	r0, [r6, #1]
 808566c:	fab0 f080 	clz	r0, r0
 8085670:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 8085672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 8085676:	7803      	ldrb	r3, [r0, #0]
 8085678:	b16b      	cbz	r3, 8085696 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808567a:	7ac3      	ldrb	r3, [r0, #11]
 808567c:	071b      	lsls	r3, r3, #28
 808567e:	d4ee      	bmi.n	808565e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8085680:	220b      	movs	r2, #11
 8085682:	4640      	mov	r0, r8
 8085684:	f005 fe53 	bl	808b32e <memcmp>
 8085688:	2800      	cmp	r0, #0
 808568a:	d1e8      	bne.n	808565e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 808568c:	3501      	adds	r5, #1
 808568e:	b2ad      	uxth	r5, r5
 8085690:	2d64      	cmp	r5, #100	; 0x64
 8085692:	d1b9      	bne.n	8085608 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8085694:	e7ed      	b.n	8085672 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8085696:	2001      	movs	r0, #1
 8085698:	e7eb      	b.n	8085672 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

0808569c <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80856a0:	b08b      	sub	sp, #44	; 0x2c
 80856a2:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 80856a4:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80856a6:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 80856a8:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80856ac:	4617      	mov	r7, r2
 80856ae:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
 80856b0:	d103      	bne.n	80856ba <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 80856b2:	2000      	movs	r0, #0
}
 80856b4:	b00b      	add	sp, #44	; 0x2c
 80856b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
 80856ba:	9b06      	ldr	r3, [sp, #24]
 80856bc:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 80856be:	2b00      	cmp	r3, #0
 80856c0:	d1f7      	bne.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 80856c2:	6853      	ldr	r3, [r2, #4]
  }
 80856c4:	f04f 0b00 	mov.w	fp, #0
 80856c8:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80856ca:	7813      	ldrb	r3, [r2, #0]
 80856cc:	46da      	mov	sl, fp
 80856ce:	0799      	lsls	r1, r3, #30
 80856d0:	bf1b      	ittet	ne
 80856d2:	220d      	movne	r2, #13
 80856d4:	9b04      	ldrne	r3, [sp, #16]
 80856d6:	2301      	moveq	r3, #1
 80856d8:	330c      	addne	r3, #12
 80856da:	bf18      	it	ne
 80856dc:	fbb3 f3f2 	udivne	r3, r3, r2
 80856e0:	465c      	mov	r4, fp
 80856e2:	465e      	mov	r6, fp
 80856e4:	46d9      	mov	r9, fp
 80856e6:	bf1c      	itt	ne
 80856e8:	3301      	addne	r3, #1
 80856ea:	b2db      	uxtbne	r3, r3
    seekSet(0);
 80856ec:	2100      	movs	r1, #0
 80856ee:	4628      	mov	r0, r5
 80856f0:	9302      	str	r3, [sp, #8]
 80856f2:	f000 fe53 	bl	808639c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80856f6:	f107 030d 	add.w	r3, r7, #13
  }
 80856fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80856fe:	9309      	str	r3, [sp, #36]	; 0x24
    curIndex = dirFile->m_curPosition/32;
 8085700:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
 8085702:	2101      	movs	r1, #1
 8085704:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
 8085706:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
 808570a:	f000 fe28 	bl	808635e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808570e:	4603      	mov	r3, r0
 8085710:	2800      	cmp	r0, #0
 8085712:	d16f      	bne.n	80857f4 <_ZN7FatFile4openEPS_P7fname_th+0x158>
      if (dirFile->getError()) {
 8085714:	786b      	ldrb	r3, [r5, #1]
 8085716:	2b00      	cmp	r3, #0
 8085718:	d1cb      	bne.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 808571a:	9b05      	ldr	r3, [sp, #20]
 808571c:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8085720:	2b42      	cmp	r3, #66	; 0x42
 8085722:	d1c6      	bne.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8085724:	9b03      	ldr	r3, [sp, #12]
 8085726:	2c00      	cmp	r4, #0
 8085728:	bf08      	it	eq
 808572a:	4643      	moveq	r3, r8
 808572c:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 808572e:	9b02      	ldr	r3, [sp, #8]
 8085730:	429c      	cmp	r4, r3
 8085732:	f0c0 80f0 	bcc.w	8085916 <_ZN7FatFile4openEPS_P7fname_th+0x27a>
  if (fnameFound) {
 8085736:	f1b9 0f00 	cmp.w	r9, #0
 808573a:	f040 8109 	bne.w	8085950 <_ZN7FatFile4openEPS_P7fname_th+0x2b4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 808573e:	9b03      	ldr	r3, [sp, #12]
 8085740:	4628      	mov	r0, r5
 8085742:	0159      	lsls	r1, r3, #5
 8085744:	f000 fe2a 	bl	808639c <_ZN7FatFile7seekSetEm>
 8085748:	2800      	cmp	r0, #0
 808574a:	d0b2      	beq.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 808574c:	9b02      	ldr	r3, [sp, #8]
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808574e:	f04f 0a00 	mov.w	sl, #0
  lfnOrd = freeNeed - 1;
 8085752:	f103 39ff 	add.w	r9, r3, #4294967295
 8085756:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808575a:	464e      	mov	r6, r9
    ldir->attr = DIR_ATT_LONG_NAME;
 808575c:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085760:	2e00      	cmp	r6, #0
 8085762:	f000 810c 	beq.w	808597e <_ZN7FatFile4openEPS_P7fname_th+0x2e2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8085766:	2100      	movs	r1, #0
 8085768:	4628      	mov	r0, r5
 808576a:	f000 fdf8 	bl	808635e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 808576e:	4604      	mov	r4, r0
 8085770:	2800      	cmp	r0, #0
 8085772:	d09e      	beq.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8085774:	454e      	cmp	r6, r9
 8085776:	bf18      	it	ne
 8085778:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 808577a:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808577c:	bf08      	it	eq
 808577e:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8085782:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8085786:	f043 0301 	orr.w	r3, r3, #1
 808578a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 808578e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8085792:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8085796:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808579a:	f107 000d 	add.w	r0, r7, #13
 808579e:	f7ff fe3c 	bl	808541a <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80857a2:	220d      	movs	r2, #13
 80857a4:	f00b 031f 	and.w	r3, fp, #31
 80857a8:	3b01      	subs	r3, #1
 80857aa:	4353      	muls	r3, r2
 80857ac:	2200      	movs	r2, #0
    ldir->chksum = lfnChecksum(fname->sfn);
 80857ae:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 80857b0:	f884 a01a 	strb.w	sl, [r4, #26]
 80857b4:	f884 a01b 	strb.w	sl, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 80857b8:	f8d7 c008 	ldr.w	ip, [r7, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80857bc:	9904      	ldr	r1, [sp, #16]
 80857be:	4299      	cmp	r1, r3
 80857c0:	f240 80ce 	bls.w	8085960 <_ZN7FatFile4openEPS_P7fname_th+0x2c4>
 80857c4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
 80857c8:	2a04      	cmp	r2, #4
 80857ca:	fa5f fe82 	uxtb.w	lr, r2
 80857ce:	f102 0001 	add.w	r0, r2, #1
 80857d2:	f200 80cb 	bhi.w	808596c <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
    ldir->name1[i] = c;
 80857d6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80857da:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 80857de:	280d      	cmp	r0, #13
 80857e0:	4602      	mov	r2, r0
 80857e2:	f103 0301 	add.w	r3, r3, #1
 80857e6:	d1e9      	bne.n	80857bc <_ZN7FatFile4openEPS_P7fname_th+0x120>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80857e8:	3e01      	subs	r6, #1
 80857ea:	b2f6      	uxtb	r6, r6
 80857ec:	e7b8      	b.n	8085760 <_ZN7FatFile4openEPS_P7fname_th+0xc4>
        fnameFound = true;
 80857ee:	f04f 0901 	mov.w	r9, #1
 80857f2:	e785      	b.n	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80857f4:	7802      	ldrb	r2, [r0, #0]
 80857f6:	2ae5      	cmp	r2, #229	; 0xe5
 80857f8:	d000      	beq.n	80857fc <_ZN7FatFile4openEPS_P7fname_th+0x160>
 80857fa:	b97a      	cbnz	r2, 808581c <_ZN7FatFile4openEPS_P7fname_th+0x180>
    curIndex = dirFile->m_curPosition/32;
 80857fc:	9903      	ldr	r1, [sp, #12]
 80857fe:	2c00      	cmp	r4, #0
 8085800:	bf08      	it	eq
 8085802:	4641      	moveq	r1, r8
 8085804:	9103      	str	r1, [sp, #12]
      if (freeFound < freeNeed) {
 8085806:	9902      	ldr	r1, [sp, #8]
 8085808:	428c      	cmp	r4, r1
        freeFound++;
 808580a:	bf3c      	itt	cc
 808580c:	3401      	addcc	r4, #1
 808580e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8085810:	2a00      	cmp	r2, #0
 8085812:	d082      	beq.n	808571a <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8085814:	2ae5      	cmp	r2, #229	; 0xe5
 8085816:	d105      	bne.n	8085824 <_ZN7FatFile4openEPS_P7fname_th+0x188>
      lfnOrd = 0;
 8085818:	2600      	movs	r6, #0
 808581a:	e771      	b.n	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        freeFound = 0;
 808581c:	9902      	ldr	r1, [sp, #8]
 808581e:	428c      	cmp	r4, r1
 8085820:	bf38      	it	cc
 8085822:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8085824:	2a2e      	cmp	r2, #46	; 0x2e
 8085826:	d0f7      	beq.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
 8085828:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
 808582a:	290f      	cmp	r1, #15
 808582c:	d149      	bne.n	80858c2 <_ZN7FatFile4openEPS_P7fname_th+0x226>
      if (!lfnOrd) {
 808582e:	bb16      	cbnz	r6, 8085876 <_ZN7FatFile4openEPS_P7fname_th+0x1da>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8085830:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 8085834:	f43f af64 	beq.w	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        lfnOrd = ord = ldir->ord & 0X1F;
 8085838:	f002 061f 	and.w	r6, r2, #31
 808583c:	46b2      	mov	sl, r6
        chksum = ldir->chksum;
 808583e:	f893 b00d 	ldrb.w	fp, [r3, #13]
      size_t k = 13*(ord - 1);
 8085842:	220d      	movs	r2, #13
 8085844:	f10a 38ff 	add.w	r8, sl, #4294967295
 8085848:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
 808584c:	9a04      	ldr	r2, [sp, #16]
 808584e:	4542      	cmp	r2, r8
 8085850:	d9e2      	bls.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 8085852:	eba2 0208 	sub.w	r2, r2, r8
 8085856:	9207      	str	r2, [sp, #28]
 8085858:	2200      	movs	r2, #0
 808585a:	eb02 0108 	add.w	r1, r2, r8
 808585e:	9108      	str	r1, [sp, #32]
        uint16_t u = lfnGetChar(ldir, i);
 8085860:	4618      	mov	r0, r3
 8085862:	b2d1      	uxtb	r1, r2
 8085864:	f7ff fdb8 	bl	80853d8 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
 8085868:	9907      	ldr	r1, [sp, #28]
 808586a:	428a      	cmp	r2, r1
 808586c:	d10d      	bne.n	808588a <_ZN7FatFile4openEPS_P7fname_th+0x1ee>
            lfnOrd = 0;
 808586e:	2800      	cmp	r0, #0
 8085870:	bf18      	it	ne
 8085872:	2600      	movne	r6, #0
 8085874:	e744      	b.n	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8085876:	f10a 3aff 	add.w	sl, sl, #4294967295
 808587a:	fa5f fa8a 	uxtb.w	sl, sl
 808587e:	4552      	cmp	r2, sl
 8085880:	d1ca      	bne.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 8085882:	7b5a      	ldrb	r2, [r3, #13]
 8085884:	455a      	cmp	r2, fp
 8085886:	d0dc      	beq.n	8085842 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8085888:	e7c6      	b.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808588a:	28ff      	cmp	r0, #255	; 0xff
 808588c:	d8c4      	bhi.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
 808588e:	b2c0      	uxtb	r0, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085890:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8085894:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085896:	f8dd c020 	ldr.w	ip, [sp, #32]
 808589a:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808589c:	bf98      	it	ls
 808589e:	3020      	addls	r0, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80858a0:	f811 100c 	ldrb.w	r1, [r1, ip]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80858a4:	bf98      	it	ls
 80858a6:	b2c0      	uxtbls	r0, r0
 80858a8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80858ac:	f1bc 0f19 	cmp.w	ip, #25
 80858b0:	bf9c      	itt	ls
 80858b2:	3120      	addls	r1, #32
 80858b4:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80858b6:	4281      	cmp	r1, r0
 80858b8:	d1ae      	bne.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
      for (uint8_t i = 0; i < 13; i++) {
 80858ba:	3201      	adds	r2, #1
 80858bc:	2a0d      	cmp	r2, #13
 80858be:	d1cc      	bne.n	808585a <_ZN7FatFile4openEPS_P7fname_th+0x1be>
 80858c0:	e71e      	b.n	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80858c2:	070a      	lsls	r2, r1, #28
 80858c4:	d4a8      	bmi.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x17c>
      if (lfnOrd) {
 80858c6:	b15e      	cbz	r6, 80858e0 <_ZN7FatFile4openEPS_P7fname_th+0x244>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80858c8:	f1ba 0f01 	cmp.w	sl, #1
 80858cc:	f47f aef1 	bne.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80858d0:	4618      	mov	r0, r3
 80858d2:	f7ff fda2 	bl	808541a <_ZN7FatFile11lfnChecksumEPh>
 80858d6:	4558      	cmp	r0, fp
 80858d8:	f47f aeeb 	bne.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80858dc:	46b1      	mov	r9, r6
 80858de:	e00d      	b.n	80858fc <_ZN7FatFile4openEPS_P7fname_th+0x260>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80858e0:	220b      	movs	r2, #11
 80858e2:	4618      	mov	r0, r3
 80858e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80858e6:	f005 fd22 	bl	808b32e <memcmp>
 80858ea:	2800      	cmp	r0, #0
 80858ec:	f47f af08 	bne.w	8085700 <_ZN7FatFile4openEPS_P7fname_th+0x64>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80858f0:	f897 9000 	ldrb.w	r9, [r7]
 80858f4:	f019 0901 	ands.w	r9, r9, #1
 80858f8:	f47f af79 	bne.w	80857ee <_ZN7FatFile4openEPS_P7fname_th+0x152>
  if (oflag & O_EXCL) {
 80858fc:	9b05      	ldr	r3, [sp, #20]
 80858fe:	061b      	lsls	r3, r3, #24
 8085900:	f53f aed7 	bmi.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8085904:	4642      	mov	r2, r8
 8085906:	4629      	mov	r1, r5
 8085908:	9b05      	ldr	r3, [sp, #20]
 808590a:	9806      	ldr	r0, [sp, #24]
 808590c:	f8cd 9000 	str.w	r9, [sp]
 8085910:	f000 fd87 	bl	8086422 <_ZN7FatFile15openCachedEntryEPS_thh>
 8085914:	e6ce      	b.n	80856b4 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8085916:	2100      	movs	r1, #0
 8085918:	4628      	mov	r0, r5
 808591a:	f000 fd20 	bl	808635e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808591e:	b9a0      	cbnz	r0, 808594a <_ZN7FatFile4openEPS_P7fname_th+0x2ae>
      if (dirFile->getError()) {
 8085920:	786b      	ldrb	r3, [r5, #1]
 8085922:	2b00      	cmp	r3, #0
 8085924:	f47f aec5 	bne.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8085928:	4628      	mov	r0, r5
 808592a:	f000 fc03 	bl	8086134 <_ZN7FatFile13addDirClusterEv>
 808592e:	2800      	cmp	r0, #0
 8085930:	f43f aebf 	beq.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    return m_blocksPerCluster;
 8085934:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8085936:	791b      	ldrb	r3, [r3, #4]
 8085938:	2b01      	cmp	r3, #1
 808593a:	f63f aefc 	bhi.w	8085736 <_ZN7FatFile4openEPS_P7fname_th+0x9a>
  while (freeFound < freeNeed) {
 808593e:	9b02      	ldr	r3, [sp, #8]
    freeFound += 16;
 8085940:	3410      	adds	r4, #16
 8085942:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8085944:	42a3      	cmp	r3, r4
 8085946:	d8ef      	bhi.n	8085928 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
 8085948:	e6f5      	b.n	8085736 <_ZN7FatFile4openEPS_P7fname_th+0x9a>
    freeFound++;
 808594a:	3401      	adds	r4, #1
 808594c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 808594e:	e6ee      	b.n	808572e <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8085950:	4639      	mov	r1, r7
 8085952:	4628      	mov	r0, r5
 8085954:	f7ff fe4e 	bl	80855f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8085958:	2800      	cmp	r0, #0
 808595a:	f47f aef0 	bne.w	808573e <_ZN7FatFile4openEPS_P7fname_th+0xa2>
 808595e:	e6a8      	b.n	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8085960:	bf14      	ite	ne
 8085962:	f04f 31ff 	movne.w	r1, #4294967295
 8085966:	2100      	moveq	r1, #0
 8085968:	b289      	uxth	r1, r1
 808596a:	e72d      	b.n	80857c8 <_ZN7FatFile4openEPS_P7fname_th+0x12c>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808596c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8085970:	bf94      	ite	ls
 8085972:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8085976:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
 808597a:	8091      	strh	r1, [r2, #4]
 808597c:	e72f      	b.n	80857de <_ZN7FatFile4openEPS_P7fname_th+0x142>
  dir = dirFile->readDirCache();
 808597e:	4631      	mov	r1, r6
 8085980:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8085982:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
 8085986:	f000 fcea 	bl	808635e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 808598a:	4604      	mov	r4, r0
 808598c:	2800      	cmp	r0, #0
 808598e:	f43f ae90 	beq.w	80856b2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8085992:	2220      	movs	r2, #32
 8085994:	4631      	mov	r1, r6
 8085996:	f005 fce8 	bl	808b36a <memset>
  memcpy(dir->name, fname->sfn, 11);
 808599a:	f8d7 300d 	ldr.w	r3, [r7, #13]
 808599e:	6023      	str	r3, [r4, #0]
 80859a0:	f8d7 3011 	ldr.w	r3, [r7, #17]
 80859a4:	6063      	str	r3, [r4, #4]
 80859a6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80859aa:	8123      	strh	r3, [r4, #8]
 80859ac:	7dfb      	ldrb	r3, [r7, #23]
 80859ae:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80859b0:	783b      	ldrb	r3, [r7, #0]
 80859b2:	f003 0318 	and.w	r3, r3, #24
 80859b6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 80859b8:	4b0f      	ldr	r3, [pc, #60]	; (80859f8 <_ZN7FatFile4openEPS_P7fname_th+0x35c>)
 80859ba:	681b      	ldr	r3, [r3, #0]
 80859bc:	b19b      	cbz	r3, 80859e6 <_ZN7FatFile4openEPS_P7fname_th+0x34a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80859be:	f104 010e 	add.w	r1, r4, #14
 80859c2:	f104 0010 	add.w	r0, r4, #16
 80859c6:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 80859c8:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 80859ca:	f3c8 184f 	ubfx	r8, r8, #5, #16
  dir->lastAccessDate = dir->creationDate;
 80859ce:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 80859d0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 80859d2:	89e3      	ldrh	r3, [r4, #14]
 80859d4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 80859d6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
 80859d8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80859dc:	f043 0301 	orr.w	r3, r3, #1
 80859e0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 80859e4:	e78e      	b.n	8085904 <_ZN7FatFile4openEPS_P7fname_th+0x268>
    dir->creationDate = FAT_DEFAULT_DATE;
 80859e6:	2321      	movs	r3, #33	; 0x21
 80859e8:	7423      	strb	r3, [r4, #16]
 80859ea:	2328      	movs	r3, #40	; 0x28
 80859ec:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80859ee:	2308      	movs	r3, #8
 80859f0:	73a6      	strb	r6, [r4, #14]
 80859f2:	73e3      	strb	r3, [r4, #15]
 80859f4:	e7e8      	b.n	80859c8 <_ZN7FatFile4openEPS_P7fname_th+0x32c>
 80859f6:	bf00      	nop
 80859f8:	20000a7c 	.word	0x20000a7c

080859fc <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 80859fc:	6803      	ldr	r3, [r0, #0]
 80859fe:	695b      	ldr	r3, [r3, #20]
 8085a00:	4718      	bx	r3

08085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spi->receive();
 8085a02:	6803      	ldr	r3, [r0, #0]
 8085a04:	68db      	ldr	r3, [r3, #12]
 8085a06:	4718      	bx	r3

08085a08 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085a08:	b510      	push	{r4, lr}
  if (!m_selected) {
 8085a0a:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8085a0c:	4604      	mov	r4, r0
  if (!m_selected) {
 8085a0e:	b16b      	cbz	r3, 8085a2c <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8085a10:	2101      	movs	r1, #1
 8085a12:	7940      	ldrb	r0, [r0, #5]
 8085a14:	f004 f901 	bl	8089c1a <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8085a18:	21ff      	movs	r1, #255	; 0xff
 8085a1a:	6820      	ldr	r0, [r4, #0]
 8085a1c:	f7ff ffee 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8085a20:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8085a22:	6803      	ldr	r3, [r0, #0]
 8085a24:	689b      	ldr	r3, [r3, #8]
 8085a26:	4798      	blx	r3
  m_selected = false;
 8085a28:	2300      	movs	r3, #0
 8085a2a:	7123      	strb	r3, [r4, #4]
}
 8085a2c:	bd10      	pop	{r4, pc}

08085a2e <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8085a2e:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8085a30:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8085a32:	4604      	mov	r4, r0
  if (m_selected) {
 8085a34:	b955      	cbnz	r5, 8085a4c <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8085a36:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8085a38:	79e1      	ldrb	r1, [r4, #7]
 8085a3a:	6803      	ldr	r3, [r0, #0]
 8085a3c:	685b      	ldr	r3, [r3, #4]
 8085a3e:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8085a40:	4629      	mov	r1, r5
 8085a42:	7960      	ldrb	r0, [r4, #5]
 8085a44:	f004 f8e9 	bl	8089c1a <digitalWrite>
  m_selected = true;
 8085a48:	2301      	movs	r3, #1
 8085a4a:	7123      	strb	r3, [r4, #4]
}
 8085a4c:	bd38      	pop	{r3, r4, r5, pc}

08085a4e <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8085a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085a50:	4604      	mov	r4, r0
 8085a52:	460d      	mov	r5, r1
 8085a54:	4616      	mov	r6, r2
 8085a56:	f001 fe11 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
 8085a5a:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8085a5c:	6820      	ldr	r0, [r4, #0]
 8085a5e:	f7ff ffd0 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085a62:	28ff      	cmp	r0, #255	; 0xff
 8085a64:	7220      	strb	r0, [r4, #8]
 8085a66:	d10c      	bne.n	8085a82 <_ZN9SdSpiCard8readDataEPhj+0x34>
 8085a68:	f001 fe08 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8085a6c:	1bc3      	subs	r3, r0, r7
 8085a6e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8085a72:	d9f3      	bls.n	8085a5c <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8085a74:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8085a76:	4620      	mov	r0, r4
 8085a78:	71a3      	strb	r3, [r4, #6]
 8085a7a:	f7ff ffc5 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085a7e:	2000      	movs	r0, #0
}
 8085a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8085a82:	28fe      	cmp	r0, #254	; 0xfe
 8085a84:	d001      	beq.n	8085a8a <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8085a86:	230f      	movs	r3, #15
 8085a88:	e7f5      	b.n	8085a76 <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8085a8a:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8085a8c:	4632      	mov	r2, r6
 8085a8e:	6803      	ldr	r3, [r0, #0]
 8085a90:	4629      	mov	r1, r5
 8085a92:	691b      	ldr	r3, [r3, #16]
 8085a94:	4798      	blx	r3
 8085a96:	7220      	strb	r0, [r4, #8]
 8085a98:	b108      	cbz	r0, 8085a9e <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8085a9a:	231c      	movs	r3, #28
 8085a9c:	e7eb      	b.n	8085a76 <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8085a9e:	6820      	ldr	r0, [r4, #0]
 8085aa0:	f7ff ffaf 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8085aa4:	6820      	ldr	r0, [r4, #0]
 8085aa6:	f7ff ffac 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
 8085aaa:	2001      	movs	r0, #1
 8085aac:	e7e8      	b.n	8085a80 <_ZN9SdSpiCard8readDataEPhj+0x32>

08085aae <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8085aae:	b570      	push	{r4, r5, r6, lr}
 8085ab0:	4606      	mov	r6, r0
 8085ab2:	460c      	mov	r4, r1
 8085ab4:	f001 fde2 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
 8085ab8:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8085aba:	6830      	ldr	r0, [r6, #0]
 8085abc:	f7ff ffa1 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085ac0:	28ff      	cmp	r0, #255	; 0xff
 8085ac2:	d006      	beq.n	8085ad2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8085ac4:	f001 fdda 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8085ac8:	1b43      	subs	r3, r0, r5
 8085aca:	42a3      	cmp	r3, r4
 8085acc:	d3f5      	bcc.n	8085aba <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8085ace:	2000      	movs	r0, #0
}
 8085ad0:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8085ad2:	2001      	movs	r0, #1
 8085ad4:	e7fc      	b.n	8085ad0 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08085ad6 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8085ad8:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085ada:	4604      	mov	r4, r0
 8085adc:	460d      	mov	r5, r1
 8085ade:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8085ae0:	b90b      	cbnz	r3, 8085ae6 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8085ae2:	f7ff ffa4 	bl	8085a2e <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8085ae6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085aea:	4620      	mov	r0, r4
 8085aec:	f7ff ffdf 	bl	8085aae <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8085af0:	6820      	ldr	r0, [r4, #0]
 8085af2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8085af6:	f7ff ff81 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
 8085afa:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8085afc:	af01      	add	r7, sp, #4
 8085afe:	5db9      	ldrb	r1, [r7, r6]
 8085b00:	6820      	ldr	r0, [r4, #0]
 8085b02:	f7ff ff7b 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8085b06:	3e01      	subs	r6, #1
 8085b08:	d2f9      	bcs.n	8085afe <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085b0a:	2d00      	cmp	r5, #0
 8085b0c:	bf0c      	ite	eq
 8085b0e:	2195      	moveq	r1, #149	; 0x95
 8085b10:	2187      	movne	r1, #135	; 0x87
 8085b12:	6820      	ldr	r0, [r4, #0]
 8085b14:	f7ff ff72 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8085b18:	2d0c      	cmp	r5, #12
 8085b1a:	d102      	bne.n	8085b22 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8085b1c:	6820      	ldr	r0, [r4, #0]
 8085b1e:	f7ff ff70 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085b22:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8085b24:	6820      	ldr	r0, [r4, #0]
 8085b26:	f7ff ff6c 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085b2a:	0603      	lsls	r3, r0, #24
 8085b2c:	7220      	strb	r0, [r4, #8]
 8085b2e:	d503      	bpl.n	8085b38 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8085b30:	3501      	adds	r5, #1
 8085b32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8085b36:	d1f5      	bne.n	8085b24 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8085b38:	b003      	add	sp, #12
 8085b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085b3c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8085b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085b3e:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8085b40:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8085b42:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8085b44:	7243      	strb	r3, [r0, #9]
 8085b46:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8085b48:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8085b4a:	4604      	mov	r4, r0
 8085b4c:	f001 fd96 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
 8085b50:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8085b52:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8085b54:	7961      	ldrb	r1, [r4, #5]
 8085b56:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8085b58:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8085b5a:	681b      	ldr	r3, [r3, #0]
 8085b5c:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8085b5e:	2180      	movs	r1, #128	; 0x80
 8085b60:	6820      	ldr	r0, [r4, #0]
 8085b62:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8085b64:	6803      	ldr	r3, [r0, #0]
 8085b66:	685b      	ldr	r3, [r3, #4]
 8085b68:	4798      	blx	r3
    spiSend(0XFF);
 8085b6a:	21ff      	movs	r1, #255	; 0xff
 8085b6c:	6820      	ldr	r0, [r4, #0]
  for (uint8_t i = 0; i < 10; i++) {
 8085b6e:	3e01      	subs	r6, #1
    spiSend(0XFF);
 8085b70:	f7ff ff44 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8085b74:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8085b78:	d1f7      	bne.n	8085b6a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8085b7a:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8085b7c:	6803      	ldr	r3, [r0, #0]
 8085b7e:	689b      	ldr	r3, [r3, #8]
 8085b80:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8085b82:	2200      	movs	r2, #0
 8085b84:	4620      	mov	r0, r4
 8085b86:	4611      	mov	r1, r2
 8085b88:	f7ff ffa5 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085b8c:	2801      	cmp	r0, #1
 8085b8e:	d00c      	beq.n	8085baa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8085b90:	f001 fd74 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085b94:	1b40      	subs	r0, r0, r5
 8085b96:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085b9a:	d9f2      	bls.n	8085b82 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8085b9c:	2301      	movs	r3, #1
  chipSelectHigh();
 8085b9e:	4620      	mov	r0, r4
 8085ba0:	71a3      	strb	r3, [r4, #6]
 8085ba2:	f7ff ff31 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085ba6:	2000      	movs	r0, #0
}
 8085ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8085baa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8085bae:	2108      	movs	r1, #8
 8085bb0:	4620      	mov	r0, r4
 8085bb2:	f7ff ff90 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085bb6:	2805      	cmp	r0, #5
 8085bb8:	d116      	bne.n	8085be8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8085bba:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085bbc:	2600      	movs	r6, #0
 8085bbe:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8085bc0:	2200      	movs	r2, #0
 8085bc2:	2137      	movs	r1, #55	; 0x37
 8085bc4:	4620      	mov	r0, r4
 8085bc6:	f7ff ff86 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085bca:	4632      	mov	r2, r6
 8085bcc:	2129      	movs	r1, #41	; 0x29
 8085bce:	4620      	mov	r0, r4
 8085bd0:	f7ff ff81 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8085bd4:	4602      	mov	r2, r0
 8085bd6:	b1f8      	cbz	r0, 8085c18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8085bd8:	f001 fd50 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085bdc:	1b40      	subs	r0, r0, r5
 8085bde:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085be2:	d9ed      	bls.n	8085bc0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8085be4:	230a      	movs	r3, #10
 8085be6:	e7da      	b.n	8085b9e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8085be8:	2604      	movs	r6, #4
      m_status = spiReceive();
 8085bea:	6820      	ldr	r0, [r4, #0]
 8085bec:	f7ff ff09 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
 8085bf0:	3e01      	subs	r6, #1
 8085bf2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 8085bf6:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8085bf8:	d1f7      	bne.n	8085bea <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 8085bfa:	28aa      	cmp	r0, #170	; 0xaa
 8085bfc:	d104      	bne.n	8085c08 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8085bfe:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085c00:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8085c04:	7263      	strb	r3, [r4, #9]
    return m_type;
 8085c06:	e7db      	b.n	8085bc0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 8085c08:	f001 fd38 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085c0c:	1b40      	subs	r0, r0, r5
 8085c0e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085c12:	d9ca      	bls.n	8085baa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8085c14:	2302      	movs	r3, #2
 8085c16:	e7c2      	b.n	8085b9e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8085c18:	7a63      	ldrb	r3, [r4, #9]
 8085c1a:	2b02      	cmp	r3, #2
 8085c1c:	d119      	bne.n	8085c52 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8085c1e:	213a      	movs	r1, #58	; 0x3a
 8085c20:	4620      	mov	r0, r4
 8085c22:	f7ff ff58 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085c26:	b108      	cbz	r0, 8085c2c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8085c28:	2308      	movs	r3, #8
 8085c2a:	e7b8      	b.n	8085b9e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8085c2c:	6820      	ldr	r0, [r4, #0]
 8085c2e:	f7ff fee8 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085c32:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8085c36:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8085c38:	bf08      	it	eq
 8085c3a:	2303      	moveq	r3, #3
      spiReceive();
 8085c3c:	6820      	ldr	r0, [r4, #0]
 8085c3e:	bf08      	it	eq
 8085c40:	7263      	strbeq	r3, [r4, #9]
 8085c42:	f7ff fede 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085c46:	6820      	ldr	r0, [r4, #0]
 8085c48:	f7ff fedb 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085c4c:	6820      	ldr	r0, [r4, #0]
 8085c4e:	f7ff fed8 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 8085c52:	4620      	mov	r0, r4
 8085c54:	f7ff fed8 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085c58:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8085c5a:	71e7      	strb	r7, [r4, #7]
  return true;
 8085c5c:	e7a4      	b.n	8085ba8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08085c5e <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085c5e:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c60:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085c62:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c64:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085c66:	bf18      	it	ne
 8085c68:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8085c6a:	460a      	mov	r2, r1
 8085c6c:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085c6e:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8085c70:	f7ff ff31 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085c74:	b130      	cbz	r0, 8085c84 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8085c76:	2304      	movs	r3, #4
 8085c78:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085c7a:	4620      	mov	r0, r4
 8085c7c:	f7ff fec4 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085c80:	2500      	movs	r5, #0
 8085c82:	e00b      	b.n	8085c9c <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8085c84:	4629      	mov	r1, r5
 8085c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085c8a:	4620      	mov	r0, r4
 8085c8c:	f7ff fedf 	bl	8085a4e <_ZN9SdSpiCard8readDataEPhj>
 8085c90:	4605      	mov	r5, r0
 8085c92:	2800      	cmp	r0, #0
 8085c94:	d0f1      	beq.n	8085c7a <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8085c96:	4620      	mov	r0, r4
 8085c98:	f7ff feb6 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085c9c:	4628      	mov	r0, r5
 8085c9e:	bd38      	pop	{r3, r4, r5, pc}

08085ca0 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085ca0:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ca2:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085ca4:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ca6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085ca8:	bf18      	it	ne
 8085caa:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8085cac:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085cae:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8085cb0:	f7ff ff11 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085cb4:	b130      	cbz	r0, 8085cc4 <_ZN9SdSpiCard9readStartEm+0x24>
 8085cb6:	2305      	movs	r3, #5
  chipSelectHigh();
 8085cb8:	4620      	mov	r0, r4
 8085cba:	71a3      	strb	r3, [r4, #6]
 8085cbc:	f7ff fea4 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085cc0:	2000      	movs	r0, #0
}
 8085cc2:	bd10      	pop	{r4, pc}
  return true;
 8085cc4:	2001      	movs	r0, #1
 8085cc6:	e7fc      	b.n	8085cc2 <_ZN9SdSpiCard9readStartEm+0x22>

08085cc8 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8085cc8:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8085cca:	2200      	movs	r2, #0
 8085ccc:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8085cce:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8085cd0:	f7ff ff01 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085cd4:	b130      	cbz	r0, 8085ce4 <_ZN9SdSpiCard8readStopEv+0x1c>
 8085cd6:	2303      	movs	r3, #3
  chipSelectHigh();
 8085cd8:	4620      	mov	r0, r4
 8085cda:	71a3      	strb	r3, [r4, #6]
 8085cdc:	f7ff fe94 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085ce0:	2000      	movs	r0, #0
}
 8085ce2:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8085ce4:	4620      	mov	r0, r4
 8085ce6:	f7ff fe8f 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085cea:	2001      	movs	r0, #1
 8085cec:	e7f9      	b.n	8085ce2 <_ZN9SdSpiCard8readStopEv+0x1a>

08085cee <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8085cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085cf0:	4604      	mov	r4, r0
 8085cf2:	4616      	mov	r6, r2
 8085cf4:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8085cf6:	f7ff ffd3 	bl	8085ca0 <_ZN9SdSpiCard9readStartEm>
 8085cfa:	b168      	cbz	r0, 8085d18 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 8085cfc:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8085cfe:	b2ab      	uxth	r3, r5
 8085d00:	429f      	cmp	r7, r3
 8085d02:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 8085d06:	d909      	bls.n	8085d1c <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 8085d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085d0c:	4620      	mov	r0, r4
 8085d0e:	f7ff fe9e 	bl	8085a4e <_ZN9SdSpiCard8readDataEPhj>
 8085d12:	3501      	adds	r5, #1
 8085d14:	2800      	cmp	r0, #0
 8085d16:	d1f2      	bne.n	8085cfe <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8085d18:	2000      	movs	r0, #0
 8085d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8085d1c:	4620      	mov	r0, r4
}
 8085d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8085d22:	f7ff bfd1 	b.w	8085cc8 <_ZN9SdSpiCard8readStopEv>

08085d26 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8085d26:	b538      	push	{r3, r4, r5, lr}
 8085d28:	4604      	mov	r4, r0
 8085d2a:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8085d2c:	6800      	ldr	r0, [r0, #0]
 8085d2e:	f7ff fe65 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 8085d32:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8085d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085d38:	6803      	ldr	r3, [r0, #0]
 8085d3a:	4629      	mov	r1, r5
 8085d3c:	699b      	ldr	r3, [r3, #24]
 8085d3e:	4798      	blx	r3
  spiSend(crc >> 8);
 8085d40:	21ff      	movs	r1, #255	; 0xff
 8085d42:	6820      	ldr	r0, [r4, #0]
 8085d44:	f7ff fe5a 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8085d48:	21ff      	movs	r1, #255	; 0xff
 8085d4a:	6820      	ldr	r0, [r4, #0]
 8085d4c:	f7ff fe56 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 8085d50:	6820      	ldr	r0, [r4, #0]
 8085d52:	f7ff fe56 	bl	8085a02 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085d56:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8085d58:	f000 001f 	and.w	r0, r0, #31
 8085d5c:	2805      	cmp	r0, #5
 8085d5e:	d006      	beq.n	8085d6e <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8085d60:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085d62:	4620      	mov	r0, r4
 8085d64:	71a3      	strb	r3, [r4, #6]
 8085d66:	f7ff fe4f 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085d6a:	2000      	movs	r0, #0
}
 8085d6c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8085d6e:	2001      	movs	r0, #1
 8085d70:	e7fc      	b.n	8085d6c <_ZN9SdSpiCard9writeDataEhPKh+0x46>

08085d72 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085d72:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085d74:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085d76:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8085d78:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085d7a:	bf18      	it	ne
 8085d7c:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8085d7e:	460a      	mov	r2, r1
 8085d80:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085d82:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 8085d84:	f7ff fea7 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085d88:	b130      	cbz	r0, 8085d98 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8085d8a:	2306      	movs	r3, #6
 8085d8c:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085d8e:	4620      	mov	r0, r4
 8085d90:	f7ff fe3a 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085d94:	2500      	movs	r5, #0
 8085d96:	e00a      	b.n	8085dae <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8085d98:	462a      	mov	r2, r5
 8085d9a:	21fe      	movs	r1, #254	; 0xfe
 8085d9c:	4620      	mov	r0, r4
 8085d9e:	f7ff ffc2 	bl	8085d26 <_ZN9SdSpiCard9writeDataEhPKh>
 8085da2:	4605      	mov	r5, r0
 8085da4:	2800      	cmp	r0, #0
 8085da6:	d0f2      	beq.n	8085d8e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8085da8:	4620      	mov	r0, r4
 8085daa:	f7ff fe2d 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085dae:	4628      	mov	r0, r5
 8085db0:	bd38      	pop	{r3, r4, r5, pc}

08085db2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 8085db2:	b570      	push	{r4, r5, r6, lr}
 8085db4:	4604      	mov	r4, r0
 8085db6:	460e      	mov	r6, r1
  bool selected = m_selected;
 8085db8:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 8085dba:	f7ff fe38 	bl	8085a2e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085dbe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085dc2:	4620      	mov	r0, r4
 8085dc4:	f7ff fe73 	bl	8085aae <_ZN9SdSpiCard11waitNotBusyEt>
 8085dc8:	b930      	cbnz	r0, 8085dd8 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 8085dca:	2317      	movs	r3, #23
 8085dcc:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085dce:	4620      	mov	r0, r4
 8085dd0:	f7ff fe1a 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085dd4:	2500      	movs	r5, #0
 8085dd6:	e00c      	b.n	8085df2 <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8085dd8:	4632      	mov	r2, r6
 8085dda:	21fc      	movs	r1, #252	; 0xfc
 8085ddc:	4620      	mov	r0, r4
 8085dde:	f7ff ffa2 	bl	8085d26 <_ZN9SdSpiCard9writeDataEhPKh>
 8085de2:	4606      	mov	r6, r0
 8085de4:	2800      	cmp	r0, #0
 8085de6:	d0f2      	beq.n	8085dce <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8085de8:	b91d      	cbnz	r5, 8085df2 <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 8085dea:	4620      	mov	r0, r4
 8085dec:	f7ff fe0c 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085df0:	4635      	mov	r5, r6
}
 8085df2:	4628      	mov	r0, r5
 8085df4:	bd70      	pop	{r4, r5, r6, pc}

08085df6 <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8085df6:	b570      	push	{r4, r5, r6, lr}
 8085df8:	4604      	mov	r4, r0
 8085dfa:	4616      	mov	r6, r2
 8085dfc:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 8085dfe:	2200      	movs	r2, #0
 8085e00:	2137      	movs	r1, #55	; 0x37
 8085e02:	f7ff fe68 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085e06:	4632      	mov	r2, r6
 8085e08:	2117      	movs	r1, #23
 8085e0a:	4620      	mov	r0, r4
 8085e0c:	f7ff fe63 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8085e10:	b130      	cbz	r0, 8085e20 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8085e12:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085e14:	4620      	mov	r0, r4
 8085e16:	71a3      	strb	r3, [r4, #6]
 8085e18:	f7ff fdf6 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085e1c:	2000      	movs	r0, #0
}
 8085e1e:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085e20:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 8085e22:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8085e24:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085e26:	bf18      	it	ne
 8085e28:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 8085e2a:	462a      	mov	r2, r5
 8085e2c:	4620      	mov	r0, r4
 8085e2e:	f7ff fe52 	bl	8085ad6 <_ZN9SdSpiCard11cardCommandEhm>
 8085e32:	b108      	cbz	r0, 8085e38 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8085e34:	2307      	movs	r3, #7
 8085e36:	e7ed      	b.n	8085e14 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8085e38:	2001      	movs	r0, #1
 8085e3a:	e7f0      	b.n	8085e1e <_ZN9SdSpiCard10writeStartEmm+0x28>

08085e3c <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8085e3c:	b538      	push	{r3, r4, r5, lr}
 8085e3e:	4604      	mov	r4, r0
  chipSelectLow();
 8085e40:	f7ff fdf5 	bl	8085a2e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085e44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085e48:	4620      	mov	r0, r4
 8085e4a:	f7ff fe30 	bl	8085aae <_ZN9SdSpiCard11waitNotBusyEt>
 8085e4e:	b178      	cbz	r0, 8085e70 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8085e50:	21fd      	movs	r1, #253	; 0xfd
 8085e52:	6820      	ldr	r0, [r4, #0]
 8085e54:	f7ff fdd2 	bl	80859fc <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085e58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085e5c:	4620      	mov	r0, r4
 8085e5e:	f7ff fe26 	bl	8085aae <_ZN9SdSpiCard11waitNotBusyEt>
 8085e62:	4605      	mov	r5, r0
 8085e64:	b120      	cbz	r0, 8085e70 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 8085e66:	4620      	mov	r0, r4
 8085e68:	f7ff fdce 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8085e6c:	4628      	mov	r0, r5
 8085e6e:	bd38      	pop	{r3, r4, r5, pc}
 8085e70:	2312      	movs	r3, #18
  chipSelectHigh();
 8085e72:	4620      	mov	r0, r4
 8085e74:	71a3      	strb	r3, [r4, #6]
 8085e76:	f7ff fdc7 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085e7a:	2500      	movs	r5, #0
 8085e7c:	e7f6      	b.n	8085e6c <_ZN9SdSpiCard9writeStopEv+0x30>

08085e7e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085e80:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8085e82:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085e84:	4604      	mov	r4, r0
 8085e86:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8085e88:	f7ff ffb5 	bl	8085df6 <_ZN9SdSpiCard10writeStartEmm>
 8085e8c:	b170      	cbz	r0, 8085eac <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8085e8e:	2500      	movs	r5, #0
 8085e90:	42b5      	cmp	r5, r6
  return writeStop();
 8085e92:	4620      	mov	r0, r4
 8085e94:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8085e98:	d004      	beq.n	8085ea4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8085e9a:	f7ff ff8a 	bl	8085db2 <_ZN9SdSpiCard9writeDataEPKh>
 8085e9e:	b128      	cbz	r0, 8085eac <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8085ea0:	3501      	adds	r5, #1
 8085ea2:	e7f5      	b.n	8085e90 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 8085ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8085ea8:	f7ff bfc8 	b.w	8085e3c <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8085eac:	4620      	mov	r0, r4
 8085eae:	f7ff fdab 	bl	8085a08 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085eb2:	2000      	movs	r0, #0
 8085eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08085eb8 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8085eb8:	2201      	movs	r2, #1
 8085eba:	4b01      	ldr	r3, [pc, #4]	; (8085ec0 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8085ebc:	701a      	strb	r2, [r3, #0]
}
 8085ebe:	4770      	bx	lr
 8085ec0:	20000a68 	.word	0x20000a68

08085ec4 <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 8085ec4:	4770      	bx	lr
	...

08085ec8 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8085ec8:	7902      	ldrb	r2, [r0, #4]
 8085eca:	4b02      	ldr	r3, [pc, #8]	; (8085ed4 <_ZN5SdSpi5beginEh+0xc>)
 8085ecc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085ed0:	f002 b870 	b.w	8087fb4 <_ZN8SPIClass5beginEt>
 8085ed4:	20000a6c 	.word	0x20000a6c

08085ed8 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8085ed8:	b570      	push	{r4, r5, r6, lr}
 8085eda:	4605      	mov	r5, r0
 8085edc:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8085ede:	7903      	ldrb	r3, [r0, #4]
 8085ee0:	4e19      	ldr	r6, [pc, #100]	; (8085f48 <_ZN5SdSpi16beginTransactionEh+0x70>)
 8085ee2:	2101      	movs	r1, #1
 8085ee4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085ee8:	f002 f873 	bl	8087fd2 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8085eec:	792b      	ldrb	r3, [r5, #4]
 8085eee:	2100      	movs	r1, #0
 8085ef0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085ef4:	f002 f87c 	bl	8087ff0 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 8085ef8:	2c02      	cmp	r4, #2
 8085efa:	d91b      	bls.n	8085f34 <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 8085efc:	2c04      	cmp	r4, #4
 8085efe:	d91b      	bls.n	8085f38 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 8085f00:	2c08      	cmp	r4, #8
 8085f02:	d91b      	bls.n	8085f3c <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 8085f04:	2c10      	cmp	r4, #16
 8085f06:	d91b      	bls.n	8085f40 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 8085f08:	2c20      	cmp	r4, #32
 8085f0a:	d91b      	bls.n	8085f44 <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 8085f0c:	2c41      	cmp	r4, #65	; 0x41
 8085f0e:	bf34      	ite	cc
 8085f10:	2128      	movcc	r1, #40	; 0x28
 8085f12:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 8085f14:	792b      	ldrb	r3, [r5, #4]
 8085f16:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085f1a:	f002 f8bb 	bl	8088094 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8085f1e:	7929      	ldrb	r1, [r5, #4]
 8085f20:	233c      	movs	r3, #60	; 0x3c
 8085f22:	fb01 4404 	mla	r4, r1, r4, r4
 8085f26:	2118      	movs	r1, #24
 8085f28:	434c      	muls	r4, r1
 8085f2a:	fbb4 f4f3 	udiv	r4, r4, r3
 8085f2e:	4b07      	ldr	r3, [pc, #28]	; (8085f4c <_ZN5SdSpi16beginTransactionEh+0x74>)
 8085f30:	601c      	str	r4, [r3, #0]
}
 8085f32:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 8085f34:	2100      	movs	r1, #0
 8085f36:	e7ed      	b.n	8085f14 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 8085f38:	2108      	movs	r1, #8
 8085f3a:	e7eb      	b.n	8085f14 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 8085f3c:	2110      	movs	r1, #16
 8085f3e:	e7e9      	b.n	8085f14 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 8085f40:	2118      	movs	r1, #24
 8085f42:	e7e7      	b.n	8085f14 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 8085f44:	2120      	movs	r1, #32
 8085f46:	e7e5      	b.n	8085f14 <_ZN5SdSpi16beginTransactionEh+0x3c>
 8085f48:	20000a6c 	.word	0x20000a6c
 8085f4c:	20000a78 	.word	0x20000a78

08085f50 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8085f50:	7902      	ldrb	r2, [r0, #4]
 8085f52:	4b03      	ldr	r3, [pc, #12]	; (8085f60 <_ZN5SdSpi7receiveEv+0x10>)
 8085f54:	21ff      	movs	r1, #255	; 0xff
 8085f56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085f5a:	f002 b8bf 	b.w	80880dc <_ZN8SPIClass8transferEh>
 8085f5e:	bf00      	nop
 8085f60:	20000a6c 	.word	0x20000a6c

08085f64 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8085f64:	7902      	ldrb	r2, [r0, #4]
 8085f66:	4b02      	ldr	r3, [pc, #8]	; (8085f70 <_ZN5SdSpi4sendEh+0xc>)
 8085f68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085f6c:	f002 b8b6 	b.w	80880dc <_ZN8SPIClass8transferEh>
 8085f70:	20000a6c 	.word	0x20000a6c

08085f74 <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8085f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085f76:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8085f78:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8085f7a:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085f7c:	4a0a      	ldr	r2, [pc, #40]	; (8085fa8 <_ZN5SdSpi7receiveEPhj+0x34>)
 8085f7e:	7905      	ldrb	r5, [r0, #4]
 8085f80:	480a      	ldr	r0, [pc, #40]	; (8085fac <_ZN5SdSpi7receiveEPhj+0x38>)
 8085f82:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 8085f84:	4c0a      	ldr	r4, [pc, #40]	; (8085fb0 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085f86:	4632      	mov	r2, r6
 8085f88:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8085f8c:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085f8e:	f002 f8ab 	bl	80880e8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8085f92:	7823      	ldrb	r3, [r4, #0]
 8085f94:	2b00      	cmp	r3, #0
 8085f96:	d0fc      	beq.n	8085f92 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8085f98:	4b06      	ldr	r3, [pc, #24]	; (8085fb4 <_ZN5SdSpi7receiveEPhj+0x40>)
 8085f9a:	6818      	ldr	r0, [r3, #0]
 8085f9c:	b108      	cbz	r0, 8085fa2 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8085f9e:	f001 fb65 	bl	808766c <HAL_Delay_Microseconds>
}
 8085fa2:	2000      	movs	r0, #0
 8085fa4:	b002      	add	sp, #8
 8085fa6:	bd70      	pop	{r4, r5, r6, pc}
 8085fa8:	08085eb9 	.word	0x08085eb9
 8085fac:	20000a6c 	.word	0x20000a6c
 8085fb0:	20000a68 	.word	0x20000a68
 8085fb4:	20000a78 	.word	0x20000a78

08085fb8 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8085fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085fba:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 8085fbc:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085fbe:	7905      	ldrb	r5, [r0, #4]
 8085fc0:	480a      	ldr	r0, [pc, #40]	; (8085fec <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 8085fc2:	4c0b      	ldr	r4, [pc, #44]	; (8085ff0 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085fc4:	9000      	str	r0, [sp, #0]
 8085fc6:	480b      	ldr	r0, [pc, #44]	; (8085ff4 <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 8085fc8:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085fca:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8085fce:	f002 f88b 	bl	80880e8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 8085fd2:	7823      	ldrb	r3, [r4, #0]
 8085fd4:	2b00      	cmp	r3, #0
 8085fd6:	d0fc      	beq.n	8085fd2 <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8085fd8:	4b07      	ldr	r3, [pc, #28]	; (8085ff8 <_ZN5SdSpi4sendEPKhj+0x40>)
 8085fda:	6818      	ldr	r0, [r3, #0]
 8085fdc:	b120      	cbz	r0, 8085fe8 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 8085fde:	b003      	add	sp, #12
 8085fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8085fe4:	f001 bb42 	b.w	808766c <HAL_Delay_Microseconds>
 8085fe8:	b003      	add	sp, #12
 8085fea:	bd30      	pop	{r4, r5, pc}
 8085fec:	08085eb9 	.word	0x08085eb9
 8085ff0:	20000a68 	.word	0x20000a68
 8085ff4:	20000a6c 	.word	0x20000a6c
 8085ff8:	20000a78 	.word	0x20000a78

08085ffc <_ZN14RecursiveMutex7disposeEv>:

    ~RecursiveMutex() {
        dispose();
    }

    void dispose()
 8085ffc:	b510      	push	{r4, lr}
 8085ffe:	4604      	mov	r4, r0
    {
        if (handle_) {
 8086000:	6800      	ldr	r0, [r0, #0]
 8086002:	b118      	cbz	r0, 808600c <_ZN14RecursiveMutex7disposeEv+0x10>
            os_mutex_recursive_destroy(handle_);
 8086004:	f001 fb7a 	bl	80876fc <os_mutex_recursive_destroy>
            handle_ = nullptr;
 8086008:	2300      	movs	r3, #0
 808600a:	6023      	str	r3, [r4, #0]
        }
    }
 808600c:	bd10      	pop	{r4, pc}
	...

08086010 <__tcf_0>:

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8086010:	b508      	push	{r3, lr}
        dispose();
 8086012:	4802      	ldr	r0, [pc, #8]	; (808601c <__tcf_0+0xc>)
 8086014:	f7ff fff2 	bl	8085ffc <_ZN14RecursiveMutex7disposeEv>
 8086018:	bd08      	pop	{r3, pc}
 808601a:	bf00      	nop
 808601c:	20000a64 	.word	0x20000a64

08086020 <__tcf_1>:
 8086020:	b508      	push	{r3, lr}
 8086022:	4802      	ldr	r0, [pc, #8]	; (808602c <__tcf_1+0xc>)
 8086024:	f7ff ffea 	bl	8085ffc <_ZN14RecursiveMutex7disposeEv>
 8086028:	bd08      	pop	{r3, pc}
 808602a:	bf00      	nop
 808602c:	20000a54 	.word	0x20000a54

08086030 <__tcf_2>:
 8086030:	b508      	push	{r3, lr}
 8086032:	4802      	ldr	r0, [pc, #8]	; (808603c <__tcf_2+0xc>)
 8086034:	f7ff ffe2 	bl	8085ffc <_ZN14RecursiveMutex7disposeEv>
 8086038:	bd08      	pop	{r3, pc}
 808603a:	bf00      	nop
 808603c:	20000a44 	.word	0x20000a44

08086040 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8086040:	b538      	push	{r3, r4, r5, lr}
 8086042:	4d22      	ldr	r5, [pc, #136]	; (80860cc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8c>)
 8086044:	7829      	ldrb	r1, [r5, #0]
 8086046:	f3bf 8f5b 	dmb	ish
 808604a:	f011 0401 	ands.w	r4, r1, #1
 808604e:	d10d      	bne.n	808606c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x2c>
 8086050:	4628      	mov	r0, r5
 8086052:	f7fa f838 	bl	80800c6 <__cxa_guard_acquire>
 8086056:	b148      	cbz	r0, 808606c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x2c>
 8086058:	4621      	mov	r1, r4
 808605a:	481d      	ldr	r0, [pc, #116]	; (80860d0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x90>)
 808605c:	f001 ff8c 	bl	8087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8086060:	4628      	mov	r0, r5
 8086062:	f7fa f835 	bl	80800d0 <__cxa_guard_release>
 8086066:	481b      	ldr	r0, [pc, #108]	; (80860d4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x94>)
 8086068:	f005 f954 	bl	808b314 <atexit>
};
 808606c:	4b18      	ldr	r3, [pc, #96]	; (80860d0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x90>)
 808606e:	4c1a      	ldr	r4, [pc, #104]	; (80860d8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 8086070:	4d1a      	ldr	r5, [pc, #104]	; (80860dc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8086072:	6023      	str	r3, [r4, #0]
 8086074:	782b      	ldrb	r3, [r5, #0]
 8086076:	f3bf 8f5b 	dmb	ish
 808607a:	07da      	lsls	r2, r3, #31
 808607c:	d40d      	bmi.n	808609a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x5a>
 808607e:	4628      	mov	r0, r5
 8086080:	f7fa f821 	bl	80800c6 <__cxa_guard_acquire>
 8086084:	b148      	cbz	r0, 808609a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x5a>
 8086086:	2101      	movs	r1, #1
 8086088:	4815      	ldr	r0, [pc, #84]	; (80860e0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808608a:	f001 ff75 	bl	8087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808608e:	4628      	mov	r0, r5
 8086090:	f7fa f81e 	bl	80800d0 <__cxa_guard_release>
 8086094:	4813      	ldr	r0, [pc, #76]	; (80860e4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8086096:	f005 f93d 	bl	808b314 <atexit>
 808609a:	4b11      	ldr	r3, [pc, #68]	; (80860e0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808609c:	4d12      	ldr	r5, [pc, #72]	; (80860e8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 808609e:	6063      	str	r3, [r4, #4]
 80860a0:	782b      	ldrb	r3, [r5, #0]
 80860a2:	f3bf 8f5b 	dmb	ish
 80860a6:	07db      	lsls	r3, r3, #31
 80860a8:	d40d      	bmi.n	80860c6 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x86>
 80860aa:	4628      	mov	r0, r5
 80860ac:	f7fa f80b 	bl	80800c6 <__cxa_guard_acquire>
 80860b0:	b148      	cbz	r0, 80860c6 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x86>
 80860b2:	2102      	movs	r1, #2
 80860b4:	480d      	ldr	r0, [pc, #52]	; (80860ec <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80860b6:	f001 ff5f 	bl	8087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80860ba:	4628      	mov	r0, r5
 80860bc:	f7fa f808 	bl	80800d0 <__cxa_guard_release>
 80860c0:	480b      	ldr	r0, [pc, #44]	; (80860f0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 80860c2:	f005 f927 	bl	808b314 <atexit>
 80860c6:	4b09      	ldr	r3, [pc, #36]	; (80860ec <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80860c8:	60a3      	str	r3, [r4, #8]
}
 80860ca:	bd38      	pop	{r3, r4, r5, pc}
 80860cc:	20000a58 	.word	0x20000a58
 80860d0:	20000a5c 	.word	0x20000a5c
 80860d4:	08086011 	.word	0x08086011
 80860d8:	20000a6c 	.word	0x20000a6c
 80860dc:	20000a48 	.word	0x20000a48
 80860e0:	20000a4c 	.word	0x20000a4c
 80860e4:	08086021 	.word	0x08086021
 80860e8:	20000a38 	.word	0x20000a38
 80860ec:	20000a3c 	.word	0x20000a3c
 80860f0:	08086031 	.word	0x08086031

080860f4 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80860f4:	b538      	push	{r3, r4, r5, lr}
 80860f6:	460d      	mov	r5, r1
 80860f8:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80860fa:	2224      	movs	r2, #36	; 0x24
 80860fc:	2100      	movs	r1, #0
 80860fe:	f005 f934 	bl	808b36a <memset>

  m_vol = vol;
 8086102:	60a5      	str	r5, [r4, #8]
    return m_fatType;
 8086104:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 8086106:	2b10      	cmp	r3, #16
 8086108:	d003      	beq.n	8086112 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 808610a:	2b20      	cmp	r3, #32
 808610c:	d006      	beq.n	808611c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 808610e:	2000      	movs	r0, #0
  m_flags = O_READ;
  return true;

fail:
  return false;
}
 8086110:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
 8086112:	2320      	movs	r3, #32
  m_flags = O_READ;
 8086114:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
 8086116:	7023      	strb	r3, [r4, #0]
  m_flags = O_READ;
 8086118:	70a0      	strb	r0, [r4, #2]
  return true;
 808611a:	e7f9      	b.n	8086110 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
 808611c:	2340      	movs	r3, #64	; 0x40
 808611e:	e7f9      	b.n	8086114 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

08086120 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
 8086120:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8086122:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8086124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086128:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808612a:	f100 0210 	add.w	r2, r0, #16
 808612e:	6880      	ldr	r0, [r0, #8]
 8086130:	f000 bbd5 	b.w	80868de <_ZN9FatVolume15allocateClusterEmPm>

08086134 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 8086134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
 8086138:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 808613a:	4604      	mov	r4, r0
  if (isRootFixed()) {
 808613c:	f011 0520 	ands.w	r5, r1, #32
 8086140:	d003      	beq.n	808614a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
 8086142:	2600      	movs	r6, #0
}
 8086144:	4630      	mov	r0, r6
 8086146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 808614a:	6942      	ldr	r2, [r0, #20]
 808614c:	4b17      	ldr	r3, [pc, #92]	; (80861ac <_ZN7FatFile13addDirClusterEv+0x78>)
 808614e:	429a      	cmp	r2, r3
 8086150:	d2f7      	bcs.n	8086142 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 8086152:	f7ff ffe5 	bl	8086120 <_ZN7FatFile10addClusterEv>
 8086156:	4606      	mov	r6, r0
 8086158:	2800      	cmp	r0, #0
 808615a:	d0f2      	beq.n	8086142 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 808615c:	6921      	ldr	r1, [r4, #16]
 808615e:	68a0      	ldr	r0, [r4, #8]
 8086160:	f000 fb5e 	bl	8086820 <_ZNK9FatVolume17clusterStartBlockEm>
 8086164:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 8086166:	68a0      	ldr	r0, [r4, #8]
 8086168:	2205      	movs	r2, #5
 808616a:	4639      	mov	r1, r7
 808616c:	3028      	adds	r0, #40	; 0x28
 808616e:	f000 fb34 	bl	80867da <_ZN8FatCache4readEmh>
  if (!pc) {
 8086172:	4680      	mov	r8, r0
 8086174:	2800      	cmp	r0, #0
 8086176:	d0e4      	beq.n	8086142 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 8086178:	4629      	mov	r1, r5
 808617a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808617e:	f005 f8f4 	bl	808b36a <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086182:	2501      	movs	r5, #1
 8086184:	68a0      	ldr	r0, [r4, #8]
    return m_blocksPerCluster;
 8086186:	7902      	ldrb	r2, [r0, #4]
 8086188:	42aa      	cmp	r2, r5
 808618a:	d909      	bls.n	80861a0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 808618c:	6803      	ldr	r3, [r0, #0]
 808618e:	4642      	mov	r2, r8
 8086190:	685b      	ldr	r3, [r3, #4]
 8086192:	19e9      	adds	r1, r5, r7
 8086194:	4798      	blx	r3
 8086196:	2800      	cmp	r0, #0
 8086198:	d0d3      	beq.n	8086142 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808619a:	3501      	adds	r5, #1
 808619c:	b2ed      	uxtb	r5, r5
 808619e:	e7f1      	b.n	8086184 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80861a0:	6963      	ldr	r3, [r4, #20]
 80861a2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80861a6:	6163      	str	r3, [r4, #20]
  return true;
 80861a8:	e7cc      	b.n	8086144 <_ZN7FatFile13addDirClusterEv+0x10>
 80861aa:	bf00      	nop
 80861ac:	001ffe00 	.word	0x001ffe00

080861b0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80861b0:	b510      	push	{r4, lr}
 80861b2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
 80861b4:	6880      	ldr	r0, [r0, #8]
 80861b6:	460a      	mov	r2, r1
 80861b8:	3028      	adds	r0, #40	; 0x28
 80861ba:	69a1      	ldr	r1, [r4, #24]
 80861bc:	f000 fb0d 	bl	80867da <_ZN8FatCache4readEmh>
  if (!pc) {
 80861c0:	b120      	cbz	r0, 80861cc <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
 80861c2:	88a3      	ldrh	r3, [r4, #4]
 80861c4:	f003 030f 	and.w	r3, r3, #15
 80861c8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 80861cc:	bd10      	pop	{r4, pc}

080861ce <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 80861ce:	7803      	ldrb	r3, [r0, #0]
 80861d0:	b90b      	cbnz	r3, 80861d6 <_ZN7FatFile8openRootEP9FatVolume+0x8>
 80861d2:	f7ff bf8f 	b.w	80860f4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 80861d6:	2000      	movs	r0, #0
 80861d8:	4770      	bx	lr

080861da <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80861da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
 80861de:	7803      	ldrb	r3, [r0, #0]
 80861e0:	4604      	mov	r4, r0
 80861e2:	4688      	mov	r8, r1
 80861e4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 80861e6:	2b00      	cmp	r3, #0
 80861e8:	d05d      	beq.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
 80861ea:	7882      	ldrb	r2, [r0, #2]
 80861ec:	07d1      	lsls	r1, r2, #31
 80861ee:	d55a      	bpl.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80861f0:	071a      	lsls	r2, r3, #28
 80861f2:	d52d      	bpl.n	8086250 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80861f4:	69c3      	ldr	r3, [r0, #28]
 80861f6:	6942      	ldr	r2, [r0, #20]
 80861f8:	1a9b      	subs	r3, r3, r2
 80861fa:	429d      	cmp	r5, r3
 80861fc:	bf28      	it	cs
 80861fe:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8086200:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 8086202:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086206:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 808620a:	2e00      	cmp	r6, #0
 808620c:	f000 8090 	beq.w	8086330 <_ZN7FatFile4readEPvj+0x156>
    return m_attr & FILE_ATTR_ROOT_FIXED;
 8086210:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 8086212:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8086214:	0697      	lsls	r7, r2, #26
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8086216:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 8086218:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808621c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8086220:	d51f      	bpl.n	8086262 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8086222:	6a00      	ldr	r0, [r0, #32]
 8086224:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8086226:	68a0      	ldr	r0, [r4, #8]
 8086228:	f1ba 0f00 	cmp.w	sl, #0
 808622c:	d142      	bne.n	80862b4 <_ZN7FatFile4readEPvj+0xda>
 808622e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8086232:	d33f      	bcc.n	80862b4 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
 8086234:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8086236:	4291      	cmp	r1, r2
 8086238:	d03c      	beq.n	80862b4 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 808623a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808623e:	d252      	bcs.n	80862e6 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8086240:	6803      	ldr	r3, [r0, #0]
 8086242:	4642      	mov	r2, r8
 8086244:	681b      	ldr	r3, [r3, #0]
 8086246:	4798      	blx	r3
 8086248:	b368      	cbz	r0, 80862a6 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 808624a:	f44f 7700 	mov.w	r7, #512	; 0x200
 808624e:	e044      	b.n	80862da <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 8086250:	069b      	lsls	r3, r3, #26
 8086252:	d5d5      	bpl.n	8086200 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8086254:	6883      	ldr	r3, [r0, #8]
 8086256:	891a      	ldrh	r2, [r3, #8]
 8086258:	6943      	ldr	r3, [r0, #20]
 808625a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 808625e:	b29b      	uxth	r3, r3
 8086260:	e7cb      	b.n	80861fa <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086262:	f890 9005 	ldrb.w	r9, [r0, #5]
 8086266:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 808626a:	f1ba 0f00 	cmp.w	sl, #0
 808626e:	d108      	bne.n	8086282 <_ZN7FatFile4readEPvj+0xa8>
 8086270:	f1b9 0f00 	cmp.w	r9, #0
 8086274:	d105      	bne.n	8086282 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 8086276:	b95b      	cbnz	r3, 8086290 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086278:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 808627a:	bf4c      	ite	mi
 808627c:	6a03      	ldrmi	r3, [r0, #32]
 808627e:	6a23      	ldrpl	r3, [r4, #32]
 8086280:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086282:	6921      	ldr	r1, [r4, #16]
 8086284:	68a0      	ldr	r0, [r4, #8]
 8086286:	f000 facb 	bl	8086820 <_ZNK9FatVolume17clusterStartBlockEm>
 808628a:	eb09 0100 	add.w	r1, r9, r0
 808628e:	e7ca      	b.n	8086226 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086290:	465a      	mov	r2, fp
 8086292:	6921      	ldr	r1, [r4, #16]
 8086294:	f000 faca 	bl	808682c <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8086298:	2800      	cmp	r0, #0
 808629a:	db04      	blt.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 808629c:	d1f1      	bne.n	8086282 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 808629e:	7823      	ldrb	r3, [r4, #0]
 80862a0:	f013 0f70 	tst.w	r3, #112	; 0x70
 80862a4:	d144      	bne.n	8086330 <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80862a6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80862a8:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 80862ac:	f043 0302 	orr.w	r3, r3, #2
 80862b0:	7063      	strb	r3, [r4, #1]
  return -1;
 80862b2:	e03e      	b.n	8086332 <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 80862b4:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 80862b8:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 80862ba:	f04f 0200 	mov.w	r2, #0
 80862be:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80862c2:	bf28      	it	cs
 80862c4:	4637      	movcs	r7, r6
 80862c6:	f000 fa88 	bl	80867da <_ZN8FatCache4readEmh>
      if (!pc) {
 80862ca:	2800      	cmp	r0, #0
 80862cc:	d0eb      	beq.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 80862ce:	eb00 010a 	add.w	r1, r0, sl
 80862d2:	463a      	mov	r2, r7
 80862d4:	4640      	mov	r0, r8
 80862d6:	f005 f83a 	bl	808b34e <memcpy>
    m_curPosition += n;
 80862da:	6963      	ldr	r3, [r4, #20]
    dst += n;
 80862dc:	44b8      	add	r8, r7
    m_curPosition += n;
 80862de:	443b      	add	r3, r7
 80862e0:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80862e2:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 80862e4:	e791      	b.n	808620a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 80862e6:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 80862e8:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80862ec:	06bf      	lsls	r7, r7, #26
 80862ee:	d406      	bmi.n	80862fe <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80862f0:	7907      	ldrb	r7, [r0, #4]
 80862f2:	eba7 0709 	sub.w	r7, r7, r9
 80862f6:	b2ff      	uxtb	r7, r7
 80862f8:	42bb      	cmp	r3, r7
 80862fa:	bf28      	it	cs
 80862fc:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80862fe:	4291      	cmp	r1, r2
      n = 512*nb;
 8086300:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086304:	d208      	bcs.n	8086318 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 8086306:	68a0      	ldr	r0, [r4, #8]
 8086308:	6802      	ldr	r2, [r0, #0]
 808630a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 808630e:	4642      	mov	r2, r8
 8086310:	47d0      	blx	sl
 8086312:	2800      	cmp	r0, #0
 8086314:	d1e1      	bne.n	80862da <_ZN7FatFile4readEPvj+0x100>
 8086316:	e7c6      	b.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086318:	441a      	add	r2, r3
 808631a:	428a      	cmp	r2, r1
 808631c:	d9f3      	bls.n	8086306 <_ZN7FatFile4readEPvj+0x12c>
 808631e:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 8086322:	f7ff f86d 	bl	8085400 <_ZN9FatVolume9cacheSyncEv>
 8086326:	e9dd 1300 	ldrd	r1, r3, [sp]
 808632a:	2800      	cmp	r0, #0
 808632c:	d1eb      	bne.n	8086306 <_ZN7FatFile4readEPvj+0x12c>
 808632e:	e7ba      	b.n	80862a6 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 8086330:	1ba8      	subs	r0, r5, r6
}
 8086332:	b003      	add	sp, #12
 8086334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086338 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 8086338:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 808633a:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 808633c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8086340:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 8086344:	4604      	mov	r4, r0
 8086346:	f7ff ff48 	bl	80861da <_ZN7FatFile4readEPvj>
 808634a:	2801      	cmp	r0, #1
 808634c:	bf12      	itee	ne
 808634e:	f04f 30ff 	movne.w	r0, #4294967295
 8086352:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 8086356:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 808635a:	b002      	add	sp, #8
 808635c:	bd70      	pop	{r4, r5, r6, pc}

0808635e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808635e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086360:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086362:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 8086364:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086368:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 808636c:	d000      	beq.n	8086370 <_ZN7FatFile12readDirCacheEb+0x12>
 808636e:	b999      	cbnz	r1, 8086398 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 8086370:	2201      	movs	r2, #1
 8086372:	4620      	mov	r0, r4
 8086374:	f10d 0107 	add.w	r1, sp, #7
 8086378:	f7ff ff2f 	bl	80861da <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 808637c:	b240      	sxtb	r0, r0
 808637e:	2801      	cmp	r0, #1
 8086380:	d002      	beq.n	8086388 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 8086382:	2000      	movs	r0, #0
}
 8086384:	b003      	add	sp, #12
 8086386:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 8086388:	6963      	ldr	r3, [r4, #20]
 808638a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 808638c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 808638e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 8086390:	3034      	adds	r0, #52	; 0x34
 8086392:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8086396:	e7f5      	b.n	8086384 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 8086398:	3320      	adds	r3, #32
 808639a:	e7f7      	b.n	808638c <_ZN7FatFile12readDirCacheEb+0x2e>

0808639c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 808639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
 80863a0:	7802      	ldrb	r2, [r0, #0]
 80863a2:	4604      	mov	r4, r0
 80863a4:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 80863a6:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 80863a8:	b162      	cbz	r2, 80863c4 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 80863aa:	6940      	ldr	r0, [r0, #20]
 80863ac:	4288      	cmp	r0, r1
 80863ae:	d002      	beq.n	80863b6 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 80863b0:	b919      	cbnz	r1, 80863ba <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 80863b2:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 80863b4:	6165      	str	r5, [r4, #20]
    return true;
 80863b6:	2001      	movs	r0, #1
 80863b8:	e006      	b.n	80863c8 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 80863ba:	0716      	lsls	r6, r2, #28
 80863bc:	d506      	bpl.n	80863cc <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 80863be:	69e3      	ldr	r3, [r4, #28]
 80863c0:	428b      	cmp	r3, r1
 80863c2:	d20b      	bcs.n	80863dc <_ZN7FatFile7seekSetEm+0x40>
  return false;
 80863c4:	2000      	movs	r0, #0
  m_curCluster = tmp;
 80863c6:	6127      	str	r7, [r4, #16]
}
 80863c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 80863cc:	0691      	lsls	r1, r2, #26
 80863ce:	d505      	bpl.n	80863dc <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
 80863d0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80863d2:	891b      	ldrh	r3, [r3, #8]
 80863d4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 80863d8:	d9ec      	bls.n	80863b4 <_ZN7FatFile7seekSetEm+0x18>
 80863da:	e7f3      	b.n	80863c4 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80863dc:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80863e0:	1e43      	subs	r3, r0, #1
 80863e2:	f89c 6006 	ldrb.w	r6, [ip, #6]
 80863e6:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80863ea:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80863ec:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80863ee:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 80863f0:	42b3      	cmp	r3, r6
 80863f2:	d800      	bhi.n	80863f6 <_ZN7FatFile7seekSetEm+0x5a>
 80863f4:	b998      	cbnz	r0, 808641e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80863f6:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 80863f8:	bf4c      	ite	mi
 80863fa:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 80863fe:	6a23      	ldrpl	r3, [r4, #32]
 8086400:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086402:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 8086406:	2e00      	cmp	r6, #0
 8086408:	d0d4      	beq.n	80863b4 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808640a:	4642      	mov	r2, r8
 808640c:	6921      	ldr	r1, [r4, #16]
 808640e:	68a0      	ldr	r0, [r4, #8]
 8086410:	f000 fa0c 	bl	808682c <_ZN9FatVolume6fatGetEmPm>
 8086414:	2800      	cmp	r0, #0
 8086416:	f106 36ff 	add.w	r6, r6, #4294967295
 808641a:	dcf4      	bgt.n	8086406 <_ZN7FatFile7seekSetEm+0x6a>
 808641c:	e7d2      	b.n	80863c4 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 808641e:	1af6      	subs	r6, r6, r3
 8086420:	e7ef      	b.n	8086402 <_ZN7FatFile7seekSetEm+0x66>

08086422 <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 8086422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086424:	460f      	mov	r7, r1
 8086426:	4604      	mov	r4, r0
 8086428:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 808642a:	2100      	movs	r1, #0
 808642c:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 808642e:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 8086430:	f004 ff9b 	bl	808b36a <memset>
  m_vol = dirFile->m_vol;
 8086434:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8086436:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 8086438:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 808643a:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808643c:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
 8086440:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
 8086442:	016b      	lsls	r3, r5, #5
 8086444:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 8086448:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 808644c:	0717      	lsls	r7, r2, #28
 808644e:	d502      	bpl.n	8086456 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
  m_attr = FILE_ATTR_CLOSED;
 8086450:	2000      	movs	r0, #0
 8086452:	7020      	strb	r0, [r4, #0]
}
 8086454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8086456:	f002 0217 	and.w	r2, r2, #23
 808645a:	7022      	strb	r2, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808645c:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8086460:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 8086464:	bf04      	itt	eq
 8086466:	f042 0208 	orreq.w	r2, r2, #8
 808646a:	7022      	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
 808646c:	f89d 2018 	ldrb.w	r2, [sp, #24]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086470:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 8086474:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086476:	d004      	beq.n	8086482 <_ZN7FatFile15openCachedEntryEPS_thh+0x60>
    return m_attr & FILE_ATTR_SUBDIR;
 8086478:	7822      	ldrb	r2, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 808647a:	06d5      	lsls	r5, r2, #27
 808647c:	d4e8      	bmi.n	8086450 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
 808647e:	07d1      	lsls	r1, r2, #31
 8086480:	d4e6      	bmi.n	8086450 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
  m_flags = oflag & F_OFLAG;
 8086482:	f006 020f 	and.w	r2, r6, #15
 8086486:	70a2      	strb	r2, [r4, #2]
    return m_lbn;
 8086488:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808648a:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 808648c:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808648e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 8086492:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8086496:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 808649a:	06f2      	lsls	r2, r6, #27
 808649c:	d50d      	bpl.n	80864ba <_ZN7FatFile15openCachedEntryEPS_thh+0x98>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808649e:	b939      	cbnz	r1, 80864b0 <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
    m_flags |= F_FILE_DIR_DIRTY;
 80864a0:	78a3      	ldrb	r3, [r4, #2]
 80864a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80864a6:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80864a8:	06b3      	lsls	r3, r6, #26
 80864aa:	d40a      	bmi.n	80864c2 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
  return true;
 80864ac:	2001      	movs	r0, #1
 80864ae:	e7d1      	b.n	8086454 <_ZN7FatFile15openCachedEntryEPS_thh+0x32>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80864b0:	f000 fa51 	bl	8086956 <_ZN9FatVolume9freeChainEm>
 80864b4:	2800      	cmp	r0, #0
 80864b6:	d1f3      	bne.n	80864a0 <_ZN7FatFile15openCachedEntryEPS_thh+0x7e>
 80864b8:	e7ca      	b.n	8086450 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    m_firstCluster = firstCluster;
 80864ba:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80864bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80864be:	61e3      	str	r3, [r4, #28]
 80864c0:	e7f2      	b.n	80864a8 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80864c2:	4620      	mov	r0, r4
 80864c4:	69e1      	ldr	r1, [r4, #28]
 80864c6:	f7ff ff69 	bl	808639c <_ZN7FatFile7seekSetEm>
 80864ca:	2800      	cmp	r0, #0
 80864cc:	d1ee      	bne.n	80864ac <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
 80864ce:	e7bf      	b.n	8086450 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>

080864d0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80864d0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80864d2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 80864d4:	4604      	mov	r4, r0
  if (!isOpen()) {
 80864d6:	b90b      	cbnz	r3, 80864dc <_ZN7FatFile4syncEv+0xc>
    return true;
 80864d8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 80864da:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80864dc:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80864e0:	2b00      	cmp	r3, #0
 80864e2:	da23      	bge.n	808652c <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80864e4:	2101      	movs	r1, #1
 80864e6:	f7ff fe63 	bl	80861b0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80864ea:	4605      	mov	r5, r0
 80864ec:	b928      	cbnz	r0, 80864fa <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 80864ee:	7863      	ldrb	r3, [r4, #1]
  return false;
 80864f0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80864f2:	f043 0301 	orr.w	r3, r3, #1
 80864f6:	7063      	strb	r3, [r4, #1]
  return false;
 80864f8:	e7ef      	b.n	80864da <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80864fa:	7803      	ldrb	r3, [r0, #0]
 80864fc:	2be5      	cmp	r3, #229	; 0xe5
 80864fe:	d0f6      	beq.n	80864ee <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 8086500:	7823      	ldrb	r3, [r4, #0]
 8086502:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8086504:	bf44      	itt	mi
 8086506:	69e3      	ldrmi	r3, [r4, #28]
 8086508:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808650a:	6a23      	ldr	r3, [r4, #32]
 808650c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808650e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8086510:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 8086512:	4b09      	ldr	r3, [pc, #36]	; (8086538 <_ZN7FatFile4syncEv+0x68>)
 8086514:	681b      	ldr	r3, [r3, #0]
 8086516:	b12b      	cbz	r3, 8086524 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8086518:	f100 0116 	add.w	r1, r0, #22
 808651c:	3018      	adds	r0, #24
 808651e:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8086520:	8b2b      	ldrh	r3, [r5, #24]
 8086522:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 8086524:	78a3      	ldrb	r3, [r4, #2]
 8086526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808652a:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 808652c:	68a0      	ldr	r0, [r4, #8]
 808652e:	f7fe ff67 	bl	8085400 <_ZN9FatVolume9cacheSyncEv>
 8086532:	2800      	cmp	r0, #0
 8086534:	d0db      	beq.n	80864ee <_ZN7FatFile4syncEv+0x1e>
 8086536:	e7cf      	b.n	80864d8 <_ZN7FatFile4syncEv+0x8>
 8086538:	20000a7c 	.word	0x20000a7c

0808653c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 808653c:	b510      	push	{r4, lr}
 808653e:	4604      	mov	r4, r0
  bool rtn = sync();
 8086540:	f7ff ffc6 	bl	80864d0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8086544:	2300      	movs	r3, #0
 8086546:	7023      	strb	r3, [r4, #0]
}
 8086548:	bd10      	pop	{r4, pc}

0808654a <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808654a:	b5f0      	push	{r4, r5, r6, r7, lr}
 808654c:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808654e:	2300      	movs	r3, #0
 8086550:	b093      	sub	sp, #76	; 0x4c
 8086552:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 8086554:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8086556:	4606      	mov	r6, r0
 8086558:	460c      	mov	r4, r1
 808655a:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 808655c:	b113      	cbz	r3, 8086564 <_ZN7FatFile4openEPS_PKch+0x1a>
  return false;
 808655e:	2000      	movs	r0, #0
}
 8086560:	b013      	add	sp, #76	; 0x4c
 8086562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 8086564:	780b      	ldrb	r3, [r1, #0]
 8086566:	f013 0f70 	tst.w	r3, #112	; 0x70
 808656a:	d0f8      	beq.n	808655e <_ZN7FatFile4openEPS_PKch+0x14>
  if (isDirSeparator(*path)) {
 808656c:	7813      	ldrb	r3, [r2, #0]
 808656e:	2b2f      	cmp	r3, #47	; 0x2f
 8086570:	d112      	bne.n	8086598 <_ZN7FatFile4openEPS_PKch+0x4e>
    while (isDirSeparator(*path)) {
 8086572:	9a01      	ldr	r2, [sp, #4]
 8086574:	7813      	ldrb	r3, [r2, #0]
 8086576:	2b2f      	cmp	r3, #47	; 0x2f
 8086578:	d102      	bne.n	8086580 <_ZN7FatFile4openEPS_PKch+0x36>
      path++;
 808657a:	3201      	adds	r2, #1
 808657c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 808657e:	e7f8      	b.n	8086572 <_ZN7FatFile4openEPS_PKch+0x28>
      return openRoot(dirFile->m_vol);
 8086580:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 8086582:	b91b      	cbnz	r3, 808658c <_ZN7FatFile4openEPS_PKch+0x42>
      return openRoot(dirFile->m_vol);
 8086584:	4630      	mov	r0, r6
 8086586:	f7ff fe22 	bl	80861ce <_ZN7FatFile8openRootEP9FatVolume>
 808658a:	e7e9      	b.n	8086560 <_ZN7FatFile4openEPS_PKch+0x16>
    return m_attr;
 808658c:	a809      	add	r0, sp, #36	; 0x24
 808658e:	f7ff fdb1 	bl	80860f4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8086592:	2800      	cmp	r0, #0
 8086594:	d0e3      	beq.n	808655e <_ZN7FatFile4openEPS_PKch+0x14>
    dirFile = &tmpDir;
 8086596:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 8086598:	9801      	ldr	r0, [sp, #4]
 808659a:	aa01      	add	r2, sp, #4
 808659c:	a903      	add	r1, sp, #12
 808659e:	f7fe ff4b 	bl	8085438 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80865a2:	2800      	cmp	r0, #0
 80865a4:	d0db      	beq.n	808655e <_ZN7FatFile4openEPS_PKch+0x14>
    if (*path == 0) {
 80865a6:	9b01      	ldr	r3, [sp, #4]
 80865a8:	781b      	ldrb	r3, [r3, #0]
 80865aa:	b19b      	cbz	r3, 80865d4 <_ZN7FatFile4openEPS_PKch+0x8a>
    if (!open(dirFile, &fname, O_READ)) {
 80865ac:	2301      	movs	r3, #1
 80865ae:	4621      	mov	r1, r4
 80865b0:	4630      	mov	r0, r6
 80865b2:	aa03      	add	r2, sp, #12
 80865b4:	f7ff f872 	bl	808569c <_ZN7FatFile4openEPS_P7fname_th>
 80865b8:	2800      	cmp	r0, #0
 80865ba:	d0d0      	beq.n	808655e <_ZN7FatFile4openEPS_PKch+0x14>
    tmpDir = *this;
 80865bc:	4635      	mov	r5, r6
 80865be:	ac09      	add	r4, sp, #36	; 0x24
 80865c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80865c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80865c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80865c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80865c8:	682b      	ldr	r3, [r5, #0]
    close();
 80865ca:	4630      	mov	r0, r6
    tmpDir = *this;
 80865cc:	6023      	str	r3, [r4, #0]
    close();
 80865ce:	f7ff ffb5 	bl	808653c <_ZN7FatFile5closeEv>
  while (1) {
 80865d2:	e7e0      	b.n	8086596 <_ZN7FatFile4openEPS_PKch+0x4c>
  return open(dirFile, &fname, oflag);
 80865d4:	463b      	mov	r3, r7
 80865d6:	4621      	mov	r1, r4
 80865d8:	4630      	mov	r0, r6
 80865da:	aa03      	add	r2, sp, #12
 80865dc:	f7ff f85e 	bl	808569c <_ZN7FatFile4openEPS_P7fname_th>
 80865e0:	e7be      	b.n	8086560 <_ZN7FatFile4openEPS_PKch+0x16>
	...

080865e4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80865e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80865e8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 80865ea:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 80865ec:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 80865ee:	4689      	mov	r9, r1
 80865f0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 80865f2:	d55b      	bpl.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
 80865f4:	7883      	ldrb	r3, [r0, #2]
 80865f6:	0799      	lsls	r1, r3, #30
 80865f8:	d558      	bpl.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80865fa:	075a      	lsls	r2, r3, #29
 80865fc:	d451      	bmi.n	80866a2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80865fe:	6963      	ldr	r3, [r4, #20]
 8086600:	43db      	mvns	r3, r3
 8086602:	42bb      	cmp	r3, r7
 8086604:	d352      	bcc.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
 8086606:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086608:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808660c:	6963      	ldr	r3, [r4, #20]
  while (nToWrite) {
 808660e:	f1b8 0f00 	cmp.w	r8, #0
 8086612:	f000 808f 	beq.w	8086734 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8086616:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8086618:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 808661c:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808661e:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8086622:	d10e      	bne.n	8086642 <_ZN7FatFile5writeEPKvj+0x5e>
 8086624:	b96d      	cbnz	r5, 8086642 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
 8086626:	6921      	ldr	r1, [r4, #16]
 8086628:	2900      	cmp	r1, #0
 808662a:	d046      	beq.n	80866ba <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808662c:	4652      	mov	r2, sl
 808662e:	f000 f8fd 	bl	808682c <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8086632:	2800      	cmp	r0, #0
 8086634:	db3a      	blt.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8086636:	d104      	bne.n	8086642 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8086638:	4620      	mov	r0, r4
 808663a:	f7ff fd71 	bl	8086120 <_ZN7FatFile10addClusterEv>
 808663e:	2800      	cmp	r0, #0
 8086640:	d034      	beq.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086642:	6921      	ldr	r1, [r4, #16]
 8086644:	68a0      	ldr	r0, [r4, #8]
 8086646:	f000 f8eb 	bl	8086820 <_ZNK9FatVolume17clusterStartBlockEm>
 808664a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808664c:	68a0      	ldr	r0, [r4, #8]
 808664e:	b915      	cbnz	r5, 8086656 <_ZN7FatFile5writeEPKvj+0x72>
 8086650:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8086654:	d23f      	bcs.n	80866d6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8086656:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 808665a:	4546      	cmp	r6, r8
 808665c:	bf28      	it	cs
 808665e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8086660:	2d00      	cmp	r5, #0
 8086662:	d136      	bne.n	80866d2 <_ZN7FatFile5writeEPKvj+0xee>
 8086664:	6962      	ldr	r2, [r4, #20]
 8086666:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8086668:	429a      	cmp	r2, r3
 808666a:	bf34      	ite	cc
 808666c:	2201      	movcc	r2, #1
 808666e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8086670:	3028      	adds	r0, #40	; 0x28
 8086672:	f000 f8b2 	bl	80867da <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8086676:	b1c8      	cbz	r0, 80866ac <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8086678:	4428      	add	r0, r5
 808667a:	4632      	mov	r2, r6
 808667c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 808667e:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8086680:	f004 fe65 	bl	808b34e <memcpy>
      if (512 == (n + blockOffset)) {
 8086684:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8086688:	d104      	bne.n	8086694 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 808668a:	68a0      	ldr	r0, [r4, #8]
 808668c:	3028      	adds	r0, #40	; 0x28
 808668e:	f000 f87d 	bl	808678c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8086692:	b158      	cbz	r0, 80866ac <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8086694:	6963      	ldr	r3, [r4, #20]
    src += n;
 8086696:	44b1      	add	r9, r6
    m_curPosition += n;
 8086698:	4433      	add	r3, r6
 808669a:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 808669c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 80866a0:	e7b4      	b.n	808660c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 80866a2:	69c1      	ldr	r1, [r0, #28]
 80866a4:	f7ff fe7a 	bl	808639c <_ZN7FatFile7seekSetEm>
 80866a8:	2800      	cmp	r0, #0
 80866aa:	d1a8      	bne.n	80865fe <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80866ac:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80866ae:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 80866b2:	f043 0301 	orr.w	r3, r3, #1
 80866b6:	7063      	strb	r3, [r4, #1]
  return -1;
 80866b8:	e04d      	b.n	8086756 <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 80866ba:	6a23      	ldr	r3, [r4, #32]
 80866bc:	b93b      	cbnz	r3, 80866ce <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 80866be:	4620      	mov	r0, r4
 80866c0:	f7ff fd2e 	bl	8086120 <_ZN7FatFile10addClusterEv>
 80866c4:	2800      	cmp	r0, #0
 80866c6:	d0f1      	beq.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 80866c8:	6923      	ldr	r3, [r4, #16]
 80866ca:	6223      	str	r3, [r4, #32]
 80866cc:	e7b9      	b.n	8086642 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 80866ce:	6123      	str	r3, [r4, #16]
 80866d0:	e7b7      	b.n	8086642 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80866d2:	2201      	movs	r2, #1
 80866d4:	e7cc      	b.n	8086670 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 80866d6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
 80866da:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80866dc:	d319      	bcc.n	8086712 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80866de:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 80866e0:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80866e4:	1b9b      	subs	r3, r3, r6
 80866e6:	b2db      	uxtb	r3, r3
 80866e8:	4563      	cmp	r3, ip
 80866ea:	bf28      	it	cs
 80866ec:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80866ee:	4291      	cmp	r1, r2
      n = 512*nBlock;
 80866f0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80866f4:	d307      	bcc.n	8086706 <_ZN7FatFile5writeEPKvj+0x122>
 80866f6:	441a      	add	r2, r3
 80866f8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 80866fa:	bf82      	ittt	hi
 80866fc:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8086700:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8086704:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8086706:	68a0      	ldr	r0, [r4, #8]
 8086708:	6802      	ldr	r2, [r0, #0]
 808670a:	68d5      	ldr	r5, [r2, #12]
 808670c:	464a      	mov	r2, r9
 808670e:	47a8      	blx	r5
 8086710:	e7bf      	b.n	8086692 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8086712:	4291      	cmp	r1, r2
 8086714:	bf02      	ittt	eq
 8086716:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 808671a:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808671e:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8086720:	68a0      	ldr	r0, [r4, #8]
 8086722:	464a      	mov	r2, r9
 8086724:	6803      	ldr	r3, [r0, #0]
 8086726:	685b      	ldr	r3, [r3, #4]
 8086728:	4798      	blx	r3
 808672a:	2800      	cmp	r0, #0
 808672c:	d0be      	beq.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 808672e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8086732:	e7af      	b.n	8086694 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8086734:	69e1      	ldr	r1, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8086736:	78a2      	ldrb	r2, [r4, #2]
  if (m_curPosition > m_fileSize) {
 8086738:	4299      	cmp	r1, r3
 808673a:	d204      	bcs.n	8086746 <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 808673c:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 808673e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8086742:	70a2      	strb	r2, [r4, #2]
 8086744:	e003      	b.n	808674e <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 8086746:	4b08      	ldr	r3, [pc, #32]	; (8086768 <_ZN7FatFile5writeEPKvj+0x184>)
 8086748:	681b      	ldr	r3, [r3, #0]
 808674a:	2b00      	cmp	r3, #0
 808674c:	d1f7      	bne.n	808673e <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 808674e:	78a3      	ldrb	r3, [r4, #2]
 8086750:	071b      	lsls	r3, r3, #28
 8086752:	d402      	bmi.n	808675a <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8086754:	4638      	mov	r0, r7
}
 8086756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 808675a:	4620      	mov	r0, r4
 808675c:	f7ff feb8 	bl	80864d0 <_ZN7FatFile4syncEv>
 8086760:	2800      	cmp	r0, #0
 8086762:	d1f7      	bne.n	8086754 <_ZN7FatFile5writeEPKvj+0x170>
 8086764:	e7a2      	b.n	80866ac <_ZN7FatFile5writeEPKvj+0xc8>
 8086766:	bf00      	nop
 8086768:	20000a7c 	.word	0x20000a7c

0808676c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 808676c:	b570      	push	{r4, r5, r6, lr}
 808676e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8086770:	460c      	mov	r4, r1
    }
 8086772:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8086774:	b149      	cbz	r1, 808678a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8086776:	f004 fe6a 	bl	808b44e <strlen>
 808677a:	682b      	ldr	r3, [r5, #0]
 808677c:	4602      	mov	r2, r0
 808677e:	4621      	mov	r1, r4
 8086780:	4628      	mov	r0, r5
    }
 8086782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8086786:	68db      	ldr	r3, [r3, #12]
 8086788:	4718      	bx	r3
    }
 808678a:	bd70      	pop	{r4, r5, r6, pc}

0808678c <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808678e:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8086790:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8086792:	07da      	lsls	r2, r3, #31
 8086794:	d51f      	bpl.n	80867d6 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8086796:	6840      	ldr	r0, [r0, #4]
 8086798:	f104 060c 	add.w	r6, r4, #12
 808679c:	6803      	ldr	r3, [r0, #0]
 808679e:	4632      	mov	r2, r6
 80867a0:	685b      	ldr	r3, [r3, #4]
 80867a2:	68a1      	ldr	r1, [r4, #8]
 80867a4:	4798      	blx	r3
 80867a6:	4605      	mov	r5, r0
 80867a8:	b910      	cbnz	r0, 80867b0 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80867aa:	2500      	movs	r5, #0
}
 80867ac:	4628      	mov	r0, r5
 80867ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80867b0:	7823      	ldrb	r3, [r4, #0]
 80867b2:	079b      	lsls	r3, r3, #30
 80867b4:	d404      	bmi.n	80867c0 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 80867b6:	7823      	ldrb	r3, [r4, #0]
 80867b8:	f023 0301 	bic.w	r3, r3, #1
 80867bc:	7023      	strb	r3, [r4, #0]
 80867be:	e7f5      	b.n	80867ac <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80867c0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80867c4:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80867c6:	6803      	ldr	r3, [r0, #0]
 80867c8:	4632      	mov	r2, r6
 80867ca:	685b      	ldr	r3, [r3, #4]
 80867cc:	4439      	add	r1, r7
 80867ce:	4798      	blx	r3
 80867d0:	2800      	cmp	r0, #0
 80867d2:	d1f0      	bne.n	80867b6 <_ZN8FatCache4syncEv+0x2a>
 80867d4:	e7e9      	b.n	80867aa <_ZN8FatCache4syncEv+0x1e>
  return true;
 80867d6:	2501      	movs	r5, #1
 80867d8:	e7e8      	b.n	80867ac <_ZN8FatCache4syncEv+0x20>

080867da <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80867da:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80867dc:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80867de:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80867e0:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80867e2:	460e      	mov	r6, r1
 80867e4:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80867e6:	d009      	beq.n	80867fc <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 80867e8:	f7ff ffd0 	bl	808678c <_ZN8FatCache4syncEv>
 80867ec:	b908      	cbnz	r0, 80867f2 <_ZN8FatCache4readEmh+0x18>
  return 0;
 80867ee:	2000      	movs	r0, #0
}
 80867f0:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 80867f2:	076b      	lsls	r3, r5, #29
 80867f4:	d50a      	bpl.n	808680c <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 80867f6:	2300      	movs	r3, #0
    m_lbn = lbn;
 80867f8:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 80867fa:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 80867fc:	4620      	mov	r0, r4
 80867fe:	7822      	ldrb	r2, [r4, #0]
 8086800:	f005 0503 	and.w	r5, r5, #3
 8086804:	4315      	orrs	r5, r2
 8086806:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 808680a:	e7f1      	b.n	80867f0 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 808680c:	6860      	ldr	r0, [r4, #4]
 808680e:	4631      	mov	r1, r6
 8086810:	6803      	ldr	r3, [r0, #0]
 8086812:	f104 020c 	add.w	r2, r4, #12
 8086816:	681b      	ldr	r3, [r3, #0]
 8086818:	4798      	blx	r3
 808681a:	2800      	cmp	r0, #0
 808681c:	d1eb      	bne.n	80867f6 <_ZN8FatCache4readEmh+0x1c>
 808681e:	e7e6      	b.n	80867ee <_ZN8FatCache4readEmh+0x14>

08086820 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8086820:	7983      	ldrb	r3, [r0, #6]
 8086822:	3902      	subs	r1, #2
 8086824:	6940      	ldr	r0, [r0, #20]
 8086826:	4099      	lsls	r1, r3
}
 8086828:	4408      	add	r0, r1
 808682a:	4770      	bx	lr

0808682c <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808682c:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808682e:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086830:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 8086832:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086834:	460c      	mov	r4, r1
 8086836:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8086838:	d118      	bne.n	808686c <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 808683a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 808683c:	2202      	movs	r2, #2
 808683e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8086842:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086846:	f7ff ffc8 	bl	80867da <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 808684a:	b910      	cbnz	r0, 8086852 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 808684c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086850:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8086852:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086856:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808685a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 808685e:	69ea      	ldr	r2, [r5, #28]
 8086860:	4293      	cmp	r3, r2
  return 1;
 8086862:	bf96      	itet	ls
 8086864:	2001      	movls	r0, #1
    return 0;
 8086866:	2000      	movhi	r0, #0
  *value = next;
 8086868:	6033      	strls	r3, [r6, #0]
  return 1;
 808686a:	e7f1      	b.n	8086850 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 808686c:	2b10      	cmp	r3, #16
 808686e:	d1ed      	bne.n	808684c <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8086870:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8086874:	6981      	ldr	r1, [r0, #24]
 8086876:	2202      	movs	r2, #2
 8086878:	4419      	add	r1, r3
 808687a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808687e:	f7ff ffac 	bl	80867da <_ZN8FatCache4readEmh>
    if (!pc) {
 8086882:	2800      	cmp	r0, #0
 8086884:	d0e2      	beq.n	808684c <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8086886:	b2e4      	uxtb	r4, r4
 8086888:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 808688c:	e7e7      	b.n	808685e <_ZN9FatVolume6fatGetEmPm+0x32>

0808688e <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808688e:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086890:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086892:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8086894:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086896:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8086898:	d110      	bne.n	80868bc <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 808689a:	6981      	ldr	r1, [r0, #24]
 808689c:	2203      	movs	r2, #3
 808689e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80868a2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80868a6:	f7ff ff98 	bl	80867da <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80868aa:	b908      	cbnz	r0, 80868b0 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80868ac:	2000      	movs	r0, #0
}
 80868ae:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 80868b0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80868b4:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 80868b8:	2001      	movs	r0, #1
 80868ba:	e7f8      	b.n	80868ae <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 80868bc:	2b10      	cmp	r3, #16
 80868be:	d1f5      	bne.n	80868ac <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 80868c0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80868c4:	6981      	ldr	r1, [r0, #24]
 80868c6:	2203      	movs	r2, #3
 80868c8:	4419      	add	r1, r3
 80868ca:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80868ce:	f7ff ff84 	bl	80867da <_ZN8FatCache4readEmh>
    if (!pc) {
 80868d2:	2800      	cmp	r0, #0
 80868d4:	d0ea      	beq.n	80868ac <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 80868d6:	b2e4      	uxtb	r4, r4
 80868d8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 80868dc:	e7ec      	b.n	80868b8 <_ZN9FatVolume6fatPutEmm+0x2a>

080868de <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80868de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80868e2:	4605      	mov	r5, r0
 80868e4:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 80868e6:	460f      	mov	r7, r1
 80868e8:	b9b9      	cbnz	r1, 808691a <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 80868ea:	68c6      	ldr	r6, [r0, #12]
 80868ec:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 80868ee:	69eb      	ldr	r3, [r5, #28]
    find++;
 80868f0:	3401      	adds	r4, #1
      find = 2;
 80868f2:	42a3      	cmp	r3, r4
 80868f4:	bf38      	it	cc
 80868f6:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 80868f8:	4628      	mov	r0, r5
 80868fa:	4621      	mov	r1, r4
 80868fc:	aa01      	add	r2, sp, #4
 80868fe:	f7ff ff95 	bl	808682c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8086902:	2800      	cmp	r0, #0
 8086904:	db04      	blt.n	8086910 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8086906:	d001      	beq.n	808690c <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8086908:	9b01      	ldr	r3, [sp, #4]
 808690a:	b143      	cbz	r3, 808691e <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 808690c:	42b4      	cmp	r4, r6
 808690e:	d1ee      	bne.n	80868ee <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8086910:	2600      	movs	r6, #0
}
 8086912:	4630      	mov	r0, r6
 8086914:	b002      	add	sp, #8
 8086916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808691a:	460e      	mov	r6, r1
 808691c:	e7e6      	b.n	80868ec <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 808691e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8086922:	4621      	mov	r1, r4
 8086924:	4628      	mov	r0, r5
 8086926:	f7ff ffb2 	bl	808688e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 808692a:	4606      	mov	r6, r0
 808692c:	2800      	cmp	r0, #0
 808692e:	d0ef      	beq.n	8086910 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8086930:	b17f      	cbz	r7, 8086952 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8086932:	4622      	mov	r2, r4
 8086934:	4639      	mov	r1, r7
 8086936:	4628      	mov	r0, r5
 8086938:	f7ff ffa9 	bl	808688e <_ZN9FatVolume6fatPutEmm>
 808693c:	2800      	cmp	r0, #0
 808693e:	d0e7      	beq.n	8086910 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8086940:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8086942:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8086944:	bfa4      	itt	ge
 8086946:	f103 33ff 	addge.w	r3, r3, #4294967295
 808694a:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 808694c:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8086950:	e7df      	b.n	8086912 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8086952:	60ec      	str	r4, [r5, #12]
 8086954:	e7f4      	b.n	8086940 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08086956 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8086956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086958:	4604      	mov	r4, r0
 808695a:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 808695c:	4629      	mov	r1, r5
 808695e:	4620      	mov	r0, r4
 8086960:	aa01      	add	r2, sp, #4
 8086962:	f7ff ff63 	bl	808682c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8086966:	1e06      	subs	r6, r0, #0
 8086968:	db13      	blt.n	8086992 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808696a:	2200      	movs	r2, #0
 808696c:	4629      	mov	r1, r5
 808696e:	4620      	mov	r0, r4
 8086970:	f7ff ff8d 	bl	808688e <_ZN9FatVolume6fatPutEmm>
 8086974:	b168      	cbz	r0, 8086992 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8086976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086978:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808697a:	bfa4      	itt	ge
 808697c:	3301      	addge	r3, #1
 808697e:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8086980:	68e3      	ldr	r3, [r4, #12]
 8086982:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8086984:	bf88      	it	hi
 8086986:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8086988:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 808698a:	2e00      	cmp	r6, #0
 808698c:	d1e6      	bne.n	808695c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 808698e:	b002      	add	sp, #8
 8086990:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8086992:	2000      	movs	r0, #0
 8086994:	e7fb      	b.n	808698e <_ZN9FatVolume9freeChainEm+0x38>

08086996 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8086996:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8086998:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 808699a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 808699c:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 808699e:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 80869a2:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80869a4:	460d      	mov	r5, r1
  m_fatType = 0;
 80869a6:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 80869a8:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 80869ac:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 80869ae:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80869b2:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 80869b4:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 80869b8:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 80869bc:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 80869c0:	b1b9      	cbz	r1, 80869f2 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 80869c2:	2904      	cmp	r1, #4
 80869c4:	d901      	bls.n	80869ca <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80869c6:	2000      	movs	r0, #0
}
 80869c8:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 80869ca:	4611      	mov	r1, r2
 80869cc:	4630      	mov	r0, r6
 80869ce:	f7ff ff04 	bl	80867da <_ZN8FatCache4readEmh>
    if (!pc) {
 80869d2:	2800      	cmp	r0, #0
 80869d4:	d0f7      	beq.n	80869c6 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80869d6:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80869da:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80869de:	065b      	lsls	r3, r3, #25
 80869e0:	d1f1      	bne.n	80869c6 <_ZN9FatVolume4initEh+0x30>
 80869e2:	f105 011b 	add.w	r1, r5, #27
 80869e6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80869ea:	f8d0 5006 	ldr.w	r5, [r0, #6]
 80869ee:	2d00      	cmp	r5, #0
 80869f0:	d0e9      	beq.n	80869c6 <_ZN9FatVolume4initEh+0x30>
 80869f2:	2200      	movs	r2, #0
 80869f4:	4629      	mov	r1, r5
 80869f6:	4630      	mov	r0, r6
 80869f8:	f7ff feef 	bl	80867da <_ZN8FatCache4readEmh>
  if (!pc) {
 80869fc:	2800      	cmp	r0, #0
 80869fe:	d0e2      	beq.n	80869c6 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8086a00:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8086a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086a08:	d1dd      	bne.n	80869c6 <_ZN9FatVolume4initEh+0x30>
 8086a0a:	7c03      	ldrb	r3, [r0, #16]
 8086a0c:	2b02      	cmp	r3, #2
 8086a0e:	d1da      	bne.n	80869c6 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8086a10:	89c3      	ldrh	r3, [r0, #14]
 8086a12:	2b00      	cmp	r3, #0
 8086a14:	d0d7      	beq.n	80869c6 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086a16:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8086a18:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8086a1a:	1e4b      	subs	r3, r1, #1
 8086a1c:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8086a1e:	2300      	movs	r3, #0
 8086a20:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086a22:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086a24:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086a26:	4299      	cmp	r1, r3
 8086a28:	d007      	beq.n	8086a3a <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8086a2a:	3e01      	subs	r6, #1
 8086a2c:	d0cb      	beq.n	80869c6 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086a2e:	79a2      	ldrb	r2, [r4, #6]
 8086a30:	005b      	lsls	r3, r3, #1
 8086a32:	3201      	adds	r2, #1
 8086a34:	b2db      	uxtb	r3, r3
 8086a36:	71a2      	strb	r2, [r4, #6]
 8086a38:	e7f5      	b.n	8086a26 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8086a3a:	8ac1      	ldrh	r1, [r0, #22]
 8086a3c:	b901      	cbnz	r1, 8086a40 <_ZN9FatVolume4initEh+0xaa>
 8086a3e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8086a40:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8086a42:	89c3      	ldrh	r3, [r0, #14]
 8086a44:	442b      	add	r3, r5
 8086a46:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086a48:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8086a4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8086a50:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086a52:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8086a54:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8086a58:	0149      	lsls	r1, r1, #5
 8086a5a:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8086a5e:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8086a62:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8086a64:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8086a68:	b902      	cbnz	r2, 8086a6c <_ZN9FatVolume4initEh+0xd6>
 8086a6a:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086a6c:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8086a6e:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086a70:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8086a72:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8086a74:	1c4b      	adds	r3, r1, #1
 8086a76:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8086a78:	f04f 33ff 	mov.w	r3, #4294967295
 8086a7c:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8086a7e:	f640 73f4 	movw	r3, #4084	; 0xff4
 8086a82:	4299      	cmp	r1, r3
 8086a84:	d802      	bhi.n	8086a8c <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8086a86:	230c      	movs	r3, #12
 8086a88:	71e3      	strb	r3, [r4, #7]
 8086a8a:	e79c      	b.n	80869c6 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8086a8c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8086a90:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8086a92:	bf89      	itett	hi
 8086a94:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8086a96:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8086a98:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8086a9a:	2320      	movhi	r3, #32
  return true;
 8086a9c:	2001      	movs	r0, #1
    m_fatType = 32;
 8086a9e:	71e3      	strb	r3, [r4, #7]
 8086aa0:	e792      	b.n	80869c8 <_ZN9FatVolume4initEh+0x32>

08086aa2 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8086aa2:	f002 b945 	b.w	8088d30 <delay>
	...

08086aa8 <__tcf_0>:
        if (handle_) {
 8086aa8:	4b02      	ldr	r3, [pc, #8]	; (8086ab4 <__tcf_0+0xc>)
 8086aaa:	6898      	ldr	r0, [r3, #8]
 8086aac:	b108      	cbz	r0, 8086ab2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8086aae:	f000 be25 	b.w	80876fc <os_mutex_recursive_destroy>
 8086ab2:	4770      	bx	lr
 8086ab4:	20000a5c 	.word	0x20000a5c

08086ab8 <_ZL9i2c_writehhPht>:
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086aba:	4607      	mov	r7, r0
 8086abc:	4614      	mov	r4, r2
 8086abe:	461d      	mov	r5, r3
 8086ac0:	460e      	mov	r6, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8086ac2:	f003 f989 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086ac6:	4639      	mov	r1, r7
 8086ac8:	f002 ffa6 	bl	8089a18 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8086acc:	f003 f984 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086ad0:	6803      	ldr	r3, [r0, #0]
 8086ad2:	4631      	mov	r1, r6
 8086ad4:	689b      	ldr	r3, [r3, #8]
 8086ad6:	4798      	blx	r3
 8086ad8:	4425      	add	r5, r4
  while (len--) {
 8086ada:	42ac      	cmp	r4, r5
 8086adc:	d007      	beq.n	8086aee <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8086ade:	f003 f97b 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086ae2:	6803      	ldr	r3, [r0, #0]
 8086ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8086ae8:	689b      	ldr	r3, [r3, #8]
 8086aea:	4798      	blx	r3
  while (len--) {
 8086aec:	e7f5      	b.n	8086ada <_ZL9i2c_writehhPht+0x22>
  Wire.endTransmission();
 8086aee:	f003 f973 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086af2:	f002 ffb4 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
}
 8086af6:	2000      	movs	r0, #0
 8086af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086afa <_ZL8i2c_readhhPht>:
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086afc:	4606      	mov	r6, r0
 8086afe:	4615      	mov	r5, r2
 8086b00:	461c      	mov	r4, r3
 8086b02:	460f      	mov	r7, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8086b04:	f003 f968 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086b08:	4631      	mov	r1, r6
 8086b0a:	f002 ff85 	bl	8089a18 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8086b0e:	f003 f963 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086b12:	6803      	ldr	r3, [r0, #0]
 8086b14:	4639      	mov	r1, r7
 8086b16:	689b      	ldr	r3, [r3, #8]
 8086b18:	4798      	blx	r3
  Wire.endTransmission();
 8086b1a:	f003 f95d 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086b1e:	f002 ff9e 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8086b22:	f003 f959 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086b26:	4631      	mov	r1, r6
 8086b28:	b2e2      	uxtb	r2, r4
 8086b2a:	f002 ff72 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
 8086b2e:	4284      	cmp	r4, r0
 8086b30:	d10a      	bne.n	8086b48 <_ZL8i2c_readhhPht+0x4e>
 8086b32:	442c      	add	r4, r5
  while (len--) {
 8086b34:	42a5      	cmp	r5, r4
 8086b36:	d009      	beq.n	8086b4c <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
 8086b38:	f003 f94e 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086b3c:	6803      	ldr	r3, [r0, #0]
 8086b3e:	695b      	ldr	r3, [r3, #20]
 8086b40:	4798      	blx	r3
 8086b42:	f805 0b01 	strb.w	r0, [r5], #1
  while (len--) {
 8086b46:	e7f5      	b.n	8086b34 <_ZL8i2c_readhhPht+0x3a>
    return 1;
 8086b48:	2001      	movs	r0, #1
}
 8086b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0;
 8086b4c:	2000      	movs	r0, #0
 8086b4e:	e7fc      	b.n	8086b4a <_ZL8i2c_readhhPht+0x50>

08086b50 <_ZN15Adafruit_BME680C1Ea>:
  _BME680_SoftwareSPI_MOSI = -1;
 8086b50:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8086b52:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8086b54:	4904      	ldr	r1, [pc, #16]	; (8086b68 <_ZN15Adafruit_BME680C1Ea+0x18>)
 8086b56:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8086b58:	4904      	ldr	r1, [pc, #16]	; (8086b6c <_ZN15Adafruit_BME680C1Ea+0x1c>)
 8086b5a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8086b5c:	4904      	ldr	r1, [pc, #16]	; (8086b70 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8086b5e:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8086b60:	2200      	movs	r2, #0
 8086b62:	6102      	str	r2, [r0, #16]
 8086b64:	7502      	strb	r2, [r0, #20]
}
 8086b66:	4770      	bx	lr
 8086b68:	20000a85 	.word	0x20000a85
 8086b6c:	20000a84 	.word	0x20000a84
 8086b70:	20000a86 	.word	0x20000a86

08086b74 <_ZN15Adafruit_BME68014performReadingEv>:
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086b74:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 8086b76:	b530      	push	{r4, r5, lr}
 8086b78:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086b7a:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  if (_humEnabled)
 8086b7e:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8086b80:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8086b82:	b087      	sub	sp, #28
  if (_humEnabled)
 8086b84:	b10b      	cbz	r3, 8086b8a <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8086b86:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8086b8a:	7ce3      	ldrb	r3, [r4, #19]
 8086b8c:	b10b      	cbz	r3, 8086b92 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8086b8e:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8086b92:	7c23      	ldrb	r3, [r4, #16]
 8086b94:	b10b      	cbz	r3, 8086b9a <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8086b96:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8086b9a:	7d23      	ldrb	r3, [r4, #20]
 8086b9c:	b10b      	cbz	r3, 8086ba2 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8086b9e:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8086ba2:	f104 0520 	add.w	r5, r4, #32
 8086ba6:	4629      	mov	r1, r5
 8086ba8:	f7f9 fc98 	bl	80804dc <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8086bac:	b118      	cbz	r0, 8086bb6 <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 8086bae:	2500      	movs	r5, #0
}
 8086bb0:	4628      	mov	r0, r5
 8086bb2:	b007      	add	sp, #28
 8086bb4:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8086bb6:	4628      	mov	r0, r5
 8086bb8:	f7f9 fc51 	bl	808045e <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8086bbc:	2800      	cmp	r0, #0
 8086bbe:	d1f6      	bne.n	8086bae <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8086bc0:	4629      	mov	r1, r5
 8086bc2:	f10d 0002 	add.w	r0, sp, #2
 8086bc6:	f7f9 fdfd 	bl	80807c4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8086bca:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8086bce:	0040      	lsls	r0, r0, #1
 8086bd0:	f002 f8ae 	bl	8088d30 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8086bd4:	4629      	mov	r1, r5
 8086bd6:	a801      	add	r0, sp, #4
 8086bd8:	f7f9 fe28 	bl	808082c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8086bdc:	2800      	cmp	r0, #0
 8086bde:	d1e6      	bne.n	8086bae <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8086be0:	7c63      	ldrb	r3, [r4, #17]
 8086be2:	b33b      	cbz	r3, 8086c34 <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8086be4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8086be8:	f003 fa9c 	bl	808a124 <__aeabi_i2d>
 8086bec:	2200      	movs	r2, #0
 8086bee:	4b17      	ldr	r3, [pc, #92]	; (8086c4c <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 8086bf0:	f003 fc2c 	bl	808a44c <__aeabi_ddiv>
 8086bf4:	f003 fdf8 	bl	808a7e8 <__aeabi_d2f>
  if (_humEnabled) {
 8086bf8:	7ca3      	ldrb	r3, [r4, #18]
 8086bfa:	6020      	str	r0, [r4, #0]
 8086bfc:	b1e3      	cbz	r3, 8086c38 <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 8086bfe:	9804      	ldr	r0, [sp, #16]
 8086c00:	f003 fa80 	bl	808a104 <__aeabi_ui2d>
 8086c04:	2200      	movs	r2, #0
 8086c06:	4b12      	ldr	r3, [pc, #72]	; (8086c50 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8086c08:	f003 fc20 	bl	808a44c <__aeabi_ddiv>
 8086c0c:	f003 fdec 	bl	808a7e8 <__aeabi_d2f>
  if (_presEnabled) {
 8086c10:	7ce3      	ldrb	r3, [r4, #19]
 8086c12:	60a0      	str	r0, [r4, #8]
 8086c14:	b193      	cbz	r3, 8086c3c <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 8086c16:	9803      	ldr	r0, [sp, #12]
 8086c18:	f003 feec 	bl	808a9f4 <__aeabi_ui2f>
  if (_gasEnabled) {
 8086c1c:	7d25      	ldrb	r5, [r4, #20]
 8086c1e:	6060      	str	r0, [r4, #4]
 8086c20:	b18d      	cbz	r5, 8086c46 <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8086c22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8086c26:	06db      	lsls	r3, r3, #27
 8086c28:	d50a      	bpl.n	8086c40 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 8086c2a:	9805      	ldr	r0, [sp, #20]
 8086c2c:	f003 fee2 	bl	808a9f4 <__aeabi_ui2f>
 8086c30:	60e0      	str	r0, [r4, #12]
 8086c32:	e7bd      	b.n	8086bb0 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 8086c34:	4807      	ldr	r0, [pc, #28]	; (8086c54 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086c36:	e7df      	b.n	8086bf8 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 8086c38:	4806      	ldr	r0, [pc, #24]	; (8086c54 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086c3a:	e7e9      	b.n	8086c10 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 8086c3c:	4805      	ldr	r0, [pc, #20]	; (8086c54 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086c3e:	e7ed      	b.n	8086c1c <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 8086c40:	2300      	movs	r3, #0
 8086c42:	60e3      	str	r3, [r4, #12]
 8086c44:	e7b4      	b.n	8086bb0 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 8086c46:	2501      	movs	r5, #1
 8086c48:	e7b2      	b.n	8086bb0 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 8086c4a:	bf00      	nop
 8086c4c:	40590000 	.word	0x40590000
 8086c50:	408f4000 	.word	0x408f4000
 8086c54:	7fc00000 	.word	0x7fc00000

08086c58 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8086c58:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8086c5c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 8086c60:	b101      	cbz	r1, 8086c64 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 8086c62:	b92a      	cbnz	r2, 8086c70 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x18>
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 8086c64:	2300      	movs	r3, #0
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8086c66:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 8086c6a:	7503      	strb	r3, [r0, #20]
}
 8086c6c:	2001      	movs	r0, #1
 8086c6e:	4770      	bx	lr
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8086c70:	2301      	movs	r3, #1
 8086c72:	e7f8      	b.n	8086c66 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xe>

08086c74 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8086c74:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 8086c76:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8086c78:	d807      	bhi.n	8086c8a <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_temp = oversample;
 8086c7a:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if (oversample == BME680_OS_NONE)
 8086c7e:	2001      	movs	r0, #1
 8086c80:	b909      	cbnz	r1, 8086c86 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 8086c82:	7459      	strb	r1, [r3, #17]
 8086c84:	4770      	bx	lr
    _tempEnabled = true;
 8086c86:	7458      	strb	r0, [r3, #17]
 8086c88:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8086c8a:	2000      	movs	r0, #0
}
 8086c8c:	4770      	bx	lr

08086c8e <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8086c8e:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 8086c90:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8086c92:	d807      	bhi.n	8086ca4 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>
  gas_sensor.tph_sett.os_hum = oversample;
 8086c94:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  if (oversample == BME680_OS_NONE)
 8086c98:	2001      	movs	r0, #1
 8086c9a:	b909      	cbnz	r1, 8086ca0 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8086c9c:	7499      	strb	r1, [r3, #18]
 8086c9e:	4770      	bx	lr
    _humEnabled = true;
 8086ca0:	7498      	strb	r0, [r3, #18]
 8086ca2:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8086ca4:	2000      	movs	r0, #0
}
 8086ca6:	4770      	bx	lr

08086ca8 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8086ca8:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 8086caa:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8086cac:	d807      	bhi.n	8086cbe <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_pres = oversample;
 8086cae:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if (oversample == BME680_OS_NONE)
 8086cb2:	2001      	movs	r0, #1
 8086cb4:	b909      	cbnz	r1, 8086cba <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8086cb6:	74d9      	strb	r1, [r3, #19]
 8086cb8:	4770      	bx	lr
    _presEnabled = true;
 8086cba:	74d8      	strb	r0, [r3, #19]
 8086cbc:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8086cbe:	2000      	movs	r0, #0
}
 8086cc0:	4770      	bx	lr

08086cc2 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8086cc2:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8086cc4:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8086cc6:	d807      	bhi.n	8086cd8 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>
  gas_sensor.tph_sett.filter = filtersize;
 8086cc8:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  if (filtersize == BME680_FILTER_SIZE_0)
 8086ccc:	2001      	movs	r0, #1
 8086cce:	b909      	cbnz	r1, 8086cd4 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8086cd0:	7419      	strb	r1, [r3, #16]
 8086cd2:	4770      	bx	lr
    _filterEnabled = true;
 8086cd4:	7418      	strb	r0, [r3, #16]
 8086cd6:	4770      	bx	lr
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8086cd8:	2000      	movs	r0, #0
}
 8086cda:	4770      	bx	lr

08086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 8086cdc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 8086cde:	4d0b      	ldr	r5, [pc, #44]	; (8086d0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 8086ce0:	7829      	ldrb	r1, [r5, #0]
 8086ce2:	f3bf 8f5b 	dmb	ish
 8086ce6:	f011 0401 	ands.w	r4, r1, #1
 8086cea:	d10d      	bne.n	8086d08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 8086cec:	4628      	mov	r0, r5
 8086cee:	f7f9 f9ea 	bl	80800c6 <__cxa_guard_acquire>
 8086cf2:	b148      	cbz	r0, 8086d08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>
 8086cf4:	4621      	mov	r1, r4
 8086cf6:	4806      	ldr	r0, [pc, #24]	; (8086d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 8086cf8:	f001 f93e 	bl	8087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8086cfc:	4628      	mov	r0, r5
 8086cfe:	f7f9 f9e7 	bl	80800d0 <__cxa_guard_release>
 8086d02:	4804      	ldr	r0, [pc, #16]	; (8086d14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8086d04:	f004 fb06 	bl	808b314 <atexit>
        return instance;
    }
 8086d08:	4801      	ldr	r0, [pc, #4]	; (8086d10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 8086d0a:	bd38      	pop	{r3, r4, r5, pc}
 8086d0c:	20000a58 	.word	0x20000a58
 8086d10:	20000a5c 	.word	0x20000a5c
 8086d14:	08086aa9 	.word	0x08086aa9

08086d18 <_ZL12spi_transferh>:
static uint8_t spi_transfer(uint8_t x) {
 8086d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8086d1c:	4f1b      	ldr	r7, [pc, #108]	; (8086d8c <_ZL12spi_transferh+0x74>)
static uint8_t spi_transfer(uint8_t x) {
 8086d1e:	4606      	mov	r6, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8086d20:	f997 3000 	ldrsb.w	r3, [r7]
 8086d24:	3301      	adds	r3, #1
 8086d26:	d106      	bne.n	8086d36 <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 8086d28:	f7ff ffd8 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086d2c:	4631      	mov	r1, r6
}
 8086d2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086d32:	f001 b9d3 	b.w	80880dc <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 8086d36:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 8086d38:	2507      	movs	r5, #7
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8086d3a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8086d90 <_ZL12spi_transferh+0x78>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8086d3e:	f8df a054 	ldr.w	sl, [pc, #84]	; 8086d94 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8086d42:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8086d46:	f997 0000 	ldrsb.w	r0, [r7]
 8086d4a:	2100      	movs	r1, #0
 8086d4c:	b280      	uxth	r0, r0
 8086d4e:	f002 ff64 	bl	8089c1a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8086d52:	f999 0000 	ldrsb.w	r0, [r9]
 8086d56:	fa08 f105 	lsl.w	r1, r8, r5
 8086d5a:	4031      	ands	r1, r6
 8086d5c:	b280      	uxth	r0, r0
 8086d5e:	f002 ff5c 	bl	8089c1a <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 8086d62:	f997 0000 	ldrsb.w	r0, [r7]
 8086d66:	4641      	mov	r1, r8
 8086d68:	b280      	uxth	r0, r0
 8086d6a:	f002 ff56 	bl	8089c1a <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8086d6e:	f99a 0000 	ldrsb.w	r0, [sl]
    reply <<= 1;
 8086d72:	0064      	lsls	r4, r4, #1
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8086d74:	b280      	uxth	r0, r0
    reply <<= 1;
 8086d76:	b2e4      	uxtb	r4, r4
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8086d78:	f002 ff68 	bl	8089c4c <digitalRead>
 8086d7c:	b108      	cbz	r0, 8086d82 <_ZL12spi_transferh+0x6a>
      reply |= 1;
 8086d7e:	ea44 0408 	orr.w	r4, r4, r8
  for (int i=7; i>=0; i--) {
 8086d82:	3d01      	subs	r5, #1
 8086d84:	d2dd      	bcs.n	8086d42 <_ZL12spi_transferh+0x2a>
}
 8086d86:	4620      	mov	r0, r4
 8086d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086d8c:	20000a86 	.word	0x20000a86
 8086d90:	20000a85 	.word	0x20000a85
 8086d94:	20000a84 	.word	0x20000a84

08086d98 <_ZL8spi_readhhPht>:
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086d9a:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8086d9c:	2100      	movs	r1, #0
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086d9e:	461d      	mov	r5, r3
 8086da0:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 8086da2:	4606      	mov	r6, r0
 8086da4:	f002 ff39 	bl	8089c1a <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 8086da8:	4b14      	ldr	r3, [pc, #80]	; (8086dfc <_ZL8spi_readhhPht+0x64>)
 8086daa:	f993 3000 	ldrsb.w	r3, [r3]
 8086dae:	3301      	adds	r3, #1
 8086db0:	d112      	bne.n	8086dd8 <_ZL8spi_readhhPht+0x40>
        instance().begin();
 8086db2:	f7ff ff93 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086db6:	f001 f8ee 	bl	8087f96 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
 8086dba:	f7ff ff8f 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086dbe:	2140      	movs	r1, #64	; 0x40
 8086dc0:	f001 f968 	bl	8088094 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 8086dc4:	f7ff ff8a 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086dc8:	2101      	movs	r1, #1
 8086dca:	f001 f902 	bl	8087fd2 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 8086dce:	f7ff ff85 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086dd2:	2100      	movs	r1, #0
 8086dd4:	f001 f90c 	bl	8087ff0 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 8086dd8:	4638      	mov	r0, r7
 8086dda:	f7ff ff9d 	bl	8086d18 <_ZL12spi_transferh>
 8086dde:	4425      	add	r5, r4
  while (len--) {
 8086de0:	42ac      	cmp	r4, r5
 8086de2:	d005      	beq.n	8086df0 <_ZL8spi_readhhPht+0x58>
    *reg_data = spi_transfer(0x00);
 8086de4:	2000      	movs	r0, #0
 8086de6:	f7ff ff97 	bl	8086d18 <_ZL12spi_transferh>
 8086dea:	f804 0b01 	strb.w	r0, [r4], #1
  while (len--) {
 8086dee:	e7f7      	b.n	8086de0 <_ZL8spi_readhhPht+0x48>
  digitalWrite(cspin, HIGH);
 8086df0:	4630      	mov	r0, r6
 8086df2:	2101      	movs	r1, #1
 8086df4:	f002 ff11 	bl	8089c1a <digitalWrite>
}
 8086df8:	2000      	movs	r0, #0
 8086dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086dfc:	20000a86 	.word	0x20000a86

08086e00 <_ZN15Adafruit_BME6805beginEh>:
bool Adafruit_BME680::begin(uint8_t addr) {
 8086e00:	b538      	push	{r3, r4, r5, lr}
 8086e02:	4604      	mov	r4, r0
  _i2caddr = addr;
 8086e04:	7541      	strb	r1, [r0, #21]
  if (_cs == -1) {
 8086e06:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BME680::begin(uint8_t addr) {
 8086e0a:	460d      	mov	r5, r1
  if (_cs == -1) {
 8086e0c:	1c42      	adds	r2, r0, #1
 8086e0e:	d122      	bne.n	8086e56 <_ZN15Adafruit_BME6805beginEh+0x56>
    Wire.begin();
 8086e10:	f002 ffe2 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8086e14:	f002 fdce 	bl	80899b4 <_ZN7TwoWire5beginEv>
    gas_sensor.intf = BME680_I2C_INTF;
 8086e18:	2301      	movs	r3, #1
 8086e1a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8086e1e:	4b27      	ldr	r3, [pc, #156]	; (8086ebc <_ZN15Adafruit_BME6805beginEh+0xbc>)
    gas_sensor.dev_id = addr;
 8086e20:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.read = &i2c_read;
 8086e24:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8086e26:	4b26      	ldr	r3, [pc, #152]	; (8086ec0 <_ZN15Adafruit_BME6805beginEh+0xc0>)
    gas_sensor.write = &spi_write;
 8086e28:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.delay_ms = delay_msec;
 8086e2a:	4b26      	ldr	r3, [pc, #152]	; (8086ec4 <_ZN15Adafruit_BME6805beginEh+0xc4>)
  rslt = bme680_init(&gas_sensor);
 8086e2c:	f104 0020 	add.w	r0, r4, #32
  gas_sensor.delay_ms = delay_msec;
 8086e30:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme680_init(&gas_sensor);
 8086e32:	f7f9 fa56 	bl	80802e2 <bme680_init>
  if (rslt != BME680_OK)
 8086e36:	2800      	cmp	r0, #0
 8086e38:	d13d      	bne.n	8086eb6 <_ZN15Adafruit_BME6805beginEh+0xb6>
  gas_sensor.tph_sett.os_hum = oversample;
 8086e3a:	4b23      	ldr	r3, [pc, #140]	; (8086ec8 <_ZN15Adafruit_BME6805beginEh+0xc8>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8086e3c:	2001      	movs	r0, #1
  gas_sensor.tph_sett.os_hum = oversample;
 8086e3e:	65a3      	str	r3, [r4, #88]	; 0x58
    _filterEnabled = true;
 8086e40:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8086e44:	6123      	str	r3, [r4, #16]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8086e46:	4b21      	ldr	r3, [pc, #132]	; (8086ecc <_ZN15Adafruit_BME6805beginEh+0xcc>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8086e48:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 8086e4c:	7520      	strb	r0, [r4, #20]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8086e4e:	6623      	str	r3, [r4, #96]	; 0x60
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086e50:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
}
 8086e54:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, HIGH);
 8086e56:	2101      	movs	r1, #1
 8086e58:	b280      	uxth	r0, r0
 8086e5a:	f002 fede 	bl	8089c1a <digitalWrite>
    pinMode(_cs, OUTPUT);
 8086e5e:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8086e62:	2101      	movs	r1, #1
 8086e64:	b280      	uxth	r0, r0
 8086e66:	f002 fec7 	bl	8089bf8 <pinMode>
    if (_BME680_SoftwareSPI_SCK == -1) {
 8086e6a:	4b19      	ldr	r3, [pc, #100]	; (8086ed0 <_ZN15Adafruit_BME6805beginEh+0xd0>)
 8086e6c:	f993 0000 	ldrsb.w	r0, [r3]
 8086e70:	1c43      	adds	r3, r0, #1
 8086e72:	d10d      	bne.n	8086e90 <_ZN15Adafruit_BME6805beginEh+0x90>
        instance().begin();
 8086e74:	f7ff ff32 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086e78:	f001 f88d 	bl	8087f96 <_ZN8SPIClass5beginEv>
    gas_sensor.dev_id = _cs;
 8086e7c:	7f23      	ldrb	r3, [r4, #28]
 8086e7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 8086e82:	2300      	movs	r3, #0
 8086e84:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 8086e88:	4b12      	ldr	r3, [pc, #72]	; (8086ed4 <_ZN15Adafruit_BME6805beginEh+0xd4>)
 8086e8a:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8086e8c:	4b12      	ldr	r3, [pc, #72]	; (8086ed8 <_ZN15Adafruit_BME6805beginEh+0xd8>)
 8086e8e:	e7cb      	b.n	8086e28 <_ZN15Adafruit_BME6805beginEh+0x28>
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 8086e90:	2101      	movs	r1, #1
 8086e92:	b280      	uxth	r0, r0
 8086e94:	f002 feb0 	bl	8089bf8 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 8086e98:	4b10      	ldr	r3, [pc, #64]	; (8086edc <_ZN15Adafruit_BME6805beginEh+0xdc>)
 8086e9a:	2101      	movs	r1, #1
 8086e9c:	f993 0000 	ldrsb.w	r0, [r3]
 8086ea0:	b280      	uxth	r0, r0
 8086ea2:	f002 fea9 	bl	8089bf8 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8086ea6:	4b0e      	ldr	r3, [pc, #56]	; (8086ee0 <_ZN15Adafruit_BME6805beginEh+0xe0>)
 8086ea8:	2100      	movs	r1, #0
 8086eaa:	f993 0000 	ldrsb.w	r0, [r3]
 8086eae:	b280      	uxth	r0, r0
 8086eb0:	f002 fea2 	bl	8089bf8 <pinMode>
 8086eb4:	e7e2      	b.n	8086e7c <_ZN15Adafruit_BME6805beginEh+0x7c>
    return false;
 8086eb6:	2000      	movs	r0, #0
 8086eb8:	e7cc      	b.n	8086e54 <_ZN15Adafruit_BME6805beginEh+0x54>
 8086eba:	bf00      	nop
 8086ebc:	08086afb 	.word	0x08086afb
 8086ec0:	08086ab9 	.word	0x08086ab9
 8086ec4:	08086aa3 	.word	0x08086aa3
 8086ec8:	02030402 	.word	0x02030402
 8086ecc:	00960140 	.word	0x00960140
 8086ed0:	20000a86 	.word	0x20000a86
 8086ed4:	08086d99 	.word	0x08086d99
 8086ed8:	08086ee5 	.word	0x08086ee5
 8086edc:	20000a85 	.word	0x20000a85
 8086ee0:	20000a84 	.word	0x20000a84

08086ee4 <_ZL9spi_writehhPht>:
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086ee6:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8086ee8:	2100      	movs	r1, #0
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8086eea:	461d      	mov	r5, r3
 8086eec:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 8086eee:	4606      	mov	r6, r0
 8086ef0:	f002 fe93 	bl	8089c1a <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 8086ef4:	4b14      	ldr	r3, [pc, #80]	; (8086f48 <_ZL9spi_writehhPht+0x64>)
 8086ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8086efa:	3301      	adds	r3, #1
 8086efc:	d112      	bne.n	8086f24 <_ZL9spi_writehhPht+0x40>
 8086efe:	f7ff feed 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086f02:	f001 f848 	bl	8087f96 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
 8086f06:	f7ff fee9 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086f0a:	2140      	movs	r1, #64	; 0x40
 8086f0c:	f001 f8c2 	bl	8088094 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 8086f10:	f7ff fee4 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086f14:	2101      	movs	r1, #1
 8086f16:	f001 f85c 	bl	8087fd2 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 8086f1a:	f7ff fedf 	bl	8086cdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8086f1e:	2100      	movs	r1, #0
 8086f20:	f001 f866 	bl	8087ff0 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 8086f24:	4638      	mov	r0, r7
 8086f26:	f7ff fef7 	bl	8086d18 <_ZL12spi_transferh>
 8086f2a:	4425      	add	r5, r4
  while (len--) {
 8086f2c:	42ac      	cmp	r4, r5
 8086f2e:	d004      	beq.n	8086f3a <_ZL9spi_writehhPht+0x56>
    spi_transfer(*reg_data);
 8086f30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8086f34:	f7ff fef0 	bl	8086d18 <_ZL12spi_transferh>
  while (len--) {
 8086f38:	e7f8      	b.n	8086f2c <_ZL9spi_writehhPht+0x48>
  digitalWrite(cspin, HIGH);
 8086f3a:	4630      	mov	r0, r6
 8086f3c:	2101      	movs	r1, #1
 8086f3e:	f002 fe6c 	bl	8089c1a <digitalWrite>
}
 8086f42:	2000      	movs	r0, #0
 8086f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086f46:	bf00      	nop
 8086f48:	20000a86 	.word	0x20000a86

08086f4c <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086f4c:	b510      	push	{r4, lr}
 8086f4e:	4604      	mov	r4, r0
 8086f50:	4b05      	ldr	r3, [pc, #20]	; (8086f68 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8086f52:	f840 3b2c 	str.w	r3, [r0], #44
 8086f56:	f001 f995 	bl	8088284 <_ZN6StringD1Ev>
 8086f5a:	f104 000c 	add.w	r0, r4, #12
 8086f5e:	f001 f991 	bl	8088284 <_ZN6StringD1Ev>

}
 8086f62:	4620      	mov	r0, r4
 8086f64:	bd10      	pop	{r4, pc}
 8086f66:	bf00      	nop
 8086f68:	0808f0f0 	.word	0x0808f0f0

08086f6c <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086f6c:	b510      	push	{r4, lr}
 8086f6e:	4604      	mov	r4, r0
}
 8086f70:	f7ff ffec 	bl	8086f4c <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8086f74:	4620      	mov	r0, r4
 8086f76:	2144      	movs	r1, #68	; 0x44
 8086f78:	f7f9 f8a3 	bl	80800c2 <_ZdlPvj>
 8086f7c:	4620      	mov	r0, r4
 8086f7e:	bd10      	pop	{r4, pc}

08086f80 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086f80:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8086f82:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8086f84:	4604      	mov	r4, r0
      if (_M_manager)
 8086f86:	b113      	cbz	r3, 8086f8e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086f88:	2203      	movs	r2, #3
 8086f8a:	4601      	mov	r1, r0
 8086f8c:	4798      	blx	r3
    }
 8086f8e:	4620      	mov	r0, r4
 8086f90:	bd10      	pop	{r4, pc}
	...

08086f94 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086f94:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086f96:	4b0f      	ldr	r3, [pc, #60]	; (8086fd4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8086f98:	2500      	movs	r5, #0
 8086f9a:	6003      	str	r3, [r0, #0]
 8086f9c:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086fa0:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086fa2:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8086fa6:	490c      	ldr	r1, [pc, #48]	; (8086fd8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8086fa8:	300c      	adds	r0, #12
 8086faa:	f001 f9b5 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8086fae:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8086fb2:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8086fb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8086fb8:	4908      	ldr	r1, [pc, #32]	; (8086fdc <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8086fba:	6265      	str	r5, [r4, #36]	; 0x24
 8086fbc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8086fc0:	f001 f9aa 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 8086fc4:	f44f 729b 	mov.w	r2, #310	; 0x136
 8086fc8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8086fcc:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086fce:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 8086fd2:	bd38      	pop	{r3, r4, r5, pc}
 8086fd4:	0808f0f0 	.word	0x0808f0f0
 8086fd8:	0808f0d4 	.word	0x0808f0d4
 8086fdc:	0808f0e2 	.word	0x0808f0e2

08086fe0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8086fe0:	2201      	movs	r2, #1
 8086fe2:	4b01      	ldr	r3, [pc, #4]	; (8086fe8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8086fe4:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8086fe6:	4770      	bx	lr
 8086fe8:	20000a87 	.word	0x20000a87

08086fec <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8086fec:	b430      	push	{r4, r5}
 8086fee:	4605      	mov	r5, r0
 8086ff0:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086ff2:	681b      	ldr	r3, [r3, #0]
 8086ff4:	681c      	ldr	r4, [r3, #0]
 8086ff6:	4613      	mov	r3, r2
 8086ff8:	46a4      	mov	ip, r4
 8086ffa:	460a      	mov	r2, r1
 8086ffc:	4629      	mov	r1, r5
}
 8086ffe:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8087000:	4760      	bx	ip
	...

08087004 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8087008:	460c      	mov	r4, r1
 808700a:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 808700c:	494d      	ldr	r1, [pc, #308]	; (8087144 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808700e:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087010:	4616      	mov	r6, r2
 8087012:	461d      	mov	r5, r3
	String typeStr;
 8087014:	f001 f980 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8087018:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 808701c:	d064      	beq.n	80870e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 808701e:	dc1f      	bgt.n	8087060 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8087020:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8087024:	d05c      	beq.n	80870e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8087026:	dc13      	bgt.n	8087050 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8087028:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 808702c:	d056      	beq.n	80870dc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 808702e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8087032:	d055      	beq.n	80870e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8087034:	b35c      	cbz	r4, 808708e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8087036:	4622      	mov	r2, r4
 8087038:	a808      	add	r0, sp, #32
 808703a:	4943      	ldr	r1, [pc, #268]	; (8087148 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 808703c:	f001 fab6 	bl	80885ac <_ZN6String6formatEPKcz>
 8087040:	a908      	add	r1, sp, #32
 8087042:	a804      	add	r0, sp, #16
 8087044:	f001 f9b2 	bl	80883ac <_ZN6StringaSEOS_>
 8087048:	a808      	add	r0, sp, #32
 808704a:	f001 f91b 	bl	8088284 <_ZN6StringD1Ev>
		break;
 808704e:	e022      	b.n	8087096 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8087050:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8087054:	d046      	beq.n	80870e4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8087056:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 808705a:	d1ec      	bne.n	8087036 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 808705c:	493b      	ldr	r1, [pc, #236]	; (808714c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 808705e:	e017      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8087060:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8087064:	d046      	beq.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8087066:	dc0a      	bgt.n	808707e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8087068:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 808706c:	d03e      	beq.n	80870ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 808706e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8087072:	d03d      	beq.n	80870f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8087074:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8087078:	d1dd      	bne.n	8087036 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 808707a:	4935      	ldr	r1, [pc, #212]	; (8087150 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 808707c:	e008      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808707e:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8087082:	d037      	beq.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8087084:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8087088:	d1d5      	bne.n	8087036 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 808708a:	4932      	ldr	r1, [pc, #200]	; (8087154 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 808708c:	e000      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 808708e:	4932      	ldr	r1, [pc, #200]	; (8087158 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 8087090:	a804      	add	r0, sp, #16
 8087092:	f001 f993 	bl	80883bc <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8087096:	462b      	mov	r3, r5
 8087098:	9a04      	ldr	r2, [sp, #16]
 808709a:	4930      	ldr	r1, [pc, #192]	; (808715c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 808709c:	4830      	ldr	r0, [pc, #192]	; (8087160 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808709e:	f7f9 fdf6 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
	String out;
 80870a2:	4928      	ldr	r1, [pc, #160]	; (8087144 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80870a4:	a808      	add	r0, sp, #32
 80870a6:	f001 f937 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
	for(int ii = 0; ii < len; ii++) {
 80870aa:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 80870ac:	4f2d      	ldr	r7, [pc, #180]	; (8087164 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80870ae:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8087168 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>
 80870b2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 808716c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>
	for(int ii = 0; ii < len; ii++) {
 80870b6:	42ac      	cmp	r4, r5
 80870b8:	da35      	bge.n	8087126 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 80870ba:	5d31      	ldrb	r1, [r6, r4]
 80870bc:	290a      	cmp	r1, #10
 80870be:	d11b      	bne.n	80870f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 80870c0:	4649      	mov	r1, r9
 80870c2:	a808      	add	r0, sp, #32
 80870c4:	f001 f9e6 	bl	8088494 <_ZN6String6concatEPKc>
			Log.info(out);
 80870c8:	9908      	ldr	r1, [sp, #32]
 80870ca:	4825      	ldr	r0, [pc, #148]	; (8087160 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80870cc:	f7f9 fddf 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 80870d0:	491c      	ldr	r1, [pc, #112]	; (8087144 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80870d2:	a808      	add	r0, sp, #32
 80870d4:	f001 f972 	bl	80883bc <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 80870d8:	3401      	adds	r4, #1
 80870da:	e7ec      	b.n	80870b6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 80870dc:	4924      	ldr	r1, [pc, #144]	; (8087170 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 80870de:	e7d7      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 80870e0:	4924      	ldr	r1, [pc, #144]	; (8087174 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 80870e2:	e7d5      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 80870e4:	4924      	ldr	r1, [pc, #144]	; (8087178 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 80870e6:	e7d3      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 80870e8:	4924      	ldr	r1, [pc, #144]	; (808717c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 80870ea:	e7d1      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 80870ec:	4924      	ldr	r1, [pc, #144]	; (8087180 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 80870ee:	e7cf      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 80870f0:	4924      	ldr	r1, [pc, #144]	; (8087184 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>)
 80870f2:	e7cd      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 80870f4:	4924      	ldr	r1, [pc, #144]	; (8087188 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>)
 80870f6:	e7cb      	b.n	8087090 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 80870f8:	290d      	cmp	r1, #13
 80870fa:	d104      	bne.n	8087106 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 80870fc:	4641      	mov	r1, r8
			out.concat(hex);
 80870fe:	a808      	add	r0, sp, #32
 8087100:	f001 f9c8 	bl	8088494 <_ZN6String6concatEPKc>
 8087104:	e7e8      	b.n	80870d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8087106:	f1a1 0320 	sub.w	r3, r1, #32
 808710a:	2b5e      	cmp	r3, #94	; 0x5e
 808710c:	d907      	bls.n	808711e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808710e:	460b      	mov	r3, r1
 8087110:	463a      	mov	r2, r7
 8087112:	210a      	movs	r1, #10
 8087114:	a801      	add	r0, sp, #4
 8087116:	f000 fd7f 	bl	8087c18 <snprintf>
			out.concat(hex);
 808711a:	a901      	add	r1, sp, #4
 808711c:	e7ef      	b.n	80870fe <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 808711e:	a808      	add	r0, sp, #32
 8087120:	f001 f9c7 	bl	80884b2 <_ZN6String6concatEc>
 8087124:	e7d8      	b.n	80870d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8087126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087128:	b11b      	cbz	r3, 8087132 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 808712a:	9908      	ldr	r1, [sp, #32]
 808712c:	480c      	ldr	r0, [pc, #48]	; (8087160 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808712e:	f7f9 fdae 	bl	8080c8e <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8087132:	a808      	add	r0, sp, #32
 8087134:	f001 f8a6 	bl	8088284 <_ZN6StringD1Ev>
	String typeStr;
 8087138:	a804      	add	r0, sp, #16
 808713a:	f001 f8a3 	bl	8088284 <_ZN6StringD1Ev>
}
 808713e:	b00d      	add	sp, #52	; 0x34
 8087140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8087144:	0808f1d9 	.word	0x0808f1d9
 8087148:	0808f17f 	.word	0x0808f17f
 808714c:	0808f125 	.word	0x0808f125
 8087150:	0808f144 	.word	0x0808f144
 8087154:	0808f172 	.word	0x0808f172
 8087158:	0808f0f8 	.word	0x0808f0f8
 808715c:	0808f189 	.word	0x0808f189
 8087160:	20000a9c 	.word	0x20000a9c
 8087164:	0808f1b0 	.word	0x0808f1b0
 8087168:	0808f1ad 	.word	0x0808f1ad
 808716c:	0808f1aa 	.word	0x0808f1aa
 8087170:	0808f105 	.word	0x0808f105
 8087174:	0808f10d 	.word	0x0808f10d
 8087178:	0808f118 	.word	0x0808f118
 808717c:	0808f134 	.word	0x0808f134
 8087180:	0808f14e 	.word	0x0808f14e
 8087184:	0808f15c 	.word	0x0808f15c
 8087188:	0808f168 	.word	0x0808f168

0808718c <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808718c:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 808718e:	f06f 0302 	mvn.w	r3, #2
 8087192:	6043      	str	r3, [r0, #4]
 8087194:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8087196:	4604      	mov	r4, r0
 8087198:	4d07      	ldr	r5, [pc, #28]	; (80871b8 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 808719a:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808719c:	4b07      	ldr	r3, [pc, #28]	; (80871bc <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 808719e:	4629      	mov	r1, r5
 80871a0:	f840 3b0c 	str.w	r3, [r0], #12
 80871a4:	f001 f8b8 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80871a8:	4629      	mov	r1, r5
 80871aa:	f104 001c 	add.w	r0, r4, #28
 80871ae:	f001 f8b3 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80871b2:	4620      	mov	r0, r4
 80871b4:	bd38      	pop	{r3, r4, r5, pc}
 80871b6:	bf00      	nop
 80871b8:	0808f1d9 	.word	0x0808f1d9
 80871bc:	0808f1f8 	.word	0x0808f1f8

080871c0 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 80871c0:	b510      	push	{r4, lr}
 80871c2:	4604      	mov	r4, r0
 80871c4:	4b05      	ldr	r3, [pc, #20]	; (80871dc <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 80871c6:	f840 3b1c 	str.w	r3, [r0], #28
 80871ca:	f001 f85b 	bl	8088284 <_ZN6StringD1Ev>
 80871ce:	f104 000c 	add.w	r0, r4, #12
 80871d2:	f001 f857 	bl	8088284 <_ZN6StringD1Ev>
 80871d6:	4620      	mov	r0, r4
 80871d8:	bd10      	pop	{r4, pc}
 80871da:	bf00      	nop
 80871dc:	0808f1f8 	.word	0x0808f1f8

080871e0 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 80871e0:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80871e4:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 80871e6:	6043      	str	r3, [r0, #4]
 80871e8:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80871ea:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 80871ec:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80871ee:	4b04      	ldr	r3, [pc, #16]	; (8087200 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 80871f0:	4904      	ldr	r1, [pc, #16]	; (8087204 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 80871f2:	f840 3b0c 	str.w	r3, [r0], #12
 80871f6:	f001 f88f 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
 80871fa:	4620      	mov	r0, r4
 80871fc:	bd10      	pop	{r4, pc}
 80871fe:	bf00      	nop
 8087200:	0808f1ec 	.word	0x0808f1ec
 8087204:	0808f1d9 	.word	0x0808f1d9

08087208 <_ZN28CellularHelperStringResponseD1Ev>:
 8087208:	b510      	push	{r4, lr}
 808720a:	4604      	mov	r4, r0
 808720c:	4b03      	ldr	r3, [pc, #12]	; (808721c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808720e:	f840 3b0c 	str.w	r3, [r0], #12
 8087212:	f001 f837 	bl	8088284 <_ZN6StringD1Ev>
 8087216:	4620      	mov	r0, r4
 8087218:	bd10      	pop	{r4, pc}
 808721a:	bf00      	nop
 808721c:	0808f1ec 	.word	0x0808f1ec

08087220 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 8087220:	b510      	push	{r4, lr}
 8087222:	4604      	mov	r4, r0
 8087224:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087226:	a801      	add	r0, sp, #4
 8087228:	f7ff ffda 	bl	80871e0 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808722c:	f242 7210 	movw	r2, #10000	; 0x2710
 8087230:	4b07      	ldr	r3, [pc, #28]	; (8087250 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 8087232:	a901      	add	r1, sp, #4
 8087234:	4807      	ldr	r0, [pc, #28]	; (8087254 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 8087236:	f000 fb81 	bl	808793c <cellular_command>
	return resp.string;
 808723a:	a904      	add	r1, sp, #16
 808723c:	4620      	mov	r0, r4
 808723e:	f001 f8aa 	bl	8088396 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 8087242:	a801      	add	r0, sp, #4
 8087244:	f7ff ffe0 	bl	8087208 <_ZN28CellularHelperStringResponseD1Ev>
}
 8087248:	4620      	mov	r0, r4
 808724a:	b008      	add	sp, #32
 808724c:	bd10      	pop	{r4, pc}
 808724e:	bf00      	nop
 8087250:	0808f1b7 	.word	0x0808f1b7
 8087254:	08086fed 	.word	0x08086fed

08087258 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 8087258:	b510      	push	{r4, lr}
 808725a:	4604      	mov	r4, r0
 808725c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808725e:	a801      	add	r0, sp, #4
 8087260:	f7ff ffbe 	bl	80871e0 <_ZN28CellularHelperStringResponseC1Ev>
 8087264:	f242 7210 	movw	r2, #10000	; 0x2710
 8087268:	4b07      	ldr	r3, [pc, #28]	; (8087288 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808726a:	a901      	add	r1, sp, #4
 808726c:	4807      	ldr	r0, [pc, #28]	; (808728c <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808726e:	f000 fb65 	bl	808793c <cellular_command>
	return resp.string;
 8087272:	a904      	add	r1, sp, #16
 8087274:	4620      	mov	r0, r4
 8087276:	f001 f88e 	bl	8088396 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808727a:	a801      	add	r0, sp, #4
 808727c:	f7ff ffc4 	bl	8087208 <_ZN28CellularHelperStringResponseD1Ev>
}
 8087280:	4620      	mov	r0, r4
 8087282:	b008      	add	sp, #32
 8087284:	bd10      	pop	{r4, pc}
 8087286:	bf00      	nop
 8087288:	0808f1c1 	.word	0x0808f1c1
 808728c:	08086fed 	.word	0x08086fed

08087290 <_ZNK19CellularHelperClass7getIMSIEv>:
 8087290:	b510      	push	{r4, lr}
 8087292:	4604      	mov	r4, r0
 8087294:	f7ff ffc4 	bl	8087220 <_ZNK19CellularHelperClass15getManufacturerEv>
 8087298:	4620      	mov	r0, r4
 808729a:	bd10      	pop	{r4, pc}

0808729c <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 808729c:	b510      	push	{r4, lr}
 808729e:	4604      	mov	r4, r0
 80872a0:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 80872a2:	a801      	add	r0, sp, #4
 80872a4:	f7ff ff72 	bl	808718c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 80872a8:	490a      	ldr	r1, [pc, #40]	; (80872d4 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 80872aa:	a804      	add	r0, sp, #16
 80872ac:	f001 f886 	bl	80883bc <_ZN6StringaSEPKc>
 80872b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80872b4:	4b08      	ldr	r3, [pc, #32]	; (80872d8 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 80872b6:	a901      	add	r1, sp, #4
 80872b8:	4808      	ldr	r0, [pc, #32]	; (80872dc <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 80872ba:	f000 fb3f 	bl	808793c <cellular_command>
	return resp.string;
 80872be:	a908      	add	r1, sp, #32
 80872c0:	4620      	mov	r0, r4
 80872c2:	f001 f868 	bl	8088396 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 80872c6:	a801      	add	r0, sp, #4
 80872c8:	f7ff ff7a 	bl	80871c0 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 80872cc:	4620      	mov	r0, r4
 80872ce:	b00c      	add	sp, #48	; 0x30
 80872d0:	bd10      	pop	{r4, pc}
 80872d2:	bf00      	nop
 80872d4:	0808f1cb 	.word	0x0808f1cb
 80872d8:	0808f1d0 	.word	0x0808f1d0
 80872dc:	08086fed 	.word	0x08086fed

080872e0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80872e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80872e4:	460c      	mov	r4, r1
 80872e6:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 80872e8:	1c59      	adds	r1, r3, #1
 80872ea:	68a3      	ldr	r3, [r4, #8]
 80872ec:	4620      	mov	r0, r4
 80872ee:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80872f0:	4617      	mov	r7, r2
 80872f2:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 80872f6:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 80872f8:	f000 ffe2 	bl	80882c0 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 80872fc:	42b5      	cmp	r5, r6
 80872fe:	da0c      	bge.n	808731a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8087300:	5d79      	ldrb	r1, [r7, r5]
 8087302:	f1b8 0f00 	cmp.w	r8, #0
 8087306:	d003      	beq.n	8087310 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 8087308:	290d      	cmp	r1, #13
 808730a:	d004      	beq.n	8087316 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808730c:	290a      	cmp	r1, #10
 808730e:	d002      	beq.n	8087316 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 8087310:	4620      	mov	r0, r4
 8087312:	f001 f8ce 	bl	80884b2 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 8087316:	3501      	adds	r5, #1
 8087318:	e7f0      	b.n	80872fc <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08087320 <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8087322:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087326:	4604      	mov	r4, r0
 8087328:	460f      	mov	r7, r1
 808732a:	4615      	mov	r5, r2
 808732c:	461e      	mov	r6, r3
	if (enableDebug) {
 808732e:	f1bc 0f00 	cmp.w	ip, #0
 8087332:	d001      	beq.n	8087338 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8087334:	f7ff fe66 	bl	8087004 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 8087338:	b947      	cbnz	r7, 808734c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808733a:	2301      	movs	r3, #1
 808733c:	462a      	mov	r2, r5
 808733e:	9300      	str	r3, [sp, #0]
 8087340:	4804      	ldr	r0, [pc, #16]	; (8087354 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8087342:	4633      	mov	r3, r6
 8087344:	f104 010c 	add.w	r1, r4, #12
 8087348:	f7ff ffca 	bl	80872e0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 808734c:	f04f 30ff 	mov.w	r0, #4294967295
 8087350:	b003      	add	sp, #12
 8087352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087354:	20000a88 	.word	0x20000a88

08087358 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8087358:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808735a:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808735e:	4606      	mov	r6, r0
 8087360:	460d      	mov	r5, r1
 8087362:	4617      	mov	r7, r2
 8087364:	461c      	mov	r4, r3
 8087366:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8087368:	f1bc 0f00 	cmp.w	ip, #0
 808736c:	d001      	beq.n	8087372 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808736e:	f7ff fe49 	bl	8087004 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 8087372:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8087376:	d12a      	bne.n	80873ce <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8087378:	1c60      	adds	r0, r4, #1
 808737a:	f000 fc25 	bl	8087bc8 <malloc>
		if (copy) {
 808737e:	4605      	mov	r5, r0
 8087380:	b328      	cbz	r0, 80873ce <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8087382:	4622      	mov	r2, r4
 8087384:	4639      	mov	r1, r7
 8087386:	f004 f87e 	bl	808b486 <strncpy>
			copy[len] = 0;
 808738a:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808738c:	2120      	movs	r1, #32
			copy[len] = 0;
 808738e:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087390:	4a11      	ldr	r2, [pc, #68]	; (80873d8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8087392:	68f3      	ldr	r3, [r6, #12]
 8087394:	a802      	add	r0, sp, #8
 8087396:	f000 fc3f 	bl	8087c18 <snprintf>
			char *start = strstr(copy, searchFor);
 808739a:	4628      	mov	r0, r5
 808739c:	a902      	add	r1, sp, #8
 808739e:	f004 f885 	bl	808b4ac <strstr>
			if (start) {
 80873a2:	4604      	mov	r4, r0
 80873a4:	b180      	cbz	r0, 80873c8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 80873a6:	a802      	add	r0, sp, #8
 80873a8:	f004 f851 	bl	808b44e <strlen>
 80873ac:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 80873ae:	210d      	movs	r1, #13
 80873b0:	4620      	mov	r0, r4
 80873b2:	f004 f811 	bl	808b3d8 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 80873b6:	2301      	movs	r3, #1
 80873b8:	4622      	mov	r2, r4
 80873ba:	9300      	str	r3, [sp, #0]
 80873bc:	f106 011c 	add.w	r1, r6, #28
 80873c0:	1b03      	subs	r3, r0, r4
 80873c2:	4806      	ldr	r0, [pc, #24]	; (80873dc <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 80873c4:	f7ff ff8c 	bl	80872e0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 80873c8:	4628      	mov	r0, r5
 80873ca:	f000 fc05 	bl	8087bd8 <free>
}
 80873ce:	f04f 30ff 	mov.w	r0, #4294967295
 80873d2:	b00b      	add	sp, #44	; 0x2c
 80873d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80873d6:	bf00      	nop
 80873d8:	0808f1da 	.word	0x0808f1da
 80873dc:	20000a88 	.word	0x20000a88

080873e0 <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 80873e0:	7983      	ldrb	r3, [r0, #6]
 80873e2:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80873e6:	f023 030f 	bic.w	r3, r3, #15
 80873ea:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80873ec:	2000      	movs	r0, #0
 80873ee:	4770      	bx	lr

080873f0 <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 80873f0:	7983      	ldrb	r3, [r0, #6]
 80873f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80873f6:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80873f8:	2000      	movs	r0, #0
 80873fa:	4770      	bx	lr

080873fc <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80873fc:	4a03      	ldr	r2, [pc, #12]	; (808740c <_ZN7HIH61XXC1Eh+0x10>)
 80873fe:	7101      	strb	r1, [r0, #4]
 8087400:	6002      	str	r2, [r0, #0]
 8087402:	2200      	movs	r2, #0
 8087404:	7182      	strb	r2, [r0, #6]
 8087406:	6082      	str	r2, [r0, #8]
}
 8087408:	4770      	bx	lr
 808740a:	bf00      	nop
 808740c:	0808f204 	.word	0x0808f204

08087410 <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 8087410:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 8087412:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8087416:	4604      	mov	r4, r0
    if (!isRunning()) {
 8087418:	2b00      	cmp	r3, #0
 808741a:	db07      	blt.n	808742c <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 808741c:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 808741e:	f023 030f 	bic.w	r3, r3, #15
 8087422:	f043 0303 	orr.w	r3, r3, #3
 8087426:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8087428:	4630      	mov	r0, r6
 808742a:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 808742c:	f002 fcd4 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8087430:	7921      	ldrb	r1, [r4, #4]
 8087432:	f002 faf1 	bl	8089a18 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8087436:	f002 fccf 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808743a:	f002 fb10 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 808743e:	4605      	mov	r5, r0
 8087440:	2800      	cmp	r0, #0
 8087442:	d15b      	bne.n	80874fc <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8087444:	200a      	movs	r0, #10
 8087446:	f001 fc73 	bl	8088d30 <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 808744a:	f002 fcc5 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808744e:	2204      	movs	r2, #4
 8087450:	7921      	ldrb	r1, [r4, #4]
 8087452:	f002 fade 	bl	8089a12 <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 8087456:	f002 fcbf 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808745a:	6803      	ldr	r3, [r0, #0]
 808745c:	691b      	ldr	r3, [r3, #16]
 808745e:	4798      	blx	r3
 8087460:	2800      	cmp	r0, #0
 8087462:	d043      	beq.n	80874ec <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8087464:	f002 fcb8 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8087468:	6803      	ldr	r3, [r0, #0]
 808746a:	695b      	ldr	r3, [r3, #20]
 808746c:	4798      	blx	r3
 808746e:	4605      	mov	r5, r0
                y = Wire.read();
 8087470:	f002 fcb2 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8087474:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;
 8087476:	f3c5 1681 	ubfx	r6, r5, #6, #2
                y = Wire.read();
 808747a:	695b      	ldr	r3, [r3, #20]
 808747c:	4798      	blx	r3
                switch (s) {
 808747e:	2e01      	cmp	r6, #1
 8087480:	d023      	beq.n	80874ca <_ZN7HIH61XX6updateEv+0xba>
 8087482:	2e02      	cmp	r6, #2
 8087484:	d026      	beq.n	80874d4 <_ZN7HIH61XX6updateEv+0xc4>
 8087486:	2e00      	cmp	r6, #0
 8087488:	d1dc      	bne.n	8087444 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 808748a:	022d      	lsls	r5, r5, #8
 808748c:	b2c0      	uxtb	r0, r0
 808748e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 8087492:	4305      	orrs	r5, r0
 8087494:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 8087496:	f002 fc9f 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 808749a:	6803      	ldr	r3, [r0, #0]
 808749c:	695b      	ldr	r3, [r3, #20]
 808749e:	4798      	blx	r3
 80874a0:	4605      	mov	r5, r0
                        y = Wire.read();
 80874a2:	f002 fc99 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80874a6:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 80874a8:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 80874aa:	695b      	ldr	r3, [r3, #20]
 80874ac:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 80874ae:	b2ad      	uxth	r5, r5
 80874b0:	b2c0      	uxtb	r0, r0
 80874b2:	4305      	orrs	r5, r0
 80874b4:	10ad      	asrs	r5, r5, #2
 80874b6:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 80874b8:	f002 fc8e 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80874bc:	f002 facf 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
 80874c0:	79a3      	ldrb	r3, [r4, #6]
 80874c2:	f023 030f 	bic.w	r3, r3, #15
 80874c6:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 80874c8:	e7ae      	b.n	8087428 <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 80874ca:	f002 fc85 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80874ce:	f002 fac6 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
                        break;
 80874d2:	e7b7      	b.n	8087444 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 80874d4:	f002 fc80 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 80874d8:	f002 fac1 	bl	8089a5e <_ZN7TwoWire15endTransmissionEv>
 80874dc:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 80874de:	2604      	movs	r6, #4
 80874e0:	f023 030f 	bic.w	r3, r3, #15
 80874e4:	f043 0304 	orr.w	r3, r3, #4
 80874e8:	71a3      	strb	r3, [r4, #6]
 80874ea:	e79d      	b.n	8087428 <_ZN7HIH61XX6updateEv+0x18>
 80874ec:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 80874ee:	2602      	movs	r6, #2
 80874f0:	f023 030f 	bic.w	r3, r3, #15
 80874f4:	f043 0302 	orr.w	r3, r3, #2
 80874f8:	71a3      	strb	r3, [r4, #6]
 80874fa:	e795      	b.n	8087428 <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 80874fc:	f002 f8f4 	bl	80896e8 <_Z16_fetch_usbserialv>
 8087500:	490a      	ldr	r1, [pc, #40]	; (808752c <_ZN7HIH61XX6updateEv+0x11c>)
 8087502:	f001 f891 	bl	8088628 <_ZN5Print5printEPKc>
        Serial.println(azer);
 8087506:	f002 f8ef 	bl	80896e8 <_Z16_fetch_usbserialv>
 808750a:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 808750c:	220a      	movs	r2, #10
 808750e:	4629      	mov	r1, r5
 8087510:	f001 f8b1 	bl	8088676 <_ZN5Print11printNumberEmh>
        n += println();
 8087514:	4630      	mov	r0, r6
 8087516:	f001 f88e 	bl	8088636 <_ZN5Print7printlnEv>
 808751a:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 808751c:	2601      	movs	r6, #1
 808751e:	f023 030f 	bic.w	r3, r3, #15
 8087522:	f043 0301 	orr.w	r3, r3, #1
 8087526:	71a3      	strb	r3, [r4, #6]
 8087528:	e77e      	b.n	8087428 <_ZN7HIH61XX6updateEv+0x18>
 808752a:	bf00      	nop
 808752c:	0808eefe 	.word	0x0808eefe

08087530 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8087530:	b538      	push	{r3, r4, r5, lr}
 8087532:	4605      	mov	r5, r0
    if (base == 0) {
 8087534:	b942      	cbnz	r2, 8087548 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 8087536:	6803      	ldr	r3, [r0, #0]
 8087538:	689b      	ldr	r3, [r3, #8]
 808753a:	4798      	blx	r3
        return printNumber(val, base) + t;
 808753c:	4604      	mov	r4, r0
        n += println();
 808753e:	4628      	mov	r0, r5
 8087540:	f001 f879 	bl	8088636 <_ZN5Print7printlnEv>
    }
 8087544:	4420      	add	r0, r4
 8087546:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 8087548:	b2d2      	uxtb	r2, r2
 808754a:	f001 f894 	bl	8088676 <_ZN5Print11printNumberEmh>
 808754e:	e7f5      	b.n	808753c <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

08087550 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087550:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8087552:	b538      	push	{r3, r4, r5, lr}
 8087554:	460d      	mov	r5, r1
    switch (command) {
 8087556:	d01a      	beq.n	808758e <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8087558:	d80c      	bhi.n	8087574 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 808755a:	2a31      	cmp	r2, #49	; 0x31
 808755c:	d038      	beq.n	80875d0 <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 808755e:	2a61      	cmp	r2, #97	; 0x61
 8087560:	d030      	beq.n	80875c4 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 8087562:	2a30      	cmp	r2, #48	; 0x30
 8087564:	d038      	beq.n	80875d8 <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8087566:	220a      	movs	r2, #10
 8087568:	21fe      	movs	r1, #254	; 0xfe
 808756a:	4628      	mov	r0, r5
 808756c:	f7ff ffe0 	bl	8087530 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8087570:	24fe      	movs	r4, #254	; 0xfe
 8087572:	e018      	b.n	80875a6 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8087574:	2a74      	cmp	r2, #116	; 0x74
 8087576:	d018      	beq.n	80875aa <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8087578:	2a75      	cmp	r2, #117	; 0x75
 808757a:	d1f4      	bne.n	8087566 <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 808757c:	f7ff ff48 	bl	8087410 <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8087580:	4604      	mov	r4, r0
 8087582:	4601      	mov	r1, r0
 8087584:	220a      	movs	r2, #10
 8087586:	4628      	mov	r0, r5
 8087588:	f7ff ffd2 	bl	8087530 <_ZN5Print7printlnIhLi0EEEjT_i>
 808758c:	e00b      	b.n	80875a6 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 808758e:	8900      	ldrh	r0, [r0, #8]
 8087590:	f003 fa30 	bl	808a9f4 <__aeabi_ui2f>
 8087594:	4912      	ldr	r1, [pc, #72]	; (80875e0 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8087596:	f003 fb39 	bl	808ac0c <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 808759a:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 808759c:	2202      	movs	r2, #2
 808759e:	4628      	mov	r0, r5
 80875a0:	f001 f956 	bl	8088850 <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 80875a4:	2400      	movs	r4, #0
}
 80875a6:	4620      	mov	r0, r4
 80875a8:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 80875aa:	8940      	ldrh	r0, [r0, #10]
 80875ac:	f003 fa22 	bl	808a9f4 <__aeabi_ui2f>
 80875b0:	490b      	ldr	r1, [pc, #44]	; (80875e0 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 80875b2:	f003 fb2b 	bl	808ac0c <__aeabi_fdiv>
 80875b6:	490b      	ldr	r1, [pc, #44]	; (80875e4 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 80875b8:	f003 fa74 	bl	808aaa4 <__aeabi_fmul>
 80875bc:	490a      	ldr	r1, [pc, #40]	; (80875e8 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80875be:	f003 f967 	bl	808a890 <__aeabi_fsub>
 80875c2:	e7ea      	b.n	808759a <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 80875c4:	7901      	ldrb	r1, [r0, #4]
 80875c6:	220a      	movs	r2, #10
 80875c8:	4628      	mov	r0, r5
 80875ca:	f7ff ffb1 	bl	8087530 <_ZN5Print7printlnIhLi0EEEjT_i>
 80875ce:	e7e9      	b.n	80875a4 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 80875d0:	6803      	ldr	r3, [r0, #0]
 80875d2:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 80875d4:	4798      	blx	r3
 80875d6:	e7d3      	b.n	8087580 <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 80875d8:	6803      	ldr	r3, [r0, #0]
 80875da:	685b      	ldr	r3, [r3, #4]
 80875dc:	e7fa      	b.n	80875d4 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 80875de:	bf00      	nop
 80875e0:	467ff800 	.word	0x467ff800
 80875e4:	43250000 	.word	0x43250000
 80875e8:	42200000 	.word	0x42200000

080875ec <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80875ec:	b508      	push	{r3, lr}
 80875ee:	4b02      	ldr	r3, [pc, #8]	; (80875f8 <HAL_Validate_Pin_Function+0xc>)
 80875f0:	681b      	ldr	r3, [r3, #0]
 80875f2:	685b      	ldr	r3, [r3, #4]
 80875f4:	9301      	str	r3, [sp, #4]
 80875f6:	bd08      	pop	{r3, pc}
 80875f8:	080401b0 	.word	0x080401b0

080875fc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80875fc:	b508      	push	{r3, lr}
 80875fe:	4b02      	ldr	r3, [pc, #8]	; (8087608 <HAL_Pin_Mode+0xc>)
 8087600:	681b      	ldr	r3, [r3, #0]
 8087602:	689b      	ldr	r3, [r3, #8]
 8087604:	9301      	str	r3, [sp, #4]
 8087606:	bd08      	pop	{r3, pc}
 8087608:	080401b0 	.word	0x080401b0

0808760c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808760c:	b508      	push	{r3, lr}
 808760e:	4b02      	ldr	r3, [pc, #8]	; (8087618 <HAL_Get_Pin_Mode+0xc>)
 8087610:	681b      	ldr	r3, [r3, #0]
 8087612:	68db      	ldr	r3, [r3, #12]
 8087614:	9301      	str	r3, [sp, #4]
 8087616:	bd08      	pop	{r3, pc}
 8087618:	080401b0 	.word	0x080401b0

0808761c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808761c:	b508      	push	{r3, lr}
 808761e:	4b02      	ldr	r3, [pc, #8]	; (8087628 <HAL_GPIO_Write+0xc>)
 8087620:	681b      	ldr	r3, [r3, #0]
 8087622:	691b      	ldr	r3, [r3, #16]
 8087624:	9301      	str	r3, [sp, #4]
 8087626:	bd08      	pop	{r3, pc}
 8087628:	080401b0 	.word	0x080401b0

0808762c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808762c:	b508      	push	{r3, lr}
 808762e:	4b02      	ldr	r3, [pc, #8]	; (8087638 <HAL_GPIO_Read+0xc>)
 8087630:	681b      	ldr	r3, [r3, #0]
 8087632:	695b      	ldr	r3, [r3, #20]
 8087634:	9301      	str	r3, [sp, #4]
 8087636:	bd08      	pop	{r3, pc}
 8087638:	080401b0 	.word	0x080401b0

0808763c <hal_adc_set_sample_time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 808763c:	b508      	push	{r3, lr}
 808763e:	4b02      	ldr	r3, [pc, #8]	; (8087648 <hal_adc_set_sample_time+0xc>)
 8087640:	681b      	ldr	r3, [r3, #0]
 8087642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087644:	9301      	str	r3, [sp, #4]
 8087646:	bd08      	pop	{r3, pc}
 8087648:	080401b0 	.word	0x080401b0

0808764c <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 808764c:	b508      	push	{r3, lr}
 808764e:	4b02      	ldr	r3, [pc, #8]	; (8087658 <hal_adc_read+0xc>)
 8087650:	681b      	ldr	r3, [r3, #0]
 8087652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087654:	9301      	str	r3, [sp, #4]
 8087656:	bd08      	pop	{r3, pc}
 8087658:	080401b0 	.word	0x080401b0

0808765c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808765c:	b508      	push	{r3, lr}
 808765e:	4b02      	ldr	r3, [pc, #8]	; (8087668 <HAL_RNG_GetRandomNumber+0xc>)
 8087660:	681b      	ldr	r3, [r3, #0]
 8087662:	685b      	ldr	r3, [r3, #4]
 8087664:	9301      	str	r3, [sp, #4]
 8087666:	bd08      	pop	{r3, pc}
 8087668:	0804019c 	.word	0x0804019c

0808766c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808766c:	b508      	push	{r3, lr}
 808766e:	4b02      	ldr	r3, [pc, #8]	; (8087678 <HAL_Delay_Microseconds+0xc>)
 8087670:	681b      	ldr	r3, [r3, #0]
 8087672:	68db      	ldr	r3, [r3, #12]
 8087674:	9301      	str	r3, [sp, #4]
 8087676:	bd08      	pop	{r3, pc}
 8087678:	0804019c 	.word	0x0804019c

0808767c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808767c:	b508      	push	{r3, lr}
 808767e:	4b02      	ldr	r3, [pc, #8]	; (8087688 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8087680:	681b      	ldr	r3, [r3, #0]
 8087682:	695b      	ldr	r3, [r3, #20]
 8087684:	9301      	str	r3, [sp, #4]
 8087686:	bd08      	pop	{r3, pc}
 8087688:	0804019c 	.word	0x0804019c

0808768c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808768c:	b508      	push	{r3, lr}
 808768e:	4b02      	ldr	r3, [pc, #8]	; (8087698 <HAL_EEPROM_Init+0xc>)
 8087690:	681b      	ldr	r3, [r3, #0]
 8087692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087694:	9301      	str	r3, [sp, #4]
 8087696:	bd08      	pop	{r3, pc}
 8087698:	0804019c 	.word	0x0804019c

0808769c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808769c:	b508      	push	{r3, lr}
 808769e:	4b02      	ldr	r3, [pc, #8]	; (80876a8 <HAL_EEPROM_Get+0xc>)
 80876a0:	681b      	ldr	r3, [r3, #0]
 80876a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80876a4:	9301      	str	r3, [sp, #4]
 80876a6:	bd08      	pop	{r3, pc}
 80876a8:	0804019c 	.word	0x0804019c

080876ac <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80876ac:	b508      	push	{r3, lr}
 80876ae:	4b02      	ldr	r3, [pc, #8]	; (80876b8 <HAL_EEPROM_Put+0xc>)
 80876b0:	681b      	ldr	r3, [r3, #0]
 80876b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80876b4:	9301      	str	r3, [sp, #4]
 80876b6:	bd08      	pop	{r3, pc}
 80876b8:	0804019c 	.word	0x0804019c

080876bc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80876bc:	b508      	push	{r3, lr}
 80876be:	4b02      	ldr	r3, [pc, #8]	; (80876c8 <hal_rtc_time_is_valid+0xc>)
 80876c0:	681b      	ldr	r3, [r3, #0]
 80876c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80876c4:	9301      	str	r3, [sp, #4]
 80876c6:	bd08      	pop	{r3, pc}
 80876c8:	0804019c 	.word	0x0804019c

080876cc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80876cc:	b508      	push	{r3, lr}
 80876ce:	4b02      	ldr	r3, [pc, #8]	; (80876d8 <hal_rtc_get_time+0xc>)
 80876d0:	681b      	ldr	r3, [r3, #0]
 80876d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80876d4:	9301      	str	r3, [sp, #4]
 80876d6:	bd08      	pop	{r3, pc}
 80876d8:	0804019c 	.word	0x0804019c

080876dc <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 80876dc:	b508      	push	{r3, lr}
 80876de:	4b02      	ldr	r3, [pc, #8]	; (80876e8 <hal_rtc_set_time+0xc>)
 80876e0:	681b      	ldr	r3, [r3, #0]
 80876e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80876e4:	9301      	str	r3, [sp, #4]
 80876e6:	bd08      	pop	{r3, pc}
 80876e8:	0804019c 	.word	0x0804019c

080876ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80876ec:	b508      	push	{r3, lr}
 80876ee:	4b02      	ldr	r3, [pc, #8]	; (80876f8 <os_mutex_recursive_create+0xc>)
 80876f0:	681b      	ldr	r3, [r3, #0]
 80876f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80876f4:	9301      	str	r3, [sp, #4]
 80876f6:	bd08      	pop	{r3, pc}
 80876f8:	080401d0 	.word	0x080401d0

080876fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80876fc:	b508      	push	{r3, lr}
 80876fe:	4b02      	ldr	r3, [pc, #8]	; (8087708 <os_mutex_recursive_destroy+0xc>)
 8087700:	681b      	ldr	r3, [r3, #0]
 8087702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087704:	9301      	str	r3, [sp, #4]
 8087706:	bd08      	pop	{r3, pc}
 8087708:	080401d0 	.word	0x080401d0

0808770c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808770c:	b508      	push	{r3, lr}
 808770e:	4b02      	ldr	r3, [pc, #8]	; (8087718 <os_mutex_recursive_lock+0xc>)
 8087710:	681b      	ldr	r3, [r3, #0]
 8087712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087714:	9301      	str	r3, [sp, #4]
 8087716:	bd08      	pop	{r3, pc}
 8087718:	080401d0 	.word	0x080401d0

0808771c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 808771c:	b508      	push	{r3, lr}
 808771e:	4b02      	ldr	r3, [pc, #8]	; (8087728 <os_mutex_recursive_unlock+0xc>)
 8087720:	681b      	ldr	r3, [r3, #0]
 8087722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8087724:	9301      	str	r3, [sp, #4]
 8087726:	bd08      	pop	{r3, pc}
 8087728:	080401d0 	.word	0x080401d0

0808772c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808772c:	b508      	push	{r3, lr}
 808772e:	4b02      	ldr	r3, [pc, #8]	; (8087738 <hal_usart_write+0xc>)
 8087730:	681b      	ldr	r3, [r3, #0]
 8087732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087734:	9301      	str	r3, [sp, #4]
 8087736:	bd08      	pop	{r3, pc}
 8087738:	080401c4 	.word	0x080401c4

0808773c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808773c:	b508      	push	{r3, lr}
 808773e:	4b02      	ldr	r3, [pc, #8]	; (8087748 <hal_usart_available+0xc>)
 8087740:	681b      	ldr	r3, [r3, #0]
 8087742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087744:	9301      	str	r3, [sp, #4]
 8087746:	bd08      	pop	{r3, pc}
 8087748:	080401c4 	.word	0x080401c4

0808774c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808774c:	b508      	push	{r3, lr}
 808774e:	4b02      	ldr	r3, [pc, #8]	; (8087758 <hal_usart_read+0xc>)
 8087750:	681b      	ldr	r3, [r3, #0]
 8087752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087754:	9301      	str	r3, [sp, #4]
 8087756:	bd08      	pop	{r3, pc}
 8087758:	080401c4 	.word	0x080401c4

0808775c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808775c:	b508      	push	{r3, lr}
 808775e:	4b02      	ldr	r3, [pc, #8]	; (8087768 <hal_usart_peek+0xc>)
 8087760:	681b      	ldr	r3, [r3, #0]
 8087762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087764:	9301      	str	r3, [sp, #4]
 8087766:	bd08      	pop	{r3, pc}
 8087768:	080401c4 	.word	0x080401c4

0808776c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808776c:	b508      	push	{r3, lr}
 808776e:	4b02      	ldr	r3, [pc, #8]	; (8087778 <hal_usart_flush+0xc>)
 8087770:	681b      	ldr	r3, [r3, #0]
 8087772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087774:	9301      	str	r3, [sp, #4]
 8087776:	bd08      	pop	{r3, pc}
 8087778:	080401c4 	.word	0x080401c4

0808777c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808777c:	b508      	push	{r3, lr}
 808777e:	4b02      	ldr	r3, [pc, #8]	; (8087788 <hal_usart_is_enabled+0xc>)
 8087780:	681b      	ldr	r3, [r3, #0]
 8087782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087784:	9301      	str	r3, [sp, #4]
 8087786:	bd08      	pop	{r3, pc}
 8087788:	080401c4 	.word	0x080401c4

0808778c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808778c:	b508      	push	{r3, lr}
 808778e:	4b02      	ldr	r3, [pc, #8]	; (8087798 <hal_usart_available_data_for_write+0xc>)
 8087790:	681b      	ldr	r3, [r3, #0]
 8087792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087794:	9301      	str	r3, [sp, #4]
 8087796:	bd08      	pop	{r3, pc}
 8087798:	080401c4 	.word	0x080401c4

0808779c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808779c:	b508      	push	{r3, lr}
 808779e:	4b02      	ldr	r3, [pc, #8]	; (80877a8 <hal_usart_begin_config+0xc>)
 80877a0:	681b      	ldr	r3, [r3, #0]
 80877a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80877a4:	9301      	str	r3, [sp, #4]
 80877a6:	bd08      	pop	{r3, pc}
 80877a8:	080401c4 	.word	0x080401c4

080877ac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80877ac:	b508      	push	{r3, lr}
 80877ae:	4b02      	ldr	r3, [pc, #8]	; (80877b8 <hal_usart_init_ex+0xc>)
 80877b0:	681b      	ldr	r3, [r3, #0]
 80877b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80877b4:	9301      	str	r3, [sp, #4]
 80877b6:	bd08      	pop	{r3, pc}
 80877b8:	080401c4 	.word	0x080401c4

080877bc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80877bc:	b508      	push	{r3, lr}
 80877be:	4b02      	ldr	r3, [pc, #8]	; (80877c8 <hal_i2c_begin+0xc>)
 80877c0:	681b      	ldr	r3, [r3, #0]
 80877c2:	68db      	ldr	r3, [r3, #12]
 80877c4:	9301      	str	r3, [sp, #4]
 80877c6:	bd08      	pop	{r3, pc}
 80877c8:	080401ac 	.word	0x080401ac

080877cc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80877cc:	b508      	push	{r3, lr}
 80877ce:	4b02      	ldr	r3, [pc, #8]	; (80877d8 <hal_i2c_begin_transmission+0xc>)
 80877d0:	681b      	ldr	r3, [r3, #0]
 80877d2:	699b      	ldr	r3, [r3, #24]
 80877d4:	9301      	str	r3, [sp, #4]
 80877d6:	bd08      	pop	{r3, pc}
 80877d8:	080401ac 	.word	0x080401ac

080877dc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80877dc:	b508      	push	{r3, lr}
 80877de:	4b02      	ldr	r3, [pc, #8]	; (80877e8 <hal_i2c_end_transmission+0xc>)
 80877e0:	681b      	ldr	r3, [r3, #0]
 80877e2:	69db      	ldr	r3, [r3, #28]
 80877e4:	9301      	str	r3, [sp, #4]
 80877e6:	bd08      	pop	{r3, pc}
 80877e8:	080401ac 	.word	0x080401ac

080877ec <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80877ec:	b508      	push	{r3, lr}
 80877ee:	4b02      	ldr	r3, [pc, #8]	; (80877f8 <hal_i2c_write+0xc>)
 80877f0:	681b      	ldr	r3, [r3, #0]
 80877f2:	6a1b      	ldr	r3, [r3, #32]
 80877f4:	9301      	str	r3, [sp, #4]
 80877f6:	bd08      	pop	{r3, pc}
 80877f8:	080401ac 	.word	0x080401ac

080877fc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80877fc:	b508      	push	{r3, lr}
 80877fe:	4b02      	ldr	r3, [pc, #8]	; (8087808 <hal_i2c_available+0xc>)
 8087800:	681b      	ldr	r3, [r3, #0]
 8087802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087804:	9301      	str	r3, [sp, #4]
 8087806:	bd08      	pop	{r3, pc}
 8087808:	080401ac 	.word	0x080401ac

0808780c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808780c:	b508      	push	{r3, lr}
 808780e:	4b02      	ldr	r3, [pc, #8]	; (8087818 <hal_i2c_read+0xc>)
 8087810:	681b      	ldr	r3, [r3, #0]
 8087812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087814:	9301      	str	r3, [sp, #4]
 8087816:	bd08      	pop	{r3, pc}
 8087818:	080401ac 	.word	0x080401ac

0808781c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 808781c:	b508      	push	{r3, lr}
 808781e:	4b02      	ldr	r3, [pc, #8]	; (8087828 <hal_i2c_peek+0xc>)
 8087820:	681b      	ldr	r3, [r3, #0]
 8087822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087824:	9301      	str	r3, [sp, #4]
 8087826:	bd08      	pop	{r3, pc}
 8087828:	080401ac 	.word	0x080401ac

0808782c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 808782c:	b508      	push	{r3, lr}
 808782e:	4b02      	ldr	r3, [pc, #8]	; (8087838 <hal_i2c_flush+0xc>)
 8087830:	681b      	ldr	r3, [r3, #0]
 8087832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087834:	9301      	str	r3, [sp, #4]
 8087836:	bd08      	pop	{r3, pc}
 8087838:	080401ac 	.word	0x080401ac

0808783c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 808783c:	b508      	push	{r3, lr}
 808783e:	4b02      	ldr	r3, [pc, #8]	; (8087848 <hal_i2c_is_enabled+0xc>)
 8087840:	681b      	ldr	r3, [r3, #0]
 8087842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087844:	9301      	str	r3, [sp, #4]
 8087846:	bd08      	pop	{r3, pc}
 8087848:	080401ac 	.word	0x080401ac

0808784c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 808784c:	b508      	push	{r3, lr}
 808784e:	4b02      	ldr	r3, [pc, #8]	; (8087858 <hal_i2c_init+0xc>)
 8087850:	681b      	ldr	r3, [r3, #0]
 8087852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087854:	9301      	str	r3, [sp, #4]
 8087856:	bd08      	pop	{r3, pc}
 8087858:	080401ac 	.word	0x080401ac

0808785c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808785c:	b508      	push	{r3, lr}
 808785e:	4b02      	ldr	r3, [pc, #8]	; (8087868 <hal_i2c_lock+0xc>)
 8087860:	681b      	ldr	r3, [r3, #0]
 8087862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087864:	9301      	str	r3, [sp, #4]
 8087866:	bd08      	pop	{r3, pc}
 8087868:	080401ac 	.word	0x080401ac

0808786c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808786c:	b508      	push	{r3, lr}
 808786e:	4b02      	ldr	r3, [pc, #8]	; (8087878 <hal_i2c_unlock+0xc>)
 8087870:	681b      	ldr	r3, [r3, #0]
 8087872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087874:	9301      	str	r3, [sp, #4]
 8087876:	bd08      	pop	{r3, pc}
 8087878:	080401ac 	.word	0x080401ac

0808787c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808787c:	b508      	push	{r3, lr}
 808787e:	4b02      	ldr	r3, [pc, #8]	; (8087888 <hal_i2c_request_ex+0xc>)
 8087880:	681b      	ldr	r3, [r3, #0]
 8087882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8087884:	9301      	str	r3, [sp, #4]
 8087886:	bd08      	pop	{r3, pc}
 8087888:	080401ac 	.word	0x080401ac

0808788c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808788c:	b508      	push	{r3, lr}
 808788e:	4b02      	ldr	r3, [pc, #8]	; (8087898 <hal_spi_begin+0xc>)
 8087890:	681b      	ldr	r3, [r3, #0]
 8087892:	681b      	ldr	r3, [r3, #0]
 8087894:	9301      	str	r3, [sp, #4]
 8087896:	bd08      	pop	{r3, pc}
 8087898:	080401b4 	.word	0x080401b4

0808789c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808789c:	b508      	push	{r3, lr}
 808789e:	4b02      	ldr	r3, [pc, #8]	; (80878a8 <hal_spi_set_bit_order+0xc>)
 80878a0:	681b      	ldr	r3, [r3, #0]
 80878a2:	689b      	ldr	r3, [r3, #8]
 80878a4:	9301      	str	r3, [sp, #4]
 80878a6:	bd08      	pop	{r3, pc}
 80878a8:	080401b4 	.word	0x080401b4

080878ac <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80878ac:	b508      	push	{r3, lr}
 80878ae:	4b02      	ldr	r3, [pc, #8]	; (80878b8 <hal_spi_set_data_mode+0xc>)
 80878b0:	681b      	ldr	r3, [r3, #0]
 80878b2:	68db      	ldr	r3, [r3, #12]
 80878b4:	9301      	str	r3, [sp, #4]
 80878b6:	bd08      	pop	{r3, pc}
 80878b8:	080401b4 	.word	0x080401b4

080878bc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 80878bc:	b508      	push	{r3, lr}
 80878be:	4b02      	ldr	r3, [pc, #8]	; (80878c8 <hal_spi_set_clock_divider+0xc>)
 80878c0:	681b      	ldr	r3, [r3, #0]
 80878c2:	691b      	ldr	r3, [r3, #16]
 80878c4:	9301      	str	r3, [sp, #4]
 80878c6:	bd08      	pop	{r3, pc}
 80878c8:	080401b4 	.word	0x080401b4

080878cc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80878cc:	b508      	push	{r3, lr}
 80878ce:	4b02      	ldr	r3, [pc, #8]	; (80878d8 <hal_spi_transfer+0xc>)
 80878d0:	681b      	ldr	r3, [r3, #0]
 80878d2:	695b      	ldr	r3, [r3, #20]
 80878d4:	9301      	str	r3, [sp, #4]
 80878d6:	bd08      	pop	{r3, pc}
 80878d8:	080401b4 	.word	0x080401b4

080878dc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80878dc:	b508      	push	{r3, lr}
 80878de:	4b02      	ldr	r3, [pc, #8]	; (80878e8 <hal_spi_init+0xc>)
 80878e0:	681b      	ldr	r3, [r3, #0]
 80878e2:	69db      	ldr	r3, [r3, #28]
 80878e4:	9301      	str	r3, [sp, #4]
 80878e6:	bd08      	pop	{r3, pc}
 80878e8:	080401b4 	.word	0x080401b4

080878ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80878ec:	b508      	push	{r3, lr}
 80878ee:	4b02      	ldr	r3, [pc, #8]	; (80878f8 <hal_spi_is_enabled+0xc>)
 80878f0:	681b      	ldr	r3, [r3, #0]
 80878f2:	6a1b      	ldr	r3, [r3, #32]
 80878f4:	9301      	str	r3, [sp, #4]
 80878f6:	bd08      	pop	{r3, pc}
 80878f8:	080401b4 	.word	0x080401b4

080878fc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80878fc:	b508      	push	{r3, lr}
 80878fe:	4b02      	ldr	r3, [pc, #8]	; (8087908 <hal_spi_info+0xc>)
 8087900:	681b      	ldr	r3, [r3, #0]
 8087902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087904:	9301      	str	r3, [sp, #4]
 8087906:	bd08      	pop	{r3, pc}
 8087908:	080401b4 	.word	0x080401b4

0808790c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 808790c:	b508      	push	{r3, lr}
 808790e:	4b02      	ldr	r3, [pc, #8]	; (8087918 <hal_spi_transfer_dma+0xc>)
 8087910:	681b      	ldr	r3, [r3, #0]
 8087912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087914:	9301      	str	r3, [sp, #4]
 8087916:	bd08      	pop	{r3, pc}
 8087918:	080401b4 	.word	0x080401b4

0808791c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 808791c:	b508      	push	{r3, lr}
 808791e:	4b02      	ldr	r3, [pc, #8]	; (8087928 <hal_spi_transfer_dma_status+0xc>)
 8087920:	681b      	ldr	r3, [r3, #0]
 8087922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087924:	9301      	str	r3, [sp, #4]
 8087926:	bd08      	pop	{r3, pc}
 8087928:	080401b4 	.word	0x080401b4

0808792c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808792c:	b508      	push	{r3, lr}
 808792e:	4b02      	ldr	r3, [pc, #8]	; (8087938 <inet_gethostbyname+0xc>)
 8087930:	681b      	ldr	r3, [r3, #0]
 8087932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087934:	9301      	str	r3, [sp, #4]
 8087936:	bd08      	pop	{r3, pc}
 8087938:	08060020 	.word	0x08060020

0808793c <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808793c:	b508      	push	{r3, lr}
 808793e:	4b02      	ldr	r3, [pc, #8]	; (8087948 <cellular_command+0xc>)
 8087940:	681b      	ldr	r3, [r3, #0]
 8087942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087944:	9301      	str	r3, [sp, #4]
 8087946:	bd08      	pop	{r3, pc}
 8087948:	08060020 	.word	0x08060020

0808794c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808794c:	b508      	push	{r3, lr}
 808794e:	4b02      	ldr	r3, [pc, #8]	; (8087958 <HAL_USB_USART_Init+0xc>)
 8087950:	681b      	ldr	r3, [r3, #0]
 8087952:	681b      	ldr	r3, [r3, #0]
 8087954:	9301      	str	r3, [sp, #4]
 8087956:	bd08      	pop	{r3, pc}
 8087958:	0806001c 	.word	0x0806001c

0808795c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808795c:	b508      	push	{r3, lr}
 808795e:	4b02      	ldr	r3, [pc, #8]	; (8087968 <HAL_USB_USART_Begin+0xc>)
 8087960:	681b      	ldr	r3, [r3, #0]
 8087962:	685b      	ldr	r3, [r3, #4]
 8087964:	9301      	str	r3, [sp, #4]
 8087966:	bd08      	pop	{r3, pc}
 8087968:	0806001c 	.word	0x0806001c

0808796c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808796c:	b508      	push	{r3, lr}
 808796e:	4b02      	ldr	r3, [pc, #8]	; (8087978 <HAL_USB_USART_Available_Data+0xc>)
 8087970:	681b      	ldr	r3, [r3, #0]
 8087972:	691b      	ldr	r3, [r3, #16]
 8087974:	9301      	str	r3, [sp, #4]
 8087976:	bd08      	pop	{r3, pc}
 8087978:	0806001c 	.word	0x0806001c

0808797c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808797c:	b508      	push	{r3, lr}
 808797e:	4b02      	ldr	r3, [pc, #8]	; (8087988 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8087980:	681b      	ldr	r3, [r3, #0]
 8087982:	695b      	ldr	r3, [r3, #20]
 8087984:	9301      	str	r3, [sp, #4]
 8087986:	bd08      	pop	{r3, pc}
 8087988:	0806001c 	.word	0x0806001c

0808798c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808798c:	b508      	push	{r3, lr}
 808798e:	4b02      	ldr	r3, [pc, #8]	; (8087998 <HAL_USB_USART_Receive_Data+0xc>)
 8087990:	681b      	ldr	r3, [r3, #0]
 8087992:	699b      	ldr	r3, [r3, #24]
 8087994:	9301      	str	r3, [sp, #4]
 8087996:	bd08      	pop	{r3, pc}
 8087998:	0806001c 	.word	0x0806001c

0808799c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808799c:	b508      	push	{r3, lr}
 808799e:	4b02      	ldr	r3, [pc, #8]	; (80879a8 <HAL_USB_USART_Send_Data+0xc>)
 80879a0:	681b      	ldr	r3, [r3, #0]
 80879a2:	69db      	ldr	r3, [r3, #28]
 80879a4:	9301      	str	r3, [sp, #4]
 80879a6:	bd08      	pop	{r3, pc}
 80879a8:	0806001c 	.word	0x0806001c

080879ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80879ac:	b508      	push	{r3, lr}
 80879ae:	4b02      	ldr	r3, [pc, #8]	; (80879b8 <HAL_USB_USART_Flush_Data+0xc>)
 80879b0:	681b      	ldr	r3, [r3, #0]
 80879b2:	6a1b      	ldr	r3, [r3, #32]
 80879b4:	9301      	str	r3, [sp, #4]
 80879b6:	bd08      	pop	{r3, pc}
 80879b8:	0806001c 	.word	0x0806001c

080879bc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80879bc:	b508      	push	{r3, lr}
 80879be:	4b02      	ldr	r3, [pc, #8]	; (80879c8 <log_message_v+0xc>)
 80879c0:	681b      	ldr	r3, [r3, #0]
 80879c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80879c4:	9301      	str	r3, [sp, #4]
 80879c6:	bd08      	pop	{r3, pc}
 80879c8:	080201a0 	.word	0x080201a0

080879cc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80879cc:	b508      	push	{r3, lr}
 80879ce:	4b02      	ldr	r3, [pc, #8]	; (80879d8 <system_mode+0xc>)
 80879d0:	681b      	ldr	r3, [r3, #0]
 80879d2:	681b      	ldr	r3, [r3, #0]
 80879d4:	9301      	str	r3, [sp, #4]
 80879d6:	bd08      	pop	{r3, pc}
 80879d8:	080401a4 	.word	0x080401a4

080879dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80879dc:	b508      	push	{r3, lr}
 80879de:	4b02      	ldr	r3, [pc, #8]	; (80879e8 <set_system_mode+0xc>)
 80879e0:	681b      	ldr	r3, [r3, #0]
 80879e2:	685b      	ldr	r3, [r3, #4]
 80879e4:	9301      	str	r3, [sp, #4]
 80879e6:	bd08      	pop	{r3, pc}
 80879e8:	080401a4 	.word	0x080401a4

080879ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80879ec:	b508      	push	{r3, lr}
 80879ee:	4b02      	ldr	r3, [pc, #8]	; (80879f8 <system_delay_ms+0xc>)
 80879f0:	681b      	ldr	r3, [r3, #0]
 80879f2:	695b      	ldr	r3, [r3, #20]
 80879f4:	9301      	str	r3, [sp, #4]
 80879f6:	bd08      	pop	{r3, pc}
 80879f8:	080401a4 	.word	0x080401a4

080879fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80879fc:	b508      	push	{r3, lr}
 80879fe:	4b02      	ldr	r3, [pc, #8]	; (8087a08 <system_thread_set_state+0xc>)
 8087a00:	681b      	ldr	r3, [r3, #0]
 8087a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087a04:	9301      	str	r3, [sp, #4]
 8087a06:	bd08      	pop	{r3, pc}
 8087a08:	080401a4 	.word	0x080401a4

08087a0c <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 8087a0c:	b508      	push	{r3, lr}
 8087a0e:	4b02      	ldr	r3, [pc, #8]	; (8087a18 <system_version_info+0xc>)
 8087a10:	681b      	ldr	r3, [r3, #0]
 8087a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087a14:	9301      	str	r3, [sp, #4]
 8087a16:	bd08      	pop	{r3, pc}
 8087a18:	080401a4 	.word	0x080401a4

08087a1c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8087a1c:	b508      	push	{r3, lr}
 8087a1e:	4b02      	ldr	r3, [pc, #8]	; (8087a28 <application_thread_current+0xc>)
 8087a20:	681b      	ldr	r3, [r3, #0]
 8087a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087a24:	9301      	str	r3, [sp, #4]
 8087a26:	bd08      	pop	{r3, pc}
 8087a28:	080401a4 	.word	0x080401a4

08087a2c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8087a2c:	b508      	push	{r3, lr}
 8087a2e:	4b02      	ldr	r3, [pc, #8]	; (8087a38 <application_thread_invoke+0xc>)
 8087a30:	681b      	ldr	r3, [r3, #0]
 8087a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8087a34:	9301      	str	r3, [sp, #4]
 8087a36:	bd08      	pop	{r3, pc}
 8087a38:	080401a4 	.word	0x080401a4

08087a3c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8087a3c:	b508      	push	{r3, lr}
 8087a3e:	4b02      	ldr	r3, [pc, #8]	; (8087a48 <system_thread_get_state+0xc>)
 8087a40:	681b      	ldr	r3, [r3, #0]
 8087a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087a44:	9301      	str	r3, [sp, #4]
 8087a46:	bd08      	pop	{r3, pc}
 8087a48:	080401a4 	.word	0x080401a4

08087a4c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8087a4c:	b508      	push	{r3, lr}
 8087a4e:	4b02      	ldr	r3, [pc, #8]	; (8087a58 <system_notify_time_changed+0xc>)
 8087a50:	681b      	ldr	r3, [r3, #0]
 8087a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8087a54:	9301      	str	r3, [sp, #4]
 8087a56:	bd08      	pop	{r3, pc}
 8087a58:	080401a4 	.word	0x080401a4

08087a5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8087a5c:	b508      	push	{r3, lr}
 8087a5e:	4b03      	ldr	r3, [pc, #12]	; (8087a6c <system_ctrl_set_app_request_handler+0x10>)
 8087a60:	681b      	ldr	r3, [r3, #0]
 8087a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8087a66:	9301      	str	r3, [sp, #4]
 8087a68:	bd08      	pop	{r3, pc}
 8087a6a:	0000      	.short	0x0000
 8087a6c:	080401a4 	.word	0x080401a4

08087a70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8087a70:	b508      	push	{r3, lr}
 8087a72:	4b03      	ldr	r3, [pc, #12]	; (8087a80 <system_ctrl_set_result+0x10>)
 8087a74:	681b      	ldr	r3, [r3, #0]
 8087a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8087a7a:	9301      	str	r3, [sp, #4]
 8087a7c:	bd08      	pop	{r3, pc}
 8087a7e:	0000      	.short	0x0000
 8087a80:	080401a4 	.word	0x080401a4

08087a84 <system_power_management_get_config>:

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
 8087a84:	b508      	push	{r3, lr}
 8087a86:	4b03      	ldr	r3, [pc, #12]	; (8087a94 <system_power_management_get_config+0x10>)
 8087a88:	681b      	ldr	r3, [r3, #0]
 8087a8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8087a8e:	9301      	str	r3, [sp, #4]
 8087a90:	bd08      	pop	{r3, pc}
 8087a92:	0000      	.short	0x0000
 8087a94:	080401a4 	.word	0x080401a4

08087a98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8087a98:	b508      	push	{r3, lr}
 8087a9a:	4b02      	ldr	r3, [pc, #8]	; (8087aa4 <network_connect+0xc>)
 8087a9c:	681b      	ldr	r3, [r3, #0]
 8087a9e:	685b      	ldr	r3, [r3, #4]
 8087aa0:	9301      	str	r3, [sp, #4]
 8087aa2:	bd08      	pop	{r3, pc}
 8087aa4:	080401c8 	.word	0x080401c8

08087aa8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8087aa8:	b508      	push	{r3, lr}
 8087aaa:	4b02      	ldr	r3, [pc, #8]	; (8087ab4 <network_connecting+0xc>)
 8087aac:	681b      	ldr	r3, [r3, #0]
 8087aae:	689b      	ldr	r3, [r3, #8]
 8087ab0:	9301      	str	r3, [sp, #4]
 8087ab2:	bd08      	pop	{r3, pc}
 8087ab4:	080401c8 	.word	0x080401c8

08087ab8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8087ab8:	b508      	push	{r3, lr}
 8087aba:	4b02      	ldr	r3, [pc, #8]	; (8087ac4 <network_disconnect+0xc>)
 8087abc:	681b      	ldr	r3, [r3, #0]
 8087abe:	68db      	ldr	r3, [r3, #12]
 8087ac0:	9301      	str	r3, [sp, #4]
 8087ac2:	bd08      	pop	{r3, pc}
 8087ac4:	080401c8 	.word	0x080401c8

08087ac8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8087ac8:	b508      	push	{r3, lr}
 8087aca:	4b02      	ldr	r3, [pc, #8]	; (8087ad4 <network_ready+0xc>)
 8087acc:	681b      	ldr	r3, [r3, #0]
 8087ace:	691b      	ldr	r3, [r3, #16]
 8087ad0:	9301      	str	r3, [sp, #4]
 8087ad2:	bd08      	pop	{r3, pc}
 8087ad4:	080401c8 	.word	0x080401c8

08087ad8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8087ad8:	b508      	push	{r3, lr}
 8087ada:	4b02      	ldr	r3, [pc, #8]	; (8087ae4 <network_on+0xc>)
 8087adc:	681b      	ldr	r3, [r3, #0]
 8087ade:	695b      	ldr	r3, [r3, #20]
 8087ae0:	9301      	str	r3, [sp, #4]
 8087ae2:	bd08      	pop	{r3, pc}
 8087ae4:	080401c8 	.word	0x080401c8

08087ae8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8087ae8:	b508      	push	{r3, lr}
 8087aea:	4b02      	ldr	r3, [pc, #8]	; (8087af4 <network_off+0xc>)
 8087aec:	681b      	ldr	r3, [r3, #0]
 8087aee:	699b      	ldr	r3, [r3, #24]
 8087af0:	9301      	str	r3, [sp, #4]
 8087af2:	bd08      	pop	{r3, pc}
 8087af4:	080401c8 	.word	0x080401c8

08087af8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8087af8:	b508      	push	{r3, lr}
 8087afa:	4b02      	ldr	r3, [pc, #8]	; (8087b04 <network_listen+0xc>)
 8087afc:	681b      	ldr	r3, [r3, #0]
 8087afe:	69db      	ldr	r3, [r3, #28]
 8087b00:	9301      	str	r3, [sp, #4]
 8087b02:	bd08      	pop	{r3, pc}
 8087b04:	080401c8 	.word	0x080401c8

08087b08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8087b08:	b508      	push	{r3, lr}
 8087b0a:	4b02      	ldr	r3, [pc, #8]	; (8087b14 <network_listening+0xc>)
 8087b0c:	681b      	ldr	r3, [r3, #0]
 8087b0e:	6a1b      	ldr	r3, [r3, #32]
 8087b10:	9301      	str	r3, [sp, #4]
 8087b12:	bd08      	pop	{r3, pc}
 8087b14:	080401c8 	.word	0x080401c8

08087b18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8087b18:	b508      	push	{r3, lr}
 8087b1a:	4b02      	ldr	r3, [pc, #8]	; (8087b24 <network_set_listen_timeout+0xc>)
 8087b1c:	681b      	ldr	r3, [r3, #0]
 8087b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087b20:	9301      	str	r3, [sp, #4]
 8087b22:	bd08      	pop	{r3, pc}
 8087b24:	080401c8 	.word	0x080401c8

08087b28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8087b28:	b508      	push	{r3, lr}
 8087b2a:	4b02      	ldr	r3, [pc, #8]	; (8087b34 <network_get_listen_timeout+0xc>)
 8087b2c:	681b      	ldr	r3, [r3, #0]
 8087b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087b30:	9301      	str	r3, [sp, #4]
 8087b32:	bd08      	pop	{r3, pc}
 8087b34:	080401c8 	.word	0x080401c8

08087b38 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8087b38:	b508      	push	{r3, lr}
 8087b3a:	4b02      	ldr	r3, [pc, #8]	; (8087b44 <network_is_on+0xc>)
 8087b3c:	681b      	ldr	r3, [r3, #0]
 8087b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087b40:	9301      	str	r3, [sp, #4]
 8087b42:	bd08      	pop	{r3, pc}
 8087b44:	080401c8 	.word	0x080401c8

08087b48 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8087b48:	b508      	push	{r3, lr}
 8087b4a:	4b02      	ldr	r3, [pc, #8]	; (8087b54 <network_is_off+0xc>)
 8087b4c:	681b      	ldr	r3, [r3, #0]
 8087b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087b50:	9301      	str	r3, [sp, #4]
 8087b52:	bd08      	pop	{r3, pc}
 8087b54:	080401c8 	.word	0x080401c8

08087b58 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8087b58:	b508      	push	{r3, lr}
 8087b5a:	4b02      	ldr	r3, [pc, #8]	; (8087b64 <spark_variable+0xc>)
 8087b5c:	681b      	ldr	r3, [r3, #0]
 8087b5e:	681b      	ldr	r3, [r3, #0]
 8087b60:	9301      	str	r3, [sp, #4]
 8087b62:	bd08      	pop	{r3, pc}
 8087b64:	080401cc 	.word	0x080401cc

08087b68 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8087b68:	b508      	push	{r3, lr}
 8087b6a:	4b02      	ldr	r3, [pc, #8]	; (8087b74 <spark_function+0xc>)
 8087b6c:	681b      	ldr	r3, [r3, #0]
 8087b6e:	685b      	ldr	r3, [r3, #4]
 8087b70:	9301      	str	r3, [sp, #4]
 8087b72:	bd08      	pop	{r3, pc}
 8087b74:	080401cc 	.word	0x080401cc

08087b78 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8087b78:	b508      	push	{r3, lr}
 8087b7a:	4b02      	ldr	r3, [pc, #8]	; (8087b84 <spark_process+0xc>)
 8087b7c:	681b      	ldr	r3, [r3, #0]
 8087b7e:	689b      	ldr	r3, [r3, #8]
 8087b80:	9301      	str	r3, [sp, #4]
 8087b82:	bd08      	pop	{r3, pc}
 8087b84:	080401cc 	.word	0x080401cc

08087b88 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8087b88:	b508      	push	{r3, lr}
 8087b8a:	4b02      	ldr	r3, [pc, #8]	; (8087b94 <spark_cloud_flag_connected+0xc>)
 8087b8c:	681b      	ldr	r3, [r3, #0]
 8087b8e:	695b      	ldr	r3, [r3, #20]
 8087b90:	9301      	str	r3, [sp, #4]
 8087b92:	bd08      	pop	{r3, pc}
 8087b94:	080401cc 	.word	0x080401cc

08087b98 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8087b98:	b508      	push	{r3, lr}
 8087b9a:	4b02      	ldr	r3, [pc, #8]	; (8087ba4 <spark_send_event+0xc>)
 8087b9c:	681b      	ldr	r3, [r3, #0]
 8087b9e:	6a1b      	ldr	r3, [r3, #32]
 8087ba0:	9301      	str	r3, [sp, #4]
 8087ba2:	bd08      	pop	{r3, pc}
 8087ba4:	080401cc 	.word	0x080401cc

08087ba8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8087ba8:	b508      	push	{r3, lr}
 8087baa:	4b02      	ldr	r3, [pc, #8]	; (8087bb4 <spark_sync_time_pending+0xc>)
 8087bac:	681b      	ldr	r3, [r3, #0]
 8087bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087bb0:	9301      	str	r3, [sp, #4]
 8087bb2:	bd08      	pop	{r3, pc}
 8087bb4:	080401cc 	.word	0x080401cc

08087bb8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8087bb8:	b508      	push	{r3, lr}
 8087bba:	4b02      	ldr	r3, [pc, #8]	; (8087bc4 <spark_set_random_seed_from_cloud_handler+0xc>)
 8087bbc:	681b      	ldr	r3, [r3, #0]
 8087bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087bc0:	9301      	str	r3, [sp, #4]
 8087bc2:	bd08      	pop	{r3, pc}
 8087bc4:	080401cc 	.word	0x080401cc

08087bc8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8087bc8:	b508      	push	{r3, lr}
 8087bca:	4b02      	ldr	r3, [pc, #8]	; (8087bd4 <malloc+0xc>)
 8087bcc:	681b      	ldr	r3, [r3, #0]
 8087bce:	681b      	ldr	r3, [r3, #0]
 8087bd0:	9301      	str	r3, [sp, #4]
 8087bd2:	bd08      	pop	{r3, pc}
 8087bd4:	080401a0 	.word	0x080401a0

08087bd8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8087bd8:	b508      	push	{r3, lr}
 8087bda:	4b02      	ldr	r3, [pc, #8]	; (8087be4 <free+0xc>)
 8087bdc:	681b      	ldr	r3, [r3, #0]
 8087bde:	685b      	ldr	r3, [r3, #4]
 8087be0:	9301      	str	r3, [sp, #4]
 8087be2:	bd08      	pop	{r3, pc}
 8087be4:	080401a0 	.word	0x080401a0

08087be8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8087be8:	b508      	push	{r3, lr}
 8087bea:	4b02      	ldr	r3, [pc, #8]	; (8087bf4 <realloc+0xc>)
 8087bec:	681b      	ldr	r3, [r3, #0]
 8087bee:	689b      	ldr	r3, [r3, #8]
 8087bf0:	9301      	str	r3, [sp, #4]
 8087bf2:	bd08      	pop	{r3, pc}
 8087bf4:	080401a0 	.word	0x080401a0

08087bf8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8087bf8:	b508      	push	{r3, lr}
 8087bfa:	4b02      	ldr	r3, [pc, #8]	; (8087c04 <sprintf+0xc>)
 8087bfc:	681b      	ldr	r3, [r3, #0]
 8087bfe:	68db      	ldr	r3, [r3, #12]
 8087c00:	9301      	str	r3, [sp, #4]
 8087c02:	bd08      	pop	{r3, pc}
 8087c04:	080401a0 	.word	0x080401a0

08087c08 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8087c08:	b508      	push	{r3, lr}
 8087c0a:	4b02      	ldr	r3, [pc, #8]	; (8087c14 <siprintf+0xc>)
 8087c0c:	681b      	ldr	r3, [r3, #0]
 8087c0e:	691b      	ldr	r3, [r3, #16]
 8087c10:	9301      	str	r3, [sp, #4]
 8087c12:	bd08      	pop	{r3, pc}
 8087c14:	080401a0 	.word	0x080401a0

08087c18 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8087c18:	b508      	push	{r3, lr}
 8087c1a:	4b02      	ldr	r3, [pc, #8]	; (8087c24 <snprintf+0xc>)
 8087c1c:	681b      	ldr	r3, [r3, #0]
 8087c1e:	69db      	ldr	r3, [r3, #28]
 8087c20:	9301      	str	r3, [sp, #4]
 8087c22:	bd08      	pop	{r3, pc}
 8087c24:	080401a0 	.word	0x080401a0

08087c28 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8087c28:	b508      	push	{r3, lr}
 8087c2a:	4b02      	ldr	r3, [pc, #8]	; (8087c34 <vsnprintf+0xc>)
 8087c2c:	681b      	ldr	r3, [r3, #0]
 8087c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087c30:	9301      	str	r3, [sp, #4]
 8087c32:	bd08      	pop	{r3, pc}
 8087c34:	080401a0 	.word	0x080401a0

08087c38 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8087c38:	b508      	push	{r3, lr}
 8087c3a:	4b02      	ldr	r3, [pc, #8]	; (8087c44 <abort+0xc>)
 8087c3c:	681b      	ldr	r3, [r3, #0]
 8087c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087c40:	9301      	str	r3, [sp, #4]
 8087c42:	bd08      	pop	{r3, pc}
 8087c44:	080401a0 	.word	0x080401a0

08087c48 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8087c48:	b508      	push	{r3, lr}
 8087c4a:	4b02      	ldr	r3, [pc, #8]	; (8087c54 <_malloc_r+0xc>)
 8087c4c:	681b      	ldr	r3, [r3, #0]
 8087c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087c50:	9301      	str	r3, [sp, #4]
 8087c52:	bd08      	pop	{r3, pc}
 8087c54:	080401a0 	.word	0x080401a0

08087c58 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8087c58:	b508      	push	{r3, lr}
 8087c5a:	4b02      	ldr	r3, [pc, #8]	; (8087c64 <__errno+0xc>)
 8087c5c:	681b      	ldr	r3, [r3, #0]
 8087c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087c60:	9301      	str	r3, [sp, #4]
 8087c62:	bd08      	pop	{r3, pc}
 8087c64:	080401a0 	.word	0x080401a0

08087c68 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 8087c68:	b508      	push	{r3, lr}
 8087c6a:	4b02      	ldr	r3, [pc, #8]	; (8087c74 <__assert_func+0xc>)
 8087c6c:	681b      	ldr	r3, [r3, #0]
 8087c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087c70:	9301      	str	r3, [sp, #4]
 8087c72:	bd08      	pop	{r3, pc}
 8087c74:	080401a0 	.word	0x080401a0

08087c78 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8087c78:	b508      	push	{r3, lr}
 8087c7a:	4b02      	ldr	r3, [pc, #8]	; (8087c84 <newlib_impure_ptr_callback+0xc>)
 8087c7c:	681b      	ldr	r3, [r3, #0]
 8087c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087c80:	9301      	str	r3, [sp, #4]
 8087c82:	bd08      	pop	{r3, pc}
 8087c84:	080401a0 	.word	0x080401a0

08087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8087c88:	b508      	push	{r3, lr}
            return &Wire3;
 8087c8a:	f002 f8c9 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 8087c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8087c92:	f001 beeb 	b.w	8089a6c <_ZN7TwoWire4lockEv>

08087c96 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8087c96:	b510      	push	{r4, lr}
 8087c98:	4604      	mov	r4, r0
    lock_(_lock)
 8087c9a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8087c9c:	b109      	cbz	r1, 8087ca2 <_ZN4PMICC1Eb+0xc>
        lock();
 8087c9e:	f7ff fff3 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 8087ca2:	4620      	mov	r0, r4
 8087ca4:	bd10      	pop	{r4, pc}

08087ca6 <_ZN4PMIC5beginEv>:
{
 8087ca6:	b508      	push	{r3, lr}
            return &Wire3;
 8087ca8:	f002 f8ba 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 8087cac:	f001 feda 	bl	8089a64 <_ZN7TwoWire9isEnabledEv>
 8087cb0:	b918      	cbnz	r0, 8087cba <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 8087cb2:	f002 f8b5 	bl	8089e20 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 8087cb6:	f001 fe7d 	bl	80899b4 <_ZN7TwoWire5beginEv>
            return &Wire3;
 8087cba:	f002 f8b1 	bl	8089e20 <_Z20__fetch_global_Wire3v>
}
 8087cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 8087cc2:	f001 becf 	b.w	8089a64 <_ZN7TwoWire9isEnabledEv>

08087cc6 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8087cc6:	b508      	push	{r3, lr}
            return &Wire3;
 8087cc8:	f002 f8aa 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8087ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8087cd0:	f001 bed5 	b.w	8089a7e <_ZN7TwoWire6unlockEv>

08087cd4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8087cd4:	b510      	push	{r4, lr}
    if (lock_) {
 8087cd6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8087cd8:	4604      	mov	r4, r0
    if (lock_) {
 8087cda:	b10b      	cbz	r3, 8087ce0 <_ZN4PMICD1Ev+0xc>
        unlock();
 8087cdc:	f7ff fff3 	bl	8087cc6 <_ZN4PMIC6unlockEv>
}
 8087ce0:	4620      	mov	r0, r4
 8087ce2:	bd10      	pop	{r4, pc}

08087ce4 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8087ce4:	b510      	push	{r4, lr}
 8087ce6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8087ce8:	6800      	ldr	r0, [r0, #0]
 8087cea:	f7ff ffec 	bl	8087cc6 <_ZN4PMIC6unlockEv>
 8087cee:	4620      	mov	r0, r4
 8087cf0:	bd10      	pop	{r4, pc}

08087cf2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 8087cf2:	b530      	push	{r4, r5, lr}
 8087cf4:	b087      	sub	sp, #28
 8087cf6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087cf8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087cfa:	f7ff ffc5 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087cfe:	226b      	movs	r2, #107	; 0x6b
 8087d00:	2300      	movs	r3, #0
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8087d02:	2401      	movs	r4, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
 8087d08:	230a      	movs	r3, #10
 8087d0a:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire3;
 8087d0e:	f002 f887 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8087d12:	a902      	add	r1, sp, #8
 8087d14:	f001 fe87 	bl	8089a26 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8087d18:	f002 f882 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 8087d1c:	6803      	ldr	r3, [r0, #0]
 8087d1e:	4629      	mov	r1, r5
 8087d20:	689b      	ldr	r3, [r3, #8]
 8087d22:	4798      	blx	r3
            return &Wire3;
 8087d24:	f002 f87c 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8087d28:	4621      	mov	r1, r4
 8087d2a:	f001 fe94 	bl	8089a56 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 8087d2e:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8087d30:	f002 f876 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 8087d34:	a902      	add	r1, sp, #8
 8087d36:	f001 fe43 	bl	80899c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 8087d3a:	f002 f871 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 8087d3e:	6803      	ldr	r3, [r0, #0]
 8087d40:	695b      	ldr	r3, [r3, #20]
 8087d42:	4798      	blx	r3
 8087d44:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 8087d46:	a801      	add	r0, sp, #4
 8087d48:	f7ff ffcc 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087d4c:	b2e0      	uxtb	r0, r4
 8087d4e:	b007      	add	sp, #28
 8087d50:	bd30      	pop	{r4, r5, pc}

08087d52 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 8087d52:	2100      	movs	r1, #0
 8087d54:	f7ff bfcd 	b.w	8087cf2 <_ZN4PMIC12readRegisterEh>

08087d58 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 8087d58:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 8087d5a:	f7ff fffa 	bl	8087d52 <_ZN4PMIC23readInputSourceRegisterEv>
}
 8087d5e:	4b03      	ldr	r3, [pc, #12]	; (8087d6c <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 8087d60:	f000 0007 	and.w	r0, r0, #7
}
 8087d64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8087d68:	bd08      	pop	{r3, pc}
 8087d6a:	bf00      	nop
 8087d6c:	0808f210 	.word	0x0808f210

08087d70 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087d70:	2102      	movs	r1, #2
 8087d72:	f7ff bfbe 	b.w	8087cf2 <_ZN4PMIC12readRegisterEh>

08087d76 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8087d76:	2108      	movs	r1, #8
 8087d78:	f7ff bfbb 	b.w	8087cf2 <_ZN4PMIC12readRegisterEh>

08087d7c <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 8087d7c:	2109      	movs	r1, #9
 8087d7e:	f7ff bfb8 	b.w	8087cf2 <_ZN4PMIC12readRegisterEh>

08087d82 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 8087d82:	b570      	push	{r4, r5, r6, lr}
 8087d84:	b086      	sub	sp, #24
 8087d86:	460d      	mov	r5, r1
 8087d88:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087d8a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087d8c:	f7ff ff7c 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087d90:	226b      	movs	r2, #107	; 0x6b
 8087d92:	2300      	movs	r3, #0
    timeout_ = ms;
 8087d94:	2601      	movs	r6, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
 8087d9a:	230a      	movs	r3, #10
 8087d9c:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire3;
 8087da0:	f002 f83e 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8087da4:	a902      	add	r1, sp, #8
 8087da6:	f001 fe3e 	bl	8089a26 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8087daa:	f002 f839 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 8087dae:	6803      	ldr	r3, [r0, #0]
 8087db0:	4629      	mov	r1, r5
 8087db2:	689b      	ldr	r3, [r3, #8]
 8087db4:	4798      	blx	r3
            return &Wire3;
 8087db6:	f002 f833 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 8087dba:	6803      	ldr	r3, [r0, #0]
 8087dbc:	4621      	mov	r1, r4
 8087dbe:	689b      	ldr	r3, [r3, #8]
 8087dc0:	4798      	blx	r3
            return &Wire3;
 8087dc2:	f002 f82d 	bl	8089e20 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8087dc6:	4631      	mov	r1, r6
 8087dc8:	f001 fe45 	bl	8089a56 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 8087dcc:	a801      	add	r0, sp, #4
 8087dce:	f7ff ff89 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087dd2:	b006      	add	sp, #24
 8087dd4:	bd70      	pop	{r4, r5, r6, pc}

08087dd6 <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8087dd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087dd8:	4604      	mov	r4, r0
 8087dda:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087ddc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087dde:	f7ff ff53 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8087de2:	2100      	movs	r1, #0
 8087de4:	4620      	mov	r0, r4
 8087de6:	f7ff ff84 	bl	8087cf2 <_ZN4PMIC12readRegisterEh>
    switch (current) {
 8087dea:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 8087dee:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 8087df2:	d02e      	beq.n	8087e52 <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 8087df4:	d814      	bhi.n	8087e20 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 8087df6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8087dfa:	d027      	beq.n	8087e4c <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8087dfc:	d80a      	bhi.n	8087e14 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 8087dfe:	2d64      	cmp	r5, #100	; 0x64
 8087e00:	d01e      	beq.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 8087e02:	2d96      	cmp	r5, #150	; 0x96
 8087e04:	d01a      	beq.n	8087e3c <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8087e06:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 8087e08:	a801      	add	r0, sp, #4
 8087e0a:	f7ff ff6b 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087e0e:	4620      	mov	r0, r4
 8087e10:	b003      	add	sp, #12
 8087e12:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 8087e14:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8087e18:	d1f5      	bne.n	8087e06 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8087e1a:	f042 0203 	orr.w	r2, r2, #3
 8087e1e:	e00f      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 8087e20:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8087e24:	d018      	beq.n	8087e58 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8087e26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8087e2a:	429d      	cmp	r5, r3
 8087e2c:	d017      	beq.n	8087e5e <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 8087e2e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8087e32:	429d      	cmp	r5, r3
 8087e34:	d1e7      	bne.n	8087e06 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8087e36:	f042 0205 	orr.w	r2, r2, #5
 8087e3a:	e001      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8087e3c:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8087e40:	4620      	mov	r0, r4
 8087e42:	2100      	movs	r1, #0
 8087e44:	f7ff ff9d 	bl	8087d82 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 8087e48:	2401      	movs	r4, #1
        break;
 8087e4a:	e7dd      	b.n	8087e08 <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8087e4c:	f042 0202 	orr.w	r2, r2, #2
 8087e50:	e7f6      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8087e52:	f042 0204 	orr.w	r2, r2, #4
 8087e56:	e7f3      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8087e58:	f042 0206 	orr.w	r2, r2, #6
 8087e5c:	e7f0      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8087e5e:	f042 0207 	orr.w	r2, r2, #7
 8087e62:	e7ed      	b.n	8087e40 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

08087e64 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 8087e64:	b513      	push	{r0, r1, r4, lr}
 8087e66:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087e68:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087e6a:	f7ff ff0d 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8087e6e:	2101      	movs	r1, #1
 8087e70:	4620      	mov	r0, r4
 8087e72:	f7ff ff3e 	bl	8087cf2 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
 8087e76:	f000 0330 	and.w	r3, r0, #48	; 0x30
 8087e7a:	2b10      	cmp	r3, #16
 8087e7c:	d007      	beq.n	8087e8e <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
 8087e7e:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8087e82:	2101      	movs	r1, #1
 8087e84:	4620      	mov	r0, r4
 8087e86:	f042 0210 	orr.w	r2, r2, #16
 8087e8a:	f7ff ff7a 	bl	8087d82 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8087e8e:	a801      	add	r0, sp, #4
 8087e90:	f7ff ff28 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087e94:	2001      	movs	r0, #1
 8087e96:	b002      	add	sp, #8
 8087e98:	bd10      	pop	{r4, pc}

08087e9a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8087e9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8087e9e:	460c      	mov	r4, r1
 8087ea0:	4617      	mov	r7, r2
 8087ea2:	4605      	mov	r5, r0
 8087ea4:	461e      	mov	r6, r3
 8087ea6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 8087eaa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8087eae:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087eb2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087eb4:	f7ff fee8 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    if (bit7) current = current | 0b10000000;
 8087eb8:	2c00      	cmp	r4, #0
 8087eba:	bf0c      	ite	eq
 8087ebc:	2400      	moveq	r4, #0
 8087ebe:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8087ec0:	b10f      	cbz	r7, 8087ec6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 8087ec2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 8087ec6:	b10e      	cbz	r6, 8087ecc <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 8087ec8:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8087ecc:	f1ba 0f00 	cmp.w	sl, #0
 8087ed0:	d001      	beq.n	8087ed6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 8087ed2:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8087ed6:	f1b9 0f00 	cmp.w	r9, #0
 8087eda:	d001      	beq.n	8087ee0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 8087edc:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8087ee0:	f1b8 0f00 	cmp.w	r8, #0
 8087ee4:	d001      	beq.n	8087eea <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 8087ee6:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087eea:	2102      	movs	r1, #2
 8087eec:	4628      	mov	r0, r5
 8087eee:	f7ff ff00 	bl	8087cf2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 8087ef2:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8087ef6:	2102      	movs	r1, #2
 8087ef8:	4628      	mov	r0, r5
 8087efa:	4322      	orrs	r2, r4
 8087efc:	f7ff ff41 	bl	8087d82 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8087f00:	a801      	add	r0, sp, #4
 8087f02:	f7ff feef 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087f06:	2001      	movs	r0, #1
 8087f08:	b002      	add	sp, #8
 8087f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08087f0e <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8087f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087f10:	4605      	mov	r5, r0
 8087f12:	460c      	mov	r4, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087f14:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087f16:	f7ff feb7 	bl	8087c88 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    uint32_t best = 0;
 8087f1a:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 8087f1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8087f20:	4613      	mov	r3, r2
 8087f22:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8087f26:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 8087f2a:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 8087f2e:	4286      	cmp	r6, r0
 8087f30:	da06      	bge.n	8087f40 <_ZN4PMIC16setChargeVoltageEt+0x32>
 8087f32:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 8087f36:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 8087f3a:	bf24      	itt	cs
 8087f3c:	4630      	movcs	r0, r6
 8087f3e:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8087f40:	3301      	adds	r3, #1
 8087f42:	2b40      	cmp	r3, #64	; 0x40
 8087f44:	f101 0110 	add.w	r1, r1, #16
 8087f48:	d1ed      	bne.n	8087f26 <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8087f4a:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087f4c:	2104      	movs	r1, #4
 8087f4e:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8087f50:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087f52:	f7ff fece 	bl	8087cf2 <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8087f56:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8087f5a:	2104      	movs	r1, #4
 8087f5c:	4628      	mov	r0, r5
 8087f5e:	4322      	orrs	r2, r4
 8087f60:	f7ff ff0f 	bl	8087d82 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8087f64:	a801      	add	r0, sp, #4
 8087f66:	f7ff febd 	bl	8087ce4 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087f6a:	2001      	movs	r0, #1
 8087f6c:	b003      	add	sp, #12
 8087f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8087f70:	f7ff bbd4 	b.w	808771c <os_mutex_recursive_unlock>

08087f74 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 8087f74:	f7ff bbca 	b.w	808770c <os_mutex_recursive_lock>

08087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8087f78:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8087f7a:	2600      	movs	r6, #0
 8087f7c:	4604      	mov	r4, r0
 8087f7e:	460d      	mov	r5, r1
 8087f80:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8087f84:	f7ff fbb2 	bl	80876ec <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8087f88:	4628      	mov	r0, r5
    _spi = spi;
 8087f8a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8087f8c:	f7ff fca6 	bl	80878dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8087f90:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8087f92:	6066      	str	r6, [r4, #4]
}
 8087f94:	bd70      	pop	{r4, r5, r6, pc}

08087f96 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8087f96:	b510      	push	{r4, lr}
 8087f98:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8087f9a:	6880      	ldr	r0, [r0, #8]
 8087f9c:	f7ff ffea 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 8087fa0:	7820      	ldrb	r0, [r4, #0]
 8087fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8087fa6:	f7ff fc71 	bl	808788c <hal_spi_begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8087faa:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8087fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8087fb0:	f7ff bfde 	b.w	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>

08087fb4 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 8087fb4:	b538      	push	{r3, r4, r5, lr}
 8087fb6:	4604      	mov	r4, r0
 8087fb8:	460d      	mov	r5, r1
    _mutex.lock();
 8087fba:	6880      	ldr	r0, [r0, #8]
 8087fbc:	f7ff ffda 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 8087fc0:	7820      	ldrb	r0, [r4, #0]
 8087fc2:	4629      	mov	r1, r5
 8087fc4:	f7ff fc62 	bl	808788c <hal_spi_begin>
    _mutex.unlock();
 8087fc8:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8087fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087fce:	f7ff bfcf 	b.w	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>

08087fd2 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8087fd2:	b538      	push	{r3, r4, r5, lr}
 8087fd4:	4604      	mov	r4, r0
 8087fd6:	460d      	mov	r5, r1
    _mutex.lock();
 8087fd8:	6880      	ldr	r0, [r0, #8]
 8087fda:	f7ff ffcb 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8087fde:	7820      	ldrb	r0, [r4, #0]
 8087fe0:	4629      	mov	r1, r5
 8087fe2:	f7ff fc5b 	bl	808789c <hal_spi_set_bit_order>
    _mutex.unlock();
 8087fe6:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8087fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087fec:	f7ff bfc0 	b.w	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>

08087ff0 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8087ff0:	b538      	push	{r3, r4, r5, lr}
 8087ff2:	4604      	mov	r4, r0
 8087ff4:	460d      	mov	r5, r1
    _mutex.lock();
 8087ff6:	6880      	ldr	r0, [r0, #8]
 8087ff8:	f7ff ffbc 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8087ffc:	7820      	ldrb	r0, [r4, #0]
 8087ffe:	4629      	mov	r1, r5
 8088000:	f7ff fc54 	bl	80878ac <hal_spi_set_data_mode>
    _mutex.unlock();
 8088004:	68a0      	ldr	r0, [r4, #8]
        unlock();
    }
}
 8088006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808800a:	f7ff bfb1 	b.w	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>
	...

08088010 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8088010:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8088012:	2400      	movs	r4, #0
 8088014:	0840      	lsrs	r0, r0, #1
 8088016:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8088018:	6818      	ldr	r0, [r3, #0]
 808801a:	b2e5      	uxtb	r5, r4
 808801c:	4288      	cmp	r0, r1
 808801e:	d906      	bls.n	808802e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8088020:	3401      	adds	r4, #1
 8088022:	2c08      	cmp	r4, #8
 8088024:	d002      	beq.n	808802c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8088026:	0840      	lsrs	r0, r0, #1
 8088028:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808802a:	e7f5      	b.n	8088018 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808802c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808802e:	4b02      	ldr	r3, [pc, #8]	; (8088038 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8088030:	5d5b      	ldrb	r3, [r3, r5]
 8088032:	7013      	strb	r3, [r2, #0]
}
 8088034:	bd30      	pop	{r4, r5, pc}
 8088036:	bf00      	nop
 8088038:	0808f220 	.word	0x0808f220

0808803c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808803c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808803e:	2500      	movs	r5, #0
{
 8088040:	4604      	mov	r4, r0
 8088042:	b089      	sub	sp, #36	; 0x24
    _mutex.lock();
 8088044:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8088046:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808804a:	9502      	str	r5, [sp, #8]
 808804c:	f7ff ff92 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
    memset(info, 0, sizeof(hal_spi_info_t));
 8088050:	4629      	mov	r1, r5
 8088052:	2214      	movs	r2, #20
 8088054:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8088056:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8088058:	f003 f987 	bl	808b36a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808805c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808805e:	462a      	mov	r2, r5
 8088060:	4638      	mov	r0, r7
 8088062:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8088064:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8088068:	f7ff fc48 	bl	80878fc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808806c:	ab02      	add	r3, sp, #8
 808806e:	f10d 0207 	add.w	r2, sp, #7
 8088072:	4631      	mov	r1, r6
 8088074:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8088076:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808807a:	f7ff ffc9 	bl	8088010 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 808807e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8088082:	7820      	ldrb	r0, [r4, #0]
 8088084:	f7ff fc1a 	bl	80878bc <hal_spi_set_clock_divider>
    _mutex.unlock();
 8088088:	68a0      	ldr	r0, [r4, #8]
 808808a:	f7ff ff71 	bl	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>
        unlock();
    }

    return clock;
}
 808808e:	9802      	ldr	r0, [sp, #8]
 8088090:	b009      	add	sp, #36	; 0x24
 8088092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088094 <_ZN8SPIClass15setClockDividerEh>:
{
 8088094:	b538      	push	{r3, r4, r5, lr}
 8088096:	4604      	mov	r4, r0
    _mutex.lock();
 8088098:	6880      	ldr	r0, [r0, #8]
 808809a:	460d      	mov	r5, r1
 808809c:	f7ff ff6a 	bl	8087f74 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (_dividerReference)
 80880a0:	6861      	ldr	r1, [r4, #4]
 80880a2:	b1a1      	cbz	r1, 80880ce <_ZN8SPIClass15setClockDividerEh+0x3a>
    unsigned result = 0;
 80880a4:	2300      	movs	r3, #0
 80880a6:	4a0c      	ldr	r2, [pc, #48]	; (80880d8 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 80880a8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80880ac:	4285      	cmp	r5, r0
 80880ae:	d002      	beq.n	80880b6 <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 80880b0:	3301      	adds	r3, #1
 80880b2:	2b08      	cmp	r3, #8
 80880b4:	d1f8      	bne.n	80880a8 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 80880b6:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 80880b8:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 80880ba:	2201      	movs	r2, #1
 80880bc:	4620      	mov	r0, r4
 80880be:	40d9      	lsrs	r1, r3
 80880c0:	f7ff ffbc 	bl	808803c <_ZN8SPIClass13setClockSpeedEjj>
    _mutex.unlock();
 80880c4:	68a0      	ldr	r0, [r4, #8]
}
 80880c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80880ca:	f7ff bf51 	b.w	8087f70 <_ZN14RecursiveMutex6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 80880ce:	4629      	mov	r1, r5
 80880d0:	7820      	ldrb	r0, [r4, #0]
 80880d2:	f7ff fbf3 	bl	80878bc <hal_spi_set_clock_divider>
 80880d6:	e7f5      	b.n	80880c4 <_ZN8SPIClass15setClockDividerEh+0x30>
 80880d8:	0808f220 	.word	0x0808f220

080880dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80880dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80880de:	7800      	ldrb	r0, [r0, #0]
 80880e0:	f7ff fbf4 	bl	80878cc <hal_spi_transfer>
}
 80880e4:	b2c0      	uxtb	r0, r0
 80880e6:	bd08      	pop	{r3, pc}

080880e8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80880e8:	b530      	push	{r4, r5, lr}
 80880ea:	b087      	sub	sp, #28
 80880ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80880ee:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 80880f0:	9500      	str	r5, [sp, #0]
 80880f2:	7800      	ldrb	r0, [r0, #0]
 80880f4:	f7ff fc0a 	bl	808790c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 80880f8:	b93d      	cbnz	r5, 808810a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 80880fa:	7820      	ldrb	r0, [r4, #0]
 80880fc:	a902      	add	r1, sp, #8
 80880fe:	f7ff fc0d 	bl	808791c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8088102:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8088106:	07db      	lsls	r3, r3, #31
 8088108:	d4f7      	bmi.n	80880fa <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 808810a:	b007      	add	sp, #28
 808810c:	bd30      	pop	{r4, r5, pc}
	...

08088110 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8088110:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8088112:	2000      	movs	r0, #0
 8088114:	4b04      	ldr	r3, [pc, #16]	; (8088128 <_GLOBAL__sub_I_System+0x18>)
 8088116:	601a      	str	r2, [r3, #0]
 8088118:	4b04      	ldr	r3, [pc, #16]	; (808812c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 808811a:	4a05      	ldr	r2, [pc, #20]	; (8088130 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 808811c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 8088120:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8088122:	f7ff bc5b 	b.w	80879dc <set_system_mode>
 8088126:	bf00      	nop
 8088128:	20000a98 	.word	0x20000a98
 808812c:	20000a8c 	.word	0x20000a8c
 8088130:	ffff0000 	.word	0xffff0000

08088134 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8088134:	b510      	push	{r4, lr}
 8088136:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8088138:	f003 f989 	bl	808b44e <strlen>
 808813c:	1e43      	subs	r3, r0, #1
 808813e:	4620      	mov	r0, r4
 8088140:	4423      	add	r3, r4
	while(i<j){
 8088142:	4283      	cmp	r3, r0
 8088144:	d906      	bls.n	8088154 <_Z11str_reversePc+0x20>
		c = *i;
 8088146:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8088148:	7819      	ldrb	r1, [r3, #0]
 808814a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808814e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 8088152:	e7f6      	b.n	8088142 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8088154:	bd10      	pop	{r4, pc}

08088156 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8088156:	b570      	push	{r4, r5, r6, lr}
 8088158:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808815a:	1e91      	subs	r1, r2, #2
 808815c:	2922      	cmp	r1, #34	; 0x22
 808815e:	d81d      	bhi.n	808819c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 8088160:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8088162:	b930      	cbnz	r0, 8088172 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8088164:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 8088166:	4423      	add	r3, r4
 8088168:	429d      	cmp	r5, r3
 808816a:	d210      	bcs.n	808818e <ultoa+0x38>
            *ptr++ = '0';
 808816c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 8088170:	e7fa      	b.n	8088168 <ultoa+0x12>
            result.quot = a/radix;
 8088172:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8088176:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808817a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808817c:	2809      	cmp	r0, #9
                *ptr += '0';
 808817e:	bf94      	ite	ls
 8088180:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 8088182:	3157      	addhi	r1, #87	; 0x57
 8088184:	b2c9      	uxtb	r1, r1
            a = result.quot;
 8088186:	4630      	mov	r0, r6
 8088188:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808818c:	e7e9      	b.n	8088162 <ultoa+0xc>

	*ptr = '\0';
 808818e:	2300      	movs	r3, #0
	str_reverse(buffer);
 8088190:	4620      	mov	r0, r4
	*ptr = '\0';
 8088192:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 8088194:	f7ff ffce 	bl	8088134 <_Z11str_reversePc>
	return buffer;
 8088198:	4620      	mov	r0, r4
}
 808819a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808819c:	2000      	movs	r0, #0
 808819e:	e7fc      	b.n	808819a <ultoa+0x44>

080881a0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80881a0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80881a2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80881a4:	460c      	mov	r4, r1
 80881a6:	4615      	mov	r5, r2
	if(a<0){
 80881a8:	da0d      	bge.n	80881c6 <itoa+0x26>
		*buffer = '-';
 80881aa:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80881ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80881b0:	bf0c      	ite	eq
 80881b2:	4618      	moveq	r0, r3
 80881b4:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80881b6:	2301      	movs	r3, #1
		*buffer = '-';
 80881b8:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80881ba:	462a      	mov	r2, r5
 80881bc:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80881be:	f7ff ffca 	bl	8088156 <ultoa>
	}
	return buffer;
}
 80881c2:	4620      	mov	r0, r4
 80881c4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80881c6:	2301      	movs	r3, #1
 80881c8:	e7f9      	b.n	80881be <itoa+0x1e>
	...

080881cc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80881cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80881d0:	4607      	mov	r7, r0
 80881d2:	460d      	mov	r5, r1
 80881d4:	4616      	mov	r6, r2
 80881d6:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80881d8:	2200      	movs	r2, #0
 80881da:	2300      	movs	r3, #0
 80881dc:	4638      	mov	r0, r7
 80881de:	4629      	mov	r1, r5
 80881e0:	f002 fa7c 	bl	808a6dc <__aeabi_dcmplt>
 80881e4:	b120      	cbz	r0, 80881f0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80881e6:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80881e8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80881ec:	f804 3b01 	strb.w	r3, [r4], #1
 80881f0:	2300      	movs	r3, #0
    }
    long scale = 1;
 80881f2:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80881f6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80881f8:	b2d9      	uxtb	r1, r3
 80881fa:	428e      	cmp	r6, r1
 80881fc:	d903      	bls.n	8088206 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80881fe:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 8088202:	3301      	adds	r3, #1
 8088204:	e7f8      	b.n	80881f8 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 8088206:	4650      	mov	r0, sl
 8088208:	f001 ff8c 	bl	808a124 <__aeabi_i2d>
 808820c:	463a      	mov	r2, r7
 808820e:	462b      	mov	r3, r5
 8088210:	f001 fff2 	bl	808a1f8 <__aeabi_dmul>
 8088214:	4680      	mov	r8, r0
 8088216:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 8088218:	f002 fecc 	bl	808afb4 <__aeabi_d2ulz>
 808821c:	460f      	mov	r7, r1
 808821e:	4605      	mov	r5, r0
 8088220:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 8088222:	f001 ffb3 	bl	808a18c <__aeabi_ul2d>
 8088226:	4602      	mov	r2, r0
 8088228:	460b      	mov	r3, r1
 808822a:	4640      	mov	r0, r8
 808822c:	4649      	mov	r1, r9
 808822e:	f001 fe2b 	bl	8089e88 <__aeabi_dsub>
 8088232:	2200      	movs	r2, #0
 8088234:	4b12      	ldr	r3, [pc, #72]	; (8088280 <_Z4dtoadhPc+0xb4>)
 8088236:	f002 fa65 	bl	808a704 <__aeabi_dcmpge>
 808823a:	b110      	cbz	r0, 8088242 <_Z4dtoadhPc+0x76>
        fixed++;
 808823c:	3501      	adds	r5, #1
 808823e:	f147 0b00 	adc.w	fp, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8088242:	4652      	mov	r2, sl
 8088244:	4628      	mov	r0, r5
 8088246:	4659      	mov	r1, fp
 8088248:	17d3      	asrs	r3, r2, #31
 808824a:	f002 fe67 	bl	808af1c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808824e:	2301      	movs	r3, #1
 8088250:	4615      	mov	r5, r2
 8088252:	4621      	mov	r1, r4
 8088254:	220a      	movs	r2, #10
 8088256:	f7ff ff7e 	bl	8088156 <ultoa>
    if (prec) {
 808825a:	b176      	cbz	r6, 808827a <_Z4dtoadhPc+0xae>
        sout += strlen(sout);
 808825c:	4620      	mov	r0, r4
 808825e:	f003 f8f6 	bl	808b44e <strlen>
        *sout++ = '.';
 8088262:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 8088264:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8088266:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 8088268:	220a      	movs	r2, #10
 808826a:	4633      	mov	r3, r6
 808826c:	4628      	mov	r0, r5
 808826e:	3101      	adds	r1, #1
    }
}
 8088270:	b001      	add	sp, #4
 8088272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 8088276:	f7ff bf6e 	b.w	8088156 <ultoa>
}
 808827a:	b001      	add	sp, #4
 808827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088280:	3fe00000 	.word	0x3fe00000

08088284 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8088284:	b510      	push	{r4, lr}
 8088286:	4604      	mov	r4, r0
{
	free(buffer);
 8088288:	6800      	ldr	r0, [r0, #0]
 808828a:	f7ff fca5 	bl	8087bd8 <free>
}
 808828e:	4620      	mov	r0, r4
 8088290:	bd10      	pop	{r4, pc}

08088292 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8088292:	b510      	push	{r4, lr}
 8088294:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8088296:	6800      	ldr	r0, [r0, #0]
 8088298:	b108      	cbz	r0, 808829e <_ZN6String10invalidateEv+0xc>
 808829a:	f7ff fc9d 	bl	8087bd8 <free>
	buffer = NULL;
 808829e:	2300      	movs	r3, #0
	capacity = len = 0;
 80882a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80882a4:	6023      	str	r3, [r4, #0]
}
 80882a6:	bd10      	pop	{r4, pc}

080882a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80882a8:	b538      	push	{r3, r4, r5, lr}
 80882aa:	4604      	mov	r4, r0
 80882ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80882ae:	6800      	ldr	r0, [r0, #0]
 80882b0:	3101      	adds	r1, #1
 80882b2:	f7ff fc99 	bl	8087be8 <realloc>
	if (newbuffer) {
 80882b6:	b110      	cbz	r0, 80882be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80882b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80882bc:	2001      	movs	r0, #1
	}
	return 0;
}
 80882be:	bd38      	pop	{r3, r4, r5, pc}

080882c0 <_ZN6String7reserveEj>:
{
 80882c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80882c2:	6803      	ldr	r3, [r0, #0]
{
 80882c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80882c6:	b123      	cbz	r3, 80882d2 <_ZN6String7reserveEj+0x12>
 80882c8:	6843      	ldr	r3, [r0, #4]
 80882ca:	428b      	cmp	r3, r1
 80882cc:	d301      	bcc.n	80882d2 <_ZN6String7reserveEj+0x12>
 80882ce:	2001      	movs	r0, #1
}
 80882d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80882d2:	4620      	mov	r0, r4
 80882d4:	f7ff ffe8 	bl	80882a8 <_ZN6String12changeBufferEj>
 80882d8:	2800      	cmp	r0, #0
 80882da:	d0f9      	beq.n	80882d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80882dc:	68a3      	ldr	r3, [r4, #8]
 80882de:	2b00      	cmp	r3, #0
 80882e0:	d1f5      	bne.n	80882ce <_ZN6String7reserveEj+0xe>
 80882e2:	6822      	ldr	r2, [r4, #0]
 80882e4:	7013      	strb	r3, [r2, #0]
 80882e6:	e7f2      	b.n	80882ce <_ZN6String7reserveEj+0xe>

080882e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80882e8:	b570      	push	{r4, r5, r6, lr}
 80882ea:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80882ec:	4611      	mov	r1, r2
{
 80882ee:	4604      	mov	r4, r0
 80882f0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80882f2:	f7ff ffe5 	bl	80882c0 <_ZN6String7reserveEj>
 80882f6:	b920      	cbnz	r0, 8088302 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80882f8:	4620      	mov	r0, r4
 80882fa:	f7ff ffca 	bl	8088292 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80882fe:	4620      	mov	r0, r4
 8088300:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8088302:	462a      	mov	r2, r5
 8088304:	4631      	mov	r1, r6
 8088306:	6820      	ldr	r0, [r4, #0]
	len = length;
 8088308:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808830a:	f003 f820 	bl	808b34e <memcpy>
	buffer[len] = 0;
 808830e:	2100      	movs	r1, #0
 8088310:	6822      	ldr	r2, [r4, #0]
 8088312:	68a3      	ldr	r3, [r4, #8]
 8088314:	54d1      	strb	r1, [r2, r3]
	return *this;
 8088316:	e7f2      	b.n	80882fe <_ZN6String4copyEPKcj+0x16>

08088318 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 8088318:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808831a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 808831c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808831e:	460d      	mov	r5, r1
	capacity = 0;
 8088320:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8088324:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088326:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8088328:	b139      	cbz	r1, 808833a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 808832a:	4608      	mov	r0, r1
 808832c:	f003 f88f 	bl	808b44e <strlen>
 8088330:	4629      	mov	r1, r5
 8088332:	4602      	mov	r2, r0
 8088334:	4620      	mov	r0, r4
 8088336:	f7ff ffd7 	bl	80882e8 <_ZN6String4copyEPKcj>
}
 808833a:	4620      	mov	r0, r4
 808833c:	bd38      	pop	{r3, r4, r5, pc}

0808833e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808833e:	b538      	push	{r3, r4, r5, lr}
 8088340:	4605      	mov	r5, r0
	if (buffer) {
 8088342:	6800      	ldr	r0, [r0, #0]
{
 8088344:	460c      	mov	r4, r1
	if (buffer) {
 8088346:	b168      	cbz	r0, 8088364 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8088348:	686a      	ldr	r2, [r5, #4]
 808834a:	688b      	ldr	r3, [r1, #8]
 808834c:	429a      	cmp	r2, r3
 808834e:	d307      	bcc.n	8088360 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8088350:	6809      	ldr	r1, [r1, #0]
 8088352:	f003 f858 	bl	808b406 <strcpy>
			len = rhs.len;
 8088356:	68a3      	ldr	r3, [r4, #8]
 8088358:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808835a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808835c:	60a3      	str	r3, [r4, #8]
}
 808835e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8088360:	f7ff fc3a 	bl	8087bd8 <free>
	buffer = rhs.buffer;
 8088364:	6823      	ldr	r3, [r4, #0]
 8088366:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8088368:	6863      	ldr	r3, [r4, #4]
 808836a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808836c:	68a3      	ldr	r3, [r4, #8]
 808836e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8088370:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8088372:	e9c4 3300 	strd	r3, r3, [r4]
 8088376:	e7f1      	b.n	808835c <_ZN6String4moveERS_+0x1e>

08088378 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8088378:	4288      	cmp	r0, r1
{
 808837a:	b510      	push	{r4, lr}
 808837c:	460b      	mov	r3, r1
 808837e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8088380:	d004      	beq.n	808838c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8088382:	6809      	ldr	r1, [r1, #0]
 8088384:	b121      	cbz	r1, 8088390 <_ZN6StringaSERKS_+0x18>
 8088386:	689a      	ldr	r2, [r3, #8]
 8088388:	f7ff ffae 	bl	80882e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808838c:	4620      	mov	r0, r4
 808838e:	bd10      	pop	{r4, pc}
	else invalidate();
 8088390:	f7ff ff7f 	bl	8088292 <_ZN6String10invalidateEv>
 8088394:	e7fa      	b.n	808838c <_ZN6StringaSERKS_+0x14>

08088396 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8088396:	2300      	movs	r3, #0
String::String(const String &value)
 8088398:	b510      	push	{r4, lr}
 808839a:	4604      	mov	r4, r0
	capacity = 0;
 808839c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80883a0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80883a2:	7303      	strb	r3, [r0, #12]
	*this = value;
 80883a4:	f7ff ffe8 	bl	8088378 <_ZN6StringaSERKS_>
}
 80883a8:	4620      	mov	r0, r4
 80883aa:	bd10      	pop	{r4, pc}

080883ac <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80883ac:	4288      	cmp	r0, r1
{
 80883ae:	b510      	push	{r4, lr}
 80883b0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80883b2:	d001      	beq.n	80883b8 <_ZN6StringaSEOS_+0xc>
 80883b4:	f7ff ffc3 	bl	808833e <_ZN6String4moveERS_>
	return *this;
}
 80883b8:	4620      	mov	r0, r4
 80883ba:	bd10      	pop	{r4, pc}

080883bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80883bc:	b538      	push	{r3, r4, r5, lr}
 80883be:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80883c0:	460c      	mov	r4, r1
 80883c2:	b149      	cbz	r1, 80883d8 <_ZN6StringaSEPKc+0x1c>
 80883c4:	4608      	mov	r0, r1
 80883c6:	f003 f842 	bl	808b44e <strlen>
 80883ca:	4621      	mov	r1, r4
 80883cc:	4602      	mov	r2, r0
 80883ce:	4628      	mov	r0, r5
 80883d0:	f7ff ff8a 	bl	80882e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80883d4:	4628      	mov	r0, r5
 80883d6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80883d8:	f7ff ff5b 	bl	8088292 <_ZN6String10invalidateEv>
 80883dc:	e7fa      	b.n	80883d4 <_ZN6StringaSEPKc+0x18>

080883de <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80883de:	b510      	push	{r4, lr}
	buffer = NULL;
 80883e0:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80883e2:	4604      	mov	r4, r0
 80883e4:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80883e6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80883ea:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80883ec:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80883ee:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80883f0:	a901      	add	r1, sp, #4
 80883f2:	f7ff fed5 	bl	80881a0 <itoa>
	*this = buf;
 80883f6:	4620      	mov	r0, r4
 80883f8:	a901      	add	r1, sp, #4
 80883fa:	f7ff ffdf 	bl	80883bc <_ZN6StringaSEPKc>
}
 80883fe:	4620      	mov	r0, r4
 8088400:	b00a      	add	sp, #40	; 0x28
 8088402:	bd10      	pop	{r4, pc}

08088404 <_ZN6StringC1Efi>:
	buffer = NULL;
 8088404:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 8088406:	b530      	push	{r4, r5, lr}
 8088408:	4604      	mov	r4, r0
 808840a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808840c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8088410:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088412:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8088414:	b2d5      	uxtb	r5, r2
 8088416:	4608      	mov	r0, r1
 8088418:	f001 fe96 	bl	808a148 <__aeabi_f2d>
 808841c:	462a      	mov	r2, r5
 808841e:	ab01      	add	r3, sp, #4
 8088420:	f7ff fed4 	bl	80881cc <_Z4dtoadhPc>
        *this = buf;
 8088424:	4620      	mov	r0, r4
 8088426:	a901      	add	r1, sp, #4
 8088428:	f7ff ffc8 	bl	80883bc <_ZN6StringaSEPKc>
}
 808842c:	4620      	mov	r0, r4
 808842e:	b00b      	add	sp, #44	; 0x2c
 8088430:	bd30      	pop	{r4, r5, pc}

08088432 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 8088432:	b510      	push	{r4, lr}
 8088434:	4619      	mov	r1, r3
 8088436:	4604      	mov	r4, r0
	buffer = NULL;
 8088438:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808843a:	b08a      	sub	sp, #40	; 0x28
 808843c:	4610      	mov	r0, r2
	capacity = 0;
 808843e:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 8088442:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 8088446:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088448:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808844a:	ab01      	add	r3, sp, #4
 808844c:	f7ff febe 	bl	80881cc <_Z4dtoadhPc>
        *this = buf;
 8088450:	4620      	mov	r0, r4
 8088452:	a901      	add	r1, sp, #4
 8088454:	f7ff ffb2 	bl	80883bc <_ZN6StringaSEPKc>
}
 8088458:	4620      	mov	r0, r4
 808845a:	b00a      	add	sp, #40	; 0x28
 808845c:	bd10      	pop	{r4, pc}

0808845e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808845e:	b570      	push	{r4, r5, r6, lr}
 8088460:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8088462:	460e      	mov	r6, r1
 8088464:	b909      	cbnz	r1, 808846a <_ZN6String6concatEPKcj+0xc>
 8088466:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8088468:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808846a:	b16a      	cbz	r2, 8088488 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808846c:	6884      	ldr	r4, [r0, #8]
 808846e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8088470:	4621      	mov	r1, r4
 8088472:	f7ff ff25 	bl	80882c0 <_ZN6String7reserveEj>
 8088476:	2800      	cmp	r0, #0
 8088478:	d0f5      	beq.n	8088466 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808847a:	6828      	ldr	r0, [r5, #0]
 808847c:	68ab      	ldr	r3, [r5, #8]
 808847e:	4631      	mov	r1, r6
 8088480:	4418      	add	r0, r3
 8088482:	f002 ffc0 	bl	808b406 <strcpy>
	len = newlen;
 8088486:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8088488:	2001      	movs	r0, #1
 808848a:	e7ed      	b.n	8088468 <_ZN6String6concatEPKcj+0xa>

0808848c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 808848c:	688a      	ldr	r2, [r1, #8]
 808848e:	6809      	ldr	r1, [r1, #0]
 8088490:	f7ff bfe5 	b.w	808845e <_ZN6String6concatEPKcj>

08088494 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 8088494:	b538      	push	{r3, r4, r5, lr}
 8088496:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8088498:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808849a:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808849c:	b141      	cbz	r1, 80884b0 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808849e:	f002 ffd6 	bl	808b44e <strlen>
 80884a2:	4621      	mov	r1, r4
 80884a4:	4602      	mov	r2, r0
 80884a6:	4628      	mov	r0, r5
}
 80884a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80884ac:	f7ff bfd7 	b.w	808845e <_ZN6String6concatEPKcj>
}
 80884b0:	bd38      	pop	{r3, r4, r5, pc}

080884b2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80884b2:	2300      	movs	r3, #0
{
 80884b4:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80884b6:	2201      	movs	r2, #1
	buf[0] = c;
 80884b8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80884bc:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80884be:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80884c2:	f7ff ffcc 	bl	808845e <_ZN6String6concatEPKcj>
}
 80884c6:	b003      	add	sp, #12
 80884c8:	f85d fb04 	ldr.w	pc, [sp], #4

080884cc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80884cc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80884ce:	688a      	ldr	r2, [r1, #8]
 80884d0:	6809      	ldr	r1, [r1, #0]
{
 80884d2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80884d4:	f7ff ffc3 	bl	808845e <_ZN6String6concatEPKcj>
 80884d8:	b910      	cbnz	r0, 80884e0 <_ZplRK15StringSumHelperRK6String+0x14>
 80884da:	4620      	mov	r0, r4
 80884dc:	f7ff fed9 	bl	8088292 <_ZN6String10invalidateEv>
	return a;
}
 80884e0:	4620      	mov	r0, r4
 80884e2:	bd10      	pop	{r4, pc}

080884e4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80884e4:	b538      	push	{r3, r4, r5, lr}
 80884e6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80884e8:	460d      	mov	r5, r1
 80884ea:	b921      	cbnz	r1, 80884f6 <_ZplRK15StringSumHelperPKc+0x12>
 80884ec:	4620      	mov	r0, r4
 80884ee:	f7ff fed0 	bl	8088292 <_ZN6String10invalidateEv>
	return a;
}
 80884f2:	4620      	mov	r0, r4
 80884f4:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80884f6:	4608      	mov	r0, r1
 80884f8:	f002 ffa9 	bl	808b44e <strlen>
 80884fc:	4629      	mov	r1, r5
 80884fe:	4602      	mov	r2, r0
 8088500:	4620      	mov	r0, r4
 8088502:	f7ff ffac 	bl	808845e <_ZN6String6concatEPKcj>
 8088506:	2800      	cmp	r0, #0
 8088508:	d0f0      	beq.n	80884ec <_ZplRK15StringSumHelperPKc+0x8>
 808850a:	e7f2      	b.n	80884f2 <_ZplRK15StringSumHelperPKc+0xe>

0808850c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808850c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808850e:	6882      	ldr	r2, [r0, #8]
 8088510:	b93a      	cbnz	r2, 8088522 <_ZNK6String6equalsEPKc+0x16>
 8088512:	b121      	cbz	r1, 808851e <_ZNK6String6equalsEPKc+0x12>
 8088514:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8088516:	fab0 f080 	clz	r0, r0
 808851a:	0940      	lsrs	r0, r0, #5
 808851c:	e000      	b.n	8088520 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808851e:	2001      	movs	r0, #1
}
 8088520:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8088522:	6800      	ldr	r0, [r0, #0]
 8088524:	b909      	cbnz	r1, 808852a <_ZNK6String6equalsEPKc+0x1e>
 8088526:	7800      	ldrb	r0, [r0, #0]
 8088528:	e7f5      	b.n	8088516 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808852a:	f002 ff62 	bl	808b3f2 <strcmp>
 808852e:	e7f2      	b.n	8088516 <_ZNK6String6equalsEPKc+0xa>

08088530 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088530:	6883      	ldr	r3, [r0, #8]
 8088532:	428b      	cmp	r3, r1
 8088534:	d903      	bls.n	808853e <_ZNK6StringixEj+0xe>
 8088536:	6800      	ldr	r0, [r0, #0]
 8088538:	b110      	cbz	r0, 8088540 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808853a:	5c40      	ldrb	r0, [r0, r1]
 808853c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808853e:	2000      	movs	r0, #0
}
 8088540:	4770      	bx	lr

08088542 <_ZNK6String6charAtEj>:
	return operator[](loc);
 8088542:	f7ff bff5 	b.w	8088530 <_ZNK6StringixEj>
	...

08088548 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808854a:	461d      	mov	r5, r3
	if (left > right) {
 808854c:	429a      	cmp	r2, r3
 808854e:	bf88      	it	hi
 8088550:	4613      	movhi	r3, r2
{
 8088552:	460f      	mov	r7, r1
 8088554:	4614      	mov	r4, r2
	if (left > right) {
 8088556:	bf88      	it	hi
 8088558:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808855a:	490b      	ldr	r1, [pc, #44]	; (8088588 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 808855c:	bf88      	it	hi
 808855e:	461d      	movhi	r5, r3
{
 8088560:	4606      	mov	r6, r0
	String out;
 8088562:	f7ff fed9 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8088566:	68bb      	ldr	r3, [r7, #8]
 8088568:	42a3      	cmp	r3, r4
 808856a:	d30a      	bcc.n	8088582 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 808856c:	6839      	ldr	r1, [r7, #0]
 808856e:	42ab      	cmp	r3, r5
 8088570:	bf94      	ite	ls
 8088572:	ebc4 0203 	rsbls	r2, r4, r3
 8088576:	ebc4 0205 	rsbhi	r2, r4, r5
 808857a:	4630      	mov	r0, r6
 808857c:	4421      	add	r1, r4
 808857e:	f7ff feb3 	bl	80882e8 <_ZN6String4copyEPKcj>
	return out;
}
 8088582:	4630      	mov	r0, r6
 8088584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088586:	bf00      	nop
 8088588:	0808f1d9 	.word	0x0808f1d9

0808858c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808858c:	6800      	ldr	r0, [r0, #0]
 808858e:	b108      	cbz	r0, 8088594 <_ZNK6String5toIntEv+0x8>
 8088590:	f002 bec9 	b.w	808b326 <atol>
	return 0;
}
 8088594:	4770      	bx	lr

08088596 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 8088596:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 8088598:	6800      	ldr	r0, [r0, #0]
 808859a:	b120      	cbz	r0, 80885a6 <_ZNK6String7toFloatEv+0x10>
 808859c:	f002 fec0 	bl	808b320 <atof>
 80885a0:	f002 f922 	bl	808a7e8 <__aeabi_d2f>
	return 0;
}
 80885a4:	bd08      	pop	{r3, pc}
	return 0;
 80885a6:	2000      	movs	r0, #0
 80885a8:	e7fc      	b.n	80885a4 <_ZNK6String7toFloatEv+0xe>
	...

080885ac <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80885ac:	b40e      	push	{r1, r2, r3}
 80885ae:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80885b0:	ad09      	add	r5, sp, #36	; 0x24
 80885b2:	f855 7b04 	ldr.w	r7, [r5], #4
 80885b6:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80885b8:	462b      	mov	r3, r5
 80885ba:	463a      	mov	r2, r7
 80885bc:	2105      	movs	r1, #5
 80885be:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80885c0:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80885c2:	f7ff fb31 	bl	8087c28 <vsnprintf>
 80885c6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80885c8:	490b      	ldr	r1, [pc, #44]	; (80885f8 <_ZN6String6formatEPKcz+0x4c>)
 80885ca:	4620      	mov	r0, r4
 80885cc:	f7ff fea4 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80885d0:	4631      	mov	r1, r6
 80885d2:	4620      	mov	r0, r4
 80885d4:	f7ff fe74 	bl	80882c0 <_ZN6String7reserveEj>
    if (result.buffer) {
 80885d8:	6820      	ldr	r0, [r4, #0]
 80885da:	b130      	cbz	r0, 80885ea <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80885dc:	462b      	mov	r3, r5
 80885de:	463a      	mov	r2, r7
 80885e0:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80885e2:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80885e4:	f7ff fb20 	bl	8087c28 <vsnprintf>
        va_end(marker);
        result.len = n;
 80885e8:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80885ea:	4620      	mov	r0, r4
 80885ec:	b004      	add	sp, #16
 80885ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80885f2:	b003      	add	sp, #12
 80885f4:	4770      	bx	lr
 80885f6:	bf00      	nop
 80885f8:	0808f1d9 	.word	0x0808f1d9

080885fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80885fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80885fe:	4606      	mov	r6, r0
 8088600:	460d      	mov	r5, r1
  size_t n = 0;
 8088602:	2400      	movs	r4, #0
 8088604:	188f      	adds	r7, r1, r2
  while (size--) {
 8088606:	42bd      	cmp	r5, r7
 8088608:	d00c      	beq.n	8088624 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808860a:	6833      	ldr	r3, [r6, #0]
 808860c:	4630      	mov	r0, r6
 808860e:	689b      	ldr	r3, [r3, #8]
 8088610:	f815 1b01 	ldrb.w	r1, [r5], #1
 8088614:	4798      	blx	r3
     if (chunk>=0)
 8088616:	1e03      	subs	r3, r0, #0
 8088618:	db01      	blt.n	808861e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808861a:	441c      	add	r4, r3
  while (size--) {
 808861c:	e7f3      	b.n	8088606 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808861e:	2c00      	cmp	r4, #0
 8088620:	bf08      	it	eq
 8088622:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8088624:	4620      	mov	r0, r4
 8088626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088628 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8088628:	b508      	push	{r3, lr}
  return write(str);
 808862a:	f7fe f89f 	bl	808676c <_ZN5Print5writeEPKc>
}
 808862e:	bd08      	pop	{r3, pc}

08088630 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8088630:	6803      	ldr	r3, [r0, #0]
 8088632:	689b      	ldr	r3, [r3, #8]
 8088634:	4718      	bx	r3

08088636 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8088636:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8088638:	210d      	movs	r1, #13
{
 808863a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808863c:	f7ff fff8 	bl	8088630 <_ZN5Print5printEc>
  n += print('\n');
 8088640:	210a      	movs	r1, #10
  size_t n = print('\r');
 8088642:	4604      	mov	r4, r0
  n += print('\n');
 8088644:	4628      	mov	r0, r5
 8088646:	f7ff fff3 	bl	8088630 <_ZN5Print5printEc>
  return n;
}
 808864a:	4420      	add	r0, r4
 808864c:	bd38      	pop	{r3, r4, r5, pc}

0808864e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808864e:	b538      	push	{r3, r4, r5, lr}
 8088650:	4605      	mov	r5, r0
  return write(str);
 8088652:	f7fe f88b 	bl	808676c <_ZN5Print5writeEPKc>
 8088656:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 8088658:	4628      	mov	r0, r5
 808865a:	f7ff ffec 	bl	8088636 <_ZN5Print7printlnEv>
  return n;
}
 808865e:	4420      	add	r0, r4
 8088660:	bd38      	pop	{r3, r4, r5, pc}

08088662 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8088662:	b538      	push	{r3, r4, r5, lr}
 8088664:	4605      	mov	r5, r0
  size_t n = print(c);
 8088666:	f7ff ffe3 	bl	8088630 <_ZN5Print5printEc>
 808866a:	4604      	mov	r4, r0
  n += println();
 808866c:	4628      	mov	r0, r5
 808866e:	f7ff ffe2 	bl	8088636 <_ZN5Print7printlnEv>
  return n;
}
 8088672:	4420      	add	r0, r4
 8088674:	bd38      	pop	{r3, r4, r5, pc}

08088676 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8088676:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8088678:	2a01      	cmp	r2, #1
 808867a:	bf98      	it	ls
 808867c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808867e:	b530      	push	{r4, r5, lr}
 8088680:	b08b      	sub	sp, #44	; 0x2c
 8088682:	460c      	mov	r4, r1
  *str = '\0';
 8088684:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8088688:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808868a:	4625      	mov	r5, r4
 808868c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8088690:	fb04 5312 	mls	r3, r4, r2, r5
 8088694:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8088696:	2b09      	cmp	r3, #9
 8088698:	bf94      	ite	ls
 808869a:	3330      	addls	r3, #48	; 0x30
 808869c:	3337      	addhi	r3, #55	; 0x37
 808869e:	b2db      	uxtb	r3, r3
  } while(n);
 80886a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80886a2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80886a6:	d9f0      	bls.n	808868a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80886a8:	f7fe f860 	bl	808676c <_ZN5Print5writeEPKc>
}
 80886ac:	b00b      	add	sp, #44	; 0x2c
 80886ae:	bd30      	pop	{r4, r5, pc}

080886b0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80886b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80886b4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80886b6:	4619      	mov	r1, r3
 80886b8:	4610      	mov	r0, r2
{
 80886ba:	4692      	mov	sl, r2
 80886bc:	461f      	mov	r7, r3
 80886be:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80886c2:	f002 f833 	bl	808a72c <__aeabi_dcmpun>
 80886c6:	b140      	cbz	r0, 80886da <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80886c8:	4951      	ldr	r1, [pc, #324]	; (8088810 <_ZN5Print10printFloatEdh+0x160>)
 80886ca:	4628      	mov	r0, r5
 80886cc:	f7fe f84e 	bl	808676c <_ZN5Print5writeEPKc>
 80886d0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80886d2:	4620      	mov	r0, r4
 80886d4:	b003      	add	sp, #12
 80886d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80886da:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80886de:	f04f 32ff 	mov.w	r2, #4294967295
 80886e2:	4650      	mov	r0, sl
 80886e4:	4621      	mov	r1, r4
 80886e6:	4b4b      	ldr	r3, [pc, #300]	; (8088814 <_ZN5Print10printFloatEdh+0x164>)
 80886e8:	f002 f820 	bl	808a72c <__aeabi_dcmpun>
 80886ec:	b948      	cbnz	r0, 8088702 <_ZN5Print10printFloatEdh+0x52>
 80886ee:	f04f 32ff 	mov.w	r2, #4294967295
 80886f2:	4650      	mov	r0, sl
 80886f4:	4621      	mov	r1, r4
 80886f6:	4b47      	ldr	r3, [pc, #284]	; (8088814 <_ZN5Print10printFloatEdh+0x164>)
 80886f8:	f001 fffa 	bl	808a6f0 <__aeabi_dcmple>
 80886fc:	b908      	cbnz	r0, 8088702 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80886fe:	4946      	ldr	r1, [pc, #280]	; (8088818 <_ZN5Print10printFloatEdh+0x168>)
 8088700:	e7e3      	b.n	80886ca <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8088702:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088706:	4650      	mov	r0, sl
 8088708:	4639      	mov	r1, r7
 808870a:	4b44      	ldr	r3, [pc, #272]	; (808881c <_ZN5Print10printFloatEdh+0x16c>)
 808870c:	f002 f804 	bl	808a718 <__aeabi_dcmpgt>
 8088710:	b108      	cbz	r0, 8088716 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8088712:	4943      	ldr	r1, [pc, #268]	; (8088820 <_ZN5Print10printFloatEdh+0x170>)
 8088714:	e7d9      	b.n	80886ca <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8088716:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808871a:	4650      	mov	r0, sl
 808871c:	4639      	mov	r1, r7
 808871e:	4b41      	ldr	r3, [pc, #260]	; (8088824 <_ZN5Print10printFloatEdh+0x174>)
 8088720:	f001 ffdc 	bl	808a6dc <__aeabi_dcmplt>
 8088724:	2800      	cmp	r0, #0
 8088726:	d1f4      	bne.n	8088712 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8088728:	2200      	movs	r2, #0
 808872a:	2300      	movs	r3, #0
 808872c:	4650      	mov	r0, sl
 808872e:	4639      	mov	r1, r7
 8088730:	f001 ffd4 	bl	808a6dc <__aeabi_dcmplt>
 8088734:	4604      	mov	r4, r0
 8088736:	b130      	cbz	r0, 8088746 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8088738:	212d      	movs	r1, #45	; 0x2d
 808873a:	4628      	mov	r0, r5
 808873c:	f7ff ff78 	bl	8088630 <_ZN5Print5printEc>
 8088740:	4604      	mov	r4, r0
     number = -number;
 8088742:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 8088746:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808874a:	2000      	movs	r0, #0
    rounding /= 10.0;
 808874c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8088750:	4935      	ldr	r1, [pc, #212]	; (8088828 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 8088752:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 808882c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 8088756:	fa5f f38b 	uxtb.w	r3, fp
 808875a:	429e      	cmp	r6, r3
 808875c:	d906      	bls.n	808876c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 808875e:	4642      	mov	r2, r8
 8088760:	464b      	mov	r3, r9
 8088762:	f001 fe73 	bl	808a44c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 8088766:	f10b 0b01 	add.w	fp, fp, #1
 808876a:	e7f4      	b.n	8088756 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 808876c:	463b      	mov	r3, r7
 808876e:	4652      	mov	r2, sl
 8088770:	f001 fb8c 	bl	8089e8c <__adddf3>
 8088774:	4689      	mov	r9, r1
 8088776:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 8088778:	f002 f816 	bl	808a7a8 <__aeabi_d2uiz>
 808877c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 808877e:	f001 fcc1 	bl	808a104 <__aeabi_ui2d>
 8088782:	4602      	mov	r2, r0
 8088784:	460b      	mov	r3, r1
 8088786:	4640      	mov	r0, r8
 8088788:	4649      	mov	r1, r9
 808878a:	f001 fb7d 	bl	8089e88 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808878e:	220a      	movs	r2, #10
 8088790:	4680      	mov	r8, r0
 8088792:	4689      	mov	r9, r1
 8088794:	4628      	mov	r0, r5
 8088796:	4639      	mov	r1, r7
 8088798:	f7ff ff6d 	bl	8088676 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 808879c:	4404      	add	r4, r0
  if (digits > 0) {
 808879e:	2e00      	cmp	r6, #0
 80887a0:	d097      	beq.n	80886d2 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80887a2:	4628      	mov	r0, r5
 80887a4:	4922      	ldr	r1, [pc, #136]	; (8088830 <_ZN5Print10printFloatEdh+0x180>)
 80887a6:	f7fd ffe1 	bl	808676c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80887aa:	f04f 0a00 	mov.w	sl, #0
 80887ae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 808882c <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80887b2:	4404      	add	r4, r0
  while (digits-- > 0)
 80887b4:	2e00      	cmp	r6, #0
 80887b6:	d08c      	beq.n	80886d2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80887b8:	4652      	mov	r2, sl
 80887ba:	465b      	mov	r3, fp
 80887bc:	4640      	mov	r0, r8
 80887be:	4649      	mov	r1, r9
 80887c0:	f001 fd1a 	bl	808a1f8 <__aeabi_dmul>
 80887c4:	4680      	mov	r8, r0
 80887c6:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80887c8:	f001 ffc6 	bl	808a758 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80887cc:	1e07      	subs	r7, r0, #0
 80887ce:	da1b      	bge.n	8088808 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80887d0:	212d      	movs	r1, #45	; 0x2d
 80887d2:	4628      	mov	r0, r5
 80887d4:	f7ff ff2c 	bl	8088630 <_ZN5Print5printEc>
 80887d8:	4603      	mov	r3, r0
            val = -n;
 80887da:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80887dc:	220a      	movs	r2, #10
 80887de:	4628      	mov	r0, r5
 80887e0:	9301      	str	r3, [sp, #4]
 80887e2:	f7ff ff48 	bl	8088676 <_ZN5Print11printNumberEmh>
 80887e6:	9b01      	ldr	r3, [sp, #4]
 80887e8:	3e01      	subs	r6, #1
 80887ea:	4403      	add	r3, r0
    remainder -= toPrint;
 80887ec:	4638      	mov	r0, r7
    n += print(toPrint);
 80887ee:	441c      	add	r4, r3
    remainder -= toPrint;
 80887f0:	f001 fc98 	bl	808a124 <__aeabi_i2d>
 80887f4:	4602      	mov	r2, r0
 80887f6:	460b      	mov	r3, r1
 80887f8:	4640      	mov	r0, r8
 80887fa:	4649      	mov	r1, r9
 80887fc:	f001 fb44 	bl	8089e88 <__aeabi_dsub>
 8088800:	b2f6      	uxtb	r6, r6
 8088802:	4680      	mov	r8, r0
 8088804:	4689      	mov	r9, r1
  while (digits-- > 0)
 8088806:	e7d5      	b.n	80887b4 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 8088808:	4639      	mov	r1, r7
        size_t t = 0;
 808880a:	2300      	movs	r3, #0
 808880c:	e7e6      	b.n	80887dc <_ZN5Print10printFloatEdh+0x12c>
 808880e:	bf00      	nop
 8088810:	0808f228 	.word	0x0808f228
 8088814:	7fefffff 	.word	0x7fefffff
 8088818:	0808f22c 	.word	0x0808f22c
 808881c:	41efffff 	.word	0x41efffff
 8088820:	0808f230 	.word	0x0808f230
 8088824:	c1efffff 	.word	0xc1efffff
 8088828:	3fe00000 	.word	0x3fe00000
 808882c:	40240000 	.word	0x40240000
 8088830:	0808ef00 	.word	0x0808ef00

08088834 <_ZN5Print7printlnEdi>:
{
 8088834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8088836:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 808883a:	4605      	mov	r5, r0
  return printFloat(n, digits);
 808883c:	9100      	str	r1, [sp, #0]
 808883e:	f7ff ff37 	bl	80886b0 <_ZN5Print10printFloatEdh>
 8088842:	4604      	mov	r4, r0
  n += println();
 8088844:	4628      	mov	r0, r5
 8088846:	f7ff fef6 	bl	8088636 <_ZN5Print7printlnEv>
}
 808884a:	4420      	add	r0, r4
 808884c:	b003      	add	sp, #12
 808884e:	bd30      	pop	{r4, r5, pc}

08088850 <_ZN5Print7printlnEfi>:
{
 8088850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088852:	4604      	mov	r4, r0
    return println((double)num, digits);
 8088854:	4608      	mov	r0, r1
{
 8088856:	4615      	mov	r5, r2
    return println((double)num, digits);
 8088858:	f001 fc76 	bl	808a148 <__aeabi_f2d>
 808885c:	9500      	str	r5, [sp, #0]
 808885e:	4602      	mov	r2, r0
 8088860:	460b      	mov	r3, r1
 8088862:	4620      	mov	r0, r4
 8088864:	f7ff ffe6 	bl	8088834 <_ZN5Print7printlnEdi>
}
 8088868:	b003      	add	sp, #12
 808886a:	bd30      	pop	{r4, r5, pc}

0808886c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088870:	b086      	sub	sp, #24
 8088872:	af00      	add	r7, sp, #0
 8088874:	4605      	mov	r5, r0
 8088876:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8088878:	1d38      	adds	r0, r7, #4
 808887a:	2114      	movs	r1, #20
{
 808887c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808887e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8088880:	f7ff f9d2 	bl	8087c28 <vsnprintf>

    if (n<bufsize)
 8088884:	2813      	cmp	r0, #19
 8088886:	d80e      	bhi.n	80888a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8088888:	4628      	mov	r0, r5
 808888a:	1d39      	adds	r1, r7, #4
 808888c:	f7fd ff6e 	bl	808676c <_ZN5Print5writeEPKc>
 8088890:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8088892:	b11e      	cbz	r6, 808889c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8088894:	4628      	mov	r0, r5
 8088896:	f7ff fece 	bl	8088636 <_ZN5Print7printlnEv>
 808889a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808889c:	4620      	mov	r0, r4
 808889e:	3718      	adds	r7, #24
 80888a0:	46bd      	mov	sp, r7
 80888a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80888a6:	f100 0308 	add.w	r3, r0, #8
 80888aa:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80888ae:	46e8      	mov	r8, sp
        char bigger[n+1];
 80888b0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80888b4:	4622      	mov	r2, r4
 80888b6:	1c41      	adds	r1, r0, #1
 80888b8:	683b      	ldr	r3, [r7, #0]
 80888ba:	4668      	mov	r0, sp
 80888bc:	f7ff f9b4 	bl	8087c28 <vsnprintf>
  return write(str);
 80888c0:	4669      	mov	r1, sp
 80888c2:	4628      	mov	r0, r5
 80888c4:	f7fd ff52 	bl	808676c <_ZN5Print5writeEPKc>
 80888c8:	4604      	mov	r4, r0
 80888ca:	46c5      	mov	sp, r8
 80888cc:	e7e1      	b.n	8088892 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080888ce <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80888ce:	b510      	push	{r4, lr}
 80888d0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80888d2:	f7fe fed3 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80888d6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80888d8:	6823      	ldr	r3, [r4, #0]
 80888da:	4620      	mov	r0, r4
 80888dc:	695b      	ldr	r3, [r3, #20]
 80888de:	4798      	blx	r3
    if (c >= 0) return c;
 80888e0:	2800      	cmp	r0, #0
 80888e2:	da08      	bge.n	80888f6 <_ZN6Stream9timedReadEv+0x28>
 80888e4:	f7fe feca 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80888e8:	68e3      	ldr	r3, [r4, #12]
 80888ea:	1ac0      	subs	r0, r0, r3
 80888ec:	68a3      	ldr	r3, [r4, #8]
 80888ee:	4298      	cmp	r0, r3
 80888f0:	d3f2      	bcc.n	80888d8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80888f2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80888f6:	bd10      	pop	{r4, pc}

080888f8 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 80888f8:	6081      	str	r1, [r0, #8]
}
 80888fa:	4770      	bx	lr

080888fc <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80888fc:	b538      	push	{r3, r4, r5, lr}
 80888fe:	460d      	mov	r5, r1
  String ret;
 8088900:	4907      	ldr	r1, [pc, #28]	; (8088920 <_ZN6Stream10readStringEv+0x24>)
{
 8088902:	4604      	mov	r4, r0
  String ret;
 8088904:	f7ff fd08 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8088908:	4628      	mov	r0, r5
 808890a:	f7ff ffe0 	bl	80888ce <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808890e:	2800      	cmp	r0, #0
 8088910:	db04      	blt.n	808891c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8088912:	b2c1      	uxtb	r1, r0
 8088914:	4620      	mov	r0, r4
 8088916:	f7ff fdcc 	bl	80884b2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808891a:	e7f5      	b.n	8088908 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 808891c:	4620      	mov	r0, r4
 808891e:	bd38      	pop	{r3, r4, r5, pc}
 8088920:	0808f1d9 	.word	0x0808f1d9

08088924 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 8088924:	b570      	push	{r4, r5, r6, lr}
 8088926:	460d      	mov	r5, r1
  String ret;
 8088928:	4909      	ldr	r1, [pc, #36]	; (8088950 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 808892a:	4604      	mov	r4, r0
 808892c:	4616      	mov	r6, r2
  String ret;
 808892e:	f7ff fcf3 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8088932:	4628      	mov	r0, r5
 8088934:	f7ff ffcb 	bl	80888ce <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 8088938:	2800      	cmp	r0, #0
 808893a:	db06      	blt.n	808894a <_ZN6Stream15readStringUntilEc+0x26>
 808893c:	4286      	cmp	r6, r0
 808893e:	d004      	beq.n	808894a <_ZN6Stream15readStringUntilEc+0x26>
 8088940:	b2c1      	uxtb	r1, r0
 8088942:	4620      	mov	r0, r4
 8088944:	f7ff fdb5 	bl	80884b2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 8088948:	e7f3      	b.n	8088932 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 808894a:	4620      	mov	r0, r4
 808894c:	bd70      	pop	{r4, r5, r6, pc}
 808894e:	bf00      	nop
 8088950:	0808f1d9 	.word	0x0808f1d9

08088954 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8088954:	4b01      	ldr	r3, [pc, #4]	; (808895c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8088956:	4a02      	ldr	r2, [pc, #8]	; (8088960 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8088958:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808895a:	4770      	bx	lr
 808895c:	20000a9c 	.word	0x20000a9c
 8088960:	0808f234 	.word	0x0808f234

08088964 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8088964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8088968:	4b15      	ldr	r3, [pc, #84]	; (80889c0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808896a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80889c4 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 808896e:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 8088972:	4b15      	ldr	r3, [pc, #84]	; (80889c8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 8088974:	1980      	adds	r0, r0, r6
 8088976:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 808897a:	e9d3 6100 	ldrd	r6, r1, [r3]
 808897e:	1986      	adds	r6, r0, r6
 8088980:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 8088984:	e9d8 2300 	ldrd	r2, r3, [r8]
 8088988:	42bb      	cmp	r3, r7
 808898a:	bf08      	it	eq
 808898c:	42b2      	cmpeq	r2, r6
{
 808898e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 8088990:	d013      	beq.n	80889ba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8088992:	a903      	add	r1, sp, #12
 8088994:	4668      	mov	r0, sp
 8088996:	e9cd 6700 	strd	r6, r7, [sp]
 808899a:	f7f7 fb41 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 808899e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80889a0:	4d0a      	ldr	r5, [pc, #40]	; (80889cc <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80889a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80889a6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80889a8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80889aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80889ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80889ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80889b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80889b2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80889b6:	6823      	ldr	r3, [r4, #0]
 80889b8:	602b      	str	r3, [r5, #0]
    }
}
 80889ba:	b00c      	add	sp, #48	; 0x30
 80889bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80889c0:	20000ad8 	.word	0x20000ad8
 80889c4:	20000ae0 	.word	0x20000ae0
 80889c8:	20000ad0 	.word	0x20000ad0
 80889cc:	20000aa8 	.word	0x20000aa8

080889d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80889d0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80889d2:	2000      	movs	r0, #0
 80889d4:	f7ff f8e8 	bl	8087ba8 <spark_sync_time_pending>
 80889d8:	b128      	cbz	r0, 80889e6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80889da:	f7ff f8d5 	bl	8087b88 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80889de:	f080 0001 	eor.w	r0, r0, #1
 80889e2:	b2c0      	uxtb	r0, r0
    }
 80889e4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80889e6:	2001      	movs	r0, #1
 80889e8:	e7fc      	b.n	80889e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080889ec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80889ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80889ee:	f7ff ffb9 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80889f2:	4b02      	ldr	r3, [pc, #8]	; (80889fc <_ZN9TimeClass5monthEx+0x10>)
 80889f4:	6918      	ldr	r0, [r3, #16]
}
 80889f6:	3001      	adds	r0, #1
 80889f8:	bd08      	pop	{r3, pc}
 80889fa:	bf00      	nop
 80889fc:	20000aa8 	.word	0x20000aa8

08088a00 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088a00:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088a02:	490a      	ldr	r1, [pc, #40]	; (8088a2c <_ZN9TimeClass4zoneEf+0x2c>)
{
 8088a04:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088a06:	f002 f9eb 	bl	808ade0 <__aeabi_fcmplt>
 8088a0a:	b968      	cbnz	r0, 8088a28 <_ZN9TimeClass4zoneEf+0x28>
 8088a0c:	4620      	mov	r0, r4
 8088a0e:	4908      	ldr	r1, [pc, #32]	; (8088a30 <_ZN9TimeClass4zoneEf+0x30>)
 8088a10:	f002 fa04 	bl	808ae1c <__aeabi_fcmpgt>
 8088a14:	b940      	cbnz	r0, 8088a28 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8088a16:	4907      	ldr	r1, [pc, #28]	; (8088a34 <_ZN9TimeClass4zoneEf+0x34>)
 8088a18:	4620      	mov	r0, r4
 8088a1a:	f002 f843 	bl	808aaa4 <__aeabi_fmul>
 8088a1e:	f002 fa95 	bl	808af4c <__aeabi_f2lz>
 8088a22:	4b05      	ldr	r3, [pc, #20]	; (8088a38 <_ZN9TimeClass4zoneEf+0x38>)
 8088a24:	e9c3 0100 	strd	r0, r1, [r3]
}
 8088a28:	bd10      	pop	{r4, pc}
 8088a2a:	bf00      	nop
 8088a2c:	c1400000 	.word	0xc1400000
 8088a30:	41600000 	.word	0x41600000
 8088a34:	45610000 	.word	0x45610000
 8088a38:	20000ad8 	.word	0x20000ad8

08088a3c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 8088a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8088a3e:	4602      	mov	r2, r0
 8088a40:	460b      	mov	r3, r1
    struct timeval tv = {
 8088a42:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 8088a44:	4668      	mov	r0, sp
    };
 8088a46:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 8088a4a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 8088a4e:	f7fe fe45 	bl	80876dc <hal_rtc_set_time>
 8088a52:	4602      	mov	r2, r0
 8088a54:	b910      	cbnz	r0, 8088a5c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 8088a56:	4601      	mov	r1, r0
 8088a58:	f7fe fff8 	bl	8087a4c <system_notify_time_changed>
    }
}
 8088a5c:	b005      	add	sp, #20
 8088a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088a64 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8088a64:	b530      	push	{r4, r5, lr}
 8088a66:	b093      	sub	sp, #76	; 0x4c
 8088a68:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 8088a6c:	4b19      	ldr	r3, [pc, #100]	; (8088ad4 <_ZN9TimeClass7timeStrEx+0x70>)
{
 8088a6e:	4604      	mov	r4, r0
    t += time_zone_cache;
 8088a70:	e9d3 1000 	ldrd	r1, r0, [r3]
 8088a74:	9b01      	ldr	r3, [sp, #4]
 8088a76:	1852      	adds	r2, r2, r1
 8088a78:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 8088a7c:	4816      	ldr	r0, [pc, #88]	; (8088ad8 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8088a7e:	2500      	movs	r5, #0
    t += dst_current_cache;
 8088a80:	e9d0 1000 	ldrd	r1, r0, [r0]
 8088a84:	1852      	adds	r2, r2, r1
 8088a86:	eb43 0300 	adc.w	r3, r3, r0
 8088a8a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8088a8e:	2224      	movs	r2, #36	; 0x24
 8088a90:	2100      	movs	r1, #0
 8088a92:	eb0d 0002 	add.w	r0, sp, r2
 8088a96:	f002 fc68 	bl	808b36a <memset>
    localtime_r(&t, &calendar_time);
 8088a9a:	a909      	add	r1, sp, #36	; 0x24
 8088a9c:	4668      	mov	r0, sp
 8088a9e:	f7f7 fabf 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8088aa2:	2216      	movs	r2, #22
 8088aa4:	4629      	mov	r1, r5
 8088aa6:	a803      	add	r0, sp, #12
 8088aa8:	9502      	str	r5, [sp, #8]
 8088aaa:	f002 fc5e 	bl	808b36a <memset>
    asctime_r(&calendar_time, ascstr);
 8088aae:	a902      	add	r1, sp, #8
 8088ab0:	a809      	add	r0, sp, #36	; 0x24
 8088ab2:	f002 fc09 	bl	808b2c8 <asctime_r>
    int len = strlen(ascstr);
 8088ab6:	a802      	add	r0, sp, #8
 8088ab8:	f002 fcc9 	bl	808b44e <strlen>
    ascstr[len-1] = 0; // remove final newline
 8088abc:	ab12      	add	r3, sp, #72	; 0x48
 8088abe:	4418      	add	r0, r3
 8088ac0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8088ac4:	a902      	add	r1, sp, #8
 8088ac6:	4620      	mov	r0, r4
 8088ac8:	f7ff fc26 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8088acc:	4620      	mov	r0, r4
 8088ace:	b013      	add	sp, #76	; 0x4c
 8088ad0:	bd30      	pop	{r4, r5, pc}
 8088ad2:	bf00      	nop
 8088ad4:	20000ad8 	.word	0x20000ad8
 8088ad8:	20000ad0 	.word	0x20000ad0

08088adc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8088adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088ae0:	b0a4      	sub	sp, #144	; 0x90
 8088ae2:	4607      	mov	r7, r0
 8088ae4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8088ae6:	a814      	add	r0, sp, #80	; 0x50
{
 8088ae8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8088aea:	223f      	movs	r2, #63	; 0x3f
{
 8088aec:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8088aee:	f002 fcca 	bl	808b486 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8088af2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8088af4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8088af6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8088afa:	f002 fca8 	bl	808b44e <strlen>
 8088afe:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8088b00:	bb4c      	cbnz	r4, 8088b56 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 8088b02:	4929      	ldr	r1, [pc, #164]	; (8088ba8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 8088b04:	a803      	add	r0, sp, #12
 8088b06:	f002 fc7e 	bl	808b406 <strcpy>
{
 8088b0a:	2600      	movs	r6, #0
 8088b0c:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8088b0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8088b12:	45b1      	cmp	r9, r6
 8088b14:	d934      	bls.n	8088b80 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8088b16:	7823      	ldrb	r3, [r4, #0]
 8088b18:	f106 0a01 	add.w	sl, r6, #1
 8088b1c:	2b25      	cmp	r3, #37	; 0x25
 8088b1e:	d117      	bne.n	8088b50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 8088b20:	7863      	ldrb	r3, [r4, #1]
 8088b22:	2b7a      	cmp	r3, #122	; 0x7a
 8088b24:	d114      	bne.n	8088b50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 8088b26:	a803      	add	r0, sp, #12
 8088b28:	f002 fc91 	bl	808b44e <strlen>
 8088b2c:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8088b2e:	ab14      	add	r3, sp, #80	; 0x50
 8088b30:	1830      	adds	r0, r6, r0
 8088b32:	4418      	add	r0, r3
 8088b34:	eba9 0206 	sub.w	r2, r9, r6
 8088b38:	1ca1      	adds	r1, r4, #2
 8088b3a:	f002 fc08 	bl	808b34e <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8088b3e:	462a      	mov	r2, r5
 8088b40:	a903      	add	r1, sp, #12
 8088b42:	4620      	mov	r0, r4
 8088b44:	f002 fc03 	bl	808b34e <memcpy>
            len = strlen(format_str);
 8088b48:	a814      	add	r0, sp, #80	; 0x50
 8088b4a:	f002 fc80 	bl	808b44e <strlen>
 8088b4e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 8088b50:	4656      	mov	r6, sl
 8088b52:	3401      	adds	r4, #1
 8088b54:	e7db      	b.n	8088b0e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8088b56:	233c      	movs	r3, #60	; 0x3c
 8088b58:	fb94 f2f3 	sdiv	r2, r4, r3
 8088b5c:	2a00      	cmp	r2, #0
 8088b5e:	bfb8      	it	lt
 8088b60:	4252      	neglt	r2, r2
 8088b62:	fbb2 f1f3 	udiv	r1, r2, r3
 8088b66:	fb03 2211 	mls	r2, r3, r1, r2
 8088b6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8088b6e:	9200      	str	r2, [sp, #0]
 8088b70:	fb94 f3f3 	sdiv	r3, r4, r3
 8088b74:	2110      	movs	r1, #16
 8088b76:	4a0d      	ldr	r2, [pc, #52]	; (8088bac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8088b78:	a803      	add	r0, sp, #12
 8088b7a:	f7ff f84d 	bl	8087c18 <snprintf>
 8088b7e:	e7c4      	b.n	8088b0a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8088b80:	2100      	movs	r1, #0
 8088b82:	222e      	movs	r2, #46	; 0x2e
 8088b84:	a808      	add	r0, sp, #32
 8088b86:	9107      	str	r1, [sp, #28]
 8088b88:	f002 fbef 	bl	808b36a <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8088b8c:	4643      	mov	r3, r8
 8088b8e:	aa14      	add	r2, sp, #80	; 0x50
 8088b90:	2132      	movs	r1, #50	; 0x32
 8088b92:	a807      	add	r0, sp, #28
 8088b94:	f7f7 fa4c 	bl	8080030 <strftime>
    return String(buf);
 8088b98:	4638      	mov	r0, r7
 8088b9a:	a907      	add	r1, sp, #28
 8088b9c:	f7ff fbbc 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8088ba0:	4638      	mov	r0, r7
 8088ba2:	b024      	add	sp, #144	; 0x90
 8088ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088ba8:	0808f238 	.word	0x0808f238
 8088bac:	0808f23a 	.word	0x0808f23a

08088bb0 <_ZN9TimeClass6formatExPKc>:
{
 8088bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088bb2:	b08d      	sub	sp, #52	; 0x34
 8088bb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8088bb6:	4604      	mov	r4, r0
 8088bb8:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8088bbc:	b915      	cbnz	r5, 8088bc4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8088bbe:	4b19      	ldr	r3, [pc, #100]	; (8088c24 <_ZN9TimeClass6formatExPKc+0x74>)
 8088bc0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8088bc2:	b12d      	cbz	r5, 8088bd0 <_ZN9TimeClass6formatExPKc+0x20>
 8088bc4:	4b18      	ldr	r3, [pc, #96]	; (8088c28 <_ZN9TimeClass6formatExPKc+0x78>)
 8088bc6:	4628      	mov	r0, r5
 8088bc8:	6819      	ldr	r1, [r3, #0]
 8088bca:	f002 fc12 	bl	808b3f2 <strcmp>
 8088bce:	b938      	cbnz	r0, 8088be0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8088bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8088bd4:	4620      	mov	r0, r4
 8088bd6:	f7ff ff45 	bl	8088a64 <_ZN9TimeClass7timeStrEx>
}
 8088bda:	4620      	mov	r0, r4
 8088bdc:	b00d      	add	sp, #52	; 0x34
 8088bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8088be0:	9900      	ldr	r1, [sp, #0]
 8088be2:	4e12      	ldr	r6, [pc, #72]	; (8088c2c <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8088be4:	4f12      	ldr	r7, [pc, #72]	; (8088c30 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8088be6:	e9d6 3200 	ldrd	r3, r2, [r6]
 8088bea:	185b      	adds	r3, r3, r1
 8088bec:	9901      	ldr	r1, [sp, #4]
 8088bee:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 8088bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8088bf6:	181b      	adds	r3, r3, r0
 8088bf8:	eb42 0201 	adc.w	r2, r2, r1
 8088bfc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8088c00:	2100      	movs	r1, #0
 8088c02:	2224      	movs	r2, #36	; 0x24
 8088c04:	a803      	add	r0, sp, #12
 8088c06:	f002 fbb0 	bl	808b36a <memset>
    localtime_r(&t, &calendar_time);
 8088c0a:	a903      	add	r1, sp, #12
 8088c0c:	4668      	mov	r0, sp
 8088c0e:	f7f7 fa07 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8088c12:	6832      	ldr	r2, [r6, #0]
 8088c14:	683b      	ldr	r3, [r7, #0]
 8088c16:	4620      	mov	r0, r4
 8088c18:	4413      	add	r3, r2
 8088c1a:	a903      	add	r1, sp, #12
 8088c1c:	462a      	mov	r2, r5
 8088c1e:	f7ff ff5d 	bl	8088adc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8088c22:	e7da      	b.n	8088bda <_ZN9TimeClass6formatExPKc+0x2a>
 8088c24:	20000aa4 	.word	0x20000aa4
 8088c28:	200000d0 	.word	0x200000d0
 8088c2c:	20000ad8 	.word	0x20000ad8
 8088c30:	20000ad0 	.word	0x20000ad0

08088c34 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8088c34:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8088c36:	2000      	movs	r0, #0
 8088c38:	f7fe fd40 	bl	80876bc <hal_rtc_time_is_valid>
    if (rtcstate)
 8088c3c:	4604      	mov	r4, r0
 8088c3e:	b9a0      	cbnz	r0, 8088c6a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8088c40:	f7fe fec4 	bl	80879cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8088c44:	2801      	cmp	r0, #1
 8088c46:	d110      	bne.n	8088c6a <_ZN9TimeClass7isValidEv+0x36>
 8088c48:	4620      	mov	r0, r4
 8088c4a:	f7fe fef7 	bl	8087a3c <system_thread_get_state>
 8088c4e:	b960      	cbnz	r0, 8088c6a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8088c50:	f7ff febe 	bl	80889d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8088c54:	b910      	cbnz	r0, 8088c5c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8088c56:	f7fe ff8f 	bl	8087b78 <spark_process>
        while (_while() && !_condition()) {
 8088c5a:	e7f9      	b.n	8088c50 <_ZN9TimeClass7isValidEv+0x1c>
 8088c5c:	f7ff feb8 	bl	80889d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8088c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8088c64:	2000      	movs	r0, #0
 8088c66:	f7fe bd29 	b.w	80876bc <hal_rtc_time_is_valid>
}
 8088c6a:	4620      	mov	r0, r4
 8088c6c:	bd10      	pop	{r4, pc}

08088c6e <_ZN9TimeClass3nowEv>:
{
 8088c6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8088c70:	f7ff ffe0 	bl	8088c34 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8088c74:	2210      	movs	r2, #16
 8088c76:	2100      	movs	r1, #0
 8088c78:	4668      	mov	r0, sp
 8088c7a:	f002 fb76 	bl	808b36a <memset>
    hal_rtc_get_time(&tv, nullptr);
 8088c7e:	2100      	movs	r1, #0
 8088c80:	4668      	mov	r0, sp
 8088c82:	f7fe fd23 	bl	80876cc <hal_rtc_get_time>
}
 8088c86:	9800      	ldr	r0, [sp, #0]
 8088c88:	b005      	add	sp, #20
 8088c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088c90 <_ZN9TimeClass4hourEv>:
{
 8088c90:	b508      	push	{r3, lr}
	return hour(now());
 8088c92:	f7ff ffec 	bl	8088c6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088c96:	17c1      	asrs	r1, r0, #31
 8088c98:	f7ff fe64 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
}
 8088c9c:	4b01      	ldr	r3, [pc, #4]	; (8088ca4 <_ZN9TimeClass4hourEv+0x14>)
 8088c9e:	6898      	ldr	r0, [r3, #8]
 8088ca0:	bd08      	pop	{r3, pc}
 8088ca2:	bf00      	nop
 8088ca4:	20000aa8 	.word	0x20000aa8

08088ca8 <_ZN9TimeClass6minuteEv>:
{
 8088ca8:	b508      	push	{r3, lr}
	return minute(now());
 8088caa:	f7ff ffe0 	bl	8088c6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088cae:	17c1      	asrs	r1, r0, #31
 8088cb0:	f7ff fe58 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
}
 8088cb4:	4b01      	ldr	r3, [pc, #4]	; (8088cbc <_ZN9TimeClass6minuteEv+0x14>)
 8088cb6:	6858      	ldr	r0, [r3, #4]
 8088cb8:	bd08      	pop	{r3, pc}
 8088cba:	bf00      	nop
 8088cbc:	20000aa8 	.word	0x20000aa8

08088cc0 <_ZN9TimeClass6secondEv>:
{
 8088cc0:	b508      	push	{r3, lr}
	return second(now());
 8088cc2:	f7ff ffd4 	bl	8088c6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088cc6:	17c1      	asrs	r1, r0, #31
 8088cc8:	f7ff fe4c 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
}
 8088ccc:	4b01      	ldr	r3, [pc, #4]	; (8088cd4 <_ZN9TimeClass6secondEv+0x14>)
 8088cce:	6818      	ldr	r0, [r3, #0]
 8088cd0:	bd08      	pop	{r3, pc}
 8088cd2:	bf00      	nop
 8088cd4:	20000aa8 	.word	0x20000aa8

08088cd8 <_ZN9TimeClass3dayEv>:
{
 8088cd8:	b508      	push	{r3, lr}
	return day(now());
 8088cda:	f7ff ffc8 	bl	8088c6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088cde:	17c1      	asrs	r1, r0, #31
 8088ce0:	f7ff fe40 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
}
 8088ce4:	4b01      	ldr	r3, [pc, #4]	; (8088cec <_ZN9TimeClass3dayEv+0x14>)
 8088ce6:	68d8      	ldr	r0, [r3, #12]
 8088ce8:	bd08      	pop	{r3, pc}
 8088cea:	bf00      	nop
 8088cec:	20000aa8 	.word	0x20000aa8

08088cf0 <_ZN9TimeClass5monthEv>:
{
 8088cf0:	b508      	push	{r3, lr}
	return month(now());
 8088cf2:	f7ff ffbc 	bl	8088c6e <_ZN9TimeClass3nowEv>
}
 8088cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 8088cfa:	17c1      	asrs	r1, r0, #31
 8088cfc:	f7ff be76 	b.w	80889ec <_ZN9TimeClass5monthEx>

08088d00 <_ZN9TimeClass4yearEv>:
{
 8088d00:	b508      	push	{r3, lr}
	return year(now());
 8088d02:	f7ff ffb4 	bl	8088c6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088d06:	17c1      	asrs	r1, r0, #31
 8088d08:	f7ff fe2c 	bl	8088964 <_ZL22Refresh_UnixTime_Cachex>
}
 8088d0c:	4b01      	ldr	r3, [pc, #4]	; (8088d14 <_ZN9TimeClass4yearEv+0x14>)
 8088d0e:	6958      	ldr	r0, [r3, #20]
 8088d10:	bd08      	pop	{r3, pc}
 8088d12:	bf00      	nop
 8088d14:	20000aa8 	.word	0x20000aa8

08088d18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8088d18:	4b02      	ldr	r3, [pc, #8]	; (8088d24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8088d1a:	681a      	ldr	r2, [r3, #0]
 8088d1c:	4b02      	ldr	r3, [pc, #8]	; (8088d28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8088d1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8088d20:	4770      	bx	lr
 8088d22:	bf00      	nop
 8088d24:	200000d0 	.word	0x200000d0
 8088d28:	20000aa4 	.word	0x20000aa4

08088d2c <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 8088d2c:	f7fe bc86 	b.w	808763c <hal_adc_set_sample_time>

08088d30 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8088d30:	2100      	movs	r1, #0
 8088d32:	f7fe be5b 	b.w	80879ec <system_delay_ms>

08088d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8088d36:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088d38:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8088d3a:	460b      	mov	r3, r1
 8088d3c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088d3e:	c803      	ldmia	r0, {r0, r1}
 8088d40:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8088d44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8088d48:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8088d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8088d50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8088d54:	b002      	add	sp, #8
 8088d56:	bd10      	pop	{r4, pc}

08088d58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8088d58:	2200      	movs	r2, #0
 8088d5a:	4b01      	ldr	r3, [pc, #4]	; (8088d60 <_GLOBAL__sub_I_RGB+0x8>)
 8088d5c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 8088d5e:	4770      	bx	lr
 8088d60:	20000ae8 	.word	0x20000ae8

08088d64 <_ZN8particle6detail7_getSoCEhhh>:
        float value = (float)((MSB << 4) | (LSB >> 4));
        return value / 800.0;
    }

    // Converts SOC_REGISTER reading to state of charge of the cell as a percentage
    float _getSoC(byte MSB, byte LSB, byte soc_bits_precision) {
 8088d64:	b510      	push	{r4, lr}
 8088d66:	4614      	mov	r4, r2

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
 8088d68:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 8088d6c:	f001 fe42 	bl	808a9f4 <__aeabi_ui2f>
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
 8088d70:	2c13      	cmp	r4, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
 8088d72:	bf0c      	ite	eq
 8088d74:	f04f 516c 	moveq.w	r1, #989855744	; 0x3b000000
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
 8088d78:	f04f 516e 	movne.w	r1, #998244352	; 0x3b800000
 8088d7c:	f001 fe92 	bl	808aaa4 <__aeabi_fmul>
        }
        return soc_percent;

    }
 8088d80:	bd10      	pop	{r4, pc}

08088d82 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8088d82:	6800      	ldr	r0, [r0, #0]
 8088d84:	f000 be72 	b.w	8089a6c <_ZN7TwoWire4lockEv>

08088d88 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8088d88:	b510      	push	{r4, lr}
 8088d8a:	4604      	mov	r4, r0
      lock_(_lock) {
 8088d8c:	6001      	str	r1, [r0, #0]
 8088d8e:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8088d90:	b10a      	cbz	r2, 8088d96 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8088d92:	f7ff fff6 	bl	8088d82 <_ZN9FuelGauge4lockEv>
}
 8088d96:	4620      	mov	r0, r4
 8088d98:	bd10      	pop	{r4, pc}

08088d9a <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8088d9a:	b538      	push	{r3, r4, r5, lr}
 8088d9c:	4604      	mov	r4, r0
 8088d9e:	460d      	mov	r5, r1
            return &Wire3;
 8088da0:	f001 f83e 	bl	8089e20 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8088da4:	462a      	mov	r2, r5
            return &Wire3;
 8088da6:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8088da8:	4620      	mov	r0, r4
 8088daa:	f7ff ffed 	bl	8088d88 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8088dae:	4620      	mov	r0, r4
 8088db0:	bd38      	pop	{r3, r4, r5, pc}

08088db2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8088db2:	6800      	ldr	r0, [r0, #0]
 8088db4:	f000 be63 	b.w	8089a7e <_ZN7TwoWire6unlockEv>

08088db8 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8088db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8088dbc:	4604      	mov	r4, r0
 8088dbe:	460d      	mov	r5, r1
 8088dc0:	4617      	mov	r7, r2
 8088dc2:	461e      	mov	r6, r3
 8088dc4:	f7ff ffdd 	bl	8088d82 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088dc8:	2236      	movs	r2, #54	; 0x36
 8088dca:	2300      	movs	r3, #0
    timeout_ = ms;
 8088dcc:	f04f 0801 	mov.w	r8, #1
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088dd0:	e9cd 2300 	strd	r2, r3, [sp]
    timeout_ = ms;
 8088dd4:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8088dd6:	4669      	mov	r1, sp
 8088dd8:	6820      	ldr	r0, [r4, #0]
 8088dda:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8088dde:	f000 fe22 	bl	8089a26 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8088de2:	6820      	ldr	r0, [r4, #0]
 8088de4:	4629      	mov	r1, r5
 8088de6:	6803      	ldr	r3, [r0, #0]
 8088de8:	689b      	ldr	r3, [r3, #8]
 8088dea:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8088dec:	4641      	mov	r1, r8
 8088dee:	6820      	ldr	r0, [r4, #0]
 8088df0:	f000 fe31 	bl	8089a56 <_ZN7TwoWire15endTransmissionEh>
 8088df4:	4605      	mov	r5, r0
 8088df6:	b140      	cbz	r0, 8088e0a <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
 8088df8:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8088dfc:	4620      	mov	r0, r4
 8088dfe:	f7ff ffd8 	bl	8088db2 <_ZN9FuelGauge6unlockEv>
}
 8088e02:	4628      	mov	r0, r5
 8088e04:	b004      	add	sp, #16
 8088e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8088e0a:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8088e0c:	4669      	mov	r1, sp
 8088e0e:	6820      	ldr	r0, [r4, #0]
 8088e10:	9301      	str	r3, [sp, #4]
 8088e12:	f000 fdd5 	bl	80899c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8088e16:	2802      	cmp	r0, #2
 8088e18:	d1ee      	bne.n	8088df8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
 8088e1a:	6820      	ldr	r0, [r4, #0]
 8088e1c:	6803      	ldr	r3, [r0, #0]
 8088e1e:	695b      	ldr	r3, [r3, #20]
 8088e20:	4798      	blx	r3
 8088e22:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8088e24:	6820      	ldr	r0, [r4, #0]
 8088e26:	6803      	ldr	r3, [r0, #0]
 8088e28:	695b      	ldr	r3, [r3, #20]
 8088e2a:	4798      	blx	r3
 8088e2c:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8088e2e:	e7e5      	b.n	8088dfc <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

08088e30 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8088e30:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8088e32:	b530      	push	{r4, r5, lr}
 8088e34:	b08b      	sub	sp, #44	; 0x2c
    byte MSB = 0;
 8088e36:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8088e3a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8088e3e:	2104      	movs	r1, #4
 8088e40:	f10d 0307 	add.w	r3, sp, #7
 8088e44:	f10d 0206 	add.w	r2, sp, #6
 8088e48:	f7ff ffb6 	bl	8088db8 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8088e4c:	4604      	mov	r4, r0
 8088e4e:	b9c8      	cbnz	r0, 8088e84 <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
 8088e50:	2520      	movs	r5, #32
 8088e52:	4601      	mov	r1, r0
 8088e54:	462a      	mov	r2, r5
 8088e56:	a802      	add	r0, sp, #8
 8088e58:	f002 fa87 	bl	808b36a <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
 8088e5c:	4621      	mov	r1, r4
 8088e5e:	a802      	add	r0, sp, #8
    config.size = sizeof(config);
 8088e60:	f88d 500d 	strb.w	r5, [sp, #13]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
 8088e64:	f7fe fe0e 	bl	8087a84 <system_power_management_get_config>
 8088e68:	b950      	cbnz	r0, 8088e80 <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
 8088e6a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
 8088e6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8088e72:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 8088e76:	b00b      	add	sp, #44	; 0x2c
 8088e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
 8088e7c:	f7ff bf72 	b.w	8088d64 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
 8088e80:	2212      	movs	r2, #18
 8088e82:	e7f4      	b.n	8088e6e <_ZN9FuelGauge6getSoCEv+0x3e>
}
 8088e84:	4801      	ldr	r0, [pc, #4]	; (8088e8c <_ZN9FuelGauge6getSoCEv+0x5c>)
 8088e86:	b00b      	add	sp, #44	; 0x2c
 8088e88:	bd30      	pop	{r4, r5, pc}
 8088e8a:	bf00      	nop
 8088e8c:	bf800000 	.word	0xbf800000

08088e90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8088e90:	4b01      	ldr	r3, [pc, #4]	; (8088e98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8088e92:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8088e94:	4770      	bx	lr
 8088e96:	bf00      	nop
 8088e98:	200000d8 	.word	0x200000d8

08088e9c <serialEventRun>:
{
 8088e9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8088e9e:	4b17      	ldr	r3, [pc, #92]	; (8088efc <serialEventRun+0x60>)
 8088ea0:	b143      	cbz	r3, 8088eb4 <serialEventRun+0x18>
 8088ea2:	f000 fc21 	bl	80896e8 <_Z16_fetch_usbserialv>
 8088ea6:	6803      	ldr	r3, [r0, #0]
 8088ea8:	691b      	ldr	r3, [r3, #16]
 8088eaa:	4798      	blx	r3
 8088eac:	2800      	cmp	r0, #0
 8088eae:	dd01      	ble.n	8088eb4 <serialEventRun+0x18>
        serialEvent();
 8088eb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8088eb4:	4b12      	ldr	r3, [pc, #72]	; (8088f00 <serialEventRun+0x64>)
 8088eb6:	b143      	cbz	r3, 8088eca <serialEventRun+0x2e>
 8088eb8:	f000 ff20 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 8088ebc:	6803      	ldr	r3, [r0, #0]
 8088ebe:	691b      	ldr	r3, [r3, #16]
 8088ec0:	4798      	blx	r3
 8088ec2:	2800      	cmp	r0, #0
 8088ec4:	dd01      	ble.n	8088eca <serialEventRun+0x2e>
        serialEvent1();
 8088ec6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8088eca:	4b0e      	ldr	r3, [pc, #56]	; (8088f04 <serialEventRun+0x68>)
 8088ecc:	b10b      	cbz	r3, 8088ed2 <serialEventRun+0x36>
 8088ece:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8088ed2:	4b0d      	ldr	r3, [pc, #52]	; (8088f08 <serialEventRun+0x6c>)
 8088ed4:	b10b      	cbz	r3, 8088eda <serialEventRun+0x3e>
 8088ed6:	f7f7 ff17 	bl	8080d08 <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 8088eda:	4b0c      	ldr	r3, [pc, #48]	; (8088f0c <serialEventRun+0x70>)
 8088edc:	b10b      	cbz	r3, 8088ee2 <serialEventRun+0x46>
 8088ede:	f7f7 ff4b 	bl	8080d78 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8088ee2:	4b0b      	ldr	r3, [pc, #44]	; (8088f10 <serialEventRun+0x74>)
 8088ee4:	b143      	cbz	r3, 8088ef8 <serialEventRun+0x5c>
 8088ee6:	f000 fc2b 	bl	8089740 <_Z17_fetch_usbserial1v>
 8088eea:	6803      	ldr	r3, [r0, #0]
 8088eec:	691b      	ldr	r3, [r3, #16]
 8088eee:	4798      	blx	r3
 8088ef0:	2800      	cmp	r0, #0
 8088ef2:	dd01      	ble.n	8088ef8 <serialEventRun+0x5c>
        usbSerialEvent1();
 8088ef4:	f3af 8000 	nop.w
}
 8088ef8:	bd08      	pop	{r3, pc}
 8088efa:	bf00      	nop
	...
 8088f08:	08080d09 	.word	0x08080d09
 8088f0c:	08080d79 	.word	0x08080d79
 8088f10:	00000000 	.word	0x00000000

08088f14 <_post_loop>:
{
 8088f14:	b508      	push	{r3, lr}
	serialEventRun();
 8088f16:	f7ff ffc1 	bl	8088e9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088f1a:	f7fe fbaf 	bl	808767c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8088f1e:	4b01      	ldr	r3, [pc, #4]	; (8088f24 <_post_loop+0x10>)
 8088f20:	6018      	str	r0, [r3, #0]
}
 8088f22:	bd08      	pop	{r3, pc}
 8088f24:	20000b80 	.word	0x20000b80

08088f28 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8088f28:	4805      	ldr	r0, [pc, #20]	; (8088f40 <_Z33system_initialize_user_backup_ramv+0x18>)
 8088f2a:	4a06      	ldr	r2, [pc, #24]	; (8088f44 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 8088f2c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8088f2e:	1a12      	subs	r2, r2, r0
 8088f30:	4905      	ldr	r1, [pc, #20]	; (8088f48 <_Z33system_initialize_user_backup_ramv+0x20>)
 8088f32:	f002 fa0c 	bl	808b34e <memcpy>
    __backup_sram_signature = signature;
 8088f36:	4b05      	ldr	r3, [pc, #20]	; (8088f4c <_Z33system_initialize_user_backup_ramv+0x24>)
 8088f38:	4a05      	ldr	r2, [pc, #20]	; (8088f50 <_Z33system_initialize_user_backup_ramv+0x28>)
 8088f3a:	601a      	str	r2, [r3, #0]
}
 8088f3c:	bd08      	pop	{r3, pc}
 8088f3e:	bf00      	nop
 8088f40:	40024000 	.word	0x40024000
 8088f44:	40024004 	.word	0x40024004
 8088f48:	0808f838 	.word	0x0808f838
 8088f4c:	40024000 	.word	0x40024000
 8088f50:	9a271c1e 	.word	0x9a271c1e

08088f54 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088f54:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8088f56:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088f58:	461a      	mov	r2, r3
 8088f5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088f5e:	9300      	str	r3, [sp, #0]
 8088f60:	f7fe fd86 	bl	8087a70 <system_ctrl_set_result>
}
 8088f64:	b003      	add	sp, #12
 8088f66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088f6c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8088f6c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8088f6e:	8843      	ldrh	r3, [r0, #2]
 8088f70:	2b0a      	cmp	r3, #10
 8088f72:	d008      	beq.n	8088f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8088f74:	2b50      	cmp	r3, #80	; 0x50
 8088f76:	d10b      	bne.n	8088f90 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8088f78:	4b09      	ldr	r3, [pc, #36]	; (8088fa0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8088f7a:	681b      	ldr	r3, [r3, #0]
 8088f7c:	b14b      	cbz	r3, 8088f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8088f7e:	b003      	add	sp, #12
 8088f80:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8088f84:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8088f86:	f7ff ffe5 	bl	8088f54 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8088f8a:	b003      	add	sp, #12
 8088f8c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088f90:	2300      	movs	r3, #0
 8088f92:	461a      	mov	r2, r3
 8088f94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088f98:	9300      	str	r3, [sp, #0]
 8088f9a:	f7fe fd69 	bl	8087a70 <system_ctrl_set_result>
}
 8088f9e:	e7f4      	b.n	8088f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8088fa0:	20000afc 	.word	0x20000afc

08088fa4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8088fa4:	2100      	movs	r1, #0
{
 8088fa6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8088fa8:	4811      	ldr	r0, [pc, #68]	; (8088ff0 <module_user_init_hook+0x4c>)
 8088faa:	f7fe fe65 	bl	8087c78 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 8088fae:	4b11      	ldr	r3, [pc, #68]	; (8088ff4 <module_user_init_hook+0x50>)
 8088fb0:	681a      	ldr	r2, [r3, #0]
 8088fb2:	4b11      	ldr	r3, [pc, #68]	; (8088ff8 <module_user_init_hook+0x54>)
 8088fb4:	429a      	cmp	r2, r3
 8088fb6:	bf0c      	ite	eq
 8088fb8:	2201      	moveq	r2, #1
 8088fba:	2200      	movne	r2, #0
 8088fbc:	4b0f      	ldr	r3, [pc, #60]	; (8088ffc <module_user_init_hook+0x58>)
 8088fbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8088fc0:	d001      	beq.n	8088fc6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 8088fc2:	f7ff ffb1 	bl	8088f28 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8088fc6:	f7fe fb49 	bl	808765c <HAL_RNG_GetRandomNumber>
 8088fca:	4604      	mov	r4, r0
    srand(seed);
 8088fcc:	f002 f9d6 	bl	808b37c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8088fd0:	4b0b      	ldr	r3, [pc, #44]	; (8089000 <module_user_init_hook+0x5c>)
 8088fd2:	b113      	cbz	r3, 8088fda <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 8088fd4:	4620      	mov	r0, r4
 8088fd6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088fda:	2100      	movs	r1, #0
 8088fdc:	4808      	ldr	r0, [pc, #32]	; (8089000 <module_user_init_hook+0x5c>)
 8088fde:	f7fe fdeb 	bl	8087bb8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8088fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088fe6:	2100      	movs	r1, #0
 8088fe8:	4806      	ldr	r0, [pc, #24]	; (8089004 <module_user_init_hook+0x60>)
 8088fea:	f7fe bd37 	b.w	8087a5c <system_ctrl_set_app_request_handler>
 8088fee:	bf00      	nop
 8088ff0:	08088e91 	.word	0x08088e91
 8088ff4:	40024000 	.word	0x40024000
 8088ff8:	9a271c1e 	.word	0x9a271c1e
 8088ffc:	20000af8 	.word	0x20000af8
 8089000:	00000000 	.word	0x00000000
 8089004:	08088f6d 	.word	0x08088f6d

08089008 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089008:	4770      	bx	lr

0808900a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808900a:	2000      	movs	r0, #0
 808900c:	4770      	bx	lr

0808900e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808900e:	b510      	push	{r4, lr}
 8089010:	4604      	mov	r4, r0
 8089012:	2110      	movs	r1, #16
 8089014:	f7f7 f855 	bl	80800c2 <_ZdlPvj>
 8089018:	4620      	mov	r0, r4
 808901a:	bd10      	pop	{r4, pc}

0808901c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808901c:	b508      	push	{r3, lr}
      { delete this; }
 808901e:	f7ff fff6 	bl	808900e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8089022:	bd08      	pop	{r3, pc}

08089024 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089024:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8089026:	b530      	push	{r4, r5, lr}
        type_(type) {
 8089028:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808902c:	6002      	str	r2, [r0, #0]
 808902e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089030:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8089032:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089034:	680c      	ldr	r4, [r1, #0]
 8089036:	8085      	strh	r5, [r0, #4]
 8089038:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808903a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808903c:	bd30      	pop	{r4, r5, pc}

0808903e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808903e:	b510      	push	{r4, lr}
 8089040:	4604      	mov	r4, r0
    free((void*)msg_);
 8089042:	6800      	ldr	r0, [r0, #0]
 8089044:	f7fe fdc8 	bl	8087bd8 <free>
}
 8089048:	4620      	mov	r0, r4
 808904a:	bd10      	pop	{r4, pc}

0808904c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808904c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808904e:	68c4      	ldr	r4, [r0, #12]
 8089050:	b1f4      	cbz	r4, 8089090 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8089052:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8089054:	2b02      	cmp	r3, #2
 8089056:	d103      	bne.n	8089060 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8089058:	f104 000c 	add.w	r0, r4, #12
 808905c:	f7ff ffef 	bl	808903e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8089060:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8089062:	b135      	cbz	r5, 8089072 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089064:	4628      	mov	r0, r5
 8089066:	f7fd ff8b 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
 808906a:	2110      	movs	r1, #16
 808906c:	4628      	mov	r0, r5
 808906e:	f7f7 f828 	bl	80800c2 <_ZdlPvj>
 8089072:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8089074:	b135      	cbz	r5, 8089084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8089076:	4628      	mov	r0, r5
 8089078:	f7fd ff82 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
 808907c:	2110      	movs	r1, #16
 808907e:	4628      	mov	r0, r5
 8089080:	f7f7 f81f 	bl	80800c2 <_ZdlPvj>
 8089084:	4620      	mov	r0, r4
 8089086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808908a:	2114      	movs	r1, #20
 808908c:	f7f7 b819 	b.w	80800c2 <_ZdlPvj>
 8089090:	bd38      	pop	{r3, r4, r5, pc}

08089092 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8089092:	b510      	push	{r4, lr}
 8089094:	b088      	sub	sp, #32
 8089096:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8089098:	4668      	mov	r0, sp
 808909a:	f7ff f93d 	bl	8088318 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808909e:	4669      	mov	r1, sp
 80890a0:	a804      	add	r0, sp, #16
 80890a2:	f7ff f978 	bl	8088396 <_ZN6StringC1ERKS_>
 80890a6:	a804      	add	r0, sp, #16
 80890a8:	47a0      	blx	r4
 80890aa:	4604      	mov	r4, r0
 80890ac:	a804      	add	r0, sp, #16
 80890ae:	f7ff f8e9 	bl	8088284 <_ZN6StringD1Ev>
    String p(param);
 80890b2:	4668      	mov	r0, sp
 80890b4:	f7ff f8e6 	bl	8088284 <_ZN6StringD1Ev>
}
 80890b8:	4620      	mov	r0, r4
 80890ba:	b008      	add	sp, #32
 80890bc:	bd10      	pop	{r4, pc}

080890be <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80890be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80890c0:	2300      	movs	r3, #0
         size = sizeof(*this);
 80890c2:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80890c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80890c8:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80890ca:	4669      	mov	r1, sp
 80890cc:	461a      	mov	r2, r3
 80890ce:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80890d0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80890d4:	f8ad 4000 	strh.w	r4, [sp]
 80890d8:	f7fe fd46 	bl	8087b68 <spark_function>
}
 80890dc:	b004      	add	sp, #16
 80890de:	bd10      	pop	{r4, pc}

080890e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80890e0:	680b      	ldr	r3, [r1, #0]
 80890e2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80890e4:	684b      	ldr	r3, [r1, #4]
 80890e6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80890e8:	b113      	cbz	r3, 80890f0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80890ea:	685a      	ldr	r2, [r3, #4]
 80890ec:	3201      	adds	r2, #1
 80890ee:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80890f0:	4770      	bx	lr

080890f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80890f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80890f4:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80890f6:	4668      	mov	r0, sp
 80890f8:	460d      	mov	r5, r1
 80890fa:	f7ff fff1 	bl	80890e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80890fe:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089100:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089102:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8089104:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8089106:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8089108:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808910a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808910c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 808910e:	f7fb fb15 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8089112:	b135      	cbz	r5, 8089122 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 8089114:	1d28      	adds	r0, r5, #4
 8089116:	f7fb fb11 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808911a:	2108      	movs	r1, #8
 808911c:	4628      	mov	r0, r5
 808911e:	f7f6 ffd0 	bl	80800c2 <_ZdlPvj>
        return p;
    }
 8089122:	4620      	mov	r0, r4
 8089124:	b003      	add	sp, #12
 8089126:	bd30      	pop	{r4, r5, pc}

08089128 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089128:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808912a:	b510      	push	{r4, lr}
      if (_M_empty())
 808912c:	b90a      	cbnz	r2, 8089132 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808912e:	f000 fe9d 	bl	8089e6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089132:	68c3      	ldr	r3, [r0, #12]
    }
 8089134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089138:	4718      	bx	r3

0808913a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808913a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808913c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808913e:	f100 0110 	add.w	r1, r0, #16
 8089142:	f7ff fff1 	bl	8089128 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8089146:	bd08      	pop	{r3, pc}

08089148 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8089148:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808914a:	b510      	push	{r4, lr}
      if (_M_empty())
 808914c:	b90a      	cbnz	r2, 8089152 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808914e:	f000 fe8d 	bl	8089e6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089152:	68c3      	ldr	r3, [r0, #12]
    }
 8089154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089158:	4718      	bx	r3

0808915a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808915a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808915c:	6800      	ldr	r0, [r0, #0]
 808915e:	f100 0110 	add.w	r1, r0, #16
 8089162:	f7ff fff1 	bl	8089148 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8089166:	bd08      	pop	{r3, pc}

08089168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8089168:	b538      	push	{r3, r4, r5, lr}
 808916a:	2300      	movs	r3, #0
 808916c:	4604      	mov	r4, r0
 808916e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089170:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8089172:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089174:	f7f6 ffa1 	bl	80800ba <_Znwj>
 8089178:	b128      	cbz	r0, 8089186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808917a:	2301      	movs	r3, #1
 808917c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8089180:	4b02      	ldr	r3, [pc, #8]	; (808918c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8089182:	60c5      	str	r5, [r0, #12]
 8089184:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089186:	6020      	str	r0, [r4, #0]
	}
 8089188:	4620      	mov	r0, r4
 808918a:	bd38      	pop	{r3, r4, r5, pc}
 808918c:	0808f26c 	.word	0x0808f26c

08089190 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8089190:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089192:	2300      	movs	r3, #0
 8089194:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8089196:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089198:	4604      	mov	r4, r0
 808919a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808919c:	b12b      	cbz	r3, 80891aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808919e:	2202      	movs	r2, #2
 80891a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80891a2:	68eb      	ldr	r3, [r5, #12]
 80891a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80891a6:	68ab      	ldr	r3, [r5, #8]
 80891a8:	60a3      	str	r3, [r4, #8]
    }
 80891aa:	4620      	mov	r0, r4
 80891ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080891b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80891b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80891b2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80891b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80891b6:	4668      	mov	r0, sp
 80891b8:	f7ff ff34 	bl	8089024 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80891bc:	f04f 0302 	mov.w	r3, #2
 80891c0:	e8d4 2f4f 	ldrexb	r2, [r4]
 80891c4:	2a00      	cmp	r2, #0
 80891c6:	d103      	bne.n	80891d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80891c8:	e8c4 3f41 	strexb	r1, r3, [r4]
 80891cc:	2900      	cmp	r1, #0
 80891ce:	d1f7      	bne.n	80891c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80891d0:	d125      	bne.n	808921e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80891d2:	f104 050c 	add.w	r5, r4, #12
 80891d6:	4669      	mov	r1, sp
 80891d8:	4628      	mov	r0, r5
 80891da:	f7ff ff23 	bl	8089024 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80891de:	2301      	movs	r3, #1
 80891e0:	f3bf 8f5b 	dmb	ish
 80891e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80891e6:	2000      	movs	r0, #0
 80891e8:	f3bf 8f5b 	dmb	ish
 80891ec:	f104 0308 	add.w	r3, r4, #8
 80891f0:	e853 6f00 	ldrex	r6, [r3]
 80891f4:	e843 0200 	strex	r2, r0, [r3]
 80891f8:	2a00      	cmp	r2, #0
 80891fa:	d1f9      	bne.n	80891f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80891fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8089200:	b16e      	cbz	r6, 808921e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8089202:	f7fe fc0b 	bl	8087a1c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8089206:	b178      	cbz	r0, 8089228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8089208:	4629      	mov	r1, r5
 808920a:	4630      	mov	r0, r6
 808920c:	f7ff ff8c 	bl	8089128 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8089210:	4630      	mov	r0, r6
 8089212:	f7fd feb5 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8089216:	2110      	movs	r1, #16
 8089218:	4630      	mov	r0, r6
 808921a:	f7f6 ff52 	bl	80800c2 <_ZdlPvj>
        p_->setError(std::move(error));
 808921e:	4668      	mov	r0, sp
 8089220:	f7ff ff0d 	bl	808903e <_ZN8particle5ErrorD1Ev>
    }
 8089224:	b009      	add	sp, #36	; 0x24
 8089226:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8089228:	4631      	mov	r1, r6
 808922a:	a802      	add	r0, sp, #8
 808922c:	f7ff ffb0 	bl	8089190 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8089230:	68e0      	ldr	r0, [r4, #12]
 8089232:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8089236:	b108      	cbz	r0, 808923c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8089238:	f002 f8ee 	bl	808b418 <strdup>
        type_(type) {
 808923c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808923e:	2010      	movs	r0, #16
 8089240:	f8ad 501c 	strh.w	r5, [sp, #28]
 8089244:	f7f6 ff39 	bl	80800ba <_Znwj>
 8089248:	4605      	mov	r5, r0
 808924a:	b1e8      	cbz	r0, 8089288 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808924c:	2700      	movs	r7, #0
 808924e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089250:	2018      	movs	r0, #24
 8089252:	f7f6 ff32 	bl	80800ba <_Znwj>
 8089256:	4604      	mov	r4, r0
 8089258:	b188      	cbz	r0, 808927e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808925a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808925c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808925e:	a802      	add	r0, sp, #8
 8089260:	f7ff fd69 	bl	8088d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089264:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8089266:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089268:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808926a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808926c:	9204      	str	r2, [sp, #16]
 808926e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089270:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8089272:	60e3      	str	r3, [r4, #12]
 8089274:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8089278:	9205      	str	r2, [sp, #20]
 808927a:	f7ff fed3 	bl	8089024 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808927e:	4b08      	ldr	r3, [pc, #32]	; (80892a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089280:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8089282:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089284:	4b07      	ldr	r3, [pc, #28]	; (80892a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8089286:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8089288:	a806      	add	r0, sp, #24
 808928a:	f7ff fed8 	bl	808903e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808928e:	a802      	add	r0, sp, #8
 8089290:	f7fd fe76 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089294:	2200      	movs	r2, #0
 8089296:	4629      	mov	r1, r5
 8089298:	4803      	ldr	r0, [pc, #12]	; (80892a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808929a:	f7fe fbc7 	bl	8087a2c <application_thread_invoke>
 808929e:	e7b7      	b.n	8089210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80892a0:	0808913b 	.word	0x0808913b
 80892a4:	080893c5 	.word	0x080893c5
 80892a8:	08089911 	.word	0x08089911

080892ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80892ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80892b0:	b08a      	sub	sp, #40	; 0x28
 80892b2:	4605      	mov	r5, r0
 80892b4:	460c      	mov	r4, r1
 80892b6:	4617      	mov	r7, r2
 80892b8:	4698      	mov	r8, r3
 80892ba:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80892be:	f7fe fc63 	bl	8087b88 <spark_cloud_flag_connected>
 80892c2:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80892c4:	4682      	mov	sl, r0
 80892c6:	bb38      	cbnz	r0, 8089318 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80892c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80892cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80892ce:	a905      	add	r1, sp, #20
 80892d0:	4630      	mov	r0, r6
 80892d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80892d6:	f7ff fea5 	bl	8089024 <_ZN8particle5ErrorC1EOS0_>
 80892da:	2014      	movs	r0, #20
 80892dc:	f7f6 feed 	bl	80800ba <_Znwj>
 80892e0:	4604      	mov	r4, r0
 80892e2:	b148      	cbz	r0, 80892f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80892e4:	2302      	movs	r3, #2
 80892e6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80892e8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80892ea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80892ee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80892f0:	4631      	mov	r1, r6
 80892f2:	300c      	adds	r0, #12
 80892f4:	f7ff fe96 	bl	8089024 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80892f8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80892fa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80892fc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8089300:	f7ff ff32 	bl	8089168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089304:	4630      	mov	r0, r6
 8089306:	f7ff fe9a 	bl	808903e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808930a:	a805      	add	r0, sp, #20
 808930c:	f7ff fe97 	bl	808903e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8089310:	4628      	mov	r0, r5
 8089312:	b00a      	add	sp, #40	; 0x28
 8089314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 8089318:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 808931a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808931e:	2014      	movs	r0, #20
 8089320:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 8089324:	9307      	str	r3, [sp, #28]
 8089326:	f7f6 fec8 	bl	80800ba <_Znwj>
 808932a:	4601      	mov	r1, r0
 808932c:	b128      	cbz	r0, 808933a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808932e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8089332:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089336:	f880 a001 	strb.w	sl, [r0, #1]
 808933a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808933c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808933e:	f7ff ff13 	bl	8089168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8089342:	4b1f      	ldr	r3, [pc, #124]	; (80893c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8089344:	2008      	movs	r0, #8
 8089346:	9308      	str	r3, [sp, #32]
 8089348:	f7f6 feb7 	bl	80800ba <_Znwj>
 808934c:	4682      	mov	sl, r0
 808934e:	b110      	cbz	r0, 8089356 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 8089350:	a903      	add	r1, sp, #12
 8089352:	f7ff fec5 	bl	80890e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089356:	4642      	mov	r2, r8
 8089358:	4639      	mov	r1, r7
 808935a:	4620      	mov	r0, r4
 808935c:	9600      	str	r6, [sp, #0]
 808935e:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8089362:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089366:	f7fe fc17 	bl	8087b98 <spark_send_event>
 808936a:	b9b8      	cbnz	r0, 808939c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 808936c:	9b03      	ldr	r3, [sp, #12]
 808936e:	785b      	ldrb	r3, [r3, #1]
 8089370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089374:	b993      	cbnz	r3, 808939c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 8089376:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808937a:	a905      	add	r1, sp, #20
 808937c:	a803      	add	r0, sp, #12
 808937e:	9205      	str	r2, [sp, #20]
 8089380:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089384:	f7ff ff14 	bl	80891b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089388:	a805      	add	r0, sp, #20
 808938a:	f7ff fe58 	bl	808903e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808938e:	a805      	add	r0, sp, #20
 8089390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089392:	f7ff feae 	bl	80890f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8089396:	a806      	add	r0, sp, #24
 8089398:	f7fb f9d0 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808939c:	a903      	add	r1, sp, #12
 808939e:	a805      	add	r0, sp, #20
 80893a0:	f7ff fe9e 	bl	80890e0 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80893a4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80893a6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80893a8:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80893aa:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80893ac:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80893ae:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80893b0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80893b2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80893b4:	f7fb f9c2 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80893b8:	a804      	add	r0, sp, #16
 80893ba:	f7fb f9bf 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80893be:	e7a7      	b.n	8089310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80893c0:	08089441 	.word	0x08089441

080893c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80893c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80893c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80893c8:	4605      	mov	r5, r0
	switch (__op)
 80893ca:	d103      	bne.n	80893d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80893cc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80893ce:	6003      	str	r3, [r0, #0]
      }
 80893d0:	2000      	movs	r0, #0
 80893d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80893d4:	2a02      	cmp	r2, #2
 80893d6:	d010      	beq.n	80893fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80893d8:	2a03      	cmp	r2, #3
 80893da:	d1f9      	bne.n	80893d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80893dc:	6804      	ldr	r4, [r0, #0]
 80893de:	2c00      	cmp	r4, #0
 80893e0:	d0f6      	beq.n	80893d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80893e2:	f104 0010 	add.w	r0, r4, #16
 80893e6:	f7ff fe2a 	bl	808903e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80893ea:	4620      	mov	r0, r4
 80893ec:	f7fd fdc8 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80893f0:	2118      	movs	r1, #24
 80893f2:	4620      	mov	r0, r4
 80893f4:	f7f6 fe65 	bl	80800c2 <_ZdlPvj>
 80893f8:	e7ea      	b.n	80893d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80893fa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80893fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80893fe:	f7f6 fe5c 	bl	80800ba <_Znwj>
 8089402:	4604      	mov	r4, r0
 8089404:	b150      	cbz	r0, 808941c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089406:	4631      	mov	r1, r6
 8089408:	f7ff fec2 	bl	8089190 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808940c:	6930      	ldr	r0, [r6, #16]
 808940e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8089412:	b108      	cbz	r0, 8089418 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 8089414:	f002 f800 	bl	808b418 <strdup>
        type_(type) {
 8089418:	6120      	str	r0, [r4, #16]
 808941a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808941c:	602c      	str	r4, [r5, #0]
	}
 808941e:	e7d7      	b.n	80893d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

08089420 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8089420:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089422:	2300      	movs	r3, #0
 8089424:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8089426:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089428:	4604      	mov	r4, r0
 808942a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808942c:	b12b      	cbz	r3, 808943a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808942e:	2202      	movs	r2, #2
 8089430:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089432:	68eb      	ldr	r3, [r5, #12]
 8089434:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089436:	68ab      	ldr	r3, [r5, #8]
 8089438:	60a3      	str	r3, [r4, #8]
    }
 808943a:	4620      	mov	r0, r4
 808943c:	bd38      	pop	{r3, r4, r5, pc}
	...

08089440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8089440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089442:	4604      	mov	r4, r0
 8089444:	b089      	sub	sp, #36	; 0x24
 8089446:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8089448:	a801      	add	r0, sp, #4
 808944a:	4611      	mov	r1, r2
 808944c:	f7ff fe51 	bl	80890f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8089450:	b1a4      	cbz	r4, 808947c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8089452:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8089454:	b11d      	cbz	r5, 808945e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8089456:	4628      	mov	r0, r5
 8089458:	f001 ffde 	bl	808b418 <strdup>
 808945c:	4605      	mov	r5, r0
 808945e:	a801      	add	r0, sp, #4
 8089460:	a903      	add	r1, sp, #12
        type_(type) {
 8089462:	9503      	str	r5, [sp, #12]
 8089464:	f8ad 4010 	strh.w	r4, [sp, #16]
 8089468:	f7ff fea2 	bl	80891b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808946c:	a803      	add	r0, sp, #12
 808946e:	f7ff fde6 	bl	808903e <_ZN8particle5ErrorD1Ev>
 8089472:	a802      	add	r0, sp, #8
 8089474:	f7fb f962 	bl	808473c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8089478:	b009      	add	sp, #36	; 0x24
 808947a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808947c:	2301      	movs	r3, #1
      { return _M_ptr; }
 808947e:	9d01      	ldr	r5, [sp, #4]
 8089480:	e8d5 2f4f 	ldrexb	r2, [r5]
 8089484:	2a00      	cmp	r2, #0
 8089486:	d103      	bne.n	8089490 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8089488:	e8c5 3f41 	strexb	r1, r3, [r5]
 808948c:	2900      	cmp	r1, #0
 808948e:	d1f7      	bne.n	8089480 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8089490:	d1ef      	bne.n	8089472 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8089492:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8089494:	f3bf 8f5b 	dmb	ish
 8089498:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808949a:	f3bf 8f5b 	dmb	ish
 808949e:	1d2b      	adds	r3, r5, #4
 80894a0:	e853 6f00 	ldrex	r6, [r3]
 80894a4:	e843 4200 	strex	r2, r4, [r3]
 80894a8:	2a00      	cmp	r2, #0
 80894aa:	d1f9      	bne.n	80894a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80894ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80894b0:	2e00      	cmp	r6, #0
 80894b2:	d0de      	beq.n	8089472 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80894b4:	4620      	mov	r0, r4
 80894b6:	f7fe fab1 	bl	8087a1c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80894ba:	4607      	mov	r7, r0
 80894bc:	b160      	cbz	r0, 80894d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80894be:	4630      	mov	r0, r6
 80894c0:	f105 010c 	add.w	r1, r5, #12
 80894c4:	f7ff fe40 	bl	8089148 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80894c8:	4630      	mov	r0, r6
 80894ca:	f7fd fd59 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80894ce:	2110      	movs	r1, #16
 80894d0:	4630      	mov	r0, r6
 80894d2:	f7f6 fdf6 	bl	80800c2 <_ZdlPvj>
 80894d6:	e7cc      	b.n	8089472 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80894d8:	4631      	mov	r1, r6
 80894da:	a803      	add	r0, sp, #12
 80894dc:	f7ff ffa0 	bl	8089420 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80894e0:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80894e2:	2010      	movs	r0, #16
 80894e4:	f88d 301c 	strb.w	r3, [sp, #28]
 80894e8:	f7f6 fde7 	bl	80800ba <_Znwj>
 80894ec:	4605      	mov	r5, r0
 80894ee:	b1d0      	cbz	r0, 8089526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80894f0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80894f2:	2014      	movs	r0, #20
 80894f4:	f7f6 fde1 	bl	80800ba <_Znwj>
 80894f8:	4604      	mov	r4, r0
 80894fa:	b178      	cbz	r0, 808951c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80894fc:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80894fe:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8089500:	a803      	add	r0, sp, #12
 8089502:	f7ff fc18 	bl	8088d36 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089506:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8089508:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808950a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808950c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808950e:	9205      	str	r2, [sp, #20]
 8089510:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8089512:	60e3      	str	r3, [r4, #12]
 8089514:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8089518:	9206      	str	r2, [sp, #24]
 808951a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808951c:	4b06      	ldr	r3, [pc, #24]	; (8089538 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808951e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8089520:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089522:	4b06      	ldr	r3, [pc, #24]	; (808953c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8089524:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8089526:	a803      	add	r0, sp, #12
 8089528:	f7fd fd2a 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808952c:	2200      	movs	r2, #0
 808952e:	4629      	mov	r1, r5
 8089530:	4803      	ldr	r0, [pc, #12]	; (8089540 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8089532:	f7fe fa7b 	bl	8087a2c <application_thread_invoke>
 8089536:	e7c7      	b.n	80894c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8089538:	0808915b 	.word	0x0808915b
 808953c:	08089545 	.word	0x08089545
 8089540:	08089911 	.word	0x08089911

08089544 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 8089544:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8089546:	b570      	push	{r4, r5, r6, lr}
 8089548:	4604      	mov	r4, r0
	switch (__op)
 808954a:	d103      	bne.n	8089554 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 808954c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 808954e:	6003      	str	r3, [r0, #0]
      }
 8089550:	2000      	movs	r0, #0
 8089552:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 8089554:	2a02      	cmp	r2, #2
 8089556:	d00c      	beq.n	8089572 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8089558:	2a03      	cmp	r2, #3
 808955a:	d1f9      	bne.n	8089550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 808955c:	6804      	ldr	r4, [r0, #0]
 808955e:	2c00      	cmp	r4, #0
 8089560:	d0f6      	beq.n	8089550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 8089562:	4620      	mov	r0, r4
 8089564:	f7fd fd0c 	bl	8086f80 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8089568:	2114      	movs	r1, #20
 808956a:	4620      	mov	r0, r4
 808956c:	f7f6 fda9 	bl	80800c2 <_ZdlPvj>
 8089570:	e7ee      	b.n	8089550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 8089572:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8089574:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8089576:	f7f6 fda0 	bl	80800ba <_Znwj>
 808957a:	4605      	mov	r5, r0
 808957c:	b120      	cbz	r0, 8089588 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 808957e:	4631      	mov	r1, r6
 8089580:	f7ff ff4e 	bl	8089420 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8089584:	7c33      	ldrb	r3, [r6, #16]
 8089586:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8089588:	6025      	str	r5, [r4, #0]
	}
 808958a:	e7e1      	b.n	8089550 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

0808958c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808958c:	4770      	bx	lr

0808958e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808958e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089590:	460e      	mov	r6, r1
 8089592:	2400      	movs	r4, #0
 8089594:	f100 0708 	add.w	r7, r0, #8
 8089598:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808959a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808959e:	220a      	movs	r2, #10
 80895a0:	4630      	mov	r0, r6
 80895a2:	f7ff f868 	bl	8088676 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80895a6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80895a8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80895aa:	d101      	bne.n	80895b0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80895ac:	4620      	mov	r0, r4
 80895ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80895b0:	2c00      	cmp	r4, #0
 80895b2:	d0f2      	beq.n	808959a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80895b4:	212e      	movs	r1, #46	; 0x2e
 80895b6:	4630      	mov	r0, r6
 80895b8:	f7ff f83a 	bl	8088630 <_ZN5Print5printEc>
 80895bc:	4404      	add	r4, r0
 80895be:	e7ec      	b.n	808959a <_ZNK9IPAddress7printToER5Print+0xc>

080895c0 <_ZN9IPAddressD0Ev>:
 80895c0:	b510      	push	{r4, lr}
 80895c2:	4604      	mov	r4, r0
 80895c4:	2108      	movs	r1, #8
 80895c6:	f7f6 fd7c 	bl	80800c2 <_ZdlPvj>
 80895ca:	4620      	mov	r0, r4
 80895cc:	bd10      	pop	{r4, pc}
	...

080895d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80895d0:	4a02      	ldr	r2, [pc, #8]	; (80895dc <_ZN9IPAddressC1Ev+0xc>)
 80895d2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80895d4:	2200      	movs	r2, #0
 80895d6:	6042      	str	r2, [r0, #4]
}
 80895d8:	4770      	bx	lr
 80895da:	bf00      	nop
 80895dc:	0808f288 	.word	0x0808f288

080895e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80895e0:	4a02      	ldr	r2, [pc, #8]	; (80895ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80895e2:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80895e4:	680a      	ldr	r2, [r1, #0]
 80895e6:	6042      	str	r2, [r0, #4]
}
 80895e8:	4770      	bx	lr
 80895ea:	bf00      	nop
 80895ec:	0808f288 	.word	0x0808f288

080895f0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80895f0:	4a01      	ldr	r2, [pc, #4]	; (80895f8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = addr;
 80895f2:	e9c0 2100 	strd	r2, r1, [r0]
}
 80895f6:	4770      	bx	lr
 80895f8:	0808f288 	.word	0x0808f288

080895fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80895fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80895fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8089602:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8089606:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808960a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808960e:	6044      	str	r4, [r0, #4]
}
 8089610:	bd10      	pop	{r4, pc}
	...

08089614 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8089614:	b513      	push	{r0, r1, r4, lr}
 8089616:	4c04      	ldr	r4, [pc, #16]	; (8089628 <_ZN9IPAddressC1Ehhhh+0x14>)
 8089618:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808961a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 808961e:	9400      	str	r4, [sp, #0]
 8089620:	f7ff ffec 	bl	80895fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8089624:	b002      	add	sp, #8
 8089626:	bd10      	pop	{r4, pc}
 8089628:	0808f288 	.word	0x0808f288

0808962c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808962c:	7441      	strb	r1, [r0, #17]
}
 808962e:	4770      	bx	lr

08089630 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8089630:	4770      	bx	lr

08089632 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8089632:	4770      	bx	lr

08089634 <_ZN9USBSerial4readEv>:
{
 8089634:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8089636:	2100      	movs	r1, #0
 8089638:	7c00      	ldrb	r0, [r0, #16]
 808963a:	f7fe f9a7 	bl	808798c <HAL_USB_USART_Receive_Data>
}
 808963e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8089642:	bd08      	pop	{r3, pc}

08089644 <_ZN9USBSerial4peekEv>:
{
 8089644:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8089646:	2101      	movs	r1, #1
 8089648:	7c00      	ldrb	r0, [r0, #16]
 808964a:	f7fe f99f 	bl	808798c <HAL_USB_USART_Receive_Data>
}
 808964e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8089652:	bd08      	pop	{r3, pc}

08089654 <_ZN9USBSerial17availableForWriteEv>:
{
 8089654:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8089656:	7c00      	ldrb	r0, [r0, #16]
 8089658:	f7fe f990 	bl	808797c <HAL_USB_USART_Available_Data_For_Write>
}
 808965c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089660:	bd08      	pop	{r3, pc}

08089662 <_ZN9USBSerial9availableEv>:
{
 8089662:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8089664:	7c00      	ldrb	r0, [r0, #16]
 8089666:	f7fe f981 	bl	808796c <HAL_USB_USART_Available_Data>
}
 808966a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808966e:	bd08      	pop	{r3, pc}

08089670 <_ZN9USBSerial5writeEh>:
{
 8089670:	b538      	push	{r3, r4, r5, lr}
 8089672:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089674:	7c00      	ldrb	r0, [r0, #16]
{
 8089676:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089678:	f7fe f980 	bl	808797c <HAL_USB_USART_Available_Data_For_Write>
 808967c:	2800      	cmp	r0, #0
 808967e:	dc01      	bgt.n	8089684 <_ZN9USBSerial5writeEh+0x14>
 8089680:	7c60      	ldrb	r0, [r4, #17]
 8089682:	b128      	cbz	r0, 8089690 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8089684:	4629      	mov	r1, r5
 8089686:	7c20      	ldrb	r0, [r4, #16]
 8089688:	f7fe f988 	bl	808799c <HAL_USB_USART_Send_Data>
 808968c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8089690:	bd38      	pop	{r3, r4, r5, pc}

08089692 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8089692:	7c00      	ldrb	r0, [r0, #16]
 8089694:	f7fe b98a 	b.w	80879ac <HAL_USB_USART_Flush_Data>

08089698 <_ZN9USBSerialD0Ev>:
 8089698:	b510      	push	{r4, lr}
 808969a:	4604      	mov	r4, r0
 808969c:	2114      	movs	r1, #20
 808969e:	f7f6 fd10 	bl	80800c2 <_ZdlPvj>
 80896a2:	4620      	mov	r0, r4
 80896a4:	bd10      	pop	{r4, pc}

080896a6 <__tcf_1>:
 80896a6:	4770      	bx	lr

080896a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80896a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80896aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80896ae:	4604      	mov	r4, r0
 80896b0:	4608      	mov	r0, r1
 80896b2:	2100      	movs	r1, #0
 80896b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80896b8:	4b04      	ldr	r3, [pc, #16]	; (80896cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80896ba:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80896bc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80896be:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80896c0:	4611      	mov	r1, r2
  _blocking = true;
 80896c2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80896c4:	f7fe f942 	bl	808794c <HAL_USB_USART_Init>
}
 80896c8:	4620      	mov	r0, r4
 80896ca:	bd10      	pop	{r4, pc}
 80896cc:	0808f29c 	.word	0x0808f29c

080896d0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80896d0:	2200      	movs	r2, #0
 80896d2:	7c00      	ldrb	r0, [r0, #16]
 80896d4:	f7fe b942 	b.w	808795c <HAL_USB_USART_Begin>

080896d8 <_Z19acquireSerialBufferv>:
{
 80896d8:	b510      	push	{r4, lr}
 80896da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80896dc:	2214      	movs	r2, #20
 80896de:	2100      	movs	r1, #0
 80896e0:	f001 fe43 	bl	808b36a <memset>
}
 80896e4:	4620      	mov	r0, r4
 80896e6:	bd10      	pop	{r4, pc}

080896e8 <_Z16_fetch_usbserialv>:
{
 80896e8:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80896ea:	4d0e      	ldr	r5, [pc, #56]	; (8089724 <_Z16_fetch_usbserialv+0x3c>)
{
 80896ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80896ee:	a801      	add	r0, sp, #4
 80896f0:	f7ff fff2 	bl	80896d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80896f4:	7829      	ldrb	r1, [r5, #0]
 80896f6:	f3bf 8f5b 	dmb	ish
 80896fa:	f011 0401 	ands.w	r4, r1, #1
 80896fe:	d10e      	bne.n	808971e <_Z16_fetch_usbserialv+0x36>
 8089700:	4628      	mov	r0, r5
 8089702:	f7f6 fce0 	bl	80800c6 <__cxa_guard_acquire>
 8089706:	b150      	cbz	r0, 808971e <_Z16_fetch_usbserialv+0x36>
 8089708:	4621      	mov	r1, r4
 808970a:	aa01      	add	r2, sp, #4
 808970c:	4806      	ldr	r0, [pc, #24]	; (8089728 <_Z16_fetch_usbserialv+0x40>)
 808970e:	f7ff ffcb 	bl	80896a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8089712:	4628      	mov	r0, r5
 8089714:	f7f6 fcdc 	bl	80800d0 <__cxa_guard_release>
 8089718:	4804      	ldr	r0, [pc, #16]	; (808972c <_Z16_fetch_usbserialv+0x44>)
 808971a:	f001 fdfb 	bl	808b314 <atexit>
	return _usbserial;
}
 808971e:	4802      	ldr	r0, [pc, #8]	; (8089728 <_Z16_fetch_usbserialv+0x40>)
 8089720:	b007      	add	sp, #28
 8089722:	bd30      	pop	{r4, r5, pc}
 8089724:	20000b00 	.word	0x20000b00
 8089728:	20000b08 	.word	0x20000b08
 808972c:	08089631 	.word	0x08089631

08089730 <_Z23acquireUSBSerial1Bufferv>:
 8089730:	b510      	push	{r4, lr}
 8089732:	4604      	mov	r4, r0
 8089734:	2214      	movs	r2, #20
 8089736:	2100      	movs	r1, #0
 8089738:	f001 fe17 	bl	808b36a <memset>
 808973c:	4620      	mov	r0, r4
 808973e:	bd10      	pop	{r4, pc}

08089740 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8089740:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8089742:	4c0e      	ldr	r4, [pc, #56]	; (808977c <_Z17_fetch_usbserial1v+0x3c>)
{
 8089744:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8089746:	a801      	add	r0, sp, #4
 8089748:	f7ff fff2 	bl	8089730 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808974c:	7823      	ldrb	r3, [r4, #0]
 808974e:	f3bf 8f5b 	dmb	ish
 8089752:	07db      	lsls	r3, r3, #31
 8089754:	d40e      	bmi.n	8089774 <_Z17_fetch_usbserial1v+0x34>
 8089756:	4620      	mov	r0, r4
 8089758:	f7f6 fcb5 	bl	80800c6 <__cxa_guard_acquire>
 808975c:	b150      	cbz	r0, 8089774 <_Z17_fetch_usbserial1v+0x34>
 808975e:	2101      	movs	r1, #1
 8089760:	aa01      	add	r2, sp, #4
 8089762:	4807      	ldr	r0, [pc, #28]	; (8089780 <_Z17_fetch_usbserial1v+0x40>)
 8089764:	f7ff ffa0 	bl	80896a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8089768:	4620      	mov	r0, r4
 808976a:	f7f6 fcb1 	bl	80800d0 <__cxa_guard_release>
 808976e:	4805      	ldr	r0, [pc, #20]	; (8089784 <_Z17_fetch_usbserial1v+0x44>)
 8089770:	f001 fdd0 	bl	808b314 <atexit>
  return _usbserial1;
}
 8089774:	4802      	ldr	r0, [pc, #8]	; (8089780 <_Z17_fetch_usbserial1v+0x40>)
 8089776:	b006      	add	sp, #24
 8089778:	bd10      	pop	{r4, pc}
 808977a:	bf00      	nop
 808977c:	20000b04 	.word	0x20000b04
 8089780:	20000b1c 	.word	0x20000b1c
 8089784:	080896a7 	.word	0x080896a7

08089788 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8089788:	2200      	movs	r2, #0
 808978a:	6840      	ldr	r0, [r0, #4]
 808978c:	4611      	mov	r1, r2
 808978e:	f7fe b99b 	b.w	8087ac8 <network_ready>

08089792 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089792:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8089794:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8089796:	b085      	sub	sp, #20
 8089798:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808979a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808979c:	460f      	mov	r7, r1
 808979e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80897a0:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80897a2:	f001 fe54 	bl	808b44e <strlen>
 80897a6:	687b      	ldr	r3, [r7, #4]
 80897a8:	b281      	uxth	r1, r0
 80897aa:	9600      	str	r6, [sp, #0]
 80897ac:	4628      	mov	r0, r5
 80897ae:	aa03      	add	r2, sp, #12
 80897b0:	f7fe f8bc 	bl	808792c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80897b4:	b130      	cbz	r0, 80897c4 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80897b6:	4631      	mov	r1, r6
 80897b8:	4620      	mov	r0, r4
 80897ba:	f7ff ff19 	bl	80895f0 <_ZN9IPAddressC1Em>
    }
 80897be:	4620      	mov	r0, r4
 80897c0:	b005      	add	sp, #20
 80897c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80897c4:	4620      	mov	r0, r4
 80897c6:	a903      	add	r1, sp, #12
 80897c8:	f7ff ff0a 	bl	80895e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80897cc:	e7f7      	b.n	80897be <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080897ce <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80897ce:	2200      	movs	r2, #0
 80897d0:	6840      	ldr	r0, [r0, #4]
 80897d2:	4611      	mov	r1, r2
 80897d4:	f7fe b998 	b.w	8087b08 <network_listening>

080897d8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80897d8:	2200      	movs	r2, #0
 80897da:	6840      	ldr	r0, [r0, #4]
 80897dc:	4611      	mov	r1, r2
 80897de:	f7fe b9a3 	b.w	8087b28 <network_get_listen_timeout>

080897e2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80897e2:	2200      	movs	r2, #0
 80897e4:	6840      	ldr	r0, [r0, #4]
 80897e6:	f7fe b997 	b.w	8087b18 <network_set_listen_timeout>

080897ea <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80897ea:	2200      	movs	r2, #0
 80897ec:	6840      	ldr	r0, [r0, #4]
 80897ee:	f081 0101 	eor.w	r1, r1, #1
 80897f2:	f7fe b981 	b.w	8087af8 <network_listen>

080897f6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80897f6:	2300      	movs	r3, #0
 80897f8:	6840      	ldr	r0, [r0, #4]
 80897fa:	461a      	mov	r2, r3
 80897fc:	4619      	mov	r1, r3
 80897fe:	f7fe b973 	b.w	8087ae8 <network_off>

08089802 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8089802:	2300      	movs	r3, #0
 8089804:	6840      	ldr	r0, [r0, #4]
 8089806:	461a      	mov	r2, r3
 8089808:	4619      	mov	r1, r3
 808980a:	f7fe b965 	b.w	8087ad8 <network_on>

0808980e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808980e:	2200      	movs	r2, #0
 8089810:	6840      	ldr	r0, [r0, #4]
 8089812:	4611      	mov	r1, r2
 8089814:	f7fe b948 	b.w	8087aa8 <network_connecting>

08089818 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8089818:	2200      	movs	r2, #0
 808981a:	2102      	movs	r1, #2
 808981c:	6840      	ldr	r0, [r0, #4]
 808981e:	f7fe b94b 	b.w	8087ab8 <network_disconnect>

08089822 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8089822:	2300      	movs	r3, #0
 8089824:	6840      	ldr	r0, [r0, #4]
 8089826:	461a      	mov	r2, r3
 8089828:	f7fe b936 	b.w	8087a98 <network_connect>

0808982c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808982c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808982e:	2428      	movs	r4, #40	; 0x28
 8089830:	4b07      	ldr	r3, [pc, #28]	; (8089850 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8089832:	4622      	mov	r2, r4
 8089834:	4618      	mov	r0, r3
 8089836:	2100      	movs	r1, #0
 8089838:	f001 fd97 	bl	808b36a <memset>
        cid = -1;
 808983c:	f04f 32ff 	mov.w	r2, #4294967295
 8089840:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8089842:	2204      	movs	r2, #4
 8089844:	4b03      	ldr	r3, [pc, #12]	; (8089854 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8089846:	8004      	strh	r4, [r0, #0]
 8089848:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808984a:	4a03      	ldr	r2, [pc, #12]	; (8089858 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808984c:	601a      	str	r2, [r3, #0]
 808984e:	bd10      	pop	{r4, pc}
 8089850:	20000b38 	.word	0x20000b38
 8089854:	20000b30 	.word	0x20000b30
 8089858:	0808f2cc 	.word	0x0808f2cc

0808985c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 808985c:	4770      	bx	lr

0808985e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808985e:	7441      	strb	r1, [r0, #17]
}
 8089860:	4770      	bx	lr

08089862 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 8089862:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8089864:	7c00      	ldrb	r0, [r0, #16]
 8089866:	f7fd ff91 	bl	808778c <hal_usart_available_data_for_write>
}
 808986a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808986e:	bd08      	pop	{r3, pc}

08089870 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8089870:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8089872:	7c00      	ldrb	r0, [r0, #16]
 8089874:	f7fd ff62 	bl	808773c <hal_usart_available>
}
 8089878:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808987c:	bd08      	pop	{r3, pc}

0808987e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808987e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8089880:	7c00      	ldrb	r0, [r0, #16]
 8089882:	f7fd ff6b 	bl	808775c <hal_usart_peek>
}
 8089886:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808988a:	bd08      	pop	{r3, pc}

0808988c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808988c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808988e:	7c00      	ldrb	r0, [r0, #16]
 8089890:	f7fd ff5c 	bl	808774c <hal_usart_read>
}
 8089894:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8089898:	bd08      	pop	{r3, pc}

0808989a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808989a:	7c00      	ldrb	r0, [r0, #16]
 808989c:	f7fd bf66 	b.w	808776c <hal_usart_flush>

080898a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80898a0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80898a2:	7c46      	ldrb	r6, [r0, #17]
{
 80898a4:	4604      	mov	r4, r0
 80898a6:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80898a8:	b12e      	cbz	r6, 80898b6 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80898aa:	4629      	mov	r1, r5
 80898ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80898ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80898b2:	f7fd bf3b 	b.w	808772c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80898b6:	7c00      	ldrb	r0, [r0, #16]
 80898b8:	f7fd ff68 	bl	808778c <hal_usart_available_data_for_write>
 80898bc:	2800      	cmp	r0, #0
 80898be:	dcf4      	bgt.n	80898aa <_ZN11USARTSerial5writeEh+0xa>
}
 80898c0:	4630      	mov	r0, r6
 80898c2:	bd70      	pop	{r4, r5, r6, pc}

080898c4 <_ZN11USARTSerialD0Ev>:
 80898c4:	b510      	push	{r4, lr}
 80898c6:	4604      	mov	r4, r0
 80898c8:	2114      	movs	r1, #20
 80898ca:	f7f6 fbfa 	bl	80800c2 <_ZdlPvj>
 80898ce:	4620      	mov	r0, r4
 80898d0:	bd10      	pop	{r4, pc}
	...

080898d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80898d4:	b510      	push	{r4, lr}
 80898d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80898da:	4604      	mov	r4, r0
 80898dc:	4608      	mov	r0, r1
 80898de:	4611      	mov	r1, r2
 80898e0:	2200      	movs	r2, #0
 80898e2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80898e6:	4b04      	ldr	r3, [pc, #16]	; (80898f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80898e8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80898ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80898ec:	2301      	movs	r3, #1
 80898ee:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80898f0:	f7fd ff5c 	bl	80877ac <hal_usart_init_ex>
}
 80898f4:	4620      	mov	r0, r4
 80898f6:	bd10      	pop	{r4, pc}
 80898f8:	0808f308 	.word	0x0808f308

080898fc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80898fc:	2300      	movs	r3, #0
 80898fe:	7c00      	ldrb	r0, [r0, #16]
 8089900:	f7fd bf4c 	b.w	808779c <hal_usart_begin_config>

08089904 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8089904:	2200      	movs	r2, #0
 8089906:	f7ff bff9 	b.w	80898fc <_ZN11USARTSerial5beginEmm>

0808990a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808990a:	7c00      	ldrb	r0, [r0, #16]
 808990c:	f7fd bf36 	b.w	808777c <hal_usart_is_enabled>

08089910 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8089910:	b510      	push	{r4, lr}
      if (_M_empty())
 8089912:	6883      	ldr	r3, [r0, #8]
 8089914:	4604      	mov	r4, r0
 8089916:	b90b      	cbnz	r3, 808991c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8089918:	f000 faa8 	bl	8089e6c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808991c:	68c3      	ldr	r3, [r0, #12]
 808991e:	4798      	blx	r3
      if (_M_manager)
 8089920:	68a3      	ldr	r3, [r4, #8]
 8089922:	b11b      	cbz	r3, 808992c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089924:	2203      	movs	r2, #3
 8089926:	4621      	mov	r1, r4
 8089928:	4620      	mov	r0, r4
 808992a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808992c:	4620      	mov	r0, r4
}
 808992e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8089932:	2110      	movs	r1, #16
 8089934:	f7f6 bbc5 	b.w	80800c2 <_ZdlPvj>

08089938 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8089938:	4770      	bx	lr

0808993a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808993a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808993c:	4606      	mov	r6, r0
 808993e:	4615      	mov	r5, r2
 8089940:	460c      	mov	r4, r1
 8089942:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8089944:	42bc      	cmp	r4, r7
 8089946:	d006      	beq.n	8089956 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8089948:	6833      	ldr	r3, [r6, #0]
 808994a:	4630      	mov	r0, r6
 808994c:	689b      	ldr	r3, [r3, #8]
 808994e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8089952:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8089954:	e7f6      	b.n	8089944 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8089956:	4628      	mov	r0, r5
 8089958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808995a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808995a:	2200      	movs	r2, #0
 808995c:	7c00      	ldrb	r0, [r0, #16]
 808995e:	f7fd bf45 	b.w	80877ec <hal_i2c_write>

08089962 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8089962:	2100      	movs	r1, #0
 8089964:	7c00      	ldrb	r0, [r0, #16]
 8089966:	f7fd bf49 	b.w	80877fc <hal_i2c_available>

0808996a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808996a:	2100      	movs	r1, #0
 808996c:	7c00      	ldrb	r0, [r0, #16]
 808996e:	f7fd bf4d 	b.w	808780c <hal_i2c_read>

08089972 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8089972:	2100      	movs	r1, #0
 8089974:	7c00      	ldrb	r0, [r0, #16]
 8089976:	f7fd bf51 	b.w	808781c <hal_i2c_peek>

0808997a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808997a:	2100      	movs	r1, #0
 808997c:	7c00      	ldrb	r0, [r0, #16]
 808997e:	f7fd bf55 	b.w	808782c <hal_i2c_flush>

08089982 <_ZN7TwoWireD0Ev>:
 8089982:	b510      	push	{r4, lr}
 8089984:	4604      	mov	r4, r0
 8089986:	2114      	movs	r1, #20
 8089988:	f7f6 fb9b 	bl	80800c2 <_ZdlPvj>
 808998c:	4620      	mov	r0, r4
 808998e:	bd10      	pop	{r4, pc}

08089990 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8089990:	b510      	push	{r4, lr}
 8089992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089996:	4604      	mov	r4, r0
 8089998:	4608      	mov	r0, r1
 808999a:	2100      	movs	r1, #0
 808999c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80899a0:	4b03      	ldr	r3, [pc, #12]	; (80899b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80899a2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80899a4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80899a6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80899a8:	f7fd ff50 	bl	808784c <hal_i2c_init>
}
 80899ac:	4620      	mov	r0, r4
 80899ae:	bd10      	pop	{r4, pc}
 80899b0:	0808f338 	.word	0x0808f338

080899b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80899b4:	2300      	movs	r3, #0
 80899b6:	7c00      	ldrb	r0, [r0, #16]
 80899b8:	461a      	mov	r2, r3
 80899ba:	4619      	mov	r1, r3
 80899bc:	f7fd befe 	b.w	80877bc <hal_i2c_begin>

080899c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80899c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80899c2:	2200      	movs	r2, #0
 80899c4:	2314      	movs	r3, #20
 80899c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80899ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80899ce:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80899d0:	7c00      	ldrb	r0, [r0, #16]
 80899d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80899d6:	684b      	ldr	r3, [r1, #4]
 80899d8:	9303      	str	r3, [sp, #12]
 80899da:	68cb      	ldr	r3, [r1, #12]
 80899dc:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80899de:	7a0b      	ldrb	r3, [r1, #8]
 80899e0:	a901      	add	r1, sp, #4
 80899e2:	9305      	str	r3, [sp, #20]
 80899e4:	f7fd ff4a 	bl	808787c <hal_i2c_request_ex>
}
 80899e8:	b007      	add	sp, #28
 80899ea:	f85d fb04 	ldr.w	pc, [sp], #4

080899ee <_ZN7TwoWire11requestFromEhjh>:
{
 80899ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80899f0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80899f2:	f88d 1000 	strb.w	r1, [sp]
 80899f6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80899fa:	bf18      	it	ne
 80899fc:	2301      	movne	r3, #1
 80899fe:	9103      	str	r1, [sp, #12]
 8089a00:	4669      	mov	r1, sp
    size_ = size;
 8089a02:	9201      	str	r2, [sp, #4]
 8089a04:	f88d 3008 	strb.w	r3, [sp, #8]
 8089a08:	f7ff ffda 	bl	80899c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8089a0c:	b005      	add	sp, #20
 8089a0e:	f85d fb04 	ldr.w	pc, [sp], #4

08089a12 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8089a12:	2301      	movs	r3, #1
 8089a14:	f7ff bfeb 	b.w	80899ee <_ZN7TwoWire11requestFromEhjh>

08089a18 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8089a18:	2200      	movs	r2, #0
 8089a1a:	7c00      	ldrb	r0, [r0, #16]
 8089a1c:	f7fd bed6 	b.w	80877cc <hal_i2c_begin_transmission>

08089a20 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8089a20:	b2c9      	uxtb	r1, r1
 8089a22:	f7ff bff9 	b.w	8089a18 <_ZN7TwoWire17beginTransmissionEh>

08089a26 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8089a26:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8089a28:	2200      	movs	r2, #0
 8089a2a:	460b      	mov	r3, r1
 8089a2c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8089a30:	2214      	movs	r2, #20
 8089a32:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 8089a36:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 8089a38:	7809      	ldrb	r1, [r1, #0]
    };
 8089a3a:	9203      	str	r2, [sp, #12]
 8089a3c:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8089a3e:	7a1b      	ldrb	r3, [r3, #8]
    };
 8089a40:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 8089a42:	7c00      	ldrb	r0, [r0, #16]
 8089a44:	aa01      	add	r2, sp, #4
 8089a46:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8089a4a:	9305      	str	r3, [sp, #20]
 8089a4c:	f7fd febe 	bl	80877cc <hal_i2c_begin_transmission>
}
 8089a50:	b007      	add	sp, #28
 8089a52:	f85d fb04 	ldr.w	pc, [sp], #4

08089a56 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8089a56:	2200      	movs	r2, #0
 8089a58:	7c00      	ldrb	r0, [r0, #16]
 8089a5a:	f7fd bebf 	b.w	80877dc <hal_i2c_end_transmission>

08089a5e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8089a5e:	2101      	movs	r1, #1
 8089a60:	f7ff bff9 	b.w	8089a56 <_ZN7TwoWire15endTransmissionEh>

08089a64 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 8089a64:	2100      	movs	r1, #0
 8089a66:	7c00      	ldrb	r0, [r0, #16]
 8089a68:	f7fd bee8 	b.w	808783c <hal_i2c_is_enabled>

08089a6c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8089a6c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8089a6e:	2100      	movs	r1, #0
 8089a70:	7c00      	ldrb	r0, [r0, #16]
 8089a72:	f7fd fef3 	bl	808785c <hal_i2c_lock>
}
 8089a76:	fab0 f080 	clz	r0, r0
 8089a7a:	0940      	lsrs	r0, r0, #5
 8089a7c:	bd08      	pop	{r3, pc}

08089a7e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8089a7e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8089a80:	2100      	movs	r1, #0
 8089a82:	7c00      	ldrb	r0, [r0, #16]
 8089a84:	f7fd fef2 	bl	808786c <hal_i2c_unlock>
}
 8089a88:	fab0 f080 	clz	r0, r0
 8089a8c:	0940      	lsrs	r0, r0, #5
 8089a8e:	bd08      	pop	{r3, pc}

08089a90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8089a90:	2300      	movs	r3, #0
 8089a92:	6840      	ldr	r0, [r0, #4]
 8089a94:	461a      	mov	r2, r3
 8089a96:	f7fd bfff 	b.w	8087a98 <network_connect>

08089a9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8089a9a:	2200      	movs	r2, #0
 8089a9c:	2102      	movs	r1, #2
 8089a9e:	6840      	ldr	r0, [r0, #4]
 8089aa0:	f7fe b80a 	b.w	8087ab8 <network_disconnect>

08089aa4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8089aa4:	2200      	movs	r2, #0
 8089aa6:	6840      	ldr	r0, [r0, #4]
 8089aa8:	4611      	mov	r1, r2
 8089aaa:	f7fd bffd 	b.w	8087aa8 <network_connecting>

08089aae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8089aae:	2200      	movs	r2, #0
 8089ab0:	6840      	ldr	r0, [r0, #4]
 8089ab2:	4611      	mov	r1, r2
 8089ab4:	f7fe b808 	b.w	8087ac8 <network_ready>

08089ab8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8089ab8:	2300      	movs	r3, #0
 8089aba:	6840      	ldr	r0, [r0, #4]
 8089abc:	461a      	mov	r2, r3
 8089abe:	4619      	mov	r1, r3
 8089ac0:	f7fe b80a 	b.w	8087ad8 <network_on>

08089ac4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8089ac4:	2300      	movs	r3, #0
 8089ac6:	6840      	ldr	r0, [r0, #4]
 8089ac8:	461a      	mov	r2, r3
 8089aca:	4619      	mov	r1, r3
 8089acc:	f7fe b80c 	b.w	8087ae8 <network_off>

08089ad0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8089ad0:	2100      	movs	r1, #0
 8089ad2:	6840      	ldr	r0, [r0, #4]
 8089ad4:	f7fe b830 	b.w	8087b38 <network_is_on>

08089ad8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8089ad8:	2100      	movs	r1, #0
 8089ada:	6840      	ldr	r0, [r0, #4]
 8089adc:	f7fe b834 	b.w	8087b48 <network_is_off>

08089ae0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8089ae0:	2200      	movs	r2, #0
 8089ae2:	6840      	ldr	r0, [r0, #4]
 8089ae4:	f081 0101 	eor.w	r1, r1, #1
 8089ae8:	f7fe b806 	b.w	8087af8 <network_listen>

08089aec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8089aec:	2200      	movs	r2, #0
 8089aee:	6840      	ldr	r0, [r0, #4]
 8089af0:	f7fe b812 	b.w	8087b18 <network_set_listen_timeout>

08089af4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8089af4:	2200      	movs	r2, #0
 8089af6:	6840      	ldr	r0, [r0, #4]
 8089af8:	4611      	mov	r1, r2
 8089afa:	f7fe b815 	b.w	8087b28 <network_get_listen_timeout>

08089afe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8089afe:	2200      	movs	r2, #0
 8089b00:	6840      	ldr	r0, [r0, #4]
 8089b02:	4611      	mov	r1, r2
 8089b04:	f7fe b800 	b.w	8087b08 <network_listening>

08089b08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8089b08:	b570      	push	{r4, r5, r6, lr}
 8089b0a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8089b0c:	2600      	movs	r6, #0
 8089b0e:	b086      	sub	sp, #24
 8089b10:	4604      	mov	r4, r0
    IPAddress addr;
 8089b12:	a804      	add	r0, sp, #16
 8089b14:	f7ff fd5c 	bl	80895d0 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089b18:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8089b1a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089b1c:	f001 fc97 	bl	808b44e <strlen>
 8089b20:	4b0a      	ldr	r3, [pc, #40]	; (8089b4c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8089b22:	9600      	str	r6, [sp, #0]
 8089b24:	b281      	uxth	r1, r0
 8089b26:	685b      	ldr	r3, [r3, #4]
 8089b28:	4628      	mov	r0, r5
 8089b2a:	aa03      	add	r2, sp, #12
 8089b2c:	f7fd fefe 	bl	808792c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8089b30:	b130      	cbz	r0, 8089b40 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8089b32:	4631      	mov	r1, r6
 8089b34:	4620      	mov	r0, r4
 8089b36:	f7ff fd5b 	bl	80895f0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8089b3a:	4620      	mov	r0, r4
 8089b3c:	b006      	add	sp, #24
 8089b3e:	bd70      	pop	{r4, r5, r6, pc}
 8089b40:	4620      	mov	r0, r4
 8089b42:	a903      	add	r1, sp, #12
 8089b44:	f7ff fd4c 	bl	80895e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8089b48:	e7f7      	b.n	8089b3a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8089b4a:	bf00      	nop
 8089b4c:	20000b30 	.word	0x20000b30

08089b50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8089b50:	4b02      	ldr	r3, [pc, #8]	; (8089b5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8089b52:	4a03      	ldr	r2, [pc, #12]	; (8089b60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8089b54:	601a      	str	r2, [r3, #0]
 8089b56:	2200      	movs	r2, #0
 8089b58:	605a      	str	r2, [r3, #4]

} // spark
 8089b5a:	4770      	bx	lr
 8089b5c:	20000b60 	.word	0x20000b60
 8089b60:	0808f360 	.word	0x0808f360

08089b64 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8089b64:	4b02      	ldr	r3, [pc, #8]	; (8089b70 <__tcf_0+0xc>)
 8089b66:	6898      	ldr	r0, [r3, #8]
 8089b68:	b108      	cbz	r0, 8089b6e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 8089b6a:	f7fd bdc7 	b.w	80876fc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8089b6e:	4770      	bx	lr
 8089b70:	20000a5c 	.word	0x20000a5c

08089b74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8089b74:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 8089b76:	b570      	push	{r4, r5, r6, lr}
 8089b78:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 8089b7a:	d901      	bls.n	8089b80 <pinAvailable+0xc>
    return false;
 8089b7c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8089b7e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8089b80:	f1a0 030d 	sub.w	r3, r0, #13
 8089b84:	2b02      	cmp	r3, #2
 8089b86:	d90b      	bls.n	8089ba0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8089b88:	2801      	cmp	r0, #1
 8089b8a:	d824      	bhi.n	8089bd6 <pinAvailable+0x62>
 8089b8c:	f000 f924 	bl	8089dd8 <_Z19__fetch_global_Wirev>
 8089b90:	2100      	movs	r1, #0
 8089b92:	7c00      	ldrb	r0, [r0, #16]
 8089b94:	f7fd fe52 	bl	808783c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8089b98:	f080 0001 	eor.w	r0, r0, #1
 8089b9c:	b2c0      	uxtb	r0, r0
 8089b9e:	e7ee      	b.n	8089b7e <pinAvailable+0xa>
 8089ba0:	4e12      	ldr	r6, [pc, #72]	; (8089bec <pinAvailable+0x78>)
 8089ba2:	7831      	ldrb	r1, [r6, #0]
 8089ba4:	f3bf 8f5b 	dmb	ish
 8089ba8:	f011 0501 	ands.w	r5, r1, #1
 8089bac:	d10d      	bne.n	8089bca <pinAvailable+0x56>
 8089bae:	4630      	mov	r0, r6
 8089bb0:	f7f6 fa89 	bl	80800c6 <__cxa_guard_acquire>
 8089bb4:	b148      	cbz	r0, 8089bca <pinAvailable+0x56>
 8089bb6:	4629      	mov	r1, r5
 8089bb8:	480d      	ldr	r0, [pc, #52]	; (8089bf0 <pinAvailable+0x7c>)
 8089bba:	f7fe f9dd 	bl	8087f78 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8089bbe:	4630      	mov	r0, r6
 8089bc0:	f7f6 fa86 	bl	80800d0 <__cxa_guard_release>
 8089bc4:	480b      	ldr	r0, [pc, #44]	; (8089bf4 <pinAvailable+0x80>)
 8089bc6:	f001 fba5 	bl	808b314 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8089bca:	4b09      	ldr	r3, [pc, #36]	; (8089bf0 <pinAvailable+0x7c>)
 8089bcc:	7818      	ldrb	r0, [r3, #0]
 8089bce:	f7fd fe8d 	bl	80878ec <hal_spi_is_enabled>
 8089bd2:	2800      	cmp	r0, #0
 8089bd4:	d1d2      	bne.n	8089b7c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8089bd6:	3c12      	subs	r4, #18
 8089bd8:	2c01      	cmp	r4, #1
 8089bda:	d805      	bhi.n	8089be8 <pinAvailable+0x74>
 8089bdc:	f000 f88e 	bl	8089cfc <_Z22__fetch_global_Serial1v>
 8089be0:	7c00      	ldrb	r0, [r0, #16]
 8089be2:	f7fd fdcb 	bl	808777c <hal_usart_is_enabled>
 8089be6:	e7d7      	b.n	8089b98 <pinAvailable+0x24>
  return true; // 'pin' is available
 8089be8:	2001      	movs	r0, #1
 8089bea:	e7c8      	b.n	8089b7e <pinAvailable+0xa>
 8089bec:	20000a58 	.word	0x20000a58
 8089bf0:	20000a5c 	.word	0x20000a5c
 8089bf4:	08089b65 	.word	0x08089b65

08089bf8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089bf8:	282e      	cmp	r0, #46	; 0x2e
{
 8089bfa:	b538      	push	{r3, r4, r5, lr}
 8089bfc:	4604      	mov	r4, r0
 8089bfe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089c00:	d80a      	bhi.n	8089c18 <pinMode+0x20>
 8089c02:	29ff      	cmp	r1, #255	; 0xff
 8089c04:	d008      	beq.n	8089c18 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8089c06:	f7ff ffb5 	bl	8089b74 <pinAvailable>
 8089c0a:	b128      	cbz	r0, 8089c18 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8089c0c:	4629      	mov	r1, r5
 8089c0e:	4620      	mov	r0, r4
}
 8089c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8089c14:	f7fd bcf2 	b.w	80875fc <HAL_Pin_Mode>
}
 8089c18:	bd38      	pop	{r3, r4, r5, pc}

08089c1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8089c1a:	b538      	push	{r3, r4, r5, lr}
 8089c1c:	4604      	mov	r4, r0
 8089c1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089c20:	f7fd fcf4 	bl	808760c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8089c24:	28ff      	cmp	r0, #255	; 0xff
 8089c26:	d010      	beq.n	8089c4a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8089c28:	2806      	cmp	r0, #6
 8089c2a:	d804      	bhi.n	8089c36 <digitalWrite+0x1c>
 8089c2c:	234d      	movs	r3, #77	; 0x4d
 8089c2e:	fa23 f000 	lsr.w	r0, r3, r0
 8089c32:	07c3      	lsls	r3, r0, #31
 8089c34:	d409      	bmi.n	8089c4a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8089c36:	4620      	mov	r0, r4
 8089c38:	f7ff ff9c 	bl	8089b74 <pinAvailable>
 8089c3c:	b128      	cbz	r0, 8089c4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8089c3e:	4629      	mov	r1, r5
 8089c40:	4620      	mov	r0, r4
}
 8089c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8089c46:	f7fd bce9 	b.w	808761c <HAL_GPIO_Write>
}
 8089c4a:	bd38      	pop	{r3, r4, r5, pc}

08089c4c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8089c4c:	b510      	push	{r4, lr}
 8089c4e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089c50:	f7fd fcdc 	bl	808760c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 8089c54:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 8089c56:	b2db      	uxtb	r3, r3
 8089c58:	2b01      	cmp	r3, #1
 8089c5a:	d908      	bls.n	8089c6e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8089c5c:	4620      	mov	r0, r4
 8089c5e:	f7ff ff89 	bl	8089b74 <pinAvailable>
 8089c62:	b120      	cbz	r0, 8089c6e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8089c64:	4620      	mov	r0, r4
}
 8089c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8089c6a:	f7fd bcdf 	b.w	808762c <HAL_GPIO_Read>
}
 8089c6e:	2000      	movs	r0, #0
 8089c70:	bd10      	pop	{r4, pc}

08089c72 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8089c72:	b510      	push	{r4, lr}
 8089c74:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 8089c76:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8089c78:	bf9c      	itt	ls
 8089c7a:	340a      	addls	r4, #10
 8089c7c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 8089c7e:	4620      	mov	r0, r4
 8089c80:	f7ff ff78 	bl	8089b74 <pinAvailable>
 8089c84:	b150      	cbz	r0, 8089c9c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8089c86:	2103      	movs	r1, #3
 8089c88:	4620      	mov	r0, r4
 8089c8a:	f7fd fcaf 	bl	80875ec <HAL_Validate_Pin_Function>
 8089c8e:	2803      	cmp	r0, #3
 8089c90:	d104      	bne.n	8089c9c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8089c92:	4620      	mov	r0, r4
}
 8089c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8089c98:	f7fd bcd8 	b.w	808764c <hal_adc_read>
}
 8089c9c:	2000      	movs	r0, #0
 8089c9e:	bd10      	pop	{r4, pc}

08089ca0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 8089ca0:	4770      	bx	lr
	...

08089ca4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 8089ca4:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 8089ca6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 8089ca8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 8089caa:	462a      	mov	r2, r5
 8089cac:	2100      	movs	r1, #0
 8089cae:	f001 fb5c 	bl	808b36a <memset>
 8089cb2:	8025      	strh	r5, [r4, #0]
 8089cb4:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8089cb6:	4e07      	ldr	r6, [pc, #28]	; (8089cd4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 8089cb8:	4628      	mov	r0, r5
 8089cba:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 8089cbc:	8125      	strh	r5, [r4, #8]
 8089cbe:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8089cc0:	f000 f8d2 	bl	8089e68 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8089cc4:	4631      	mov	r1, r6
    };
 8089cc6:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 8089cc8:	4628      	mov	r0, r5
 8089cca:	f000 f8cd 	bl	8089e68 <_ZnajRKSt9nothrow_t>
    };
 8089cce:	60e0      	str	r0, [r4, #12]
}
 8089cd0:	4620      	mov	r0, r4
 8089cd2:	bd70      	pop	{r4, r5, r6, pc}
 8089cd4:	0808f394 	.word	0x0808f394

08089cd8 <_Z20acquireSerial1Bufferv>:
{
 8089cd8:	b510      	push	{r4, lr}
 8089cda:	4604      	mov	r4, r0
    return defaultUsartConfig();
 8089cdc:	f7ff ffe2 	bl	8089ca4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 8089ce0:	4620      	mov	r0, r4
 8089ce2:	bd10      	pop	{r4, pc}

08089ce4 <_Z20acquireSerial4Bufferv>:
 8089ce4:	b510      	push	{r4, lr}
 8089ce6:	4604      	mov	r4, r0
 8089ce8:	f7ff ffdc 	bl	8089ca4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 8089cec:	4620      	mov	r0, r4
 8089cee:	bd10      	pop	{r4, pc}

08089cf0 <_Z20acquireSerial5Bufferv>:
 8089cf0:	b510      	push	{r4, lr}
 8089cf2:	4604      	mov	r4, r0
 8089cf4:	f7ff ffd6 	bl	8089ca4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 8089cf8:	4620      	mov	r0, r4
 8089cfa:	bd10      	pop	{r4, pc}

08089cfc <_Z22__fetch_global_Serial1v>:
{
 8089cfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 8089cfe:	4d0e      	ldr	r5, [pc, #56]	; (8089d38 <_Z22__fetch_global_Serial1v+0x3c>)
{
 8089d00:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 8089d02:	7829      	ldrb	r1, [r5, #0]
 8089d04:	f3bf 8f5b 	dmb	ish
 8089d08:	f011 0401 	ands.w	r4, r1, #1
 8089d0c:	d111      	bne.n	8089d32 <_Z22__fetch_global_Serial1v+0x36>
 8089d0e:	4628      	mov	r0, r5
 8089d10:	f7f6 f9d9 	bl	80800c6 <__cxa_guard_acquire>
 8089d14:	b168      	cbz	r0, 8089d32 <_Z22__fetch_global_Serial1v+0x36>
 8089d16:	a801      	add	r0, sp, #4
 8089d18:	f7ff ffde 	bl	8089cd8 <_Z20acquireSerial1Bufferv>
 8089d1c:	4621      	mov	r1, r4
 8089d1e:	aa01      	add	r2, sp, #4
 8089d20:	4806      	ldr	r0, [pc, #24]	; (8089d3c <_Z22__fetch_global_Serial1v+0x40>)
 8089d22:	f7ff fdd7 	bl	80898d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 8089d26:	4628      	mov	r0, r5
 8089d28:	f7f6 f9d2 	bl	80800d0 <__cxa_guard_release>
 8089d2c:	4804      	ldr	r0, [pc, #16]	; (8089d40 <_Z22__fetch_global_Serial1v+0x44>)
 8089d2e:	f001 faf1 	bl	808b314 <atexit>
    return serial1;
}
 8089d32:	4802      	ldr	r0, [pc, #8]	; (8089d3c <_Z22__fetch_global_Serial1v+0x40>)
 8089d34:	b007      	add	sp, #28
 8089d36:	bd30      	pop	{r4, r5, pc}
 8089d38:	20000b68 	.word	0x20000b68
 8089d3c:	20000b6c 	.word	0x20000b6c
 8089d40:	08089ca1 	.word	0x08089ca1

08089d44 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8089d44:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 8089d46:	4c08      	ldr	r4, [pc, #32]	; (8089d68 <_Z21__fetch_global_EEPROMv+0x24>)
 8089d48:	7823      	ldrb	r3, [r4, #0]
 8089d4a:	f3bf 8f5b 	dmb	ish
 8089d4e:	07db      	lsls	r3, r3, #31
 8089d50:	d408      	bmi.n	8089d64 <_Z21__fetch_global_EEPROMv+0x20>
 8089d52:	4620      	mov	r0, r4
 8089d54:	f7f6 f9b7 	bl	80800c6 <__cxa_guard_acquire>
 8089d58:	b120      	cbz	r0, 8089d64 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 8089d5a:	f7fd fc97 	bl	808768c <HAL_EEPROM_Init>
 8089d5e:	4620      	mov	r0, r4
 8089d60:	f7f6 f9b6 	bl	80800d0 <__cxa_guard_release>
	return eeprom;
}
 8089d64:	4801      	ldr	r0, [pc, #4]	; (8089d6c <_Z21__fetch_global_EEPROMv+0x28>)
 8089d66:	bd10      	pop	{r4, pc}
 8089d68:	20000b84 	.word	0x20000b84
 8089d6c:	20000b88 	.word	0x20000b88

08089d70 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8089d70:	2300      	movs	r3, #0
 8089d72:	b507      	push	{r0, r1, r2, lr}
 8089d74:	461a      	mov	r2, r3
 8089d76:	4619      	mov	r1, r3
 8089d78:	9300      	str	r3, [sp, #0]
 8089d7a:	4803      	ldr	r0, [pc, #12]	; (8089d88 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 8089d7c:	f7ff fc4a 	bl	8089614 <_ZN9IPAddressC1Ehhhh>
 8089d80:	b003      	add	sp, #12
 8089d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8089d86:	bf00      	nop
 8089d88:	20000b8c 	.word	0x20000b8c

08089d8c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089d8c:	4770      	bx	lr
	...

08089d90 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
hal_i2c_config_t defaultWireConfig() {
 8089d90:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8089d92:	2314      	movs	r3, #20
 8089d94:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089d96:	4e08      	ldr	r6, [pc, #32]	; (8089db8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x28>)
hal_i2c_config_t defaultWireConfig() {
 8089d98:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8089d9a:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089d9c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8089d9e:	6085      	str	r5, [r0, #8]
 8089da0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089da2:	4628      	mov	r0, r5
 8089da4:	f000 f860 	bl	8089e68 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089da8:	4631      	mov	r1, r6
	};
 8089daa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089dac:	4628      	mov	r0, r5
 8089dae:	f000 f85b 	bl	8089e68 <_ZnajRKSt9nothrow_t>
	};
 8089db2:	60e0      	str	r0, [r4, #12]
}
 8089db4:	4620      	mov	r0, r4
 8089db6:	bd70      	pop	{r4, r5, r6, pc}
 8089db8:	0808f394 	.word	0x0808f394

08089dbc <__tcf_2>:
 8089dbc:	4770      	bx	lr

08089dbe <_Z17acquireWireBufferv>:
{
 8089dbe:	b510      	push	{r4, lr}
 8089dc0:	4604      	mov	r4, r0
	return defaultWireConfig();
 8089dc2:	f7ff ffe5 	bl	8089d90 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8089dc6:	4620      	mov	r0, r4
 8089dc8:	bd10      	pop	{r4, pc}

08089dca <_Z18acquireWire3Bufferv>:
 8089dca:	b510      	push	{r4, lr}
 8089dcc:	4604      	mov	r4, r0
 8089dce:	f7ff ffdf 	bl	8089d90 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8089dd2:	4620      	mov	r0, r4
 8089dd4:	bd10      	pop	{r4, pc}
	...

08089dd8 <_Z19__fetch_global_Wirev>:
{
 8089dd8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089dda:	4d0e      	ldr	r5, [pc, #56]	; (8089e14 <_Z19__fetch_global_Wirev+0x3c>)
{
 8089ddc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089dde:	7829      	ldrb	r1, [r5, #0]
 8089de0:	f3bf 8f5b 	dmb	ish
 8089de4:	f011 0401 	ands.w	r4, r1, #1
 8089de8:	d111      	bne.n	8089e0e <_Z19__fetch_global_Wirev+0x36>
 8089dea:	4628      	mov	r0, r5
 8089dec:	f7f6 f96b 	bl	80800c6 <__cxa_guard_acquire>
 8089df0:	b168      	cbz	r0, 8089e0e <_Z19__fetch_global_Wirev+0x36>
 8089df2:	a801      	add	r0, sp, #4
 8089df4:	f7ff ffe3 	bl	8089dbe <_Z17acquireWireBufferv>
 8089df8:	4621      	mov	r1, r4
 8089dfa:	aa01      	add	r2, sp, #4
 8089dfc:	4806      	ldr	r0, [pc, #24]	; (8089e18 <_Z19__fetch_global_Wirev+0x40>)
 8089dfe:	f7ff fdc7 	bl	8089990 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8089e02:	4628      	mov	r0, r5
 8089e04:	f7f6 f964 	bl	80800d0 <__cxa_guard_release>
 8089e08:	4804      	ldr	r0, [pc, #16]	; (8089e1c <_Z19__fetch_global_Wirev+0x44>)
 8089e0a:	f001 fa83 	bl	808b314 <atexit>
	return wire;
}
 8089e0e:	4802      	ldr	r0, [pc, #8]	; (8089e18 <_Z19__fetch_global_Wirev+0x40>)
 8089e10:	b007      	add	sp, #28
 8089e12:	bd30      	pop	{r4, r5, pc}
 8089e14:	20000b94 	.word	0x20000b94
 8089e18:	20000b9c 	.word	0x20000b9c
 8089e1c:	08089d8d 	.word	0x08089d8d

08089e20 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8089e20:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8089e22:	4c0e      	ldr	r4, [pc, #56]	; (8089e5c <_Z20__fetch_global_Wire3v+0x3c>)
{
 8089e24:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8089e26:	7823      	ldrb	r3, [r4, #0]
 8089e28:	f3bf 8f5b 	dmb	ish
 8089e2c:	07db      	lsls	r3, r3, #31
 8089e2e:	d411      	bmi.n	8089e54 <_Z20__fetch_global_Wire3v+0x34>
 8089e30:	4620      	mov	r0, r4
 8089e32:	f7f6 f948 	bl	80800c6 <__cxa_guard_acquire>
 8089e36:	b168      	cbz	r0, 8089e54 <_Z20__fetch_global_Wire3v+0x34>
 8089e38:	a801      	add	r0, sp, #4
 8089e3a:	f7ff ffc6 	bl	8089dca <_Z18acquireWire3Bufferv>
 8089e3e:	2102      	movs	r1, #2
 8089e40:	aa01      	add	r2, sp, #4
 8089e42:	4807      	ldr	r0, [pc, #28]	; (8089e60 <_Z20__fetch_global_Wire3v+0x40>)
 8089e44:	f7ff fda4 	bl	8089990 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8089e48:	4620      	mov	r0, r4
 8089e4a:	f7f6 f941 	bl	80800d0 <__cxa_guard_release>
 8089e4e:	4805      	ldr	r0, [pc, #20]	; (8089e64 <_Z20__fetch_global_Wire3v+0x44>)
 8089e50:	f001 fa60 	bl	808b314 <atexit>
	return wire;
}
 8089e54:	4802      	ldr	r0, [pc, #8]	; (8089e60 <_Z20__fetch_global_Wire3v+0x40>)
 8089e56:	b006      	add	sp, #24
 8089e58:	bd10      	pop	{r4, pc}
 8089e5a:	bf00      	nop
 8089e5c:	20000b98 	.word	0x20000b98
 8089e60:	20000bb0 	.word	0x20000bb0
 8089e64:	08089dbd 	.word	0x08089dbd

08089e68 <_ZnajRKSt9nothrow_t>:
 8089e68:	f7f6 b929 	b.w	80800be <_Znaj>

08089e6c <_ZSt25__throw_bad_function_callv>:
 8089e6c:	b508      	push	{r3, lr}
 8089e6e:	f7fd fee3 	bl	8087c38 <abort>
	...

08089e74 <nan>:
 8089e74:	2000      	movs	r0, #0
 8089e76:	4901      	ldr	r1, [pc, #4]	; (8089e7c <nan+0x8>)
 8089e78:	4770      	bx	lr
 8089e7a:	bf00      	nop
 8089e7c:	7ff80000 	.word	0x7ff80000

08089e80 <__aeabi_drsub>:
 8089e80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089e84:	e002      	b.n	8089e8c <__adddf3>
 8089e86:	bf00      	nop

08089e88 <__aeabi_dsub>:
 8089e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089e8c <__adddf3>:
 8089e8c:	b530      	push	{r4, r5, lr}
 8089e8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089e92:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089e96:	ea94 0f05 	teq	r4, r5
 8089e9a:	bf08      	it	eq
 8089e9c:	ea90 0f02 	teqeq	r0, r2
 8089ea0:	bf1f      	itttt	ne
 8089ea2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089ea6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089eaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089eae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089eb2:	f000 80e2 	beq.w	808a07a <__adddf3+0x1ee>
 8089eb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089eba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089ebe:	bfb8      	it	lt
 8089ec0:	426d      	neglt	r5, r5
 8089ec2:	dd0c      	ble.n	8089ede <__adddf3+0x52>
 8089ec4:	442c      	add	r4, r5
 8089ec6:	ea80 0202 	eor.w	r2, r0, r2
 8089eca:	ea81 0303 	eor.w	r3, r1, r3
 8089ece:	ea82 0000 	eor.w	r0, r2, r0
 8089ed2:	ea83 0101 	eor.w	r1, r3, r1
 8089ed6:	ea80 0202 	eor.w	r2, r0, r2
 8089eda:	ea81 0303 	eor.w	r3, r1, r3
 8089ede:	2d36      	cmp	r5, #54	; 0x36
 8089ee0:	bf88      	it	hi
 8089ee2:	bd30      	pophi	{r4, r5, pc}
 8089ee4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089ee8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089eec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089ef0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089ef4:	d002      	beq.n	8089efc <__adddf3+0x70>
 8089ef6:	4240      	negs	r0, r0
 8089ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089efc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089f04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089f08:	d002      	beq.n	8089f10 <__adddf3+0x84>
 8089f0a:	4252      	negs	r2, r2
 8089f0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089f10:	ea94 0f05 	teq	r4, r5
 8089f14:	f000 80a7 	beq.w	808a066 <__adddf3+0x1da>
 8089f18:	f1a4 0401 	sub.w	r4, r4, #1
 8089f1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8089f20:	db0d      	blt.n	8089f3e <__adddf3+0xb2>
 8089f22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089f26:	fa22 f205 	lsr.w	r2, r2, r5
 8089f2a:	1880      	adds	r0, r0, r2
 8089f2c:	f141 0100 	adc.w	r1, r1, #0
 8089f30:	fa03 f20e 	lsl.w	r2, r3, lr
 8089f34:	1880      	adds	r0, r0, r2
 8089f36:	fa43 f305 	asr.w	r3, r3, r5
 8089f3a:	4159      	adcs	r1, r3
 8089f3c:	e00e      	b.n	8089f5c <__adddf3+0xd0>
 8089f3e:	f1a5 0520 	sub.w	r5, r5, #32
 8089f42:	f10e 0e20 	add.w	lr, lr, #32
 8089f46:	2a01      	cmp	r2, #1
 8089f48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089f4c:	bf28      	it	cs
 8089f4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089f52:	fa43 f305 	asr.w	r3, r3, r5
 8089f56:	18c0      	adds	r0, r0, r3
 8089f58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089f60:	d507      	bpl.n	8089f72 <__adddf3+0xe6>
 8089f62:	f04f 0e00 	mov.w	lr, #0
 8089f66:	f1dc 0c00 	rsbs	ip, ip, #0
 8089f6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089f6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8089f72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089f76:	d31b      	bcc.n	8089fb0 <__adddf3+0x124>
 8089f78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089f7c:	d30c      	bcc.n	8089f98 <__adddf3+0x10c>
 8089f7e:	0849      	lsrs	r1, r1, #1
 8089f80:	ea5f 0030 	movs.w	r0, r0, rrx
 8089f84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089f88:	f104 0401 	add.w	r4, r4, #1
 8089f8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089f90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089f94:	f080 809a 	bcs.w	808a0cc <__adddf3+0x240>
 8089f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089f9c:	bf08      	it	eq
 8089f9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089fa2:	f150 0000 	adcs.w	r0, r0, #0
 8089fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089faa:	ea41 0105 	orr.w	r1, r1, r5
 8089fae:	bd30      	pop	{r4, r5, pc}
 8089fb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089fb4:	4140      	adcs	r0, r0
 8089fb6:	eb41 0101 	adc.w	r1, r1, r1
 8089fba:	3c01      	subs	r4, #1
 8089fbc:	bf28      	it	cs
 8089fbe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8089fc2:	d2e9      	bcs.n	8089f98 <__adddf3+0x10c>
 8089fc4:	f091 0f00 	teq	r1, #0
 8089fc8:	bf04      	itt	eq
 8089fca:	4601      	moveq	r1, r0
 8089fcc:	2000      	moveq	r0, #0
 8089fce:	fab1 f381 	clz	r3, r1
 8089fd2:	bf08      	it	eq
 8089fd4:	3320      	addeq	r3, #32
 8089fd6:	f1a3 030b 	sub.w	r3, r3, #11
 8089fda:	f1b3 0220 	subs.w	r2, r3, #32
 8089fde:	da0c      	bge.n	8089ffa <__adddf3+0x16e>
 8089fe0:	320c      	adds	r2, #12
 8089fe2:	dd08      	ble.n	8089ff6 <__adddf3+0x16a>
 8089fe4:	f102 0c14 	add.w	ip, r2, #20
 8089fe8:	f1c2 020c 	rsb	r2, r2, #12
 8089fec:	fa01 f00c 	lsl.w	r0, r1, ip
 8089ff0:	fa21 f102 	lsr.w	r1, r1, r2
 8089ff4:	e00c      	b.n	808a010 <__adddf3+0x184>
 8089ff6:	f102 0214 	add.w	r2, r2, #20
 8089ffa:	bfd8      	it	le
 8089ffc:	f1c2 0c20 	rsble	ip, r2, #32
 808a000:	fa01 f102 	lsl.w	r1, r1, r2
 808a004:	fa20 fc0c 	lsr.w	ip, r0, ip
 808a008:	bfdc      	itt	le
 808a00a:	ea41 010c 	orrle.w	r1, r1, ip
 808a00e:	4090      	lslle	r0, r2
 808a010:	1ae4      	subs	r4, r4, r3
 808a012:	bfa2      	ittt	ge
 808a014:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808a018:	4329      	orrge	r1, r5
 808a01a:	bd30      	popge	{r4, r5, pc}
 808a01c:	ea6f 0404 	mvn.w	r4, r4
 808a020:	3c1f      	subs	r4, #31
 808a022:	da1c      	bge.n	808a05e <__adddf3+0x1d2>
 808a024:	340c      	adds	r4, #12
 808a026:	dc0e      	bgt.n	808a046 <__adddf3+0x1ba>
 808a028:	f104 0414 	add.w	r4, r4, #20
 808a02c:	f1c4 0220 	rsb	r2, r4, #32
 808a030:	fa20 f004 	lsr.w	r0, r0, r4
 808a034:	fa01 f302 	lsl.w	r3, r1, r2
 808a038:	ea40 0003 	orr.w	r0, r0, r3
 808a03c:	fa21 f304 	lsr.w	r3, r1, r4
 808a040:	ea45 0103 	orr.w	r1, r5, r3
 808a044:	bd30      	pop	{r4, r5, pc}
 808a046:	f1c4 040c 	rsb	r4, r4, #12
 808a04a:	f1c4 0220 	rsb	r2, r4, #32
 808a04e:	fa20 f002 	lsr.w	r0, r0, r2
 808a052:	fa01 f304 	lsl.w	r3, r1, r4
 808a056:	ea40 0003 	orr.w	r0, r0, r3
 808a05a:	4629      	mov	r1, r5
 808a05c:	bd30      	pop	{r4, r5, pc}
 808a05e:	fa21 f004 	lsr.w	r0, r1, r4
 808a062:	4629      	mov	r1, r5
 808a064:	bd30      	pop	{r4, r5, pc}
 808a066:	f094 0f00 	teq	r4, #0
 808a06a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808a06e:	bf06      	itte	eq
 808a070:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808a074:	3401      	addeq	r4, #1
 808a076:	3d01      	subne	r5, #1
 808a078:	e74e      	b.n	8089f18 <__adddf3+0x8c>
 808a07a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808a07e:	bf18      	it	ne
 808a080:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808a084:	d029      	beq.n	808a0da <__adddf3+0x24e>
 808a086:	ea94 0f05 	teq	r4, r5
 808a08a:	bf08      	it	eq
 808a08c:	ea90 0f02 	teqeq	r0, r2
 808a090:	d005      	beq.n	808a09e <__adddf3+0x212>
 808a092:	ea54 0c00 	orrs.w	ip, r4, r0
 808a096:	bf04      	itt	eq
 808a098:	4619      	moveq	r1, r3
 808a09a:	4610      	moveq	r0, r2
 808a09c:	bd30      	pop	{r4, r5, pc}
 808a09e:	ea91 0f03 	teq	r1, r3
 808a0a2:	bf1e      	ittt	ne
 808a0a4:	2100      	movne	r1, #0
 808a0a6:	2000      	movne	r0, #0
 808a0a8:	bd30      	popne	{r4, r5, pc}
 808a0aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808a0ae:	d105      	bne.n	808a0bc <__adddf3+0x230>
 808a0b0:	0040      	lsls	r0, r0, #1
 808a0b2:	4149      	adcs	r1, r1
 808a0b4:	bf28      	it	cs
 808a0b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808a0ba:	bd30      	pop	{r4, r5, pc}
 808a0bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808a0c0:	bf3c      	itt	cc
 808a0c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808a0c6:	bd30      	popcc	{r4, r5, pc}
 808a0c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808a0cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808a0d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a0d4:	f04f 0000 	mov.w	r0, #0
 808a0d8:	bd30      	pop	{r4, r5, pc}
 808a0da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808a0de:	bf1a      	itte	ne
 808a0e0:	4619      	movne	r1, r3
 808a0e2:	4610      	movne	r0, r2
 808a0e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808a0e8:	bf1c      	itt	ne
 808a0ea:	460b      	movne	r3, r1
 808a0ec:	4602      	movne	r2, r0
 808a0ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a0f2:	bf06      	itte	eq
 808a0f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808a0f8:	ea91 0f03 	teqeq	r1, r3
 808a0fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808a100:	bd30      	pop	{r4, r5, pc}
 808a102:	bf00      	nop

0808a104 <__aeabi_ui2d>:
 808a104:	f090 0f00 	teq	r0, #0
 808a108:	bf04      	itt	eq
 808a10a:	2100      	moveq	r1, #0
 808a10c:	4770      	bxeq	lr
 808a10e:	b530      	push	{r4, r5, lr}
 808a110:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a114:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a118:	f04f 0500 	mov.w	r5, #0
 808a11c:	f04f 0100 	mov.w	r1, #0
 808a120:	e750      	b.n	8089fc4 <__adddf3+0x138>
 808a122:	bf00      	nop

0808a124 <__aeabi_i2d>:
 808a124:	f090 0f00 	teq	r0, #0
 808a128:	bf04      	itt	eq
 808a12a:	2100      	moveq	r1, #0
 808a12c:	4770      	bxeq	lr
 808a12e:	b530      	push	{r4, r5, lr}
 808a130:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a134:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a138:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808a13c:	bf48      	it	mi
 808a13e:	4240      	negmi	r0, r0
 808a140:	f04f 0100 	mov.w	r1, #0
 808a144:	e73e      	b.n	8089fc4 <__adddf3+0x138>
 808a146:	bf00      	nop

0808a148 <__aeabi_f2d>:
 808a148:	0042      	lsls	r2, r0, #1
 808a14a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808a14e:	ea4f 0131 	mov.w	r1, r1, rrx
 808a152:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808a156:	bf1f      	itttt	ne
 808a158:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808a15c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808a160:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808a164:	4770      	bxne	lr
 808a166:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808a16a:	bf08      	it	eq
 808a16c:	4770      	bxeq	lr
 808a16e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808a172:	bf04      	itt	eq
 808a174:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808a178:	4770      	bxeq	lr
 808a17a:	b530      	push	{r4, r5, lr}
 808a17c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808a180:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808a184:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a188:	e71c      	b.n	8089fc4 <__adddf3+0x138>
 808a18a:	bf00      	nop

0808a18c <__aeabi_ul2d>:
 808a18c:	ea50 0201 	orrs.w	r2, r0, r1
 808a190:	bf08      	it	eq
 808a192:	4770      	bxeq	lr
 808a194:	b530      	push	{r4, r5, lr}
 808a196:	f04f 0500 	mov.w	r5, #0
 808a19a:	e00a      	b.n	808a1b2 <__aeabi_l2d+0x16>

0808a19c <__aeabi_l2d>:
 808a19c:	ea50 0201 	orrs.w	r2, r0, r1
 808a1a0:	bf08      	it	eq
 808a1a2:	4770      	bxeq	lr
 808a1a4:	b530      	push	{r4, r5, lr}
 808a1a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808a1aa:	d502      	bpl.n	808a1b2 <__aeabi_l2d+0x16>
 808a1ac:	4240      	negs	r0, r0
 808a1ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a1b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a1b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a1ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808a1be:	f43f aed8 	beq.w	8089f72 <__adddf3+0xe6>
 808a1c2:	f04f 0203 	mov.w	r2, #3
 808a1c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808a1ca:	bf18      	it	ne
 808a1cc:	3203      	addne	r2, #3
 808a1ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808a1d2:	bf18      	it	ne
 808a1d4:	3203      	addne	r2, #3
 808a1d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808a1da:	f1c2 0320 	rsb	r3, r2, #32
 808a1de:	fa00 fc03 	lsl.w	ip, r0, r3
 808a1e2:	fa20 f002 	lsr.w	r0, r0, r2
 808a1e6:	fa01 fe03 	lsl.w	lr, r1, r3
 808a1ea:	ea40 000e 	orr.w	r0, r0, lr
 808a1ee:	fa21 f102 	lsr.w	r1, r1, r2
 808a1f2:	4414      	add	r4, r2
 808a1f4:	e6bd      	b.n	8089f72 <__adddf3+0xe6>
 808a1f6:	bf00      	nop

0808a1f8 <__aeabi_dmul>:
 808a1f8:	b570      	push	{r4, r5, r6, lr}
 808a1fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a1fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a202:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a206:	bf1d      	ittte	ne
 808a208:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a20c:	ea94 0f0c 	teqne	r4, ip
 808a210:	ea95 0f0c 	teqne	r5, ip
 808a214:	f000 f8de 	bleq	808a3d4 <__aeabi_dmul+0x1dc>
 808a218:	442c      	add	r4, r5
 808a21a:	ea81 0603 	eor.w	r6, r1, r3
 808a21e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808a222:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808a226:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808a22a:	bf18      	it	ne
 808a22c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808a230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808a238:	d038      	beq.n	808a2ac <__aeabi_dmul+0xb4>
 808a23a:	fba0 ce02 	umull	ip, lr, r0, r2
 808a23e:	f04f 0500 	mov.w	r5, #0
 808a242:	fbe1 e502 	umlal	lr, r5, r1, r2
 808a246:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808a24a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808a24e:	f04f 0600 	mov.w	r6, #0
 808a252:	fbe1 5603 	umlal	r5, r6, r1, r3
 808a256:	f09c 0f00 	teq	ip, #0
 808a25a:	bf18      	it	ne
 808a25c:	f04e 0e01 	orrne.w	lr, lr, #1
 808a260:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808a264:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808a268:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808a26c:	d204      	bcs.n	808a278 <__aeabi_dmul+0x80>
 808a26e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808a272:	416d      	adcs	r5, r5
 808a274:	eb46 0606 	adc.w	r6, r6, r6
 808a278:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808a27c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808a280:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808a284:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808a288:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808a28c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a290:	bf88      	it	hi
 808a292:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a296:	d81e      	bhi.n	808a2d6 <__aeabi_dmul+0xde>
 808a298:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808a29c:	bf08      	it	eq
 808a29e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808a2a2:	f150 0000 	adcs.w	r0, r0, #0
 808a2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a2aa:	bd70      	pop	{r4, r5, r6, pc}
 808a2ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808a2b0:	ea46 0101 	orr.w	r1, r6, r1
 808a2b4:	ea40 0002 	orr.w	r0, r0, r2
 808a2b8:	ea81 0103 	eor.w	r1, r1, r3
 808a2bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808a2c0:	bfc2      	ittt	gt
 808a2c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a2c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a2ca:	bd70      	popgt	{r4, r5, r6, pc}
 808a2cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a2d0:	f04f 0e00 	mov.w	lr, #0
 808a2d4:	3c01      	subs	r4, #1
 808a2d6:	f300 80ab 	bgt.w	808a430 <__aeabi_dmul+0x238>
 808a2da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808a2de:	bfde      	ittt	le
 808a2e0:	2000      	movle	r0, #0
 808a2e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808a2e6:	bd70      	pople	{r4, r5, r6, pc}
 808a2e8:	f1c4 0400 	rsb	r4, r4, #0
 808a2ec:	3c20      	subs	r4, #32
 808a2ee:	da35      	bge.n	808a35c <__aeabi_dmul+0x164>
 808a2f0:	340c      	adds	r4, #12
 808a2f2:	dc1b      	bgt.n	808a32c <__aeabi_dmul+0x134>
 808a2f4:	f104 0414 	add.w	r4, r4, #20
 808a2f8:	f1c4 0520 	rsb	r5, r4, #32
 808a2fc:	fa00 f305 	lsl.w	r3, r0, r5
 808a300:	fa20 f004 	lsr.w	r0, r0, r4
 808a304:	fa01 f205 	lsl.w	r2, r1, r5
 808a308:	ea40 0002 	orr.w	r0, r0, r2
 808a30c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808a310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a318:	fa21 f604 	lsr.w	r6, r1, r4
 808a31c:	eb42 0106 	adc.w	r1, r2, r6
 808a320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a324:	bf08      	it	eq
 808a326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a32a:	bd70      	pop	{r4, r5, r6, pc}
 808a32c:	f1c4 040c 	rsb	r4, r4, #12
 808a330:	f1c4 0520 	rsb	r5, r4, #32
 808a334:	fa00 f304 	lsl.w	r3, r0, r4
 808a338:	fa20 f005 	lsr.w	r0, r0, r5
 808a33c:	fa01 f204 	lsl.w	r2, r1, r4
 808a340:	ea40 0002 	orr.w	r0, r0, r2
 808a344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a348:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a34c:	f141 0100 	adc.w	r1, r1, #0
 808a350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a354:	bf08      	it	eq
 808a356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a35a:	bd70      	pop	{r4, r5, r6, pc}
 808a35c:	f1c4 0520 	rsb	r5, r4, #32
 808a360:	fa00 f205 	lsl.w	r2, r0, r5
 808a364:	ea4e 0e02 	orr.w	lr, lr, r2
 808a368:	fa20 f304 	lsr.w	r3, r0, r4
 808a36c:	fa01 f205 	lsl.w	r2, r1, r5
 808a370:	ea43 0302 	orr.w	r3, r3, r2
 808a374:	fa21 f004 	lsr.w	r0, r1, r4
 808a378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a37c:	fa21 f204 	lsr.w	r2, r1, r4
 808a380:	ea20 0002 	bic.w	r0, r0, r2
 808a384:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a38c:	bf08      	it	eq
 808a38e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a392:	bd70      	pop	{r4, r5, r6, pc}
 808a394:	f094 0f00 	teq	r4, #0
 808a398:	d10f      	bne.n	808a3ba <__aeabi_dmul+0x1c2>
 808a39a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a39e:	0040      	lsls	r0, r0, #1
 808a3a0:	eb41 0101 	adc.w	r1, r1, r1
 808a3a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a3a8:	bf08      	it	eq
 808a3aa:	3c01      	subeq	r4, #1
 808a3ac:	d0f7      	beq.n	808a39e <__aeabi_dmul+0x1a6>
 808a3ae:	ea41 0106 	orr.w	r1, r1, r6
 808a3b2:	f095 0f00 	teq	r5, #0
 808a3b6:	bf18      	it	ne
 808a3b8:	4770      	bxne	lr
 808a3ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a3be:	0052      	lsls	r2, r2, #1
 808a3c0:	eb43 0303 	adc.w	r3, r3, r3
 808a3c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a3c8:	bf08      	it	eq
 808a3ca:	3d01      	subeq	r5, #1
 808a3cc:	d0f7      	beq.n	808a3be <__aeabi_dmul+0x1c6>
 808a3ce:	ea43 0306 	orr.w	r3, r3, r6
 808a3d2:	4770      	bx	lr
 808a3d4:	ea94 0f0c 	teq	r4, ip
 808a3d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a3dc:	bf18      	it	ne
 808a3de:	ea95 0f0c 	teqne	r5, ip
 808a3e2:	d00c      	beq.n	808a3fe <__aeabi_dmul+0x206>
 808a3e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a3e8:	bf18      	it	ne
 808a3ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a3ee:	d1d1      	bne.n	808a394 <__aeabi_dmul+0x19c>
 808a3f0:	ea81 0103 	eor.w	r1, r1, r3
 808a3f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a3f8:	f04f 0000 	mov.w	r0, #0
 808a3fc:	bd70      	pop	{r4, r5, r6, pc}
 808a3fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a402:	bf06      	itte	eq
 808a404:	4610      	moveq	r0, r2
 808a406:	4619      	moveq	r1, r3
 808a408:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a40c:	d019      	beq.n	808a442 <__aeabi_dmul+0x24a>
 808a40e:	ea94 0f0c 	teq	r4, ip
 808a412:	d102      	bne.n	808a41a <__aeabi_dmul+0x222>
 808a414:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a418:	d113      	bne.n	808a442 <__aeabi_dmul+0x24a>
 808a41a:	ea95 0f0c 	teq	r5, ip
 808a41e:	d105      	bne.n	808a42c <__aeabi_dmul+0x234>
 808a420:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a424:	bf1c      	itt	ne
 808a426:	4610      	movne	r0, r2
 808a428:	4619      	movne	r1, r3
 808a42a:	d10a      	bne.n	808a442 <__aeabi_dmul+0x24a>
 808a42c:	ea81 0103 	eor.w	r1, r1, r3
 808a430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a434:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a43c:	f04f 0000 	mov.w	r0, #0
 808a440:	bd70      	pop	{r4, r5, r6, pc}
 808a442:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a446:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a44a:	bd70      	pop	{r4, r5, r6, pc}

0808a44c <__aeabi_ddiv>:
 808a44c:	b570      	push	{r4, r5, r6, lr}
 808a44e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a452:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a456:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a45a:	bf1d      	ittte	ne
 808a45c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a460:	ea94 0f0c 	teqne	r4, ip
 808a464:	ea95 0f0c 	teqne	r5, ip
 808a468:	f000 f8a7 	bleq	808a5ba <__aeabi_ddiv+0x16e>
 808a46c:	eba4 0405 	sub.w	r4, r4, r5
 808a470:	ea81 0e03 	eor.w	lr, r1, r3
 808a474:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a478:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a47c:	f000 8088 	beq.w	808a590 <__aeabi_ddiv+0x144>
 808a480:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a484:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a488:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a48c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a490:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a494:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a498:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a49c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a4a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a4a4:	429d      	cmp	r5, r3
 808a4a6:	bf08      	it	eq
 808a4a8:	4296      	cmpeq	r6, r2
 808a4aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a4ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a4b2:	d202      	bcs.n	808a4ba <__aeabi_ddiv+0x6e>
 808a4b4:	085b      	lsrs	r3, r3, #1
 808a4b6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a4ba:	1ab6      	subs	r6, r6, r2
 808a4bc:	eb65 0503 	sbc.w	r5, r5, r3
 808a4c0:	085b      	lsrs	r3, r3, #1
 808a4c2:	ea4f 0232 	mov.w	r2, r2, rrx
 808a4c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a4ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a4ce:	ebb6 0e02 	subs.w	lr, r6, r2
 808a4d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a4d6:	bf22      	ittt	cs
 808a4d8:	1ab6      	subcs	r6, r6, r2
 808a4da:	4675      	movcs	r5, lr
 808a4dc:	ea40 000c 	orrcs.w	r0, r0, ip
 808a4e0:	085b      	lsrs	r3, r3, #1
 808a4e2:	ea4f 0232 	mov.w	r2, r2, rrx
 808a4e6:	ebb6 0e02 	subs.w	lr, r6, r2
 808a4ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a4ee:	bf22      	ittt	cs
 808a4f0:	1ab6      	subcs	r6, r6, r2
 808a4f2:	4675      	movcs	r5, lr
 808a4f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a4f8:	085b      	lsrs	r3, r3, #1
 808a4fa:	ea4f 0232 	mov.w	r2, r2, rrx
 808a4fe:	ebb6 0e02 	subs.w	lr, r6, r2
 808a502:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a506:	bf22      	ittt	cs
 808a508:	1ab6      	subcs	r6, r6, r2
 808a50a:	4675      	movcs	r5, lr
 808a50c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a510:	085b      	lsrs	r3, r3, #1
 808a512:	ea4f 0232 	mov.w	r2, r2, rrx
 808a516:	ebb6 0e02 	subs.w	lr, r6, r2
 808a51a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a51e:	bf22      	ittt	cs
 808a520:	1ab6      	subcs	r6, r6, r2
 808a522:	4675      	movcs	r5, lr
 808a524:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a528:	ea55 0e06 	orrs.w	lr, r5, r6
 808a52c:	d018      	beq.n	808a560 <__aeabi_ddiv+0x114>
 808a52e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a532:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a536:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a53a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a53e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a542:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a546:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a54a:	d1c0      	bne.n	808a4ce <__aeabi_ddiv+0x82>
 808a54c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a550:	d10b      	bne.n	808a56a <__aeabi_ddiv+0x11e>
 808a552:	ea41 0100 	orr.w	r1, r1, r0
 808a556:	f04f 0000 	mov.w	r0, #0
 808a55a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a55e:	e7b6      	b.n	808a4ce <__aeabi_ddiv+0x82>
 808a560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a564:	bf04      	itt	eq
 808a566:	4301      	orreq	r1, r0
 808a568:	2000      	moveq	r0, #0
 808a56a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a56e:	bf88      	it	hi
 808a570:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a574:	f63f aeaf 	bhi.w	808a2d6 <__aeabi_dmul+0xde>
 808a578:	ebb5 0c03 	subs.w	ip, r5, r3
 808a57c:	bf04      	itt	eq
 808a57e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a586:	f150 0000 	adcs.w	r0, r0, #0
 808a58a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a58e:	bd70      	pop	{r4, r5, r6, pc}
 808a590:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a594:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a598:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a59c:	bfc2      	ittt	gt
 808a59e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a5a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a5a6:	bd70      	popgt	{r4, r5, r6, pc}
 808a5a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a5ac:	f04f 0e00 	mov.w	lr, #0
 808a5b0:	3c01      	subs	r4, #1
 808a5b2:	e690      	b.n	808a2d6 <__aeabi_dmul+0xde>
 808a5b4:	ea45 0e06 	orr.w	lr, r5, r6
 808a5b8:	e68d      	b.n	808a2d6 <__aeabi_dmul+0xde>
 808a5ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a5be:	ea94 0f0c 	teq	r4, ip
 808a5c2:	bf08      	it	eq
 808a5c4:	ea95 0f0c 	teqeq	r5, ip
 808a5c8:	f43f af3b 	beq.w	808a442 <__aeabi_dmul+0x24a>
 808a5cc:	ea94 0f0c 	teq	r4, ip
 808a5d0:	d10a      	bne.n	808a5e8 <__aeabi_ddiv+0x19c>
 808a5d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a5d6:	f47f af34 	bne.w	808a442 <__aeabi_dmul+0x24a>
 808a5da:	ea95 0f0c 	teq	r5, ip
 808a5de:	f47f af25 	bne.w	808a42c <__aeabi_dmul+0x234>
 808a5e2:	4610      	mov	r0, r2
 808a5e4:	4619      	mov	r1, r3
 808a5e6:	e72c      	b.n	808a442 <__aeabi_dmul+0x24a>
 808a5e8:	ea95 0f0c 	teq	r5, ip
 808a5ec:	d106      	bne.n	808a5fc <__aeabi_ddiv+0x1b0>
 808a5ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a5f2:	f43f aefd 	beq.w	808a3f0 <__aeabi_dmul+0x1f8>
 808a5f6:	4610      	mov	r0, r2
 808a5f8:	4619      	mov	r1, r3
 808a5fa:	e722      	b.n	808a442 <__aeabi_dmul+0x24a>
 808a5fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a600:	bf18      	it	ne
 808a602:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a606:	f47f aec5 	bne.w	808a394 <__aeabi_dmul+0x19c>
 808a60a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a60e:	f47f af0d 	bne.w	808a42c <__aeabi_dmul+0x234>
 808a612:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a616:	f47f aeeb 	bne.w	808a3f0 <__aeabi_dmul+0x1f8>
 808a61a:	e712      	b.n	808a442 <__aeabi_dmul+0x24a>

0808a61c <__gedf2>:
 808a61c:	f04f 3cff 	mov.w	ip, #4294967295
 808a620:	e006      	b.n	808a630 <__cmpdf2+0x4>
 808a622:	bf00      	nop

0808a624 <__ledf2>:
 808a624:	f04f 0c01 	mov.w	ip, #1
 808a628:	e002      	b.n	808a630 <__cmpdf2+0x4>
 808a62a:	bf00      	nop

0808a62c <__cmpdf2>:
 808a62c:	f04f 0c01 	mov.w	ip, #1
 808a630:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a63c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a640:	bf18      	it	ne
 808a642:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a646:	d01b      	beq.n	808a680 <__cmpdf2+0x54>
 808a648:	b001      	add	sp, #4
 808a64a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a64e:	bf0c      	ite	eq
 808a650:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a654:	ea91 0f03 	teqne	r1, r3
 808a658:	bf02      	ittt	eq
 808a65a:	ea90 0f02 	teqeq	r0, r2
 808a65e:	2000      	moveq	r0, #0
 808a660:	4770      	bxeq	lr
 808a662:	f110 0f00 	cmn.w	r0, #0
 808a666:	ea91 0f03 	teq	r1, r3
 808a66a:	bf58      	it	pl
 808a66c:	4299      	cmppl	r1, r3
 808a66e:	bf08      	it	eq
 808a670:	4290      	cmpeq	r0, r2
 808a672:	bf2c      	ite	cs
 808a674:	17d8      	asrcs	r0, r3, #31
 808a676:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a67a:	f040 0001 	orr.w	r0, r0, #1
 808a67e:	4770      	bx	lr
 808a680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a688:	d102      	bne.n	808a690 <__cmpdf2+0x64>
 808a68a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a68e:	d107      	bne.n	808a6a0 <__cmpdf2+0x74>
 808a690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a698:	d1d6      	bne.n	808a648 <__cmpdf2+0x1c>
 808a69a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a69e:	d0d3      	beq.n	808a648 <__cmpdf2+0x1c>
 808a6a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a6a4:	4770      	bx	lr
 808a6a6:	bf00      	nop

0808a6a8 <__aeabi_cdrcmple>:
 808a6a8:	4684      	mov	ip, r0
 808a6aa:	4610      	mov	r0, r2
 808a6ac:	4662      	mov	r2, ip
 808a6ae:	468c      	mov	ip, r1
 808a6b0:	4619      	mov	r1, r3
 808a6b2:	4663      	mov	r3, ip
 808a6b4:	e000      	b.n	808a6b8 <__aeabi_cdcmpeq>
 808a6b6:	bf00      	nop

0808a6b8 <__aeabi_cdcmpeq>:
 808a6b8:	b501      	push	{r0, lr}
 808a6ba:	f7ff ffb7 	bl	808a62c <__cmpdf2>
 808a6be:	2800      	cmp	r0, #0
 808a6c0:	bf48      	it	mi
 808a6c2:	f110 0f00 	cmnmi.w	r0, #0
 808a6c6:	bd01      	pop	{r0, pc}

0808a6c8 <__aeabi_dcmpeq>:
 808a6c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a6cc:	f7ff fff4 	bl	808a6b8 <__aeabi_cdcmpeq>
 808a6d0:	bf0c      	ite	eq
 808a6d2:	2001      	moveq	r0, #1
 808a6d4:	2000      	movne	r0, #0
 808a6d6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a6da:	bf00      	nop

0808a6dc <__aeabi_dcmplt>:
 808a6dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a6e0:	f7ff ffea 	bl	808a6b8 <__aeabi_cdcmpeq>
 808a6e4:	bf34      	ite	cc
 808a6e6:	2001      	movcc	r0, #1
 808a6e8:	2000      	movcs	r0, #0
 808a6ea:	f85d fb08 	ldr.w	pc, [sp], #8
 808a6ee:	bf00      	nop

0808a6f0 <__aeabi_dcmple>:
 808a6f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a6f4:	f7ff ffe0 	bl	808a6b8 <__aeabi_cdcmpeq>
 808a6f8:	bf94      	ite	ls
 808a6fa:	2001      	movls	r0, #1
 808a6fc:	2000      	movhi	r0, #0
 808a6fe:	f85d fb08 	ldr.w	pc, [sp], #8
 808a702:	bf00      	nop

0808a704 <__aeabi_dcmpge>:
 808a704:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a708:	f7ff ffce 	bl	808a6a8 <__aeabi_cdrcmple>
 808a70c:	bf94      	ite	ls
 808a70e:	2001      	movls	r0, #1
 808a710:	2000      	movhi	r0, #0
 808a712:	f85d fb08 	ldr.w	pc, [sp], #8
 808a716:	bf00      	nop

0808a718 <__aeabi_dcmpgt>:
 808a718:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a71c:	f7ff ffc4 	bl	808a6a8 <__aeabi_cdrcmple>
 808a720:	bf34      	ite	cc
 808a722:	2001      	movcc	r0, #1
 808a724:	2000      	movcs	r0, #0
 808a726:	f85d fb08 	ldr.w	pc, [sp], #8
 808a72a:	bf00      	nop

0808a72c <__aeabi_dcmpun>:
 808a72c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a734:	d102      	bne.n	808a73c <__aeabi_dcmpun+0x10>
 808a736:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a73a:	d10a      	bne.n	808a752 <__aeabi_dcmpun+0x26>
 808a73c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a744:	d102      	bne.n	808a74c <__aeabi_dcmpun+0x20>
 808a746:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a74a:	d102      	bne.n	808a752 <__aeabi_dcmpun+0x26>
 808a74c:	f04f 0000 	mov.w	r0, #0
 808a750:	4770      	bx	lr
 808a752:	f04f 0001 	mov.w	r0, #1
 808a756:	4770      	bx	lr

0808a758 <__aeabi_d2iz>:
 808a758:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a75c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a760:	d215      	bcs.n	808a78e <__aeabi_d2iz+0x36>
 808a762:	d511      	bpl.n	808a788 <__aeabi_d2iz+0x30>
 808a764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a76c:	d912      	bls.n	808a794 <__aeabi_d2iz+0x3c>
 808a76e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a77a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a77e:	fa23 f002 	lsr.w	r0, r3, r2
 808a782:	bf18      	it	ne
 808a784:	4240      	negne	r0, r0
 808a786:	4770      	bx	lr
 808a788:	f04f 0000 	mov.w	r0, #0
 808a78c:	4770      	bx	lr
 808a78e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a792:	d105      	bne.n	808a7a0 <__aeabi_d2iz+0x48>
 808a794:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a798:	bf08      	it	eq
 808a79a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a79e:	4770      	bx	lr
 808a7a0:	f04f 0000 	mov.w	r0, #0
 808a7a4:	4770      	bx	lr
 808a7a6:	bf00      	nop

0808a7a8 <__aeabi_d2uiz>:
 808a7a8:	004a      	lsls	r2, r1, #1
 808a7aa:	d211      	bcs.n	808a7d0 <__aeabi_d2uiz+0x28>
 808a7ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a7b0:	d211      	bcs.n	808a7d6 <__aeabi_d2uiz+0x2e>
 808a7b2:	d50d      	bpl.n	808a7d0 <__aeabi_d2uiz+0x28>
 808a7b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a7b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a7bc:	d40e      	bmi.n	808a7dc <__aeabi_d2uiz+0x34>
 808a7be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a7c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a7c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a7ca:	fa23 f002 	lsr.w	r0, r3, r2
 808a7ce:	4770      	bx	lr
 808a7d0:	f04f 0000 	mov.w	r0, #0
 808a7d4:	4770      	bx	lr
 808a7d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a7da:	d102      	bne.n	808a7e2 <__aeabi_d2uiz+0x3a>
 808a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 808a7e0:	4770      	bx	lr
 808a7e2:	f04f 0000 	mov.w	r0, #0
 808a7e6:	4770      	bx	lr

0808a7e8 <__aeabi_d2f>:
 808a7e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a7ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a7f0:	bf24      	itt	cs
 808a7f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a7f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a7fa:	d90d      	bls.n	808a818 <__aeabi_d2f+0x30>
 808a7fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a80c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a810:	bf08      	it	eq
 808a812:	f020 0001 	biceq.w	r0, r0, #1
 808a816:	4770      	bx	lr
 808a818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a81c:	d121      	bne.n	808a862 <__aeabi_d2f+0x7a>
 808a81e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a822:	bfbc      	itt	lt
 808a824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a828:	4770      	bxlt	lr
 808a82a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a82e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a832:	f1c2 0218 	rsb	r2, r2, #24
 808a836:	f1c2 0c20 	rsb	ip, r2, #32
 808a83a:	fa10 f30c 	lsls.w	r3, r0, ip
 808a83e:	fa20 f002 	lsr.w	r0, r0, r2
 808a842:	bf18      	it	ne
 808a844:	f040 0001 	orrne.w	r0, r0, #1
 808a848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a84c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a850:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a854:	ea40 000c 	orr.w	r0, r0, ip
 808a858:	fa23 f302 	lsr.w	r3, r3, r2
 808a85c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a860:	e7cc      	b.n	808a7fc <__aeabi_d2f+0x14>
 808a862:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a866:	d107      	bne.n	808a878 <__aeabi_d2f+0x90>
 808a868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a86c:	bf1e      	ittt	ne
 808a86e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a876:	4770      	bxne	lr
 808a878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a87c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a884:	4770      	bx	lr
 808a886:	bf00      	nop

0808a888 <__aeabi_frsub>:
 808a888:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a88c:	e002      	b.n	808a894 <__addsf3>
 808a88e:	bf00      	nop

0808a890 <__aeabi_fsub>:
 808a890:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a894 <__addsf3>:
 808a894:	0042      	lsls	r2, r0, #1
 808a896:	bf1f      	itttt	ne
 808a898:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a89c:	ea92 0f03 	teqne	r2, r3
 808a8a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a8a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a8a8:	d06a      	beq.n	808a980 <__addsf3+0xec>
 808a8aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a8ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a8b2:	bfc1      	itttt	gt
 808a8b4:	18d2      	addgt	r2, r2, r3
 808a8b6:	4041      	eorgt	r1, r0
 808a8b8:	4048      	eorgt	r0, r1
 808a8ba:	4041      	eorgt	r1, r0
 808a8bc:	bfb8      	it	lt
 808a8be:	425b      	neglt	r3, r3
 808a8c0:	2b19      	cmp	r3, #25
 808a8c2:	bf88      	it	hi
 808a8c4:	4770      	bxhi	lr
 808a8c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a8ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a8ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a8d2:	bf18      	it	ne
 808a8d4:	4240      	negne	r0, r0
 808a8d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a8da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a8de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a8e2:	bf18      	it	ne
 808a8e4:	4249      	negne	r1, r1
 808a8e6:	ea92 0f03 	teq	r2, r3
 808a8ea:	d03f      	beq.n	808a96c <__addsf3+0xd8>
 808a8ec:	f1a2 0201 	sub.w	r2, r2, #1
 808a8f0:	fa41 fc03 	asr.w	ip, r1, r3
 808a8f4:	eb10 000c 	adds.w	r0, r0, ip
 808a8f8:	f1c3 0320 	rsb	r3, r3, #32
 808a8fc:	fa01 f103 	lsl.w	r1, r1, r3
 808a900:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a904:	d502      	bpl.n	808a90c <__addsf3+0x78>
 808a906:	4249      	negs	r1, r1
 808a908:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a90c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a910:	d313      	bcc.n	808a93a <__addsf3+0xa6>
 808a912:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a916:	d306      	bcc.n	808a926 <__addsf3+0x92>
 808a918:	0840      	lsrs	r0, r0, #1
 808a91a:	ea4f 0131 	mov.w	r1, r1, rrx
 808a91e:	f102 0201 	add.w	r2, r2, #1
 808a922:	2afe      	cmp	r2, #254	; 0xfe
 808a924:	d251      	bcs.n	808a9ca <__addsf3+0x136>
 808a926:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a92a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a92e:	bf08      	it	eq
 808a930:	f020 0001 	biceq.w	r0, r0, #1
 808a934:	ea40 0003 	orr.w	r0, r0, r3
 808a938:	4770      	bx	lr
 808a93a:	0049      	lsls	r1, r1, #1
 808a93c:	eb40 0000 	adc.w	r0, r0, r0
 808a940:	3a01      	subs	r2, #1
 808a942:	bf28      	it	cs
 808a944:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808a948:	d2ed      	bcs.n	808a926 <__addsf3+0x92>
 808a94a:	fab0 fc80 	clz	ip, r0
 808a94e:	f1ac 0c08 	sub.w	ip, ip, #8
 808a952:	ebb2 020c 	subs.w	r2, r2, ip
 808a956:	fa00 f00c 	lsl.w	r0, r0, ip
 808a95a:	bfaa      	itet	ge
 808a95c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a960:	4252      	neglt	r2, r2
 808a962:	4318      	orrge	r0, r3
 808a964:	bfbc      	itt	lt
 808a966:	40d0      	lsrlt	r0, r2
 808a968:	4318      	orrlt	r0, r3
 808a96a:	4770      	bx	lr
 808a96c:	f092 0f00 	teq	r2, #0
 808a970:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a974:	bf06      	itte	eq
 808a976:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a97a:	3201      	addeq	r2, #1
 808a97c:	3b01      	subne	r3, #1
 808a97e:	e7b5      	b.n	808a8ec <__addsf3+0x58>
 808a980:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a984:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a988:	bf18      	it	ne
 808a98a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a98e:	d021      	beq.n	808a9d4 <__addsf3+0x140>
 808a990:	ea92 0f03 	teq	r2, r3
 808a994:	d004      	beq.n	808a9a0 <__addsf3+0x10c>
 808a996:	f092 0f00 	teq	r2, #0
 808a99a:	bf08      	it	eq
 808a99c:	4608      	moveq	r0, r1
 808a99e:	4770      	bx	lr
 808a9a0:	ea90 0f01 	teq	r0, r1
 808a9a4:	bf1c      	itt	ne
 808a9a6:	2000      	movne	r0, #0
 808a9a8:	4770      	bxne	lr
 808a9aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a9ae:	d104      	bne.n	808a9ba <__addsf3+0x126>
 808a9b0:	0040      	lsls	r0, r0, #1
 808a9b2:	bf28      	it	cs
 808a9b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a9b8:	4770      	bx	lr
 808a9ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a9be:	bf3c      	itt	cc
 808a9c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a9c4:	4770      	bxcc	lr
 808a9c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a9ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a9ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a9d2:	4770      	bx	lr
 808a9d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a9d8:	bf16      	itet	ne
 808a9da:	4608      	movne	r0, r1
 808a9dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a9e0:	4601      	movne	r1, r0
 808a9e2:	0242      	lsls	r2, r0, #9
 808a9e4:	bf06      	itte	eq
 808a9e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a9ea:	ea90 0f01 	teqeq	r0, r1
 808a9ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a9f2:	4770      	bx	lr

0808a9f4 <__aeabi_ui2f>:
 808a9f4:	f04f 0300 	mov.w	r3, #0
 808a9f8:	e004      	b.n	808aa04 <__aeabi_i2f+0x8>
 808a9fa:	bf00      	nop

0808a9fc <__aeabi_i2f>:
 808a9fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808aa00:	bf48      	it	mi
 808aa02:	4240      	negmi	r0, r0
 808aa04:	ea5f 0c00 	movs.w	ip, r0
 808aa08:	bf08      	it	eq
 808aa0a:	4770      	bxeq	lr
 808aa0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808aa10:	4601      	mov	r1, r0
 808aa12:	f04f 0000 	mov.w	r0, #0
 808aa16:	e01c      	b.n	808aa52 <__aeabi_l2f+0x2a>

0808aa18 <__aeabi_ul2f>:
 808aa18:	ea50 0201 	orrs.w	r2, r0, r1
 808aa1c:	bf08      	it	eq
 808aa1e:	4770      	bxeq	lr
 808aa20:	f04f 0300 	mov.w	r3, #0
 808aa24:	e00a      	b.n	808aa3c <__aeabi_l2f+0x14>
 808aa26:	bf00      	nop

0808aa28 <__aeabi_l2f>:
 808aa28:	ea50 0201 	orrs.w	r2, r0, r1
 808aa2c:	bf08      	it	eq
 808aa2e:	4770      	bxeq	lr
 808aa30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808aa34:	d502      	bpl.n	808aa3c <__aeabi_l2f+0x14>
 808aa36:	4240      	negs	r0, r0
 808aa38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808aa3c:	ea5f 0c01 	movs.w	ip, r1
 808aa40:	bf02      	ittt	eq
 808aa42:	4684      	moveq	ip, r0
 808aa44:	4601      	moveq	r1, r0
 808aa46:	2000      	moveq	r0, #0
 808aa48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808aa4c:	bf08      	it	eq
 808aa4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808aa52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808aa56:	fabc f28c 	clz	r2, ip
 808aa5a:	3a08      	subs	r2, #8
 808aa5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808aa60:	db10      	blt.n	808aa84 <__aeabi_l2f+0x5c>
 808aa62:	fa01 fc02 	lsl.w	ip, r1, r2
 808aa66:	4463      	add	r3, ip
 808aa68:	fa00 fc02 	lsl.w	ip, r0, r2
 808aa6c:	f1c2 0220 	rsb	r2, r2, #32
 808aa70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808aa74:	fa20 f202 	lsr.w	r2, r0, r2
 808aa78:	eb43 0002 	adc.w	r0, r3, r2
 808aa7c:	bf08      	it	eq
 808aa7e:	f020 0001 	biceq.w	r0, r0, #1
 808aa82:	4770      	bx	lr
 808aa84:	f102 0220 	add.w	r2, r2, #32
 808aa88:	fa01 fc02 	lsl.w	ip, r1, r2
 808aa8c:	f1c2 0220 	rsb	r2, r2, #32
 808aa90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808aa94:	fa21 f202 	lsr.w	r2, r1, r2
 808aa98:	eb43 0002 	adc.w	r0, r3, r2
 808aa9c:	bf08      	it	eq
 808aa9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808aaa2:	4770      	bx	lr

0808aaa4 <__aeabi_fmul>:
 808aaa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808aaa8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808aaac:	bf1e      	ittt	ne
 808aaae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808aab2:	ea92 0f0c 	teqne	r2, ip
 808aab6:	ea93 0f0c 	teqne	r3, ip
 808aaba:	d06f      	beq.n	808ab9c <__aeabi_fmul+0xf8>
 808aabc:	441a      	add	r2, r3
 808aabe:	ea80 0c01 	eor.w	ip, r0, r1
 808aac2:	0240      	lsls	r0, r0, #9
 808aac4:	bf18      	it	ne
 808aac6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808aaca:	d01e      	beq.n	808ab0a <__aeabi_fmul+0x66>
 808aacc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808aad0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808aad4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808aad8:	fba0 3101 	umull	r3, r1, r0, r1
 808aadc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808aae0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808aae4:	bf3e      	ittt	cc
 808aae6:	0049      	lslcc	r1, r1, #1
 808aae8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808aaec:	005b      	lslcc	r3, r3, #1
 808aaee:	ea40 0001 	orr.w	r0, r0, r1
 808aaf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808aaf6:	2afd      	cmp	r2, #253	; 0xfd
 808aaf8:	d81d      	bhi.n	808ab36 <__aeabi_fmul+0x92>
 808aafa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808aafe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808ab02:	bf08      	it	eq
 808ab04:	f020 0001 	biceq.w	r0, r0, #1
 808ab08:	4770      	bx	lr
 808ab0a:	f090 0f00 	teq	r0, #0
 808ab0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808ab12:	bf08      	it	eq
 808ab14:	0249      	lsleq	r1, r1, #9
 808ab16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808ab1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808ab1e:	3a7f      	subs	r2, #127	; 0x7f
 808ab20:	bfc2      	ittt	gt
 808ab22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808ab26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808ab2a:	4770      	bxgt	lr
 808ab2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ab30:	f04f 0300 	mov.w	r3, #0
 808ab34:	3a01      	subs	r2, #1
 808ab36:	dc5d      	bgt.n	808abf4 <__aeabi_fmul+0x150>
 808ab38:	f112 0f19 	cmn.w	r2, #25
 808ab3c:	bfdc      	itt	le
 808ab3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808ab42:	4770      	bxle	lr
 808ab44:	f1c2 0200 	rsb	r2, r2, #0
 808ab48:	0041      	lsls	r1, r0, #1
 808ab4a:	fa21 f102 	lsr.w	r1, r1, r2
 808ab4e:	f1c2 0220 	rsb	r2, r2, #32
 808ab52:	fa00 fc02 	lsl.w	ip, r0, r2
 808ab56:	ea5f 0031 	movs.w	r0, r1, rrx
 808ab5a:	f140 0000 	adc.w	r0, r0, #0
 808ab5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808ab62:	bf08      	it	eq
 808ab64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808ab68:	4770      	bx	lr
 808ab6a:	f092 0f00 	teq	r2, #0
 808ab6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808ab72:	bf02      	ittt	eq
 808ab74:	0040      	lsleq	r0, r0, #1
 808ab76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808ab7a:	3a01      	subeq	r2, #1
 808ab7c:	d0f9      	beq.n	808ab72 <__aeabi_fmul+0xce>
 808ab7e:	ea40 000c 	orr.w	r0, r0, ip
 808ab82:	f093 0f00 	teq	r3, #0
 808ab86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808ab8a:	bf02      	ittt	eq
 808ab8c:	0049      	lsleq	r1, r1, #1
 808ab8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808ab92:	3b01      	subeq	r3, #1
 808ab94:	d0f9      	beq.n	808ab8a <__aeabi_fmul+0xe6>
 808ab96:	ea41 010c 	orr.w	r1, r1, ip
 808ab9a:	e78f      	b.n	808aabc <__aeabi_fmul+0x18>
 808ab9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808aba0:	ea92 0f0c 	teq	r2, ip
 808aba4:	bf18      	it	ne
 808aba6:	ea93 0f0c 	teqne	r3, ip
 808abaa:	d00a      	beq.n	808abc2 <__aeabi_fmul+0x11e>
 808abac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808abb0:	bf18      	it	ne
 808abb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808abb6:	d1d8      	bne.n	808ab6a <__aeabi_fmul+0xc6>
 808abb8:	ea80 0001 	eor.w	r0, r0, r1
 808abbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808abc0:	4770      	bx	lr
 808abc2:	f090 0f00 	teq	r0, #0
 808abc6:	bf17      	itett	ne
 808abc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808abcc:	4608      	moveq	r0, r1
 808abce:	f091 0f00 	teqne	r1, #0
 808abd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808abd6:	d014      	beq.n	808ac02 <__aeabi_fmul+0x15e>
 808abd8:	ea92 0f0c 	teq	r2, ip
 808abdc:	d101      	bne.n	808abe2 <__aeabi_fmul+0x13e>
 808abde:	0242      	lsls	r2, r0, #9
 808abe0:	d10f      	bne.n	808ac02 <__aeabi_fmul+0x15e>
 808abe2:	ea93 0f0c 	teq	r3, ip
 808abe6:	d103      	bne.n	808abf0 <__aeabi_fmul+0x14c>
 808abe8:	024b      	lsls	r3, r1, #9
 808abea:	bf18      	it	ne
 808abec:	4608      	movne	r0, r1
 808abee:	d108      	bne.n	808ac02 <__aeabi_fmul+0x15e>
 808abf0:	ea80 0001 	eor.w	r0, r0, r1
 808abf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808abf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808abfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ac00:	4770      	bx	lr
 808ac02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808ac06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808ac0a:	4770      	bx	lr

0808ac0c <__aeabi_fdiv>:
 808ac0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ac10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808ac14:	bf1e      	ittt	ne
 808ac16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808ac1a:	ea92 0f0c 	teqne	r2, ip
 808ac1e:	ea93 0f0c 	teqne	r3, ip
 808ac22:	d069      	beq.n	808acf8 <__aeabi_fdiv+0xec>
 808ac24:	eba2 0203 	sub.w	r2, r2, r3
 808ac28:	ea80 0c01 	eor.w	ip, r0, r1
 808ac2c:	0249      	lsls	r1, r1, #9
 808ac2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808ac32:	d037      	beq.n	808aca4 <__aeabi_fdiv+0x98>
 808ac34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808ac38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808ac3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808ac40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808ac44:	428b      	cmp	r3, r1
 808ac46:	bf38      	it	cc
 808ac48:	005b      	lslcc	r3, r3, #1
 808ac4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808ac4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808ac52:	428b      	cmp	r3, r1
 808ac54:	bf24      	itt	cs
 808ac56:	1a5b      	subcs	r3, r3, r1
 808ac58:	ea40 000c 	orrcs.w	r0, r0, ip
 808ac5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808ac60:	bf24      	itt	cs
 808ac62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808ac66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808ac6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808ac6e:	bf24      	itt	cs
 808ac70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808ac74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808ac78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808ac7c:	bf24      	itt	cs
 808ac7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808ac82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808ac86:	011b      	lsls	r3, r3, #4
 808ac88:	bf18      	it	ne
 808ac8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808ac8e:	d1e0      	bne.n	808ac52 <__aeabi_fdiv+0x46>
 808ac90:	2afd      	cmp	r2, #253	; 0xfd
 808ac92:	f63f af50 	bhi.w	808ab36 <__aeabi_fmul+0x92>
 808ac96:	428b      	cmp	r3, r1
 808ac98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808ac9c:	bf08      	it	eq
 808ac9e:	f020 0001 	biceq.w	r0, r0, #1
 808aca2:	4770      	bx	lr
 808aca4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808aca8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808acac:	327f      	adds	r2, #127	; 0x7f
 808acae:	bfc2      	ittt	gt
 808acb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808acb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808acb8:	4770      	bxgt	lr
 808acba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808acbe:	f04f 0300 	mov.w	r3, #0
 808acc2:	3a01      	subs	r2, #1
 808acc4:	e737      	b.n	808ab36 <__aeabi_fmul+0x92>
 808acc6:	f092 0f00 	teq	r2, #0
 808acca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808acce:	bf02      	ittt	eq
 808acd0:	0040      	lsleq	r0, r0, #1
 808acd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808acd6:	3a01      	subeq	r2, #1
 808acd8:	d0f9      	beq.n	808acce <__aeabi_fdiv+0xc2>
 808acda:	ea40 000c 	orr.w	r0, r0, ip
 808acde:	f093 0f00 	teq	r3, #0
 808ace2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808ace6:	bf02      	ittt	eq
 808ace8:	0049      	lsleq	r1, r1, #1
 808acea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808acee:	3b01      	subeq	r3, #1
 808acf0:	d0f9      	beq.n	808ace6 <__aeabi_fdiv+0xda>
 808acf2:	ea41 010c 	orr.w	r1, r1, ip
 808acf6:	e795      	b.n	808ac24 <__aeabi_fdiv+0x18>
 808acf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808acfc:	ea92 0f0c 	teq	r2, ip
 808ad00:	d108      	bne.n	808ad14 <__aeabi_fdiv+0x108>
 808ad02:	0242      	lsls	r2, r0, #9
 808ad04:	f47f af7d 	bne.w	808ac02 <__aeabi_fmul+0x15e>
 808ad08:	ea93 0f0c 	teq	r3, ip
 808ad0c:	f47f af70 	bne.w	808abf0 <__aeabi_fmul+0x14c>
 808ad10:	4608      	mov	r0, r1
 808ad12:	e776      	b.n	808ac02 <__aeabi_fmul+0x15e>
 808ad14:	ea93 0f0c 	teq	r3, ip
 808ad18:	d104      	bne.n	808ad24 <__aeabi_fdiv+0x118>
 808ad1a:	024b      	lsls	r3, r1, #9
 808ad1c:	f43f af4c 	beq.w	808abb8 <__aeabi_fmul+0x114>
 808ad20:	4608      	mov	r0, r1
 808ad22:	e76e      	b.n	808ac02 <__aeabi_fmul+0x15e>
 808ad24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808ad28:	bf18      	it	ne
 808ad2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808ad2e:	d1ca      	bne.n	808acc6 <__aeabi_fdiv+0xba>
 808ad30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808ad34:	f47f af5c 	bne.w	808abf0 <__aeabi_fmul+0x14c>
 808ad38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808ad3c:	f47f af3c 	bne.w	808abb8 <__aeabi_fmul+0x114>
 808ad40:	e75f      	b.n	808ac02 <__aeabi_fmul+0x15e>
 808ad42:	bf00      	nop

0808ad44 <__gesf2>:
 808ad44:	f04f 3cff 	mov.w	ip, #4294967295
 808ad48:	e006      	b.n	808ad58 <__cmpsf2+0x4>
 808ad4a:	bf00      	nop

0808ad4c <__lesf2>:
 808ad4c:	f04f 0c01 	mov.w	ip, #1
 808ad50:	e002      	b.n	808ad58 <__cmpsf2+0x4>
 808ad52:	bf00      	nop

0808ad54 <__cmpsf2>:
 808ad54:	f04f 0c01 	mov.w	ip, #1
 808ad58:	f84d cd04 	str.w	ip, [sp, #-4]!
 808ad5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ad60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808ad64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ad68:	bf18      	it	ne
 808ad6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808ad6e:	d011      	beq.n	808ad94 <__cmpsf2+0x40>
 808ad70:	b001      	add	sp, #4
 808ad72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808ad76:	bf18      	it	ne
 808ad78:	ea90 0f01 	teqne	r0, r1
 808ad7c:	bf58      	it	pl
 808ad7e:	ebb2 0003 	subspl.w	r0, r2, r3
 808ad82:	bf88      	it	hi
 808ad84:	17c8      	asrhi	r0, r1, #31
 808ad86:	bf38      	it	cc
 808ad88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808ad8c:	bf18      	it	ne
 808ad8e:	f040 0001 	orrne.w	r0, r0, #1
 808ad92:	4770      	bx	lr
 808ad94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ad98:	d102      	bne.n	808ada0 <__cmpsf2+0x4c>
 808ad9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808ad9e:	d105      	bne.n	808adac <__cmpsf2+0x58>
 808ada0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808ada4:	d1e4      	bne.n	808ad70 <__cmpsf2+0x1c>
 808ada6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808adaa:	d0e1      	beq.n	808ad70 <__cmpsf2+0x1c>
 808adac:	f85d 0b04 	ldr.w	r0, [sp], #4
 808adb0:	4770      	bx	lr
 808adb2:	bf00      	nop

0808adb4 <__aeabi_cfrcmple>:
 808adb4:	4684      	mov	ip, r0
 808adb6:	4608      	mov	r0, r1
 808adb8:	4661      	mov	r1, ip
 808adba:	e7ff      	b.n	808adbc <__aeabi_cfcmpeq>

0808adbc <__aeabi_cfcmpeq>:
 808adbc:	b50f      	push	{r0, r1, r2, r3, lr}
 808adbe:	f7ff ffc9 	bl	808ad54 <__cmpsf2>
 808adc2:	2800      	cmp	r0, #0
 808adc4:	bf48      	it	mi
 808adc6:	f110 0f00 	cmnmi.w	r0, #0
 808adca:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808adcc <__aeabi_fcmpeq>:
 808adcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808add0:	f7ff fff4 	bl	808adbc <__aeabi_cfcmpeq>
 808add4:	bf0c      	ite	eq
 808add6:	2001      	moveq	r0, #1
 808add8:	2000      	movne	r0, #0
 808adda:	f85d fb08 	ldr.w	pc, [sp], #8
 808adde:	bf00      	nop

0808ade0 <__aeabi_fcmplt>:
 808ade0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ade4:	f7ff ffea 	bl	808adbc <__aeabi_cfcmpeq>
 808ade8:	bf34      	ite	cc
 808adea:	2001      	movcc	r0, #1
 808adec:	2000      	movcs	r0, #0
 808adee:	f85d fb08 	ldr.w	pc, [sp], #8
 808adf2:	bf00      	nop

0808adf4 <__aeabi_fcmple>:
 808adf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808adf8:	f7ff ffe0 	bl	808adbc <__aeabi_cfcmpeq>
 808adfc:	bf94      	ite	ls
 808adfe:	2001      	movls	r0, #1
 808ae00:	2000      	movhi	r0, #0
 808ae02:	f85d fb08 	ldr.w	pc, [sp], #8
 808ae06:	bf00      	nop

0808ae08 <__aeabi_fcmpge>:
 808ae08:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ae0c:	f7ff ffd2 	bl	808adb4 <__aeabi_cfrcmple>
 808ae10:	bf94      	ite	ls
 808ae12:	2001      	movls	r0, #1
 808ae14:	2000      	movhi	r0, #0
 808ae16:	f85d fb08 	ldr.w	pc, [sp], #8
 808ae1a:	bf00      	nop

0808ae1c <__aeabi_fcmpgt>:
 808ae1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ae20:	f7ff ffc8 	bl	808adb4 <__aeabi_cfrcmple>
 808ae24:	bf34      	ite	cc
 808ae26:	2001      	movcc	r0, #1
 808ae28:	2000      	movcs	r0, #0
 808ae2a:	f85d fb08 	ldr.w	pc, [sp], #8
 808ae2e:	bf00      	nop

0808ae30 <__aeabi_f2iz>:
 808ae30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ae34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808ae38:	d30f      	bcc.n	808ae5a <__aeabi_f2iz+0x2a>
 808ae3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808ae3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808ae42:	d90d      	bls.n	808ae60 <__aeabi_f2iz+0x30>
 808ae44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ae48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ae4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ae50:	fa23 f002 	lsr.w	r0, r3, r2
 808ae54:	bf18      	it	ne
 808ae56:	4240      	negne	r0, r0
 808ae58:	4770      	bx	lr
 808ae5a:	f04f 0000 	mov.w	r0, #0
 808ae5e:	4770      	bx	lr
 808ae60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808ae64:	d101      	bne.n	808ae6a <__aeabi_f2iz+0x3a>
 808ae66:	0242      	lsls	r2, r0, #9
 808ae68:	d105      	bne.n	808ae76 <__aeabi_f2iz+0x46>
 808ae6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808ae6e:	bf08      	it	eq
 808ae70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ae74:	4770      	bx	lr
 808ae76:	f04f 0000 	mov.w	r0, #0
 808ae7a:	4770      	bx	lr

0808ae7c <__aeabi_ldivmod>:
 808ae7c:	b97b      	cbnz	r3, 808ae9e <__aeabi_ldivmod+0x22>
 808ae7e:	b972      	cbnz	r2, 808ae9e <__aeabi_ldivmod+0x22>
 808ae80:	2900      	cmp	r1, #0
 808ae82:	bfbe      	ittt	lt
 808ae84:	2000      	movlt	r0, #0
 808ae86:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808ae8a:	e006      	blt.n	808ae9a <__aeabi_ldivmod+0x1e>
 808ae8c:	bf08      	it	eq
 808ae8e:	2800      	cmpeq	r0, #0
 808ae90:	bf1c      	itt	ne
 808ae92:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808ae96:	f04f 30ff 	movne.w	r0, #4294967295
 808ae9a:	f000 ba13 	b.w	808b2c4 <__aeabi_idiv0>
 808ae9e:	f1ad 0c08 	sub.w	ip, sp, #8
 808aea2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808aea6:	2900      	cmp	r1, #0
 808aea8:	db09      	blt.n	808aebe <__aeabi_ldivmod+0x42>
 808aeaa:	2b00      	cmp	r3, #0
 808aeac:	db1a      	blt.n	808aee4 <__aeabi_ldivmod+0x68>
 808aeae:	f000 f89f 	bl	808aff0 <__udivmoddi4>
 808aeb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808aeb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808aeba:	b004      	add	sp, #16
 808aebc:	4770      	bx	lr
 808aebe:	4240      	negs	r0, r0
 808aec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808aec4:	2b00      	cmp	r3, #0
 808aec6:	db1b      	blt.n	808af00 <__aeabi_ldivmod+0x84>
 808aec8:	f000 f892 	bl	808aff0 <__udivmoddi4>
 808aecc:	f8dd e004 	ldr.w	lr, [sp, #4]
 808aed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808aed4:	b004      	add	sp, #16
 808aed6:	4240      	negs	r0, r0
 808aed8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808aedc:	4252      	negs	r2, r2
 808aede:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808aee2:	4770      	bx	lr
 808aee4:	4252      	negs	r2, r2
 808aee6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808aeea:	f000 f881 	bl	808aff0 <__udivmoddi4>
 808aeee:	f8dd e004 	ldr.w	lr, [sp, #4]
 808aef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808aef6:	b004      	add	sp, #16
 808aef8:	4240      	negs	r0, r0
 808aefa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808aefe:	4770      	bx	lr
 808af00:	4252      	negs	r2, r2
 808af02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808af06:	f000 f873 	bl	808aff0 <__udivmoddi4>
 808af0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808af0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808af12:	b004      	add	sp, #16
 808af14:	4252      	negs	r2, r2
 808af16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808af1a:	4770      	bx	lr

0808af1c <__aeabi_uldivmod>:
 808af1c:	b953      	cbnz	r3, 808af34 <__aeabi_uldivmod+0x18>
 808af1e:	b94a      	cbnz	r2, 808af34 <__aeabi_uldivmod+0x18>
 808af20:	2900      	cmp	r1, #0
 808af22:	bf08      	it	eq
 808af24:	2800      	cmpeq	r0, #0
 808af26:	bf1c      	itt	ne
 808af28:	f04f 31ff 	movne.w	r1, #4294967295
 808af2c:	f04f 30ff 	movne.w	r0, #4294967295
 808af30:	f000 b9c8 	b.w	808b2c4 <__aeabi_idiv0>
 808af34:	f1ad 0c08 	sub.w	ip, sp, #8
 808af38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808af3c:	f000 f858 	bl	808aff0 <__udivmoddi4>
 808af40:	f8dd e004 	ldr.w	lr, [sp, #4]
 808af44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808af48:	b004      	add	sp, #16
 808af4a:	4770      	bx	lr

0808af4c <__aeabi_f2lz>:
 808af4c:	b510      	push	{r4, lr}
 808af4e:	2100      	movs	r1, #0
 808af50:	4604      	mov	r4, r0
 808af52:	f7ff ff45 	bl	808ade0 <__aeabi_fcmplt>
 808af56:	b920      	cbnz	r0, 808af62 <__aeabi_f2lz+0x16>
 808af58:	4620      	mov	r0, r4
 808af5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808af5e:	f000 b809 	b.w	808af74 <__aeabi_f2ulz>
 808af62:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808af66:	f000 f805 	bl	808af74 <__aeabi_f2ulz>
 808af6a:	4240      	negs	r0, r0
 808af6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808af70:	bd10      	pop	{r4, pc}
 808af72:	bf00      	nop

0808af74 <__aeabi_f2ulz>:
 808af74:	b5d0      	push	{r4, r6, r7, lr}
 808af76:	f7ff f8e7 	bl	808a148 <__aeabi_f2d>
 808af7a:	2200      	movs	r2, #0
 808af7c:	4b0b      	ldr	r3, [pc, #44]	; (808afac <__aeabi_f2ulz+0x38>)
 808af7e:	4606      	mov	r6, r0
 808af80:	460f      	mov	r7, r1
 808af82:	f7ff f939 	bl	808a1f8 <__aeabi_dmul>
 808af86:	f7ff fc0f 	bl	808a7a8 <__aeabi_d2uiz>
 808af8a:	4604      	mov	r4, r0
 808af8c:	f7ff f8ba 	bl	808a104 <__aeabi_ui2d>
 808af90:	2200      	movs	r2, #0
 808af92:	4b07      	ldr	r3, [pc, #28]	; (808afb0 <__aeabi_f2ulz+0x3c>)
 808af94:	f7ff f930 	bl	808a1f8 <__aeabi_dmul>
 808af98:	4602      	mov	r2, r0
 808af9a:	460b      	mov	r3, r1
 808af9c:	4630      	mov	r0, r6
 808af9e:	4639      	mov	r1, r7
 808afa0:	f7fe ff72 	bl	8089e88 <__aeabi_dsub>
 808afa4:	f7ff fc00 	bl	808a7a8 <__aeabi_d2uiz>
 808afa8:	4621      	mov	r1, r4
 808afaa:	bdd0      	pop	{r4, r6, r7, pc}
 808afac:	3df00000 	.word	0x3df00000
 808afb0:	41f00000 	.word	0x41f00000

0808afb4 <__aeabi_d2ulz>:
 808afb4:	b5d0      	push	{r4, r6, r7, lr}
 808afb6:	2200      	movs	r2, #0
 808afb8:	4b0b      	ldr	r3, [pc, #44]	; (808afe8 <__aeabi_d2ulz+0x34>)
 808afba:	4606      	mov	r6, r0
 808afbc:	460f      	mov	r7, r1
 808afbe:	f7ff f91b 	bl	808a1f8 <__aeabi_dmul>
 808afc2:	f7ff fbf1 	bl	808a7a8 <__aeabi_d2uiz>
 808afc6:	4604      	mov	r4, r0
 808afc8:	f7ff f89c 	bl	808a104 <__aeabi_ui2d>
 808afcc:	2200      	movs	r2, #0
 808afce:	4b07      	ldr	r3, [pc, #28]	; (808afec <__aeabi_d2ulz+0x38>)
 808afd0:	f7ff f912 	bl	808a1f8 <__aeabi_dmul>
 808afd4:	4602      	mov	r2, r0
 808afd6:	460b      	mov	r3, r1
 808afd8:	4630      	mov	r0, r6
 808afda:	4639      	mov	r1, r7
 808afdc:	f7fe ff54 	bl	8089e88 <__aeabi_dsub>
 808afe0:	f7ff fbe2 	bl	808a7a8 <__aeabi_d2uiz>
 808afe4:	4621      	mov	r1, r4
 808afe6:	bdd0      	pop	{r4, r6, r7, pc}
 808afe8:	3df00000 	.word	0x3df00000
 808afec:	41f00000 	.word	0x41f00000

0808aff0 <__udivmoddi4>:
 808aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808aff4:	9e08      	ldr	r6, [sp, #32]
 808aff6:	460d      	mov	r5, r1
 808aff8:	4604      	mov	r4, r0
 808affa:	4688      	mov	r8, r1
 808affc:	2b00      	cmp	r3, #0
 808affe:	d14d      	bne.n	808b09c <__udivmoddi4+0xac>
 808b000:	428a      	cmp	r2, r1
 808b002:	4694      	mov	ip, r2
 808b004:	d968      	bls.n	808b0d8 <__udivmoddi4+0xe8>
 808b006:	fab2 f282 	clz	r2, r2
 808b00a:	b152      	cbz	r2, 808b022 <__udivmoddi4+0x32>
 808b00c:	fa01 f302 	lsl.w	r3, r1, r2
 808b010:	f1c2 0120 	rsb	r1, r2, #32
 808b014:	fa20 f101 	lsr.w	r1, r0, r1
 808b018:	fa0c fc02 	lsl.w	ip, ip, r2
 808b01c:	ea41 0803 	orr.w	r8, r1, r3
 808b020:	4094      	lsls	r4, r2
 808b022:	ea4f 411c 	mov.w	r1, ip, lsr #16
 808b026:	fbb8 f7f1 	udiv	r7, r8, r1
 808b02a:	fa1f fe8c 	uxth.w	lr, ip
 808b02e:	fb01 8817 	mls	r8, r1, r7, r8
 808b032:	fb07 f00e 	mul.w	r0, r7, lr
 808b036:	0c23      	lsrs	r3, r4, #16
 808b038:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808b03c:	4298      	cmp	r0, r3
 808b03e:	d90a      	bls.n	808b056 <__udivmoddi4+0x66>
 808b040:	eb1c 0303 	adds.w	r3, ip, r3
 808b044:	f107 35ff 	add.w	r5, r7, #4294967295
 808b048:	f080 811e 	bcs.w	808b288 <__udivmoddi4+0x298>
 808b04c:	4298      	cmp	r0, r3
 808b04e:	f240 811b 	bls.w	808b288 <__udivmoddi4+0x298>
 808b052:	3f02      	subs	r7, #2
 808b054:	4463      	add	r3, ip
 808b056:	1a1b      	subs	r3, r3, r0
 808b058:	fbb3 f0f1 	udiv	r0, r3, r1
 808b05c:	fb01 3310 	mls	r3, r1, r0, r3
 808b060:	fb00 fe0e 	mul.w	lr, r0, lr
 808b064:	b2a4      	uxth	r4, r4
 808b066:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 808b06a:	45a6      	cmp	lr, r4
 808b06c:	d90a      	bls.n	808b084 <__udivmoddi4+0x94>
 808b06e:	eb1c 0404 	adds.w	r4, ip, r4
 808b072:	f100 33ff 	add.w	r3, r0, #4294967295
 808b076:	f080 8109 	bcs.w	808b28c <__udivmoddi4+0x29c>
 808b07a:	45a6      	cmp	lr, r4
 808b07c:	f240 8106 	bls.w	808b28c <__udivmoddi4+0x29c>
 808b080:	4464      	add	r4, ip
 808b082:	3802      	subs	r0, #2
 808b084:	2100      	movs	r1, #0
 808b086:	eba4 040e 	sub.w	r4, r4, lr
 808b08a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 808b08e:	b11e      	cbz	r6, 808b098 <__udivmoddi4+0xa8>
 808b090:	2300      	movs	r3, #0
 808b092:	40d4      	lsrs	r4, r2
 808b094:	e9c6 4300 	strd	r4, r3, [r6]
 808b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b09c:	428b      	cmp	r3, r1
 808b09e:	d908      	bls.n	808b0b2 <__udivmoddi4+0xc2>
 808b0a0:	2e00      	cmp	r6, #0
 808b0a2:	f000 80ee 	beq.w	808b282 <__udivmoddi4+0x292>
 808b0a6:	2100      	movs	r1, #0
 808b0a8:	e9c6 0500 	strd	r0, r5, [r6]
 808b0ac:	4608      	mov	r0, r1
 808b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b0b2:	fab3 f183 	clz	r1, r3
 808b0b6:	2900      	cmp	r1, #0
 808b0b8:	d14a      	bne.n	808b150 <__udivmoddi4+0x160>
 808b0ba:	42ab      	cmp	r3, r5
 808b0bc:	d302      	bcc.n	808b0c4 <__udivmoddi4+0xd4>
 808b0be:	4282      	cmp	r2, r0
 808b0c0:	f200 80fc 	bhi.w	808b2bc <__udivmoddi4+0x2cc>
 808b0c4:	1a84      	subs	r4, r0, r2
 808b0c6:	eb65 0303 	sbc.w	r3, r5, r3
 808b0ca:	2001      	movs	r0, #1
 808b0cc:	4698      	mov	r8, r3
 808b0ce:	2e00      	cmp	r6, #0
 808b0d0:	d0e2      	beq.n	808b098 <__udivmoddi4+0xa8>
 808b0d2:	e9c6 4800 	strd	r4, r8, [r6]
 808b0d6:	e7df      	b.n	808b098 <__udivmoddi4+0xa8>
 808b0d8:	b902      	cbnz	r2, 808b0dc <__udivmoddi4+0xec>
 808b0da:	deff      	udf	#255	; 0xff
 808b0dc:	fab2 f282 	clz	r2, r2
 808b0e0:	2a00      	cmp	r2, #0
 808b0e2:	f040 8091 	bne.w	808b208 <__udivmoddi4+0x218>
 808b0e6:	eba1 000c 	sub.w	r0, r1, ip
 808b0ea:	2101      	movs	r1, #1
 808b0ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 808b0f0:	fa1f fe8c 	uxth.w	lr, ip
 808b0f4:	fbb0 f3f7 	udiv	r3, r0, r7
 808b0f8:	fb07 0013 	mls	r0, r7, r3, r0
 808b0fc:	0c25      	lsrs	r5, r4, #16
 808b0fe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 808b102:	fb0e f003 	mul.w	r0, lr, r3
 808b106:	42a8      	cmp	r0, r5
 808b108:	d908      	bls.n	808b11c <__udivmoddi4+0x12c>
 808b10a:	eb1c 0505 	adds.w	r5, ip, r5
 808b10e:	f103 38ff 	add.w	r8, r3, #4294967295
 808b112:	d202      	bcs.n	808b11a <__udivmoddi4+0x12a>
 808b114:	42a8      	cmp	r0, r5
 808b116:	f200 80ce 	bhi.w	808b2b6 <__udivmoddi4+0x2c6>
 808b11a:	4643      	mov	r3, r8
 808b11c:	1a2d      	subs	r5, r5, r0
 808b11e:	fbb5 f0f7 	udiv	r0, r5, r7
 808b122:	fb07 5510 	mls	r5, r7, r0, r5
 808b126:	fb0e fe00 	mul.w	lr, lr, r0
 808b12a:	b2a4      	uxth	r4, r4
 808b12c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 808b130:	45a6      	cmp	lr, r4
 808b132:	d908      	bls.n	808b146 <__udivmoddi4+0x156>
 808b134:	eb1c 0404 	adds.w	r4, ip, r4
 808b138:	f100 35ff 	add.w	r5, r0, #4294967295
 808b13c:	d202      	bcs.n	808b144 <__udivmoddi4+0x154>
 808b13e:	45a6      	cmp	lr, r4
 808b140:	f200 80b6 	bhi.w	808b2b0 <__udivmoddi4+0x2c0>
 808b144:	4628      	mov	r0, r5
 808b146:	eba4 040e 	sub.w	r4, r4, lr
 808b14a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808b14e:	e79e      	b.n	808b08e <__udivmoddi4+0x9e>
 808b150:	f1c1 0720 	rsb	r7, r1, #32
 808b154:	408b      	lsls	r3, r1
 808b156:	fa22 fc07 	lsr.w	ip, r2, r7
 808b15a:	ea4c 0c03 	orr.w	ip, ip, r3
 808b15e:	fa25 fa07 	lsr.w	sl, r5, r7
 808b162:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808b166:	fbba f8f9 	udiv	r8, sl, r9
 808b16a:	fa20 f307 	lsr.w	r3, r0, r7
 808b16e:	fb09 aa18 	mls	sl, r9, r8, sl
 808b172:	408d      	lsls	r5, r1
 808b174:	fa1f fe8c 	uxth.w	lr, ip
 808b178:	431d      	orrs	r5, r3
 808b17a:	fa00 f301 	lsl.w	r3, r0, r1
 808b17e:	fb08 f00e 	mul.w	r0, r8, lr
 808b182:	0c2c      	lsrs	r4, r5, #16
 808b184:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 808b188:	42a0      	cmp	r0, r4
 808b18a:	fa02 f201 	lsl.w	r2, r2, r1
 808b18e:	d90b      	bls.n	808b1a8 <__udivmoddi4+0x1b8>
 808b190:	eb1c 0404 	adds.w	r4, ip, r4
 808b194:	f108 3aff 	add.w	sl, r8, #4294967295
 808b198:	f080 8088 	bcs.w	808b2ac <__udivmoddi4+0x2bc>
 808b19c:	42a0      	cmp	r0, r4
 808b19e:	f240 8085 	bls.w	808b2ac <__udivmoddi4+0x2bc>
 808b1a2:	f1a8 0802 	sub.w	r8, r8, #2
 808b1a6:	4464      	add	r4, ip
 808b1a8:	1a24      	subs	r4, r4, r0
 808b1aa:	fbb4 f0f9 	udiv	r0, r4, r9
 808b1ae:	fb09 4410 	mls	r4, r9, r0, r4
 808b1b2:	fb00 fe0e 	mul.w	lr, r0, lr
 808b1b6:	b2ad      	uxth	r5, r5
 808b1b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 808b1bc:	45a6      	cmp	lr, r4
 808b1be:	d908      	bls.n	808b1d2 <__udivmoddi4+0x1e2>
 808b1c0:	eb1c 0404 	adds.w	r4, ip, r4
 808b1c4:	f100 35ff 	add.w	r5, r0, #4294967295
 808b1c8:	d26c      	bcs.n	808b2a4 <__udivmoddi4+0x2b4>
 808b1ca:	45a6      	cmp	lr, r4
 808b1cc:	d96a      	bls.n	808b2a4 <__udivmoddi4+0x2b4>
 808b1ce:	3802      	subs	r0, #2
 808b1d0:	4464      	add	r4, ip
 808b1d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 808b1d6:	fba0 9502 	umull	r9, r5, r0, r2
 808b1da:	eba4 040e 	sub.w	r4, r4, lr
 808b1de:	42ac      	cmp	r4, r5
 808b1e0:	46c8      	mov	r8, r9
 808b1e2:	46ae      	mov	lr, r5
 808b1e4:	d356      	bcc.n	808b294 <__udivmoddi4+0x2a4>
 808b1e6:	d053      	beq.n	808b290 <__udivmoddi4+0x2a0>
 808b1e8:	2e00      	cmp	r6, #0
 808b1ea:	d069      	beq.n	808b2c0 <__udivmoddi4+0x2d0>
 808b1ec:	ebb3 0208 	subs.w	r2, r3, r8
 808b1f0:	eb64 040e 	sbc.w	r4, r4, lr
 808b1f4:	fa22 f301 	lsr.w	r3, r2, r1
 808b1f8:	fa04 f707 	lsl.w	r7, r4, r7
 808b1fc:	431f      	orrs	r7, r3
 808b1fe:	40cc      	lsrs	r4, r1
 808b200:	e9c6 7400 	strd	r7, r4, [r6]
 808b204:	2100      	movs	r1, #0
 808b206:	e747      	b.n	808b098 <__udivmoddi4+0xa8>
 808b208:	fa0c fc02 	lsl.w	ip, ip, r2
 808b20c:	f1c2 0120 	rsb	r1, r2, #32
 808b210:	fa25 f301 	lsr.w	r3, r5, r1
 808b214:	ea4f 471c 	mov.w	r7, ip, lsr #16
 808b218:	fa20 f101 	lsr.w	r1, r0, r1
 808b21c:	4095      	lsls	r5, r2
 808b21e:	430d      	orrs	r5, r1
 808b220:	fbb3 f1f7 	udiv	r1, r3, r7
 808b224:	fb07 3311 	mls	r3, r7, r1, r3
 808b228:	fa1f fe8c 	uxth.w	lr, ip
 808b22c:	0c28      	lsrs	r0, r5, #16
 808b22e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808b232:	fb01 f30e 	mul.w	r3, r1, lr
 808b236:	4283      	cmp	r3, r0
 808b238:	fa04 f402 	lsl.w	r4, r4, r2
 808b23c:	d908      	bls.n	808b250 <__udivmoddi4+0x260>
 808b23e:	eb1c 0000 	adds.w	r0, ip, r0
 808b242:	f101 38ff 	add.w	r8, r1, #4294967295
 808b246:	d22f      	bcs.n	808b2a8 <__udivmoddi4+0x2b8>
 808b248:	4283      	cmp	r3, r0
 808b24a:	d92d      	bls.n	808b2a8 <__udivmoddi4+0x2b8>
 808b24c:	3902      	subs	r1, #2
 808b24e:	4460      	add	r0, ip
 808b250:	1ac0      	subs	r0, r0, r3
 808b252:	fbb0 f3f7 	udiv	r3, r0, r7
 808b256:	fb07 0013 	mls	r0, r7, r3, r0
 808b25a:	b2ad      	uxth	r5, r5
 808b25c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 808b260:	fb03 f00e 	mul.w	r0, r3, lr
 808b264:	42a8      	cmp	r0, r5
 808b266:	d908      	bls.n	808b27a <__udivmoddi4+0x28a>
 808b268:	eb1c 0505 	adds.w	r5, ip, r5
 808b26c:	f103 38ff 	add.w	r8, r3, #4294967295
 808b270:	d216      	bcs.n	808b2a0 <__udivmoddi4+0x2b0>
 808b272:	42a8      	cmp	r0, r5
 808b274:	d914      	bls.n	808b2a0 <__udivmoddi4+0x2b0>
 808b276:	3b02      	subs	r3, #2
 808b278:	4465      	add	r5, ip
 808b27a:	1a28      	subs	r0, r5, r0
 808b27c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 808b280:	e738      	b.n	808b0f4 <__udivmoddi4+0x104>
 808b282:	4631      	mov	r1, r6
 808b284:	4630      	mov	r0, r6
 808b286:	e707      	b.n	808b098 <__udivmoddi4+0xa8>
 808b288:	462f      	mov	r7, r5
 808b28a:	e6e4      	b.n	808b056 <__udivmoddi4+0x66>
 808b28c:	4618      	mov	r0, r3
 808b28e:	e6f9      	b.n	808b084 <__udivmoddi4+0x94>
 808b290:	454b      	cmp	r3, r9
 808b292:	d2a9      	bcs.n	808b1e8 <__udivmoddi4+0x1f8>
 808b294:	ebb9 0802 	subs.w	r8, r9, r2
 808b298:	eb65 0e0c 	sbc.w	lr, r5, ip
 808b29c:	3801      	subs	r0, #1
 808b29e:	e7a3      	b.n	808b1e8 <__udivmoddi4+0x1f8>
 808b2a0:	4643      	mov	r3, r8
 808b2a2:	e7ea      	b.n	808b27a <__udivmoddi4+0x28a>
 808b2a4:	4628      	mov	r0, r5
 808b2a6:	e794      	b.n	808b1d2 <__udivmoddi4+0x1e2>
 808b2a8:	4641      	mov	r1, r8
 808b2aa:	e7d1      	b.n	808b250 <__udivmoddi4+0x260>
 808b2ac:	46d0      	mov	r8, sl
 808b2ae:	e77b      	b.n	808b1a8 <__udivmoddi4+0x1b8>
 808b2b0:	4464      	add	r4, ip
 808b2b2:	3802      	subs	r0, #2
 808b2b4:	e747      	b.n	808b146 <__udivmoddi4+0x156>
 808b2b6:	3b02      	subs	r3, #2
 808b2b8:	4465      	add	r5, ip
 808b2ba:	e72f      	b.n	808b11c <__udivmoddi4+0x12c>
 808b2bc:	4608      	mov	r0, r1
 808b2be:	e706      	b.n	808b0ce <__udivmoddi4+0xde>
 808b2c0:	4631      	mov	r1, r6
 808b2c2:	e6e9      	b.n	808b098 <__udivmoddi4+0xa8>

0808b2c4 <__aeabi_idiv0>:
 808b2c4:	4770      	bx	lr
 808b2c6:	bf00      	nop

0808b2c8 <asctime_r>:
 808b2c8:	b510      	push	{r4, lr}
 808b2ca:	460c      	mov	r4, r1
 808b2cc:	6941      	ldr	r1, [r0, #20]
 808b2ce:	b086      	sub	sp, #24
 808b2d0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808b2d4:	6903      	ldr	r3, [r0, #16]
 808b2d6:	6982      	ldr	r2, [r0, #24]
 808b2d8:	9104      	str	r1, [sp, #16]
 808b2da:	6801      	ldr	r1, [r0, #0]
 808b2dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808b2e0:	9103      	str	r1, [sp, #12]
 808b2e2:	6841      	ldr	r1, [r0, #4]
 808b2e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808b2e8:	9102      	str	r1, [sp, #8]
 808b2ea:	6881      	ldr	r1, [r0, #8]
 808b2ec:	9101      	str	r1, [sp, #4]
 808b2ee:	68c1      	ldr	r1, [r0, #12]
 808b2f0:	4620      	mov	r0, r4
 808b2f2:	9100      	str	r1, [sp, #0]
 808b2f4:	4904      	ldr	r1, [pc, #16]	; (808b308 <asctime_r+0x40>)
 808b2f6:	440b      	add	r3, r1
 808b2f8:	4904      	ldr	r1, [pc, #16]	; (808b30c <asctime_r+0x44>)
 808b2fa:	440a      	add	r2, r1
 808b2fc:	4904      	ldr	r1, [pc, #16]	; (808b310 <asctime_r+0x48>)
 808b2fe:	f7fc fc83 	bl	8087c08 <siprintf>
 808b302:	4620      	mov	r0, r4
 808b304:	b006      	add	sp, #24
 808b306:	bd10      	pop	{r4, pc}
 808b308:	0808f3ca 	.word	0x0808f3ca
 808b30c:	0808f3b5 	.word	0x0808f3b5
 808b310:	0808f395 	.word	0x0808f395

0808b314 <atexit>:
 808b314:	2300      	movs	r3, #0
 808b316:	4601      	mov	r1, r0
 808b318:	461a      	mov	r2, r3
 808b31a:	4618      	mov	r0, r3
 808b31c:	f000 bf7a 	b.w	808c214 <__register_exitproc>

0808b320 <atof>:
 808b320:	2100      	movs	r1, #0
 808b322:	f000 bee5 	b.w	808c0f0 <strtod>

0808b326 <atol>:
 808b326:	220a      	movs	r2, #10
 808b328:	2100      	movs	r1, #0
 808b32a:	f000 bf69 	b.w	808c200 <strtol>

0808b32e <memcmp>:
 808b32e:	b510      	push	{r4, lr}
 808b330:	3901      	subs	r1, #1
 808b332:	4402      	add	r2, r0
 808b334:	4290      	cmp	r0, r2
 808b336:	d101      	bne.n	808b33c <memcmp+0xe>
 808b338:	2000      	movs	r0, #0
 808b33a:	e005      	b.n	808b348 <memcmp+0x1a>
 808b33c:	7803      	ldrb	r3, [r0, #0]
 808b33e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b342:	42a3      	cmp	r3, r4
 808b344:	d001      	beq.n	808b34a <memcmp+0x1c>
 808b346:	1b18      	subs	r0, r3, r4
 808b348:	bd10      	pop	{r4, pc}
 808b34a:	3001      	adds	r0, #1
 808b34c:	e7f2      	b.n	808b334 <memcmp+0x6>

0808b34e <memcpy>:
 808b34e:	440a      	add	r2, r1
 808b350:	4291      	cmp	r1, r2
 808b352:	f100 33ff 	add.w	r3, r0, #4294967295
 808b356:	d100      	bne.n	808b35a <memcpy+0xc>
 808b358:	4770      	bx	lr
 808b35a:	b510      	push	{r4, lr}
 808b35c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b360:	4291      	cmp	r1, r2
 808b362:	f803 4f01 	strb.w	r4, [r3, #1]!
 808b366:	d1f9      	bne.n	808b35c <memcpy+0xe>
 808b368:	bd10      	pop	{r4, pc}

0808b36a <memset>:
 808b36a:	4603      	mov	r3, r0
 808b36c:	4402      	add	r2, r0
 808b36e:	4293      	cmp	r3, r2
 808b370:	d100      	bne.n	808b374 <memset+0xa>
 808b372:	4770      	bx	lr
 808b374:	f803 1b01 	strb.w	r1, [r3], #1
 808b378:	e7f9      	b.n	808b36e <memset+0x4>
	...

0808b37c <srand>:
 808b37c:	b538      	push	{r3, r4, r5, lr}
 808b37e:	4b10      	ldr	r3, [pc, #64]	; (808b3c0 <srand+0x44>)
 808b380:	4604      	mov	r4, r0
 808b382:	681d      	ldr	r5, [r3, #0]
 808b384:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808b386:	b9b3      	cbnz	r3, 808b3b6 <srand+0x3a>
 808b388:	2018      	movs	r0, #24
 808b38a:	f7fc fc1d 	bl	8087bc8 <malloc>
 808b38e:	4602      	mov	r2, r0
 808b390:	63a8      	str	r0, [r5, #56]	; 0x38
 808b392:	b920      	cbnz	r0, 808b39e <srand+0x22>
 808b394:	2142      	movs	r1, #66	; 0x42
 808b396:	4b0b      	ldr	r3, [pc, #44]	; (808b3c4 <srand+0x48>)
 808b398:	480b      	ldr	r0, [pc, #44]	; (808b3c8 <srand+0x4c>)
 808b39a:	f7fc fc65 	bl	8087c68 <__assert_func>
 808b39e:	490b      	ldr	r1, [pc, #44]	; (808b3cc <srand+0x50>)
 808b3a0:	4b0b      	ldr	r3, [pc, #44]	; (808b3d0 <srand+0x54>)
 808b3a2:	e9c0 1300 	strd	r1, r3, [r0]
 808b3a6:	4b0b      	ldr	r3, [pc, #44]	; (808b3d4 <srand+0x58>)
 808b3a8:	2100      	movs	r1, #0
 808b3aa:	6083      	str	r3, [r0, #8]
 808b3ac:	230b      	movs	r3, #11
 808b3ae:	8183      	strh	r3, [r0, #12]
 808b3b0:	2001      	movs	r0, #1
 808b3b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 808b3b6:	2200      	movs	r2, #0
 808b3b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808b3ba:	611c      	str	r4, [r3, #16]
 808b3bc:	615a      	str	r2, [r3, #20]
 808b3be:	bd38      	pop	{r3, r4, r5, pc}
 808b3c0:	200000d8 	.word	0x200000d8
 808b3c4:	0808f3ee 	.word	0x0808f3ee
 808b3c8:	0808f405 	.word	0x0808f405
 808b3cc:	abcd330e 	.word	0xabcd330e
 808b3d0:	e66d1234 	.word	0xe66d1234
 808b3d4:	0005deec 	.word	0x0005deec

0808b3d8 <strchr>:
 808b3d8:	4603      	mov	r3, r0
 808b3da:	b2c9      	uxtb	r1, r1
 808b3dc:	4618      	mov	r0, r3
 808b3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 808b3e2:	b112      	cbz	r2, 808b3ea <strchr+0x12>
 808b3e4:	428a      	cmp	r2, r1
 808b3e6:	d1f9      	bne.n	808b3dc <strchr+0x4>
 808b3e8:	4770      	bx	lr
 808b3ea:	2900      	cmp	r1, #0
 808b3ec:	bf18      	it	ne
 808b3ee:	2000      	movne	r0, #0
 808b3f0:	4770      	bx	lr

0808b3f2 <strcmp>:
 808b3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b3f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 808b3fa:	2a01      	cmp	r2, #1
 808b3fc:	bf28      	it	cs
 808b3fe:	429a      	cmpcs	r2, r3
 808b400:	d0f7      	beq.n	808b3f2 <strcmp>
 808b402:	1ad0      	subs	r0, r2, r3
 808b404:	4770      	bx	lr

0808b406 <strcpy>:
 808b406:	4603      	mov	r3, r0
 808b408:	f811 2b01 	ldrb.w	r2, [r1], #1
 808b40c:	f803 2b01 	strb.w	r2, [r3], #1
 808b410:	2a00      	cmp	r2, #0
 808b412:	d1f9      	bne.n	808b408 <strcpy+0x2>
 808b414:	4770      	bx	lr
	...

0808b418 <strdup>:
 808b418:	4b02      	ldr	r3, [pc, #8]	; (808b424 <strdup+0xc>)
 808b41a:	4601      	mov	r1, r0
 808b41c:	6818      	ldr	r0, [r3, #0]
 808b41e:	f000 b803 	b.w	808b428 <_strdup_r>
 808b422:	bf00      	nop
 808b424:	200000d8 	.word	0x200000d8

0808b428 <_strdup_r>:
 808b428:	b570      	push	{r4, r5, r6, lr}
 808b42a:	4604      	mov	r4, r0
 808b42c:	4608      	mov	r0, r1
 808b42e:	460d      	mov	r5, r1
 808b430:	f000 f80d 	bl	808b44e <strlen>
 808b434:	1c46      	adds	r6, r0, #1
 808b436:	4631      	mov	r1, r6
 808b438:	4620      	mov	r0, r4
 808b43a:	f7fc fc05 	bl	8087c48 <_malloc_r>
 808b43e:	4604      	mov	r4, r0
 808b440:	b118      	cbz	r0, 808b44a <_strdup_r+0x22>
 808b442:	4632      	mov	r2, r6
 808b444:	4629      	mov	r1, r5
 808b446:	f7ff ff82 	bl	808b34e <memcpy>
 808b44a:	4620      	mov	r0, r4
 808b44c:	bd70      	pop	{r4, r5, r6, pc}

0808b44e <strlen>:
 808b44e:	4603      	mov	r3, r0
 808b450:	f813 2b01 	ldrb.w	r2, [r3], #1
 808b454:	2a00      	cmp	r2, #0
 808b456:	d1fb      	bne.n	808b450 <strlen+0x2>
 808b458:	1a18      	subs	r0, r3, r0
 808b45a:	3801      	subs	r0, #1
 808b45c:	4770      	bx	lr

0808b45e <strncmp>:
 808b45e:	4603      	mov	r3, r0
 808b460:	b510      	push	{r4, lr}
 808b462:	b172      	cbz	r2, 808b482 <strncmp+0x24>
 808b464:	3901      	subs	r1, #1
 808b466:	1884      	adds	r4, r0, r2
 808b468:	f813 0b01 	ldrb.w	r0, [r3], #1
 808b46c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808b470:	4290      	cmp	r0, r2
 808b472:	d101      	bne.n	808b478 <strncmp+0x1a>
 808b474:	42a3      	cmp	r3, r4
 808b476:	d101      	bne.n	808b47c <strncmp+0x1e>
 808b478:	1a80      	subs	r0, r0, r2
 808b47a:	bd10      	pop	{r4, pc}
 808b47c:	2800      	cmp	r0, #0
 808b47e:	d1f3      	bne.n	808b468 <strncmp+0xa>
 808b480:	e7fa      	b.n	808b478 <strncmp+0x1a>
 808b482:	4610      	mov	r0, r2
 808b484:	e7f9      	b.n	808b47a <strncmp+0x1c>

0808b486 <strncpy>:
 808b486:	4603      	mov	r3, r0
 808b488:	b510      	push	{r4, lr}
 808b48a:	3901      	subs	r1, #1
 808b48c:	b132      	cbz	r2, 808b49c <strncpy+0x16>
 808b48e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b492:	3a01      	subs	r2, #1
 808b494:	f803 4b01 	strb.w	r4, [r3], #1
 808b498:	2c00      	cmp	r4, #0
 808b49a:	d1f7      	bne.n	808b48c <strncpy+0x6>
 808b49c:	2100      	movs	r1, #0
 808b49e:	441a      	add	r2, r3
 808b4a0:	4293      	cmp	r3, r2
 808b4a2:	d100      	bne.n	808b4a6 <strncpy+0x20>
 808b4a4:	bd10      	pop	{r4, pc}
 808b4a6:	f803 1b01 	strb.w	r1, [r3], #1
 808b4aa:	e7f9      	b.n	808b4a0 <strncpy+0x1a>

0808b4ac <strstr>:
 808b4ac:	780a      	ldrb	r2, [r1, #0]
 808b4ae:	b570      	push	{r4, r5, r6, lr}
 808b4b0:	b96a      	cbnz	r2, 808b4ce <strstr+0x22>
 808b4b2:	bd70      	pop	{r4, r5, r6, pc}
 808b4b4:	429a      	cmp	r2, r3
 808b4b6:	d109      	bne.n	808b4cc <strstr+0x20>
 808b4b8:	460c      	mov	r4, r1
 808b4ba:	4605      	mov	r5, r0
 808b4bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 808b4c0:	2b00      	cmp	r3, #0
 808b4c2:	d0f6      	beq.n	808b4b2 <strstr+0x6>
 808b4c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 808b4c8:	429e      	cmp	r6, r3
 808b4ca:	d0f7      	beq.n	808b4bc <strstr+0x10>
 808b4cc:	3001      	adds	r0, #1
 808b4ce:	7803      	ldrb	r3, [r0, #0]
 808b4d0:	2b00      	cmp	r3, #0
 808b4d2:	d1ef      	bne.n	808b4b4 <strstr+0x8>
 808b4d4:	4618      	mov	r0, r3
 808b4d6:	e7ec      	b.n	808b4b2 <strstr+0x6>

0808b4d8 <sulp>:
 808b4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b4dc:	460f      	mov	r7, r1
 808b4de:	4690      	mov	r8, r2
 808b4e0:	f001 fde8 	bl	808d0b4 <__ulp>
 808b4e4:	4604      	mov	r4, r0
 808b4e6:	460d      	mov	r5, r1
 808b4e8:	f1b8 0f00 	cmp.w	r8, #0
 808b4ec:	d011      	beq.n	808b512 <sulp+0x3a>
 808b4ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808b4f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b4f6:	2b00      	cmp	r3, #0
 808b4f8:	dd0b      	ble.n	808b512 <sulp+0x3a>
 808b4fa:	2400      	movs	r4, #0
 808b4fc:	051b      	lsls	r3, r3, #20
 808b4fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808b502:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808b506:	4622      	mov	r2, r4
 808b508:	462b      	mov	r3, r5
 808b50a:	f7fe fe75 	bl	808a1f8 <__aeabi_dmul>
 808b50e:	4604      	mov	r4, r0
 808b510:	460d      	mov	r5, r1
 808b512:	4620      	mov	r0, r4
 808b514:	4629      	mov	r1, r5
 808b516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b51a:	0000      	movs	r0, r0
 808b51c:	0000      	movs	r0, r0
	...

0808b520 <_strtod_l>:
 808b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b524:	469b      	mov	fp, r3
 808b526:	2300      	movs	r3, #0
 808b528:	b09f      	sub	sp, #124	; 0x7c
 808b52a:	931a      	str	r3, [sp, #104]	; 0x68
 808b52c:	4b9e      	ldr	r3, [pc, #632]	; (808b7a8 <_strtod_l+0x288>)
 808b52e:	4682      	mov	sl, r0
 808b530:	681f      	ldr	r7, [r3, #0]
 808b532:	460e      	mov	r6, r1
 808b534:	4638      	mov	r0, r7
 808b536:	9215      	str	r2, [sp, #84]	; 0x54
 808b538:	f7ff ff89 	bl	808b44e <strlen>
 808b53c:	f04f 0800 	mov.w	r8, #0
 808b540:	4604      	mov	r4, r0
 808b542:	f04f 0900 	mov.w	r9, #0
 808b546:	9619      	str	r6, [sp, #100]	; 0x64
 808b548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b54a:	781a      	ldrb	r2, [r3, #0]
 808b54c:	2a2b      	cmp	r2, #43	; 0x2b
 808b54e:	d04c      	beq.n	808b5ea <_strtod_l+0xca>
 808b550:	d83a      	bhi.n	808b5c8 <_strtod_l+0xa8>
 808b552:	2a0d      	cmp	r2, #13
 808b554:	d833      	bhi.n	808b5be <_strtod_l+0x9e>
 808b556:	2a08      	cmp	r2, #8
 808b558:	d833      	bhi.n	808b5c2 <_strtod_l+0xa2>
 808b55a:	2a00      	cmp	r2, #0
 808b55c:	d03d      	beq.n	808b5da <_strtod_l+0xba>
 808b55e:	2300      	movs	r3, #0
 808b560:	930a      	str	r3, [sp, #40]	; 0x28
 808b562:	9d19      	ldr	r5, [sp, #100]	; 0x64
 808b564:	782b      	ldrb	r3, [r5, #0]
 808b566:	2b30      	cmp	r3, #48	; 0x30
 808b568:	f040 80aa 	bne.w	808b6c0 <_strtod_l+0x1a0>
 808b56c:	786b      	ldrb	r3, [r5, #1]
 808b56e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808b572:	2b58      	cmp	r3, #88	; 0x58
 808b574:	d166      	bne.n	808b644 <_strtod_l+0x124>
 808b576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b578:	4650      	mov	r0, sl
 808b57a:	9301      	str	r3, [sp, #4]
 808b57c:	ab1a      	add	r3, sp, #104	; 0x68
 808b57e:	9300      	str	r3, [sp, #0]
 808b580:	4a8a      	ldr	r2, [pc, #552]	; (808b7ac <_strtod_l+0x28c>)
 808b582:	f8cd b008 	str.w	fp, [sp, #8]
 808b586:	ab1b      	add	r3, sp, #108	; 0x6c
 808b588:	a919      	add	r1, sp, #100	; 0x64
 808b58a:	f000 ff0f 	bl	808c3ac <__gethex>
 808b58e:	f010 0607 	ands.w	r6, r0, #7
 808b592:	4604      	mov	r4, r0
 808b594:	d005      	beq.n	808b5a2 <_strtod_l+0x82>
 808b596:	2e06      	cmp	r6, #6
 808b598:	d129      	bne.n	808b5ee <_strtod_l+0xce>
 808b59a:	2300      	movs	r3, #0
 808b59c:	3501      	adds	r5, #1
 808b59e:	9519      	str	r5, [sp, #100]	; 0x64
 808b5a0:	930a      	str	r3, [sp, #40]	; 0x28
 808b5a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b5a4:	2b00      	cmp	r3, #0
 808b5a6:	f040 858a 	bne.w	808c0be <_strtod_l+0xb9e>
 808b5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b5ac:	b1d3      	cbz	r3, 808b5e4 <_strtod_l+0xc4>
 808b5ae:	4642      	mov	r2, r8
 808b5b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808b5b4:	4610      	mov	r0, r2
 808b5b6:	4619      	mov	r1, r3
 808b5b8:	b01f      	add	sp, #124	; 0x7c
 808b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b5be:	2a20      	cmp	r2, #32
 808b5c0:	d1cd      	bne.n	808b55e <_strtod_l+0x3e>
 808b5c2:	3301      	adds	r3, #1
 808b5c4:	9319      	str	r3, [sp, #100]	; 0x64
 808b5c6:	e7bf      	b.n	808b548 <_strtod_l+0x28>
 808b5c8:	2a2d      	cmp	r2, #45	; 0x2d
 808b5ca:	d1c8      	bne.n	808b55e <_strtod_l+0x3e>
 808b5cc:	2201      	movs	r2, #1
 808b5ce:	920a      	str	r2, [sp, #40]	; 0x28
 808b5d0:	1c5a      	adds	r2, r3, #1
 808b5d2:	9219      	str	r2, [sp, #100]	; 0x64
 808b5d4:	785b      	ldrb	r3, [r3, #1]
 808b5d6:	2b00      	cmp	r3, #0
 808b5d8:	d1c3      	bne.n	808b562 <_strtod_l+0x42>
 808b5da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808b5dc:	9619      	str	r6, [sp, #100]	; 0x64
 808b5de:	2b00      	cmp	r3, #0
 808b5e0:	f040 856b 	bne.w	808c0ba <_strtod_l+0xb9a>
 808b5e4:	4642      	mov	r2, r8
 808b5e6:	464b      	mov	r3, r9
 808b5e8:	e7e4      	b.n	808b5b4 <_strtod_l+0x94>
 808b5ea:	2200      	movs	r2, #0
 808b5ec:	e7ef      	b.n	808b5ce <_strtod_l+0xae>
 808b5ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 808b5f0:	b13a      	cbz	r2, 808b602 <_strtod_l+0xe2>
 808b5f2:	2135      	movs	r1, #53	; 0x35
 808b5f4:	a81c      	add	r0, sp, #112	; 0x70
 808b5f6:	f001 fe61 	bl	808d2bc <__copybits>
 808b5fa:	4650      	mov	r0, sl
 808b5fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 808b5fe:	f001 fa29 	bl	808ca54 <_Bfree>
 808b602:	3e01      	subs	r6, #1
 808b604:	2e04      	cmp	r6, #4
 808b606:	d806      	bhi.n	808b616 <_strtod_l+0xf6>
 808b608:	e8df f006 	tbb	[pc, r6]
 808b60c:	1714030a 	.word	0x1714030a
 808b610:	0a          	.byte	0x0a
 808b611:	00          	.byte	0x00
 808b612:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 808b616:	0721      	lsls	r1, r4, #28
 808b618:	d5c3      	bpl.n	808b5a2 <_strtod_l+0x82>
 808b61a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808b61e:	e7c0      	b.n	808b5a2 <_strtod_l+0x82>
 808b620:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808b622:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 808b626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808b62a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808b62e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808b632:	e7f0      	b.n	808b616 <_strtod_l+0xf6>
 808b634:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808b7b0 <_strtod_l+0x290>
 808b638:	e7ed      	b.n	808b616 <_strtod_l+0xf6>
 808b63a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808b63e:	f04f 38ff 	mov.w	r8, #4294967295
 808b642:	e7e8      	b.n	808b616 <_strtod_l+0xf6>
 808b644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b646:	1c5a      	adds	r2, r3, #1
 808b648:	9219      	str	r2, [sp, #100]	; 0x64
 808b64a:	785b      	ldrb	r3, [r3, #1]
 808b64c:	2b30      	cmp	r3, #48	; 0x30
 808b64e:	d0f9      	beq.n	808b644 <_strtod_l+0x124>
 808b650:	2b00      	cmp	r3, #0
 808b652:	d0a6      	beq.n	808b5a2 <_strtod_l+0x82>
 808b654:	2301      	movs	r3, #1
 808b656:	9307      	str	r3, [sp, #28]
 808b658:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b65a:	220a      	movs	r2, #10
 808b65c:	9308      	str	r3, [sp, #32]
 808b65e:	2300      	movs	r3, #0
 808b660:	469b      	mov	fp, r3
 808b662:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808b666:	9819      	ldr	r0, [sp, #100]	; 0x64
 808b668:	7805      	ldrb	r5, [r0, #0]
 808b66a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808b66e:	b2d9      	uxtb	r1, r3
 808b670:	2909      	cmp	r1, #9
 808b672:	d927      	bls.n	808b6c4 <_strtod_l+0x1a4>
 808b674:	4622      	mov	r2, r4
 808b676:	4639      	mov	r1, r7
 808b678:	f7ff fef1 	bl	808b45e <strncmp>
 808b67c:	2800      	cmp	r0, #0
 808b67e:	d033      	beq.n	808b6e8 <_strtod_l+0x1c8>
 808b680:	2000      	movs	r0, #0
 808b682:	462a      	mov	r2, r5
 808b684:	465c      	mov	r4, fp
 808b686:	4603      	mov	r3, r0
 808b688:	9004      	str	r0, [sp, #16]
 808b68a:	2a65      	cmp	r2, #101	; 0x65
 808b68c:	d001      	beq.n	808b692 <_strtod_l+0x172>
 808b68e:	2a45      	cmp	r2, #69	; 0x45
 808b690:	d114      	bne.n	808b6bc <_strtod_l+0x19c>
 808b692:	b91c      	cbnz	r4, 808b69c <_strtod_l+0x17c>
 808b694:	9a07      	ldr	r2, [sp, #28]
 808b696:	4302      	orrs	r2, r0
 808b698:	d09f      	beq.n	808b5da <_strtod_l+0xba>
 808b69a:	2400      	movs	r4, #0
 808b69c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 808b69e:	1c72      	adds	r2, r6, #1
 808b6a0:	9219      	str	r2, [sp, #100]	; 0x64
 808b6a2:	7872      	ldrb	r2, [r6, #1]
 808b6a4:	2a2b      	cmp	r2, #43	; 0x2b
 808b6a6:	d079      	beq.n	808b79c <_strtod_l+0x27c>
 808b6a8:	2a2d      	cmp	r2, #45	; 0x2d
 808b6aa:	f000 8083 	beq.w	808b7b4 <_strtod_l+0x294>
 808b6ae:	2700      	movs	r7, #0
 808b6b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 808b6b4:	2909      	cmp	r1, #9
 808b6b6:	f240 8083 	bls.w	808b7c0 <_strtod_l+0x2a0>
 808b6ba:	9619      	str	r6, [sp, #100]	; 0x64
 808b6bc:	2500      	movs	r5, #0
 808b6be:	e09f      	b.n	808b800 <_strtod_l+0x2e0>
 808b6c0:	2300      	movs	r3, #0
 808b6c2:	e7c8      	b.n	808b656 <_strtod_l+0x136>
 808b6c4:	f1bb 0f08 	cmp.w	fp, #8
 808b6c8:	bfd5      	itete	le
 808b6ca:	9906      	ldrle	r1, [sp, #24]
 808b6cc:	9905      	ldrgt	r1, [sp, #20]
 808b6ce:	fb02 3301 	mlale	r3, r2, r1, r3
 808b6d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 808b6d6:	f100 0001 	add.w	r0, r0, #1
 808b6da:	bfd4      	ite	le
 808b6dc:	9306      	strle	r3, [sp, #24]
 808b6de:	9305      	strgt	r3, [sp, #20]
 808b6e0:	f10b 0b01 	add.w	fp, fp, #1
 808b6e4:	9019      	str	r0, [sp, #100]	; 0x64
 808b6e6:	e7be      	b.n	808b666 <_strtod_l+0x146>
 808b6e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b6ea:	191a      	adds	r2, r3, r4
 808b6ec:	9219      	str	r2, [sp, #100]	; 0x64
 808b6ee:	5d1a      	ldrb	r2, [r3, r4]
 808b6f0:	f1bb 0f00 	cmp.w	fp, #0
 808b6f4:	d036      	beq.n	808b764 <_strtod_l+0x244>
 808b6f6:	465c      	mov	r4, fp
 808b6f8:	9004      	str	r0, [sp, #16]
 808b6fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 808b6fe:	2b09      	cmp	r3, #9
 808b700:	d912      	bls.n	808b728 <_strtod_l+0x208>
 808b702:	2301      	movs	r3, #1
 808b704:	e7c1      	b.n	808b68a <_strtod_l+0x16a>
 808b706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b708:	3001      	adds	r0, #1
 808b70a:	1c5a      	adds	r2, r3, #1
 808b70c:	9219      	str	r2, [sp, #100]	; 0x64
 808b70e:	785a      	ldrb	r2, [r3, #1]
 808b710:	2a30      	cmp	r2, #48	; 0x30
 808b712:	d0f8      	beq.n	808b706 <_strtod_l+0x1e6>
 808b714:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 808b718:	2b08      	cmp	r3, #8
 808b71a:	f200 84d5 	bhi.w	808c0c8 <_strtod_l+0xba8>
 808b71e:	9004      	str	r0, [sp, #16]
 808b720:	2000      	movs	r0, #0
 808b722:	4604      	mov	r4, r0
 808b724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b726:	9308      	str	r3, [sp, #32]
 808b728:	3a30      	subs	r2, #48	; 0x30
 808b72a:	f100 0301 	add.w	r3, r0, #1
 808b72e:	d013      	beq.n	808b758 <_strtod_l+0x238>
 808b730:	9904      	ldr	r1, [sp, #16]
 808b732:	1905      	adds	r5, r0, r4
 808b734:	4419      	add	r1, r3
 808b736:	9104      	str	r1, [sp, #16]
 808b738:	4623      	mov	r3, r4
 808b73a:	210a      	movs	r1, #10
 808b73c:	42ab      	cmp	r3, r5
 808b73e:	d113      	bne.n	808b768 <_strtod_l+0x248>
 808b740:	1823      	adds	r3, r4, r0
 808b742:	2b08      	cmp	r3, #8
 808b744:	f104 0401 	add.w	r4, r4, #1
 808b748:	4404      	add	r4, r0
 808b74a:	dc1b      	bgt.n	808b784 <_strtod_l+0x264>
 808b74c:	230a      	movs	r3, #10
 808b74e:	9906      	ldr	r1, [sp, #24]
 808b750:	fb03 2301 	mla	r3, r3, r1, r2
 808b754:	9306      	str	r3, [sp, #24]
 808b756:	2300      	movs	r3, #0
 808b758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808b75a:	4618      	mov	r0, r3
 808b75c:	1c51      	adds	r1, r2, #1
 808b75e:	9119      	str	r1, [sp, #100]	; 0x64
 808b760:	7852      	ldrb	r2, [r2, #1]
 808b762:	e7ca      	b.n	808b6fa <_strtod_l+0x1da>
 808b764:	4658      	mov	r0, fp
 808b766:	e7d3      	b.n	808b710 <_strtod_l+0x1f0>
 808b768:	2b08      	cmp	r3, #8
 808b76a:	dc04      	bgt.n	808b776 <_strtod_l+0x256>
 808b76c:	9f06      	ldr	r7, [sp, #24]
 808b76e:	434f      	muls	r7, r1
 808b770:	9706      	str	r7, [sp, #24]
 808b772:	3301      	adds	r3, #1
 808b774:	e7e2      	b.n	808b73c <_strtod_l+0x21c>
 808b776:	1c5f      	adds	r7, r3, #1
 808b778:	2f10      	cmp	r7, #16
 808b77a:	bfde      	ittt	le
 808b77c:	9f05      	ldrle	r7, [sp, #20]
 808b77e:	434f      	mulle	r7, r1
 808b780:	9705      	strle	r7, [sp, #20]
 808b782:	e7f6      	b.n	808b772 <_strtod_l+0x252>
 808b784:	2c10      	cmp	r4, #16
 808b786:	bfdf      	itttt	le
 808b788:	230a      	movle	r3, #10
 808b78a:	9905      	ldrle	r1, [sp, #20]
 808b78c:	fb03 2301 	mlale	r3, r3, r1, r2
 808b790:	9305      	strle	r3, [sp, #20]
 808b792:	e7e0      	b.n	808b756 <_strtod_l+0x236>
 808b794:	2300      	movs	r3, #0
 808b796:	9304      	str	r3, [sp, #16]
 808b798:	2301      	movs	r3, #1
 808b79a:	e77b      	b.n	808b694 <_strtod_l+0x174>
 808b79c:	2700      	movs	r7, #0
 808b79e:	1cb2      	adds	r2, r6, #2
 808b7a0:	9219      	str	r2, [sp, #100]	; 0x64
 808b7a2:	78b2      	ldrb	r2, [r6, #2]
 808b7a4:	e784      	b.n	808b6b0 <_strtod_l+0x190>
 808b7a6:	bf00      	nop
 808b7a8:	0808f670 	.word	0x0808f670
 808b7ac:	0808f488 	.word	0x0808f488
 808b7b0:	7ff00000 	.word	0x7ff00000
 808b7b4:	2701      	movs	r7, #1
 808b7b6:	e7f2      	b.n	808b79e <_strtod_l+0x27e>
 808b7b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808b7ba:	1c51      	adds	r1, r2, #1
 808b7bc:	9119      	str	r1, [sp, #100]	; 0x64
 808b7be:	7852      	ldrb	r2, [r2, #1]
 808b7c0:	2a30      	cmp	r2, #48	; 0x30
 808b7c2:	d0f9      	beq.n	808b7b8 <_strtod_l+0x298>
 808b7c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 808b7c8:	2908      	cmp	r1, #8
 808b7ca:	f63f af77 	bhi.w	808b6bc <_strtod_l+0x19c>
 808b7ce:	f04f 0e0a 	mov.w	lr, #10
 808b7d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 808b7d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808b7d8:	9209      	str	r2, [sp, #36]	; 0x24
 808b7da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808b7dc:	1c51      	adds	r1, r2, #1
 808b7de:	9119      	str	r1, [sp, #100]	; 0x64
 808b7e0:	7852      	ldrb	r2, [r2, #1]
 808b7e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 808b7e6:	2d09      	cmp	r5, #9
 808b7e8:	d935      	bls.n	808b856 <_strtod_l+0x336>
 808b7ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808b7ec:	1b49      	subs	r1, r1, r5
 808b7ee:	2908      	cmp	r1, #8
 808b7f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808b7f4:	dc02      	bgt.n	808b7fc <_strtod_l+0x2dc>
 808b7f6:	4565      	cmp	r5, ip
 808b7f8:	bfa8      	it	ge
 808b7fa:	4665      	movge	r5, ip
 808b7fc:	b107      	cbz	r7, 808b800 <_strtod_l+0x2e0>
 808b7fe:	426d      	negs	r5, r5
 808b800:	2c00      	cmp	r4, #0
 808b802:	d14c      	bne.n	808b89e <_strtod_l+0x37e>
 808b804:	9907      	ldr	r1, [sp, #28]
 808b806:	4301      	orrs	r1, r0
 808b808:	f47f aecb 	bne.w	808b5a2 <_strtod_l+0x82>
 808b80c:	2b00      	cmp	r3, #0
 808b80e:	f47f aee4 	bne.w	808b5da <_strtod_l+0xba>
 808b812:	2a69      	cmp	r2, #105	; 0x69
 808b814:	d026      	beq.n	808b864 <_strtod_l+0x344>
 808b816:	dc23      	bgt.n	808b860 <_strtod_l+0x340>
 808b818:	2a49      	cmp	r2, #73	; 0x49
 808b81a:	d023      	beq.n	808b864 <_strtod_l+0x344>
 808b81c:	2a4e      	cmp	r2, #78	; 0x4e
 808b81e:	f47f aedc 	bne.w	808b5da <_strtod_l+0xba>
 808b822:	499d      	ldr	r1, [pc, #628]	; (808ba98 <_strtod_l+0x578>)
 808b824:	a819      	add	r0, sp, #100	; 0x64
 808b826:	f001 f80f 	bl	808c848 <__match>
 808b82a:	2800      	cmp	r0, #0
 808b82c:	f43f aed5 	beq.w	808b5da <_strtod_l+0xba>
 808b830:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b832:	781b      	ldrb	r3, [r3, #0]
 808b834:	2b28      	cmp	r3, #40	; 0x28
 808b836:	d12c      	bne.n	808b892 <_strtod_l+0x372>
 808b838:	4998      	ldr	r1, [pc, #608]	; (808ba9c <_strtod_l+0x57c>)
 808b83a:	aa1c      	add	r2, sp, #112	; 0x70
 808b83c:	a819      	add	r0, sp, #100	; 0x64
 808b83e:	f001 f817 	bl	808c870 <__hexnan>
 808b842:	2805      	cmp	r0, #5
 808b844:	d125      	bne.n	808b892 <_strtod_l+0x372>
 808b846:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 808b848:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 808b84c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808b850:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808b854:	e6a5      	b.n	808b5a2 <_strtod_l+0x82>
 808b856:	fb0e 2c0c 	mla	ip, lr, ip, r2
 808b85a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808b85e:	e7bc      	b.n	808b7da <_strtod_l+0x2ba>
 808b860:	2a6e      	cmp	r2, #110	; 0x6e
 808b862:	e7dc      	b.n	808b81e <_strtod_l+0x2fe>
 808b864:	498e      	ldr	r1, [pc, #568]	; (808baa0 <_strtod_l+0x580>)
 808b866:	a819      	add	r0, sp, #100	; 0x64
 808b868:	f000 ffee 	bl	808c848 <__match>
 808b86c:	2800      	cmp	r0, #0
 808b86e:	f43f aeb4 	beq.w	808b5da <_strtod_l+0xba>
 808b872:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b874:	498b      	ldr	r1, [pc, #556]	; (808baa4 <_strtod_l+0x584>)
 808b876:	3b01      	subs	r3, #1
 808b878:	a819      	add	r0, sp, #100	; 0x64
 808b87a:	9319      	str	r3, [sp, #100]	; 0x64
 808b87c:	f000 ffe4 	bl	808c848 <__match>
 808b880:	b910      	cbnz	r0, 808b888 <_strtod_l+0x368>
 808b882:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b884:	3301      	adds	r3, #1
 808b886:	9319      	str	r3, [sp, #100]	; 0x64
 808b888:	f04f 0800 	mov.w	r8, #0
 808b88c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 808baa8 <_strtod_l+0x588>
 808b890:	e687      	b.n	808b5a2 <_strtod_l+0x82>
 808b892:	4886      	ldr	r0, [pc, #536]	; (808baac <_strtod_l+0x58c>)
 808b894:	f7fe faee 	bl	8089e74 <nan>
 808b898:	4680      	mov	r8, r0
 808b89a:	4689      	mov	r9, r1
 808b89c:	e681      	b.n	808b5a2 <_strtod_l+0x82>
 808b89e:	9b04      	ldr	r3, [sp, #16]
 808b8a0:	f1bb 0f00 	cmp.w	fp, #0
 808b8a4:	bf08      	it	eq
 808b8a6:	46a3      	moveq	fp, r4
 808b8a8:	1aeb      	subs	r3, r5, r3
 808b8aa:	2c10      	cmp	r4, #16
 808b8ac:	9806      	ldr	r0, [sp, #24]
 808b8ae:	4626      	mov	r6, r4
 808b8b0:	9307      	str	r3, [sp, #28]
 808b8b2:	bfa8      	it	ge
 808b8b4:	2610      	movge	r6, #16
 808b8b6:	f7fe fc25 	bl	808a104 <__aeabi_ui2d>
 808b8ba:	2c09      	cmp	r4, #9
 808b8bc:	4680      	mov	r8, r0
 808b8be:	4689      	mov	r9, r1
 808b8c0:	dd13      	ble.n	808b8ea <_strtod_l+0x3ca>
 808b8c2:	4b7b      	ldr	r3, [pc, #492]	; (808bab0 <_strtod_l+0x590>)
 808b8c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808b8c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808b8cc:	f7fe fc94 	bl	808a1f8 <__aeabi_dmul>
 808b8d0:	4680      	mov	r8, r0
 808b8d2:	9805      	ldr	r0, [sp, #20]
 808b8d4:	4689      	mov	r9, r1
 808b8d6:	f7fe fc15 	bl	808a104 <__aeabi_ui2d>
 808b8da:	4602      	mov	r2, r0
 808b8dc:	460b      	mov	r3, r1
 808b8de:	4640      	mov	r0, r8
 808b8e0:	4649      	mov	r1, r9
 808b8e2:	f7fe fad3 	bl	8089e8c <__adddf3>
 808b8e6:	4680      	mov	r8, r0
 808b8e8:	4689      	mov	r9, r1
 808b8ea:	2c0f      	cmp	r4, #15
 808b8ec:	dc36      	bgt.n	808b95c <_strtod_l+0x43c>
 808b8ee:	9b07      	ldr	r3, [sp, #28]
 808b8f0:	2b00      	cmp	r3, #0
 808b8f2:	f43f ae56 	beq.w	808b5a2 <_strtod_l+0x82>
 808b8f6:	dd22      	ble.n	808b93e <_strtod_l+0x41e>
 808b8f8:	2b16      	cmp	r3, #22
 808b8fa:	dc09      	bgt.n	808b910 <_strtod_l+0x3f0>
 808b8fc:	496c      	ldr	r1, [pc, #432]	; (808bab0 <_strtod_l+0x590>)
 808b8fe:	4642      	mov	r2, r8
 808b900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808b904:	464b      	mov	r3, r9
 808b906:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b90a:	f7fe fc75 	bl	808a1f8 <__aeabi_dmul>
 808b90e:	e7c3      	b.n	808b898 <_strtod_l+0x378>
 808b910:	9a07      	ldr	r2, [sp, #28]
 808b912:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808b916:	4293      	cmp	r3, r2
 808b918:	db20      	blt.n	808b95c <_strtod_l+0x43c>
 808b91a:	4d65      	ldr	r5, [pc, #404]	; (808bab0 <_strtod_l+0x590>)
 808b91c:	f1c4 040f 	rsb	r4, r4, #15
 808b920:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808b924:	4642      	mov	r2, r8
 808b926:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b92a:	464b      	mov	r3, r9
 808b92c:	f7fe fc64 	bl	808a1f8 <__aeabi_dmul>
 808b930:	9b07      	ldr	r3, [sp, #28]
 808b932:	1b1c      	subs	r4, r3, r4
 808b934:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808b938:	e9d5 2300 	ldrd	r2, r3, [r5]
 808b93c:	e7e5      	b.n	808b90a <_strtod_l+0x3ea>
 808b93e:	9b07      	ldr	r3, [sp, #28]
 808b940:	3316      	adds	r3, #22
 808b942:	db0b      	blt.n	808b95c <_strtod_l+0x43c>
 808b944:	9b04      	ldr	r3, [sp, #16]
 808b946:	4640      	mov	r0, r8
 808b948:	1b5d      	subs	r5, r3, r5
 808b94a:	4b59      	ldr	r3, [pc, #356]	; (808bab0 <_strtod_l+0x590>)
 808b94c:	4649      	mov	r1, r9
 808b94e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 808b952:	e9d5 2300 	ldrd	r2, r3, [r5]
 808b956:	f7fe fd79 	bl	808a44c <__aeabi_ddiv>
 808b95a:	e79d      	b.n	808b898 <_strtod_l+0x378>
 808b95c:	9b07      	ldr	r3, [sp, #28]
 808b95e:	1ba6      	subs	r6, r4, r6
 808b960:	441e      	add	r6, r3
 808b962:	2e00      	cmp	r6, #0
 808b964:	dd74      	ble.n	808ba50 <_strtod_l+0x530>
 808b966:	f016 030f 	ands.w	r3, r6, #15
 808b96a:	d00a      	beq.n	808b982 <_strtod_l+0x462>
 808b96c:	4950      	ldr	r1, [pc, #320]	; (808bab0 <_strtod_l+0x590>)
 808b96e:	4642      	mov	r2, r8
 808b970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808b974:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b978:	464b      	mov	r3, r9
 808b97a:	f7fe fc3d 	bl	808a1f8 <__aeabi_dmul>
 808b97e:	4680      	mov	r8, r0
 808b980:	4689      	mov	r9, r1
 808b982:	f036 060f 	bics.w	r6, r6, #15
 808b986:	d052      	beq.n	808ba2e <_strtod_l+0x50e>
 808b988:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808b98c:	dd27      	ble.n	808b9de <_strtod_l+0x4be>
 808b98e:	f04f 0b00 	mov.w	fp, #0
 808b992:	f8cd b010 	str.w	fp, [sp, #16]
 808b996:	f8cd b020 	str.w	fp, [sp, #32]
 808b99a:	f8cd b018 	str.w	fp, [sp, #24]
 808b99e:	2322      	movs	r3, #34	; 0x22
 808b9a0:	f04f 0800 	mov.w	r8, #0
 808b9a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 808baa8 <_strtod_l+0x588>
 808b9a8:	f8ca 3000 	str.w	r3, [sl]
 808b9ac:	9b08      	ldr	r3, [sp, #32]
 808b9ae:	2b00      	cmp	r3, #0
 808b9b0:	f43f adf7 	beq.w	808b5a2 <_strtod_l+0x82>
 808b9b4:	4650      	mov	r0, sl
 808b9b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 808b9b8:	f001 f84c 	bl	808ca54 <_Bfree>
 808b9bc:	4650      	mov	r0, sl
 808b9be:	9906      	ldr	r1, [sp, #24]
 808b9c0:	f001 f848 	bl	808ca54 <_Bfree>
 808b9c4:	4650      	mov	r0, sl
 808b9c6:	9904      	ldr	r1, [sp, #16]
 808b9c8:	f001 f844 	bl	808ca54 <_Bfree>
 808b9cc:	4650      	mov	r0, sl
 808b9ce:	9908      	ldr	r1, [sp, #32]
 808b9d0:	f001 f840 	bl	808ca54 <_Bfree>
 808b9d4:	4659      	mov	r1, fp
 808b9d6:	4650      	mov	r0, sl
 808b9d8:	f001 f83c 	bl	808ca54 <_Bfree>
 808b9dc:	e5e1      	b.n	808b5a2 <_strtod_l+0x82>
 808b9de:	4b35      	ldr	r3, [pc, #212]	; (808bab4 <_strtod_l+0x594>)
 808b9e0:	4640      	mov	r0, r8
 808b9e2:	9305      	str	r3, [sp, #20]
 808b9e4:	2300      	movs	r3, #0
 808b9e6:	4649      	mov	r1, r9
 808b9e8:	461f      	mov	r7, r3
 808b9ea:	1136      	asrs	r6, r6, #4
 808b9ec:	2e01      	cmp	r6, #1
 808b9ee:	dc21      	bgt.n	808ba34 <_strtod_l+0x514>
 808b9f0:	b10b      	cbz	r3, 808b9f6 <_strtod_l+0x4d6>
 808b9f2:	4680      	mov	r8, r0
 808b9f4:	4689      	mov	r9, r1
 808b9f6:	4b2f      	ldr	r3, [pc, #188]	; (808bab4 <_strtod_l+0x594>)
 808b9f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808b9fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808ba00:	4642      	mov	r2, r8
 808ba02:	e9d7 0100 	ldrd	r0, r1, [r7]
 808ba06:	464b      	mov	r3, r9
 808ba08:	f7fe fbf6 	bl	808a1f8 <__aeabi_dmul>
 808ba0c:	4b26      	ldr	r3, [pc, #152]	; (808baa8 <_strtod_l+0x588>)
 808ba0e:	460a      	mov	r2, r1
 808ba10:	400b      	ands	r3, r1
 808ba12:	4929      	ldr	r1, [pc, #164]	; (808bab8 <_strtod_l+0x598>)
 808ba14:	4680      	mov	r8, r0
 808ba16:	428b      	cmp	r3, r1
 808ba18:	d8b9      	bhi.n	808b98e <_strtod_l+0x46e>
 808ba1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808ba1e:	428b      	cmp	r3, r1
 808ba20:	bf86      	itte	hi
 808ba22:	f04f 38ff 	movhi.w	r8, #4294967295
 808ba26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808babc <_strtod_l+0x59c>
 808ba2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808ba2e:	2300      	movs	r3, #0
 808ba30:	9305      	str	r3, [sp, #20]
 808ba32:	e07f      	b.n	808bb34 <_strtod_l+0x614>
 808ba34:	07f2      	lsls	r2, r6, #31
 808ba36:	d505      	bpl.n	808ba44 <_strtod_l+0x524>
 808ba38:	9b05      	ldr	r3, [sp, #20]
 808ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ba3e:	f7fe fbdb 	bl	808a1f8 <__aeabi_dmul>
 808ba42:	2301      	movs	r3, #1
 808ba44:	9a05      	ldr	r2, [sp, #20]
 808ba46:	3701      	adds	r7, #1
 808ba48:	3208      	adds	r2, #8
 808ba4a:	1076      	asrs	r6, r6, #1
 808ba4c:	9205      	str	r2, [sp, #20]
 808ba4e:	e7cd      	b.n	808b9ec <_strtod_l+0x4cc>
 808ba50:	d0ed      	beq.n	808ba2e <_strtod_l+0x50e>
 808ba52:	4276      	negs	r6, r6
 808ba54:	f016 020f 	ands.w	r2, r6, #15
 808ba58:	d00a      	beq.n	808ba70 <_strtod_l+0x550>
 808ba5a:	4b15      	ldr	r3, [pc, #84]	; (808bab0 <_strtod_l+0x590>)
 808ba5c:	4640      	mov	r0, r8
 808ba5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808ba62:	4649      	mov	r1, r9
 808ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ba68:	f7fe fcf0 	bl	808a44c <__aeabi_ddiv>
 808ba6c:	4680      	mov	r8, r0
 808ba6e:	4689      	mov	r9, r1
 808ba70:	1136      	asrs	r6, r6, #4
 808ba72:	d0dc      	beq.n	808ba2e <_strtod_l+0x50e>
 808ba74:	2e1f      	cmp	r6, #31
 808ba76:	dd23      	ble.n	808bac0 <_strtod_l+0x5a0>
 808ba78:	f04f 0b00 	mov.w	fp, #0
 808ba7c:	f8cd b010 	str.w	fp, [sp, #16]
 808ba80:	f8cd b020 	str.w	fp, [sp, #32]
 808ba84:	f8cd b018 	str.w	fp, [sp, #24]
 808ba88:	2322      	movs	r3, #34	; 0x22
 808ba8a:	f04f 0800 	mov.w	r8, #0
 808ba8e:	f04f 0900 	mov.w	r9, #0
 808ba92:	f8ca 3000 	str.w	r3, [sl]
 808ba96:	e789      	b.n	808b9ac <_strtod_l+0x48c>
 808ba98:	0808f229 	.word	0x0808f229
 808ba9c:	0808f49c 	.word	0x0808f49c
 808baa0:	0808f22d 	.word	0x0808f22d
 808baa4:	0808f482 	.word	0x0808f482
 808baa8:	7ff00000 	.word	0x7ff00000
 808baac:	0808f1d9 	.word	0x0808f1d9
 808bab0:	0808f728 	.word	0x0808f728
 808bab4:	0808f700 	.word	0x0808f700
 808bab8:	7ca00000 	.word	0x7ca00000
 808babc:	7fefffff 	.word	0x7fefffff
 808bac0:	f016 0310 	ands.w	r3, r6, #16
 808bac4:	bf18      	it	ne
 808bac6:	236a      	movne	r3, #106	; 0x6a
 808bac8:	4640      	mov	r0, r8
 808baca:	9305      	str	r3, [sp, #20]
 808bacc:	4649      	mov	r1, r9
 808bace:	2300      	movs	r3, #0
 808bad0:	4fb0      	ldr	r7, [pc, #704]	; (808bd94 <_strtod_l+0x874>)
 808bad2:	07f2      	lsls	r2, r6, #31
 808bad4:	d504      	bpl.n	808bae0 <_strtod_l+0x5c0>
 808bad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 808bada:	f7fe fb8d 	bl	808a1f8 <__aeabi_dmul>
 808bade:	2301      	movs	r3, #1
 808bae0:	1076      	asrs	r6, r6, #1
 808bae2:	f107 0708 	add.w	r7, r7, #8
 808bae6:	d1f4      	bne.n	808bad2 <_strtod_l+0x5b2>
 808bae8:	b10b      	cbz	r3, 808baee <_strtod_l+0x5ce>
 808baea:	4680      	mov	r8, r0
 808baec:	4689      	mov	r9, r1
 808baee:	9b05      	ldr	r3, [sp, #20]
 808baf0:	b1c3      	cbz	r3, 808bb24 <_strtod_l+0x604>
 808baf2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 808baf6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808bafa:	2b00      	cmp	r3, #0
 808bafc:	4649      	mov	r1, r9
 808bafe:	dd11      	ble.n	808bb24 <_strtod_l+0x604>
 808bb00:	2b1f      	cmp	r3, #31
 808bb02:	f340 8127 	ble.w	808bd54 <_strtod_l+0x834>
 808bb06:	2b34      	cmp	r3, #52	; 0x34
 808bb08:	bfd8      	it	le
 808bb0a:	f04f 33ff 	movle.w	r3, #4294967295
 808bb0e:	f04f 0800 	mov.w	r8, #0
 808bb12:	bfcf      	iteee	gt
 808bb14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808bb18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 808bb1c:	fa03 f202 	lslle.w	r2, r3, r2
 808bb20:	ea02 0901 	andle.w	r9, r2, r1
 808bb24:	2200      	movs	r2, #0
 808bb26:	2300      	movs	r3, #0
 808bb28:	4640      	mov	r0, r8
 808bb2a:	4649      	mov	r1, r9
 808bb2c:	f7fe fdcc 	bl	808a6c8 <__aeabi_dcmpeq>
 808bb30:	2800      	cmp	r0, #0
 808bb32:	d1a1      	bne.n	808ba78 <_strtod_l+0x558>
 808bb34:	9b06      	ldr	r3, [sp, #24]
 808bb36:	465a      	mov	r2, fp
 808bb38:	9300      	str	r3, [sp, #0]
 808bb3a:	4650      	mov	r0, sl
 808bb3c:	4623      	mov	r3, r4
 808bb3e:	9908      	ldr	r1, [sp, #32]
 808bb40:	f000 fff0 	bl	808cb24 <__s2b>
 808bb44:	9008      	str	r0, [sp, #32]
 808bb46:	2800      	cmp	r0, #0
 808bb48:	f43f af21 	beq.w	808b98e <_strtod_l+0x46e>
 808bb4c:	9b04      	ldr	r3, [sp, #16]
 808bb4e:	f04f 0b00 	mov.w	fp, #0
 808bb52:	1b5d      	subs	r5, r3, r5
 808bb54:	9b07      	ldr	r3, [sp, #28]
 808bb56:	f8cd b010 	str.w	fp, [sp, #16]
 808bb5a:	2b00      	cmp	r3, #0
 808bb5c:	bfb4      	ite	lt
 808bb5e:	462b      	movlt	r3, r5
 808bb60:	2300      	movge	r3, #0
 808bb62:	930e      	str	r3, [sp, #56]	; 0x38
 808bb64:	9b07      	ldr	r3, [sp, #28]
 808bb66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808bb6a:	9314      	str	r3, [sp, #80]	; 0x50
 808bb6c:	9b08      	ldr	r3, [sp, #32]
 808bb6e:	4650      	mov	r0, sl
 808bb70:	6859      	ldr	r1, [r3, #4]
 808bb72:	f000 ff2f 	bl	808c9d4 <_Balloc>
 808bb76:	9006      	str	r0, [sp, #24]
 808bb78:	2800      	cmp	r0, #0
 808bb7a:	f43f af10 	beq.w	808b99e <_strtod_l+0x47e>
 808bb7e:	9b08      	ldr	r3, [sp, #32]
 808bb80:	300c      	adds	r0, #12
 808bb82:	691a      	ldr	r2, [r3, #16]
 808bb84:	f103 010c 	add.w	r1, r3, #12
 808bb88:	3202      	adds	r2, #2
 808bb8a:	0092      	lsls	r2, r2, #2
 808bb8c:	f7ff fbdf 	bl	808b34e <memcpy>
 808bb90:	ab1c      	add	r3, sp, #112	; 0x70
 808bb92:	9301      	str	r3, [sp, #4]
 808bb94:	ab1b      	add	r3, sp, #108	; 0x6c
 808bb96:	9300      	str	r3, [sp, #0]
 808bb98:	4642      	mov	r2, r8
 808bb9a:	464b      	mov	r3, r9
 808bb9c:	4650      	mov	r0, sl
 808bb9e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 808bba2:	f001 fb01 	bl	808d1a8 <__d2b>
 808bba6:	901a      	str	r0, [sp, #104]	; 0x68
 808bba8:	2800      	cmp	r0, #0
 808bbaa:	f43f aef8 	beq.w	808b99e <_strtod_l+0x47e>
 808bbae:	2101      	movs	r1, #1
 808bbb0:	4650      	mov	r0, sl
 808bbb2:	f001 f84f 	bl	808cc54 <__i2b>
 808bbb6:	4603      	mov	r3, r0
 808bbb8:	9004      	str	r0, [sp, #16]
 808bbba:	2800      	cmp	r0, #0
 808bbbc:	f43f aeef 	beq.w	808b99e <_strtod_l+0x47e>
 808bbc0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808bbc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808bbc4:	2d00      	cmp	r5, #0
 808bbc6:	bfab      	itete	ge
 808bbc8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808bbca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 808bbcc:	18ee      	addge	r6, r5, r3
 808bbce:	1b5c      	sublt	r4, r3, r5
 808bbd0:	9b05      	ldr	r3, [sp, #20]
 808bbd2:	bfa8      	it	ge
 808bbd4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 808bbd6:	eba5 0503 	sub.w	r5, r5, r3
 808bbda:	4415      	add	r5, r2
 808bbdc:	4b6e      	ldr	r3, [pc, #440]	; (808bd98 <_strtod_l+0x878>)
 808bbde:	f105 35ff 	add.w	r5, r5, #4294967295
 808bbe2:	bfb8      	it	lt
 808bbe4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808bbe6:	429d      	cmp	r5, r3
 808bbe8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808bbec:	f280 80c4 	bge.w	808bd78 <_strtod_l+0x858>
 808bbf0:	1b5b      	subs	r3, r3, r5
 808bbf2:	2b1f      	cmp	r3, #31
 808bbf4:	f04f 0701 	mov.w	r7, #1
 808bbf8:	eba2 0203 	sub.w	r2, r2, r3
 808bbfc:	f300 80b1 	bgt.w	808bd62 <_strtod_l+0x842>
 808bc00:	2500      	movs	r5, #0
 808bc02:	fa07 f303 	lsl.w	r3, r7, r3
 808bc06:	930f      	str	r3, [sp, #60]	; 0x3c
 808bc08:	18b7      	adds	r7, r6, r2
 808bc0a:	9b05      	ldr	r3, [sp, #20]
 808bc0c:	42be      	cmp	r6, r7
 808bc0e:	4414      	add	r4, r2
 808bc10:	441c      	add	r4, r3
 808bc12:	4633      	mov	r3, r6
 808bc14:	bfa8      	it	ge
 808bc16:	463b      	movge	r3, r7
 808bc18:	42a3      	cmp	r3, r4
 808bc1a:	bfa8      	it	ge
 808bc1c:	4623      	movge	r3, r4
 808bc1e:	2b00      	cmp	r3, #0
 808bc20:	bfc2      	ittt	gt
 808bc22:	1aff      	subgt	r7, r7, r3
 808bc24:	1ae4      	subgt	r4, r4, r3
 808bc26:	1af6      	subgt	r6, r6, r3
 808bc28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808bc2a:	2b00      	cmp	r3, #0
 808bc2c:	dd17      	ble.n	808bc5e <_strtod_l+0x73e>
 808bc2e:	461a      	mov	r2, r3
 808bc30:	4650      	mov	r0, sl
 808bc32:	9904      	ldr	r1, [sp, #16]
 808bc34:	f001 f8cc 	bl	808cdd0 <__pow5mult>
 808bc38:	9004      	str	r0, [sp, #16]
 808bc3a:	2800      	cmp	r0, #0
 808bc3c:	f43f aeaf 	beq.w	808b99e <_strtod_l+0x47e>
 808bc40:	4601      	mov	r1, r0
 808bc42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 808bc44:	4650      	mov	r0, sl
 808bc46:	f001 f81b 	bl	808cc80 <__multiply>
 808bc4a:	9009      	str	r0, [sp, #36]	; 0x24
 808bc4c:	2800      	cmp	r0, #0
 808bc4e:	f43f aea6 	beq.w	808b99e <_strtod_l+0x47e>
 808bc52:	4650      	mov	r0, sl
 808bc54:	991a      	ldr	r1, [sp, #104]	; 0x68
 808bc56:	f000 fefd 	bl	808ca54 <_Bfree>
 808bc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808bc5c:	931a      	str	r3, [sp, #104]	; 0x68
 808bc5e:	2f00      	cmp	r7, #0
 808bc60:	f300 808e 	bgt.w	808bd80 <_strtod_l+0x860>
 808bc64:	9b07      	ldr	r3, [sp, #28]
 808bc66:	2b00      	cmp	r3, #0
 808bc68:	dd08      	ble.n	808bc7c <_strtod_l+0x75c>
 808bc6a:	4650      	mov	r0, sl
 808bc6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bc6e:	9906      	ldr	r1, [sp, #24]
 808bc70:	f001 f8ae 	bl	808cdd0 <__pow5mult>
 808bc74:	9006      	str	r0, [sp, #24]
 808bc76:	2800      	cmp	r0, #0
 808bc78:	f43f ae91 	beq.w	808b99e <_strtod_l+0x47e>
 808bc7c:	2c00      	cmp	r4, #0
 808bc7e:	dd08      	ble.n	808bc92 <_strtod_l+0x772>
 808bc80:	4622      	mov	r2, r4
 808bc82:	4650      	mov	r0, sl
 808bc84:	9906      	ldr	r1, [sp, #24]
 808bc86:	f001 f8fd 	bl	808ce84 <__lshift>
 808bc8a:	9006      	str	r0, [sp, #24]
 808bc8c:	2800      	cmp	r0, #0
 808bc8e:	f43f ae86 	beq.w	808b99e <_strtod_l+0x47e>
 808bc92:	2e00      	cmp	r6, #0
 808bc94:	dd08      	ble.n	808bca8 <_strtod_l+0x788>
 808bc96:	4632      	mov	r2, r6
 808bc98:	4650      	mov	r0, sl
 808bc9a:	9904      	ldr	r1, [sp, #16]
 808bc9c:	f001 f8f2 	bl	808ce84 <__lshift>
 808bca0:	9004      	str	r0, [sp, #16]
 808bca2:	2800      	cmp	r0, #0
 808bca4:	f43f ae7b 	beq.w	808b99e <_strtod_l+0x47e>
 808bca8:	4650      	mov	r0, sl
 808bcaa:	9a06      	ldr	r2, [sp, #24]
 808bcac:	991a      	ldr	r1, [sp, #104]	; 0x68
 808bcae:	f001 f975 	bl	808cf9c <__mdiff>
 808bcb2:	4683      	mov	fp, r0
 808bcb4:	2800      	cmp	r0, #0
 808bcb6:	f43f ae72 	beq.w	808b99e <_strtod_l+0x47e>
 808bcba:	2400      	movs	r4, #0
 808bcbc:	68c3      	ldr	r3, [r0, #12]
 808bcbe:	9904      	ldr	r1, [sp, #16]
 808bcc0:	60c4      	str	r4, [r0, #12]
 808bcc2:	930b      	str	r3, [sp, #44]	; 0x2c
 808bcc4:	f001 f94e 	bl	808cf64 <__mcmp>
 808bcc8:	42a0      	cmp	r0, r4
 808bcca:	da6b      	bge.n	808bda4 <_strtod_l+0x884>
 808bccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808bcce:	ea53 0308 	orrs.w	r3, r3, r8
 808bcd2:	f040 8091 	bne.w	808bdf8 <_strtod_l+0x8d8>
 808bcd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808bcda:	2b00      	cmp	r3, #0
 808bcdc:	f040 808c 	bne.w	808bdf8 <_strtod_l+0x8d8>
 808bce0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808bce4:	0d1b      	lsrs	r3, r3, #20
 808bce6:	051b      	lsls	r3, r3, #20
 808bce8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808bcec:	f240 8084 	bls.w	808bdf8 <_strtod_l+0x8d8>
 808bcf0:	f8db 3014 	ldr.w	r3, [fp, #20]
 808bcf4:	b91b      	cbnz	r3, 808bcfe <_strtod_l+0x7de>
 808bcf6:	f8db 3010 	ldr.w	r3, [fp, #16]
 808bcfa:	2b01      	cmp	r3, #1
 808bcfc:	dd7c      	ble.n	808bdf8 <_strtod_l+0x8d8>
 808bcfe:	4659      	mov	r1, fp
 808bd00:	2201      	movs	r2, #1
 808bd02:	4650      	mov	r0, sl
 808bd04:	f001 f8be 	bl	808ce84 <__lshift>
 808bd08:	9904      	ldr	r1, [sp, #16]
 808bd0a:	4683      	mov	fp, r0
 808bd0c:	f001 f92a 	bl	808cf64 <__mcmp>
 808bd10:	2800      	cmp	r0, #0
 808bd12:	dd71      	ble.n	808bdf8 <_strtod_l+0x8d8>
 808bd14:	9905      	ldr	r1, [sp, #20]
 808bd16:	464b      	mov	r3, r9
 808bd18:	4a20      	ldr	r2, [pc, #128]	; (808bd9c <_strtod_l+0x87c>)
 808bd1a:	2900      	cmp	r1, #0
 808bd1c:	f000 808c 	beq.w	808be38 <_strtod_l+0x918>
 808bd20:	ea02 0109 	and.w	r1, r2, r9
 808bd24:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808bd28:	f300 8086 	bgt.w	808be38 <_strtod_l+0x918>
 808bd2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808bd30:	f77f aeaa 	ble.w	808ba88 <_strtod_l+0x568>
 808bd34:	4640      	mov	r0, r8
 808bd36:	4649      	mov	r1, r9
 808bd38:	4b19      	ldr	r3, [pc, #100]	; (808bda0 <_strtod_l+0x880>)
 808bd3a:	2200      	movs	r2, #0
 808bd3c:	f7fe fa5c 	bl	808a1f8 <__aeabi_dmul>
 808bd40:	460b      	mov	r3, r1
 808bd42:	4303      	orrs	r3, r0
 808bd44:	bf08      	it	eq
 808bd46:	2322      	moveq	r3, #34	; 0x22
 808bd48:	4680      	mov	r8, r0
 808bd4a:	4689      	mov	r9, r1
 808bd4c:	bf08      	it	eq
 808bd4e:	f8ca 3000 	streq.w	r3, [sl]
 808bd52:	e62f      	b.n	808b9b4 <_strtod_l+0x494>
 808bd54:	f04f 32ff 	mov.w	r2, #4294967295
 808bd58:	fa02 f303 	lsl.w	r3, r2, r3
 808bd5c:	ea03 0808 	and.w	r8, r3, r8
 808bd60:	e6e0      	b.n	808bb24 <_strtod_l+0x604>
 808bd62:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808bd66:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808bd6a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808bd6e:	35e2      	adds	r5, #226	; 0xe2
 808bd70:	fa07 f505 	lsl.w	r5, r7, r5
 808bd74:	970f      	str	r7, [sp, #60]	; 0x3c
 808bd76:	e747      	b.n	808bc08 <_strtod_l+0x6e8>
 808bd78:	2301      	movs	r3, #1
 808bd7a:	2500      	movs	r5, #0
 808bd7c:	930f      	str	r3, [sp, #60]	; 0x3c
 808bd7e:	e743      	b.n	808bc08 <_strtod_l+0x6e8>
 808bd80:	463a      	mov	r2, r7
 808bd82:	4650      	mov	r0, sl
 808bd84:	991a      	ldr	r1, [sp, #104]	; 0x68
 808bd86:	f001 f87d 	bl	808ce84 <__lshift>
 808bd8a:	901a      	str	r0, [sp, #104]	; 0x68
 808bd8c:	2800      	cmp	r0, #0
 808bd8e:	f47f af69 	bne.w	808bc64 <_strtod_l+0x744>
 808bd92:	e604      	b.n	808b99e <_strtod_l+0x47e>
 808bd94:	0808f4b0 	.word	0x0808f4b0
 808bd98:	fffffc02 	.word	0xfffffc02
 808bd9c:	7ff00000 	.word	0x7ff00000
 808bda0:	39500000 	.word	0x39500000
 808bda4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808bda8:	d165      	bne.n	808be76 <_strtod_l+0x956>
 808bdaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808bdac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808bdb0:	b35a      	cbz	r2, 808be0a <_strtod_l+0x8ea>
 808bdb2:	4a99      	ldr	r2, [pc, #612]	; (808c018 <_strtod_l+0xaf8>)
 808bdb4:	4293      	cmp	r3, r2
 808bdb6:	d12b      	bne.n	808be10 <_strtod_l+0x8f0>
 808bdb8:	9b05      	ldr	r3, [sp, #20]
 808bdba:	4641      	mov	r1, r8
 808bdbc:	b303      	cbz	r3, 808be00 <_strtod_l+0x8e0>
 808bdbe:	464a      	mov	r2, r9
 808bdc0:	4b96      	ldr	r3, [pc, #600]	; (808c01c <_strtod_l+0xafc>)
 808bdc2:	4013      	ands	r3, r2
 808bdc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 808bdcc:	d81b      	bhi.n	808be06 <_strtod_l+0x8e6>
 808bdce:	0d1b      	lsrs	r3, r3, #20
 808bdd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808bdd4:	fa02 f303 	lsl.w	r3, r2, r3
 808bdd8:	4299      	cmp	r1, r3
 808bdda:	d119      	bne.n	808be10 <_strtod_l+0x8f0>
 808bddc:	4b90      	ldr	r3, [pc, #576]	; (808c020 <_strtod_l+0xb00>)
 808bdde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bde0:	429a      	cmp	r2, r3
 808bde2:	d102      	bne.n	808bdea <_strtod_l+0x8ca>
 808bde4:	3101      	adds	r1, #1
 808bde6:	f43f adda 	beq.w	808b99e <_strtod_l+0x47e>
 808bdea:	f04f 0800 	mov.w	r8, #0
 808bdee:	4b8b      	ldr	r3, [pc, #556]	; (808c01c <_strtod_l+0xafc>)
 808bdf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bdf2:	401a      	ands	r2, r3
 808bdf4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808bdf8:	9b05      	ldr	r3, [sp, #20]
 808bdfa:	2b00      	cmp	r3, #0
 808bdfc:	d19a      	bne.n	808bd34 <_strtod_l+0x814>
 808bdfe:	e5d9      	b.n	808b9b4 <_strtod_l+0x494>
 808be00:	f04f 33ff 	mov.w	r3, #4294967295
 808be04:	e7e8      	b.n	808bdd8 <_strtod_l+0x8b8>
 808be06:	4613      	mov	r3, r2
 808be08:	e7e6      	b.n	808bdd8 <_strtod_l+0x8b8>
 808be0a:	ea53 0308 	orrs.w	r3, r3, r8
 808be0e:	d081      	beq.n	808bd14 <_strtod_l+0x7f4>
 808be10:	b1e5      	cbz	r5, 808be4c <_strtod_l+0x92c>
 808be12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808be14:	421d      	tst	r5, r3
 808be16:	d0ef      	beq.n	808bdf8 <_strtod_l+0x8d8>
 808be18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808be1a:	4640      	mov	r0, r8
 808be1c:	4649      	mov	r1, r9
 808be1e:	9a05      	ldr	r2, [sp, #20]
 808be20:	b1c3      	cbz	r3, 808be54 <_strtod_l+0x934>
 808be22:	f7ff fb59 	bl	808b4d8 <sulp>
 808be26:	4602      	mov	r2, r0
 808be28:	460b      	mov	r3, r1
 808be2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808be2e:	f7fe f82d 	bl	8089e8c <__adddf3>
 808be32:	4680      	mov	r8, r0
 808be34:	4689      	mov	r9, r1
 808be36:	e7df      	b.n	808bdf8 <_strtod_l+0x8d8>
 808be38:	4013      	ands	r3, r2
 808be3a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808be3e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808be42:	f04f 38ff 	mov.w	r8, #4294967295
 808be46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808be4a:	e7d5      	b.n	808bdf8 <_strtod_l+0x8d8>
 808be4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808be4e:	ea13 0f08 	tst.w	r3, r8
 808be52:	e7e0      	b.n	808be16 <_strtod_l+0x8f6>
 808be54:	f7ff fb40 	bl	808b4d8 <sulp>
 808be58:	4602      	mov	r2, r0
 808be5a:	460b      	mov	r3, r1
 808be5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808be60:	f7fe f812 	bl	8089e88 <__aeabi_dsub>
 808be64:	2200      	movs	r2, #0
 808be66:	2300      	movs	r3, #0
 808be68:	4680      	mov	r8, r0
 808be6a:	4689      	mov	r9, r1
 808be6c:	f7fe fc2c 	bl	808a6c8 <__aeabi_dcmpeq>
 808be70:	2800      	cmp	r0, #0
 808be72:	d0c1      	beq.n	808bdf8 <_strtod_l+0x8d8>
 808be74:	e608      	b.n	808ba88 <_strtod_l+0x568>
 808be76:	4658      	mov	r0, fp
 808be78:	9904      	ldr	r1, [sp, #16]
 808be7a:	f001 f9f1 	bl	808d260 <__ratio>
 808be7e:	2200      	movs	r2, #0
 808be80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808be84:	4606      	mov	r6, r0
 808be86:	460f      	mov	r7, r1
 808be88:	f7fe fc32 	bl	808a6f0 <__aeabi_dcmple>
 808be8c:	2800      	cmp	r0, #0
 808be8e:	d070      	beq.n	808bf72 <_strtod_l+0xa52>
 808be90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808be92:	2b00      	cmp	r3, #0
 808be94:	d042      	beq.n	808bf1c <_strtod_l+0x9fc>
 808be96:	2600      	movs	r6, #0
 808be98:	4f62      	ldr	r7, [pc, #392]	; (808c024 <_strtod_l+0xb04>)
 808be9a:	4d62      	ldr	r5, [pc, #392]	; (808c024 <_strtod_l+0xb04>)
 808be9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808be9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808bea2:	0d1b      	lsrs	r3, r3, #20
 808bea4:	051b      	lsls	r3, r3, #20
 808bea6:	930f      	str	r3, [sp, #60]	; 0x3c
 808bea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808beaa:	4b5f      	ldr	r3, [pc, #380]	; (808c028 <_strtod_l+0xb08>)
 808beac:	429a      	cmp	r2, r3
 808beae:	f040 80c3 	bne.w	808c038 <_strtod_l+0xb18>
 808beb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808beb4:	4640      	mov	r0, r8
 808beb6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808beba:	4649      	mov	r1, r9
 808bebc:	f001 f8fa 	bl	808d0b4 <__ulp>
 808bec0:	4602      	mov	r2, r0
 808bec2:	460b      	mov	r3, r1
 808bec4:	4630      	mov	r0, r6
 808bec6:	4639      	mov	r1, r7
 808bec8:	f7fe f996 	bl	808a1f8 <__aeabi_dmul>
 808becc:	4642      	mov	r2, r8
 808bece:	464b      	mov	r3, r9
 808bed0:	f7fd ffdc 	bl	8089e8c <__adddf3>
 808bed4:	460b      	mov	r3, r1
 808bed6:	4951      	ldr	r1, [pc, #324]	; (808c01c <_strtod_l+0xafc>)
 808bed8:	4a54      	ldr	r2, [pc, #336]	; (808c02c <_strtod_l+0xb0c>)
 808beda:	4019      	ands	r1, r3
 808bedc:	4291      	cmp	r1, r2
 808bede:	4680      	mov	r8, r0
 808bee0:	d95d      	bls.n	808bf9e <_strtod_l+0xa7e>
 808bee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808bee4:	4b4e      	ldr	r3, [pc, #312]	; (808c020 <_strtod_l+0xb00>)
 808bee6:	429a      	cmp	r2, r3
 808bee8:	d103      	bne.n	808bef2 <_strtod_l+0x9d2>
 808beea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808beec:	3301      	adds	r3, #1
 808beee:	f43f ad56 	beq.w	808b99e <_strtod_l+0x47e>
 808bef2:	f04f 38ff 	mov.w	r8, #4294967295
 808bef6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808c020 <_strtod_l+0xb00>
 808befa:	4650      	mov	r0, sl
 808befc:	991a      	ldr	r1, [sp, #104]	; 0x68
 808befe:	f000 fda9 	bl	808ca54 <_Bfree>
 808bf02:	4650      	mov	r0, sl
 808bf04:	9906      	ldr	r1, [sp, #24]
 808bf06:	f000 fda5 	bl	808ca54 <_Bfree>
 808bf0a:	4650      	mov	r0, sl
 808bf0c:	9904      	ldr	r1, [sp, #16]
 808bf0e:	f000 fda1 	bl	808ca54 <_Bfree>
 808bf12:	4659      	mov	r1, fp
 808bf14:	4650      	mov	r0, sl
 808bf16:	f000 fd9d 	bl	808ca54 <_Bfree>
 808bf1a:	e627      	b.n	808bb6c <_strtod_l+0x64c>
 808bf1c:	f1b8 0f00 	cmp.w	r8, #0
 808bf20:	d119      	bne.n	808bf56 <_strtod_l+0xa36>
 808bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808bf24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808bf28:	b9e3      	cbnz	r3, 808bf64 <_strtod_l+0xa44>
 808bf2a:	2200      	movs	r2, #0
 808bf2c:	4630      	mov	r0, r6
 808bf2e:	4639      	mov	r1, r7
 808bf30:	4b3c      	ldr	r3, [pc, #240]	; (808c024 <_strtod_l+0xb04>)
 808bf32:	f7fe fbd3 	bl	808a6dc <__aeabi_dcmplt>
 808bf36:	b9c8      	cbnz	r0, 808bf6c <_strtod_l+0xa4c>
 808bf38:	2200      	movs	r2, #0
 808bf3a:	4630      	mov	r0, r6
 808bf3c:	4639      	mov	r1, r7
 808bf3e:	4b3c      	ldr	r3, [pc, #240]	; (808c030 <_strtod_l+0xb10>)
 808bf40:	f7fe f95a 	bl	808a1f8 <__aeabi_dmul>
 808bf44:	4604      	mov	r4, r0
 808bf46:	460d      	mov	r5, r1
 808bf48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808bf4c:	9416      	str	r4, [sp, #88]	; 0x58
 808bf4e:	9317      	str	r3, [sp, #92]	; 0x5c
 808bf50:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 808bf54:	e7a2      	b.n	808be9c <_strtod_l+0x97c>
 808bf56:	f1b8 0f01 	cmp.w	r8, #1
 808bf5a:	d103      	bne.n	808bf64 <_strtod_l+0xa44>
 808bf5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808bf5e:	2b00      	cmp	r3, #0
 808bf60:	f43f ad92 	beq.w	808ba88 <_strtod_l+0x568>
 808bf64:	2600      	movs	r6, #0
 808bf66:	2400      	movs	r4, #0
 808bf68:	4f32      	ldr	r7, [pc, #200]	; (808c034 <_strtod_l+0xb14>)
 808bf6a:	e796      	b.n	808be9a <_strtod_l+0x97a>
 808bf6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808bf6e:	4d30      	ldr	r5, [pc, #192]	; (808c030 <_strtod_l+0xb10>)
 808bf70:	e7ea      	b.n	808bf48 <_strtod_l+0xa28>
 808bf72:	4b2f      	ldr	r3, [pc, #188]	; (808c030 <_strtod_l+0xb10>)
 808bf74:	2200      	movs	r2, #0
 808bf76:	4630      	mov	r0, r6
 808bf78:	4639      	mov	r1, r7
 808bf7a:	f7fe f93d 	bl	808a1f8 <__aeabi_dmul>
 808bf7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808bf80:	4604      	mov	r4, r0
 808bf82:	460d      	mov	r5, r1
 808bf84:	b933      	cbnz	r3, 808bf94 <_strtod_l+0xa74>
 808bf86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808bf8a:	9010      	str	r0, [sp, #64]	; 0x40
 808bf8c:	9311      	str	r3, [sp, #68]	; 0x44
 808bf8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808bf92:	e783      	b.n	808be9c <_strtod_l+0x97c>
 808bf94:	4602      	mov	r2, r0
 808bf96:	460b      	mov	r3, r1
 808bf98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808bf9c:	e7f7      	b.n	808bf8e <_strtod_l+0xa6e>
 808bf9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808bfa2:	9b05      	ldr	r3, [sp, #20]
 808bfa4:	2b00      	cmp	r3, #0
 808bfa6:	d1a8      	bne.n	808befa <_strtod_l+0x9da>
 808bfa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808bfac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808bfae:	0d1b      	lsrs	r3, r3, #20
 808bfb0:	051b      	lsls	r3, r3, #20
 808bfb2:	429a      	cmp	r2, r3
 808bfb4:	d1a1      	bne.n	808befa <_strtod_l+0x9da>
 808bfb6:	4620      	mov	r0, r4
 808bfb8:	4629      	mov	r1, r5
 808bfba:	f001 f9df 	bl	808d37c <__aeabi_d2lz>
 808bfbe:	f7fe f8ed 	bl	808a19c <__aeabi_l2d>
 808bfc2:	4602      	mov	r2, r0
 808bfc4:	460b      	mov	r3, r1
 808bfc6:	4620      	mov	r0, r4
 808bfc8:	4629      	mov	r1, r5
 808bfca:	f7fd ff5d 	bl	8089e88 <__aeabi_dsub>
 808bfce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808bfd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808bfd4:	ea43 0308 	orr.w	r3, r3, r8
 808bfd8:	4313      	orrs	r3, r2
 808bfda:	4604      	mov	r4, r0
 808bfdc:	460d      	mov	r5, r1
 808bfde:	d066      	beq.n	808c0ae <_strtod_l+0xb8e>
 808bfe0:	a309      	add	r3, pc, #36	; (adr r3, 808c008 <_strtod_l+0xae8>)
 808bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bfe6:	f7fe fb79 	bl	808a6dc <__aeabi_dcmplt>
 808bfea:	2800      	cmp	r0, #0
 808bfec:	f47f ace2 	bne.w	808b9b4 <_strtod_l+0x494>
 808bff0:	a307      	add	r3, pc, #28	; (adr r3, 808c010 <_strtod_l+0xaf0>)
 808bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bff6:	4620      	mov	r0, r4
 808bff8:	4629      	mov	r1, r5
 808bffa:	f7fe fb8d 	bl	808a718 <__aeabi_dcmpgt>
 808bffe:	2800      	cmp	r0, #0
 808c000:	f43f af7b 	beq.w	808befa <_strtod_l+0x9da>
 808c004:	e4d6      	b.n	808b9b4 <_strtod_l+0x494>
 808c006:	bf00      	nop
 808c008:	94a03595 	.word	0x94a03595
 808c00c:	3fdfffff 	.word	0x3fdfffff
 808c010:	35afe535 	.word	0x35afe535
 808c014:	3fe00000 	.word	0x3fe00000
 808c018:	000fffff 	.word	0x000fffff
 808c01c:	7ff00000 	.word	0x7ff00000
 808c020:	7fefffff 	.word	0x7fefffff
 808c024:	3ff00000 	.word	0x3ff00000
 808c028:	7fe00000 	.word	0x7fe00000
 808c02c:	7c9fffff 	.word	0x7c9fffff
 808c030:	3fe00000 	.word	0x3fe00000
 808c034:	bff00000 	.word	0xbff00000
 808c038:	9b05      	ldr	r3, [sp, #20]
 808c03a:	b313      	cbz	r3, 808c082 <_strtod_l+0xb62>
 808c03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808c03e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c042:	d81e      	bhi.n	808c082 <_strtod_l+0xb62>
 808c044:	a326      	add	r3, pc, #152	; (adr r3, 808c0e0 <_strtod_l+0xbc0>)
 808c046:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c04a:	4620      	mov	r0, r4
 808c04c:	4629      	mov	r1, r5
 808c04e:	f7fe fb4f 	bl	808a6f0 <__aeabi_dcmple>
 808c052:	b190      	cbz	r0, 808c07a <_strtod_l+0xb5a>
 808c054:	4629      	mov	r1, r5
 808c056:	4620      	mov	r0, r4
 808c058:	f7fe fba6 	bl	808a7a8 <__aeabi_d2uiz>
 808c05c:	2801      	cmp	r0, #1
 808c05e:	bf38      	it	cc
 808c060:	2001      	movcc	r0, #1
 808c062:	f7fe f84f 	bl	808a104 <__aeabi_ui2d>
 808c066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808c068:	4604      	mov	r4, r0
 808c06a:	460d      	mov	r5, r1
 808c06c:	b9d3      	cbnz	r3, 808c0a4 <_strtod_l+0xb84>
 808c06e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c072:	9012      	str	r0, [sp, #72]	; 0x48
 808c074:	9313      	str	r3, [sp, #76]	; 0x4c
 808c076:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808c07a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808c07c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808c080:	1a9f      	subs	r7, r3, r2
 808c082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808c086:	f001 f815 	bl	808d0b4 <__ulp>
 808c08a:	4602      	mov	r2, r0
 808c08c:	460b      	mov	r3, r1
 808c08e:	4630      	mov	r0, r6
 808c090:	4639      	mov	r1, r7
 808c092:	f7fe f8b1 	bl	808a1f8 <__aeabi_dmul>
 808c096:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 808c09a:	f7fd fef7 	bl	8089e8c <__adddf3>
 808c09e:	4680      	mov	r8, r0
 808c0a0:	4689      	mov	r9, r1
 808c0a2:	e77e      	b.n	808bfa2 <_strtod_l+0xa82>
 808c0a4:	4602      	mov	r2, r0
 808c0a6:	460b      	mov	r3, r1
 808c0a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808c0ac:	e7e3      	b.n	808c076 <_strtod_l+0xb56>
 808c0ae:	a30e      	add	r3, pc, #56	; (adr r3, 808c0e8 <_strtod_l+0xbc8>)
 808c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c0b4:	f7fe fb12 	bl	808a6dc <__aeabi_dcmplt>
 808c0b8:	e7a1      	b.n	808bffe <_strtod_l+0xade>
 808c0ba:	2300      	movs	r3, #0
 808c0bc:	930a      	str	r3, [sp, #40]	; 0x28
 808c0be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c0c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 808c0c2:	6013      	str	r3, [r2, #0]
 808c0c4:	f7ff ba71 	b.w	808b5aa <_strtod_l+0x8a>
 808c0c8:	2a65      	cmp	r2, #101	; 0x65
 808c0ca:	f43f ab63 	beq.w	808b794 <_strtod_l+0x274>
 808c0ce:	2a45      	cmp	r2, #69	; 0x45
 808c0d0:	f43f ab60 	beq.w	808b794 <_strtod_l+0x274>
 808c0d4:	2301      	movs	r3, #1
 808c0d6:	f7ff bb95 	b.w	808b804 <_strtod_l+0x2e4>
 808c0da:	bf00      	nop
 808c0dc:	f3af 8000 	nop.w
 808c0e0:	ffc00000 	.word	0xffc00000
 808c0e4:	41dfffff 	.word	0x41dfffff
 808c0e8:	94a03595 	.word	0x94a03595
 808c0ec:	3fcfffff 	.word	0x3fcfffff

0808c0f0 <strtod>:
 808c0f0:	460a      	mov	r2, r1
 808c0f2:	4601      	mov	r1, r0
 808c0f4:	4802      	ldr	r0, [pc, #8]	; (808c100 <strtod+0x10>)
 808c0f6:	4b03      	ldr	r3, [pc, #12]	; (808c104 <strtod+0x14>)
 808c0f8:	6800      	ldr	r0, [r0, #0]
 808c0fa:	f7ff ba11 	b.w	808b520 <_strtod_l>
 808c0fe:	bf00      	nop
 808c100:	200000d8 	.word	0x200000d8
 808c104:	20000144 	.word	0x20000144

0808c108 <_strtol_l.constprop.0>:
 808c108:	2b01      	cmp	r3, #1
 808c10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c10e:	4680      	mov	r8, r0
 808c110:	d001      	beq.n	808c116 <_strtol_l.constprop.0+0xe>
 808c112:	2b24      	cmp	r3, #36	; 0x24
 808c114:	d906      	bls.n	808c124 <_strtol_l.constprop.0+0x1c>
 808c116:	f7fb fd9f 	bl	8087c58 <__errno>
 808c11a:	2316      	movs	r3, #22
 808c11c:	6003      	str	r3, [r0, #0]
 808c11e:	2000      	movs	r0, #0
 808c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c124:	460d      	mov	r5, r1
 808c126:	4f35      	ldr	r7, [pc, #212]	; (808c1fc <_strtol_l.constprop.0+0xf4>)
 808c128:	4628      	mov	r0, r5
 808c12a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c12e:	5de6      	ldrb	r6, [r4, r7]
 808c130:	f016 0608 	ands.w	r6, r6, #8
 808c134:	d1f8      	bne.n	808c128 <_strtol_l.constprop.0+0x20>
 808c136:	2c2d      	cmp	r4, #45	; 0x2d
 808c138:	d12f      	bne.n	808c19a <_strtol_l.constprop.0+0x92>
 808c13a:	2601      	movs	r6, #1
 808c13c:	782c      	ldrb	r4, [r5, #0]
 808c13e:	1c85      	adds	r5, r0, #2
 808c140:	2b00      	cmp	r3, #0
 808c142:	d057      	beq.n	808c1f4 <_strtol_l.constprop.0+0xec>
 808c144:	2b10      	cmp	r3, #16
 808c146:	d109      	bne.n	808c15c <_strtol_l.constprop.0+0x54>
 808c148:	2c30      	cmp	r4, #48	; 0x30
 808c14a:	d107      	bne.n	808c15c <_strtol_l.constprop.0+0x54>
 808c14c:	7828      	ldrb	r0, [r5, #0]
 808c14e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808c152:	2858      	cmp	r0, #88	; 0x58
 808c154:	d149      	bne.n	808c1ea <_strtol_l.constprop.0+0xe2>
 808c156:	2310      	movs	r3, #16
 808c158:	786c      	ldrb	r4, [r5, #1]
 808c15a:	3502      	adds	r5, #2
 808c15c:	2700      	movs	r7, #0
 808c15e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 808c162:	f10e 3eff 	add.w	lr, lr, #4294967295
 808c166:	fbbe f9f3 	udiv	r9, lr, r3
 808c16a:	4638      	mov	r0, r7
 808c16c:	fb03 ea19 	mls	sl, r3, r9, lr
 808c170:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 808c174:	f1bc 0f09 	cmp.w	ip, #9
 808c178:	d814      	bhi.n	808c1a4 <_strtol_l.constprop.0+0x9c>
 808c17a:	4664      	mov	r4, ip
 808c17c:	42a3      	cmp	r3, r4
 808c17e:	dd22      	ble.n	808c1c6 <_strtol_l.constprop.0+0xbe>
 808c180:	2f00      	cmp	r7, #0
 808c182:	db1d      	blt.n	808c1c0 <_strtol_l.constprop.0+0xb8>
 808c184:	4581      	cmp	r9, r0
 808c186:	d31b      	bcc.n	808c1c0 <_strtol_l.constprop.0+0xb8>
 808c188:	d101      	bne.n	808c18e <_strtol_l.constprop.0+0x86>
 808c18a:	45a2      	cmp	sl, r4
 808c18c:	db18      	blt.n	808c1c0 <_strtol_l.constprop.0+0xb8>
 808c18e:	2701      	movs	r7, #1
 808c190:	fb00 4003 	mla	r0, r0, r3, r4
 808c194:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c198:	e7ea      	b.n	808c170 <_strtol_l.constprop.0+0x68>
 808c19a:	2c2b      	cmp	r4, #43	; 0x2b
 808c19c:	bf04      	itt	eq
 808c19e:	782c      	ldrbeq	r4, [r5, #0]
 808c1a0:	1c85      	addeq	r5, r0, #2
 808c1a2:	e7cd      	b.n	808c140 <_strtol_l.constprop.0+0x38>
 808c1a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 808c1a8:	f1bc 0f19 	cmp.w	ip, #25
 808c1ac:	d801      	bhi.n	808c1b2 <_strtol_l.constprop.0+0xaa>
 808c1ae:	3c37      	subs	r4, #55	; 0x37
 808c1b0:	e7e4      	b.n	808c17c <_strtol_l.constprop.0+0x74>
 808c1b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 808c1b6:	f1bc 0f19 	cmp.w	ip, #25
 808c1ba:	d804      	bhi.n	808c1c6 <_strtol_l.constprop.0+0xbe>
 808c1bc:	3c57      	subs	r4, #87	; 0x57
 808c1be:	e7dd      	b.n	808c17c <_strtol_l.constprop.0+0x74>
 808c1c0:	f04f 37ff 	mov.w	r7, #4294967295
 808c1c4:	e7e6      	b.n	808c194 <_strtol_l.constprop.0+0x8c>
 808c1c6:	2f00      	cmp	r7, #0
 808c1c8:	da07      	bge.n	808c1da <_strtol_l.constprop.0+0xd2>
 808c1ca:	2322      	movs	r3, #34	; 0x22
 808c1cc:	4670      	mov	r0, lr
 808c1ce:	f8c8 3000 	str.w	r3, [r8]
 808c1d2:	2a00      	cmp	r2, #0
 808c1d4:	d0a4      	beq.n	808c120 <_strtol_l.constprop.0+0x18>
 808c1d6:	1e69      	subs	r1, r5, #1
 808c1d8:	e005      	b.n	808c1e6 <_strtol_l.constprop.0+0xde>
 808c1da:	b106      	cbz	r6, 808c1de <_strtol_l.constprop.0+0xd6>
 808c1dc:	4240      	negs	r0, r0
 808c1de:	2a00      	cmp	r2, #0
 808c1e0:	d09e      	beq.n	808c120 <_strtol_l.constprop.0+0x18>
 808c1e2:	2f00      	cmp	r7, #0
 808c1e4:	d1f7      	bne.n	808c1d6 <_strtol_l.constprop.0+0xce>
 808c1e6:	6011      	str	r1, [r2, #0]
 808c1e8:	e79a      	b.n	808c120 <_strtol_l.constprop.0+0x18>
 808c1ea:	2430      	movs	r4, #48	; 0x30
 808c1ec:	2b00      	cmp	r3, #0
 808c1ee:	d1b5      	bne.n	808c15c <_strtol_l.constprop.0+0x54>
 808c1f0:	2308      	movs	r3, #8
 808c1f2:	e7b3      	b.n	808c15c <_strtol_l.constprop.0+0x54>
 808c1f4:	2c30      	cmp	r4, #48	; 0x30
 808c1f6:	d0a9      	beq.n	808c14c <_strtol_l.constprop.0+0x44>
 808c1f8:	230a      	movs	r3, #10
 808c1fa:	e7af      	b.n	808c15c <_strtol_l.constprop.0+0x54>
 808c1fc:	0808f4d9 	.word	0x0808f4d9

0808c200 <strtol>:
 808c200:	4613      	mov	r3, r2
 808c202:	460a      	mov	r2, r1
 808c204:	4601      	mov	r1, r0
 808c206:	4802      	ldr	r0, [pc, #8]	; (808c210 <strtol+0x10>)
 808c208:	6800      	ldr	r0, [r0, #0]
 808c20a:	f7ff bf7d 	b.w	808c108 <_strtol_l.constprop.0>
 808c20e:	bf00      	nop
 808c210:	200000d8 	.word	0x200000d8

0808c214 <__register_exitproc>:
 808c214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c218:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 808c2c8 <__register_exitproc+0xb4>
 808c21c:	4606      	mov	r6, r0
 808c21e:	f8d8 0000 	ldr.w	r0, [r8]
 808c222:	461f      	mov	r7, r3
 808c224:	460d      	mov	r5, r1
 808c226:	4691      	mov	r9, r2
 808c228:	f000 fbbe 	bl	808c9a8 <__retarget_lock_acquire_recursive>
 808c22c:	4b27      	ldr	r3, [pc, #156]	; (808c2cc <__register_exitproc+0xb8>)
 808c22e:	681c      	ldr	r4, [r3, #0]
 808c230:	b934      	cbnz	r4, 808c240 <__register_exitproc+0x2c>
 808c232:	4c27      	ldr	r4, [pc, #156]	; (808c2d0 <__register_exitproc+0xbc>)
 808c234:	601c      	str	r4, [r3, #0]
 808c236:	4b27      	ldr	r3, [pc, #156]	; (808c2d4 <__register_exitproc+0xc0>)
 808c238:	b113      	cbz	r3, 808c240 <__register_exitproc+0x2c>
 808c23a:	681b      	ldr	r3, [r3, #0]
 808c23c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 808c240:	6863      	ldr	r3, [r4, #4]
 808c242:	2b1f      	cmp	r3, #31
 808c244:	dd07      	ble.n	808c256 <__register_exitproc+0x42>
 808c246:	f8d8 0000 	ldr.w	r0, [r8]
 808c24a:	f000 fbaf 	bl	808c9ac <__retarget_lock_release_recursive>
 808c24e:	f04f 30ff 	mov.w	r0, #4294967295
 808c252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c256:	b35e      	cbz	r6, 808c2b0 <__register_exitproc+0x9c>
 808c258:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 808c25c:	b988      	cbnz	r0, 808c282 <__register_exitproc+0x6e>
 808c25e:	4b1e      	ldr	r3, [pc, #120]	; (808c2d8 <__register_exitproc+0xc4>)
 808c260:	b923      	cbnz	r3, 808c26c <__register_exitproc+0x58>
 808c262:	f8d8 0000 	ldr.w	r0, [r8]
 808c266:	f000 fba0 	bl	808c9aa <__retarget_lock_release>
 808c26a:	e7f0      	b.n	808c24e <__register_exitproc+0x3a>
 808c26c:	f44f 7084 	mov.w	r0, #264	; 0x108
 808c270:	f7fb fcaa 	bl	8087bc8 <malloc>
 808c274:	2800      	cmp	r0, #0
 808c276:	d0f4      	beq.n	808c262 <__register_exitproc+0x4e>
 808c278:	2300      	movs	r3, #0
 808c27a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 808c27e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 808c282:	2201      	movs	r2, #1
 808c284:	6863      	ldr	r3, [r4, #4]
 808c286:	2e02      	cmp	r6, #2
 808c288:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 808c28c:	fa02 f203 	lsl.w	r2, r2, r3
 808c290:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 808c294:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 808c298:	ea43 0302 	orr.w	r3, r3, r2
 808c29c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 808c2a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 808c2a4:	bf02      	ittt	eq
 808c2a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 808c2aa:	4313      	orreq	r3, r2
 808c2ac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 808c2b0:	6863      	ldr	r3, [r4, #4]
 808c2b2:	f8d8 0000 	ldr.w	r0, [r8]
 808c2b6:	1c5a      	adds	r2, r3, #1
 808c2b8:	3302      	adds	r3, #2
 808c2ba:	6062      	str	r2, [r4, #4]
 808c2bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 808c2c0:	f000 fb74 	bl	808c9ac <__retarget_lock_release_recursive>
 808c2c4:	2000      	movs	r0, #0
 808c2c6:	e7c4      	b.n	808c252 <__register_exitproc+0x3e>
 808c2c8:	2000013c 	.word	0x2000013c
 808c2cc:	20000c50 	.word	0x20000c50
 808c2d0:	20000bc4 	.word	0x20000bc4
 808c2d4:	00000000 	.word	0x00000000
 808c2d8:	08087bc9 	.word	0x08087bc9

0808c2dc <rshift>:
 808c2dc:	6903      	ldr	r3, [r0, #16]
 808c2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808c2e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808c2e6:	f100 0414 	add.w	r4, r0, #20
 808c2ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 808c2ee:	dd46      	ble.n	808c37e <rshift+0xa2>
 808c2f0:	f011 011f 	ands.w	r1, r1, #31
 808c2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808c2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808c2fc:	d10c      	bne.n	808c318 <rshift+0x3c>
 808c2fe:	4629      	mov	r1, r5
 808c300:	f100 0710 	add.w	r7, r0, #16
 808c304:	42b1      	cmp	r1, r6
 808c306:	d335      	bcc.n	808c374 <rshift+0x98>
 808c308:	1a9b      	subs	r3, r3, r2
 808c30a:	009b      	lsls	r3, r3, #2
 808c30c:	1eea      	subs	r2, r5, #3
 808c30e:	4296      	cmp	r6, r2
 808c310:	bf38      	it	cc
 808c312:	2300      	movcc	r3, #0
 808c314:	4423      	add	r3, r4
 808c316:	e015      	b.n	808c344 <rshift+0x68>
 808c318:	46a1      	mov	r9, r4
 808c31a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808c31e:	f1c1 0820 	rsb	r8, r1, #32
 808c322:	40cf      	lsrs	r7, r1
 808c324:	f105 0e04 	add.w	lr, r5, #4
 808c328:	4576      	cmp	r6, lr
 808c32a:	46f4      	mov	ip, lr
 808c32c:	d816      	bhi.n	808c35c <rshift+0x80>
 808c32e:	1a9a      	subs	r2, r3, r2
 808c330:	0092      	lsls	r2, r2, #2
 808c332:	3a04      	subs	r2, #4
 808c334:	3501      	adds	r5, #1
 808c336:	42ae      	cmp	r6, r5
 808c338:	bf38      	it	cc
 808c33a:	2200      	movcc	r2, #0
 808c33c:	18a3      	adds	r3, r4, r2
 808c33e:	50a7      	str	r7, [r4, r2]
 808c340:	b107      	cbz	r7, 808c344 <rshift+0x68>
 808c342:	3304      	adds	r3, #4
 808c344:	42a3      	cmp	r3, r4
 808c346:	eba3 0204 	sub.w	r2, r3, r4
 808c34a:	bf08      	it	eq
 808c34c:	2300      	moveq	r3, #0
 808c34e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808c352:	6102      	str	r2, [r0, #16]
 808c354:	bf08      	it	eq
 808c356:	6143      	streq	r3, [r0, #20]
 808c358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808c35c:	f8dc c000 	ldr.w	ip, [ip]
 808c360:	fa0c fc08 	lsl.w	ip, ip, r8
 808c364:	ea4c 0707 	orr.w	r7, ip, r7
 808c368:	f849 7b04 	str.w	r7, [r9], #4
 808c36c:	f85e 7b04 	ldr.w	r7, [lr], #4
 808c370:	40cf      	lsrs	r7, r1
 808c372:	e7d9      	b.n	808c328 <rshift+0x4c>
 808c374:	f851 cb04 	ldr.w	ip, [r1], #4
 808c378:	f847 cf04 	str.w	ip, [r7, #4]!
 808c37c:	e7c2      	b.n	808c304 <rshift+0x28>
 808c37e:	4623      	mov	r3, r4
 808c380:	e7e0      	b.n	808c344 <rshift+0x68>

0808c382 <__hexdig_fun>:
 808c382:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808c386:	2b09      	cmp	r3, #9
 808c388:	d802      	bhi.n	808c390 <__hexdig_fun+0xe>
 808c38a:	3820      	subs	r0, #32
 808c38c:	b2c0      	uxtb	r0, r0
 808c38e:	4770      	bx	lr
 808c390:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808c394:	2b05      	cmp	r3, #5
 808c396:	d801      	bhi.n	808c39c <__hexdig_fun+0x1a>
 808c398:	3847      	subs	r0, #71	; 0x47
 808c39a:	e7f7      	b.n	808c38c <__hexdig_fun+0xa>
 808c39c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808c3a0:	2b05      	cmp	r3, #5
 808c3a2:	d801      	bhi.n	808c3a8 <__hexdig_fun+0x26>
 808c3a4:	3827      	subs	r0, #39	; 0x27
 808c3a6:	e7f1      	b.n	808c38c <__hexdig_fun+0xa>
 808c3a8:	2000      	movs	r0, #0
 808c3aa:	4770      	bx	lr

0808c3ac <__gethex>:
 808c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c3b0:	b08b      	sub	sp, #44	; 0x2c
 808c3b2:	9305      	str	r3, [sp, #20]
 808c3b4:	4bb2      	ldr	r3, [pc, #712]	; (808c680 <__gethex+0x2d4>)
 808c3b6:	9002      	str	r0, [sp, #8]
 808c3b8:	681b      	ldr	r3, [r3, #0]
 808c3ba:	468b      	mov	fp, r1
 808c3bc:	4618      	mov	r0, r3
 808c3be:	4690      	mov	r8, r2
 808c3c0:	9303      	str	r3, [sp, #12]
 808c3c2:	f7ff f844 	bl	808b44e <strlen>
 808c3c6:	4682      	mov	sl, r0
 808c3c8:	9b03      	ldr	r3, [sp, #12]
 808c3ca:	f8db 2000 	ldr.w	r2, [fp]
 808c3ce:	4403      	add	r3, r0
 808c3d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808c3d4:	9306      	str	r3, [sp, #24]
 808c3d6:	1c93      	adds	r3, r2, #2
 808c3d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808c3dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808c3e0:	32fe      	adds	r2, #254	; 0xfe
 808c3e2:	18d1      	adds	r1, r2, r3
 808c3e4:	461f      	mov	r7, r3
 808c3e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 808c3ea:	9101      	str	r1, [sp, #4]
 808c3ec:	2830      	cmp	r0, #48	; 0x30
 808c3ee:	d0f8      	beq.n	808c3e2 <__gethex+0x36>
 808c3f0:	f7ff ffc7 	bl	808c382 <__hexdig_fun>
 808c3f4:	4604      	mov	r4, r0
 808c3f6:	2800      	cmp	r0, #0
 808c3f8:	d13a      	bne.n	808c470 <__gethex+0xc4>
 808c3fa:	4652      	mov	r2, sl
 808c3fc:	4638      	mov	r0, r7
 808c3fe:	9903      	ldr	r1, [sp, #12]
 808c400:	f7ff f82d 	bl	808b45e <strncmp>
 808c404:	4605      	mov	r5, r0
 808c406:	2800      	cmp	r0, #0
 808c408:	d166      	bne.n	808c4d8 <__gethex+0x12c>
 808c40a:	f817 000a 	ldrb.w	r0, [r7, sl]
 808c40e:	eb07 060a 	add.w	r6, r7, sl
 808c412:	f7ff ffb6 	bl	808c382 <__hexdig_fun>
 808c416:	2800      	cmp	r0, #0
 808c418:	d060      	beq.n	808c4dc <__gethex+0x130>
 808c41a:	4633      	mov	r3, r6
 808c41c:	7818      	ldrb	r0, [r3, #0]
 808c41e:	461f      	mov	r7, r3
 808c420:	2830      	cmp	r0, #48	; 0x30
 808c422:	f103 0301 	add.w	r3, r3, #1
 808c426:	d0f9      	beq.n	808c41c <__gethex+0x70>
 808c428:	f7ff ffab 	bl	808c382 <__hexdig_fun>
 808c42c:	2301      	movs	r3, #1
 808c42e:	fab0 f480 	clz	r4, r0
 808c432:	4635      	mov	r5, r6
 808c434:	0964      	lsrs	r4, r4, #5
 808c436:	9301      	str	r3, [sp, #4]
 808c438:	463a      	mov	r2, r7
 808c43a:	4616      	mov	r6, r2
 808c43c:	7830      	ldrb	r0, [r6, #0]
 808c43e:	3201      	adds	r2, #1
 808c440:	f7ff ff9f 	bl	808c382 <__hexdig_fun>
 808c444:	2800      	cmp	r0, #0
 808c446:	d1f8      	bne.n	808c43a <__gethex+0x8e>
 808c448:	4652      	mov	r2, sl
 808c44a:	4630      	mov	r0, r6
 808c44c:	9903      	ldr	r1, [sp, #12]
 808c44e:	f7ff f806 	bl	808b45e <strncmp>
 808c452:	b980      	cbnz	r0, 808c476 <__gethex+0xca>
 808c454:	b94d      	cbnz	r5, 808c46a <__gethex+0xbe>
 808c456:	eb06 050a 	add.w	r5, r6, sl
 808c45a:	462a      	mov	r2, r5
 808c45c:	4616      	mov	r6, r2
 808c45e:	7830      	ldrb	r0, [r6, #0]
 808c460:	3201      	adds	r2, #1
 808c462:	f7ff ff8e 	bl	808c382 <__hexdig_fun>
 808c466:	2800      	cmp	r0, #0
 808c468:	d1f8      	bne.n	808c45c <__gethex+0xb0>
 808c46a:	1bad      	subs	r5, r5, r6
 808c46c:	00ad      	lsls	r5, r5, #2
 808c46e:	e004      	b.n	808c47a <__gethex+0xce>
 808c470:	2400      	movs	r4, #0
 808c472:	4625      	mov	r5, r4
 808c474:	e7e0      	b.n	808c438 <__gethex+0x8c>
 808c476:	2d00      	cmp	r5, #0
 808c478:	d1f7      	bne.n	808c46a <__gethex+0xbe>
 808c47a:	7833      	ldrb	r3, [r6, #0]
 808c47c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808c480:	2b50      	cmp	r3, #80	; 0x50
 808c482:	d139      	bne.n	808c4f8 <__gethex+0x14c>
 808c484:	7873      	ldrb	r3, [r6, #1]
 808c486:	2b2b      	cmp	r3, #43	; 0x2b
 808c488:	d02a      	beq.n	808c4e0 <__gethex+0x134>
 808c48a:	2b2d      	cmp	r3, #45	; 0x2d
 808c48c:	d02c      	beq.n	808c4e8 <__gethex+0x13c>
 808c48e:	f04f 0900 	mov.w	r9, #0
 808c492:	1c71      	adds	r1, r6, #1
 808c494:	7808      	ldrb	r0, [r1, #0]
 808c496:	f7ff ff74 	bl	808c382 <__hexdig_fun>
 808c49a:	1e43      	subs	r3, r0, #1
 808c49c:	b2db      	uxtb	r3, r3
 808c49e:	2b18      	cmp	r3, #24
 808c4a0:	d82a      	bhi.n	808c4f8 <__gethex+0x14c>
 808c4a2:	f1a0 0210 	sub.w	r2, r0, #16
 808c4a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808c4aa:	f7ff ff6a 	bl	808c382 <__hexdig_fun>
 808c4ae:	1e43      	subs	r3, r0, #1
 808c4b0:	b2db      	uxtb	r3, r3
 808c4b2:	2b18      	cmp	r3, #24
 808c4b4:	d91b      	bls.n	808c4ee <__gethex+0x142>
 808c4b6:	f1b9 0f00 	cmp.w	r9, #0
 808c4ba:	d000      	beq.n	808c4be <__gethex+0x112>
 808c4bc:	4252      	negs	r2, r2
 808c4be:	4415      	add	r5, r2
 808c4c0:	f8cb 1000 	str.w	r1, [fp]
 808c4c4:	b1d4      	cbz	r4, 808c4fc <__gethex+0x150>
 808c4c6:	9b01      	ldr	r3, [sp, #4]
 808c4c8:	2b00      	cmp	r3, #0
 808c4ca:	bf14      	ite	ne
 808c4cc:	2700      	movne	r7, #0
 808c4ce:	2706      	moveq	r7, #6
 808c4d0:	4638      	mov	r0, r7
 808c4d2:	b00b      	add	sp, #44	; 0x2c
 808c4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c4d8:	463e      	mov	r6, r7
 808c4da:	4625      	mov	r5, r4
 808c4dc:	2401      	movs	r4, #1
 808c4de:	e7cc      	b.n	808c47a <__gethex+0xce>
 808c4e0:	f04f 0900 	mov.w	r9, #0
 808c4e4:	1cb1      	adds	r1, r6, #2
 808c4e6:	e7d5      	b.n	808c494 <__gethex+0xe8>
 808c4e8:	f04f 0901 	mov.w	r9, #1
 808c4ec:	e7fa      	b.n	808c4e4 <__gethex+0x138>
 808c4ee:	230a      	movs	r3, #10
 808c4f0:	fb03 0202 	mla	r2, r3, r2, r0
 808c4f4:	3a10      	subs	r2, #16
 808c4f6:	e7d6      	b.n	808c4a6 <__gethex+0xfa>
 808c4f8:	4631      	mov	r1, r6
 808c4fa:	e7e1      	b.n	808c4c0 <__gethex+0x114>
 808c4fc:	4621      	mov	r1, r4
 808c4fe:	1bf3      	subs	r3, r6, r7
 808c500:	3b01      	subs	r3, #1
 808c502:	2b07      	cmp	r3, #7
 808c504:	dc0a      	bgt.n	808c51c <__gethex+0x170>
 808c506:	9802      	ldr	r0, [sp, #8]
 808c508:	f000 fa64 	bl	808c9d4 <_Balloc>
 808c50c:	4604      	mov	r4, r0
 808c50e:	b940      	cbnz	r0, 808c522 <__gethex+0x176>
 808c510:	4602      	mov	r2, r0
 808c512:	21de      	movs	r1, #222	; 0xde
 808c514:	4b5b      	ldr	r3, [pc, #364]	; (808c684 <__gethex+0x2d8>)
 808c516:	485c      	ldr	r0, [pc, #368]	; (808c688 <__gethex+0x2dc>)
 808c518:	f7fb fba6 	bl	8087c68 <__assert_func>
 808c51c:	3101      	adds	r1, #1
 808c51e:	105b      	asrs	r3, r3, #1
 808c520:	e7ef      	b.n	808c502 <__gethex+0x156>
 808c522:	f04f 0b00 	mov.w	fp, #0
 808c526:	f100 0914 	add.w	r9, r0, #20
 808c52a:	f1ca 0301 	rsb	r3, sl, #1
 808c52e:	f8cd 9010 	str.w	r9, [sp, #16]
 808c532:	f8cd b004 	str.w	fp, [sp, #4]
 808c536:	9308      	str	r3, [sp, #32]
 808c538:	42b7      	cmp	r7, r6
 808c53a:	d33f      	bcc.n	808c5bc <__gethex+0x210>
 808c53c:	9f04      	ldr	r7, [sp, #16]
 808c53e:	9b01      	ldr	r3, [sp, #4]
 808c540:	f847 3b04 	str.w	r3, [r7], #4
 808c544:	eba7 0709 	sub.w	r7, r7, r9
 808c548:	10bf      	asrs	r7, r7, #2
 808c54a:	6127      	str	r7, [r4, #16]
 808c54c:	4618      	mov	r0, r3
 808c54e:	f000 fb33 	bl	808cbb8 <__hi0bits>
 808c552:	017f      	lsls	r7, r7, #5
 808c554:	f8d8 6000 	ldr.w	r6, [r8]
 808c558:	1a3f      	subs	r7, r7, r0
 808c55a:	42b7      	cmp	r7, r6
 808c55c:	dd62      	ble.n	808c624 <__gethex+0x278>
 808c55e:	1bbf      	subs	r7, r7, r6
 808c560:	4639      	mov	r1, r7
 808c562:	4620      	mov	r0, r4
 808c564:	f000 fecd 	bl	808d302 <__any_on>
 808c568:	4682      	mov	sl, r0
 808c56a:	b1a8      	cbz	r0, 808c598 <__gethex+0x1ec>
 808c56c:	f04f 0a01 	mov.w	sl, #1
 808c570:	1e7b      	subs	r3, r7, #1
 808c572:	1159      	asrs	r1, r3, #5
 808c574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808c578:	f003 021f 	and.w	r2, r3, #31
 808c57c:	fa0a f202 	lsl.w	r2, sl, r2
 808c580:	420a      	tst	r2, r1
 808c582:	d009      	beq.n	808c598 <__gethex+0x1ec>
 808c584:	4553      	cmp	r3, sl
 808c586:	dd05      	ble.n	808c594 <__gethex+0x1e8>
 808c588:	4620      	mov	r0, r4
 808c58a:	1eb9      	subs	r1, r7, #2
 808c58c:	f000 feb9 	bl	808d302 <__any_on>
 808c590:	2800      	cmp	r0, #0
 808c592:	d144      	bne.n	808c61e <__gethex+0x272>
 808c594:	f04f 0a02 	mov.w	sl, #2
 808c598:	4639      	mov	r1, r7
 808c59a:	4620      	mov	r0, r4
 808c59c:	f7ff fe9e 	bl	808c2dc <rshift>
 808c5a0:	443d      	add	r5, r7
 808c5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c5a6:	42ab      	cmp	r3, r5
 808c5a8:	da4a      	bge.n	808c640 <__gethex+0x294>
 808c5aa:	4621      	mov	r1, r4
 808c5ac:	9802      	ldr	r0, [sp, #8]
 808c5ae:	f000 fa51 	bl	808ca54 <_Bfree>
 808c5b2:	2300      	movs	r3, #0
 808c5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808c5b6:	27a3      	movs	r7, #163	; 0xa3
 808c5b8:	6013      	str	r3, [r2, #0]
 808c5ba:	e789      	b.n	808c4d0 <__gethex+0x124>
 808c5bc:	1e73      	subs	r3, r6, #1
 808c5be:	9a06      	ldr	r2, [sp, #24]
 808c5c0:	9307      	str	r3, [sp, #28]
 808c5c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808c5c6:	4293      	cmp	r3, r2
 808c5c8:	d019      	beq.n	808c5fe <__gethex+0x252>
 808c5ca:	f1bb 0f20 	cmp.w	fp, #32
 808c5ce:	d107      	bne.n	808c5e0 <__gethex+0x234>
 808c5d0:	9b04      	ldr	r3, [sp, #16]
 808c5d2:	9a01      	ldr	r2, [sp, #4]
 808c5d4:	f843 2b04 	str.w	r2, [r3], #4
 808c5d8:	9304      	str	r3, [sp, #16]
 808c5da:	2300      	movs	r3, #0
 808c5dc:	469b      	mov	fp, r3
 808c5de:	9301      	str	r3, [sp, #4]
 808c5e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808c5e4:	f7ff fecd 	bl	808c382 <__hexdig_fun>
 808c5e8:	9b01      	ldr	r3, [sp, #4]
 808c5ea:	f000 000f 	and.w	r0, r0, #15
 808c5ee:	fa00 f00b 	lsl.w	r0, r0, fp
 808c5f2:	4303      	orrs	r3, r0
 808c5f4:	9301      	str	r3, [sp, #4]
 808c5f6:	f10b 0b04 	add.w	fp, fp, #4
 808c5fa:	9b07      	ldr	r3, [sp, #28]
 808c5fc:	e00d      	b.n	808c61a <__gethex+0x26e>
 808c5fe:	9a08      	ldr	r2, [sp, #32]
 808c600:	1e73      	subs	r3, r6, #1
 808c602:	4413      	add	r3, r2
 808c604:	42bb      	cmp	r3, r7
 808c606:	d3e0      	bcc.n	808c5ca <__gethex+0x21e>
 808c608:	4618      	mov	r0, r3
 808c60a:	4652      	mov	r2, sl
 808c60c:	9903      	ldr	r1, [sp, #12]
 808c60e:	9309      	str	r3, [sp, #36]	; 0x24
 808c610:	f7fe ff25 	bl	808b45e <strncmp>
 808c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c616:	2800      	cmp	r0, #0
 808c618:	d1d7      	bne.n	808c5ca <__gethex+0x21e>
 808c61a:	461e      	mov	r6, r3
 808c61c:	e78c      	b.n	808c538 <__gethex+0x18c>
 808c61e:	f04f 0a03 	mov.w	sl, #3
 808c622:	e7b9      	b.n	808c598 <__gethex+0x1ec>
 808c624:	da09      	bge.n	808c63a <__gethex+0x28e>
 808c626:	1bf7      	subs	r7, r6, r7
 808c628:	4621      	mov	r1, r4
 808c62a:	463a      	mov	r2, r7
 808c62c:	9802      	ldr	r0, [sp, #8]
 808c62e:	f000 fc29 	bl	808ce84 <__lshift>
 808c632:	4604      	mov	r4, r0
 808c634:	1bed      	subs	r5, r5, r7
 808c636:	f100 0914 	add.w	r9, r0, #20
 808c63a:	f04f 0a00 	mov.w	sl, #0
 808c63e:	e7b0      	b.n	808c5a2 <__gethex+0x1f6>
 808c640:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808c644:	42a8      	cmp	r0, r5
 808c646:	dd72      	ble.n	808c72e <__gethex+0x382>
 808c648:	1b45      	subs	r5, r0, r5
 808c64a:	42ae      	cmp	r6, r5
 808c64c:	dc35      	bgt.n	808c6ba <__gethex+0x30e>
 808c64e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c652:	2b02      	cmp	r3, #2
 808c654:	d029      	beq.n	808c6aa <__gethex+0x2fe>
 808c656:	2b03      	cmp	r3, #3
 808c658:	d02b      	beq.n	808c6b2 <__gethex+0x306>
 808c65a:	2b01      	cmp	r3, #1
 808c65c:	d11c      	bne.n	808c698 <__gethex+0x2ec>
 808c65e:	42ae      	cmp	r6, r5
 808c660:	d11a      	bne.n	808c698 <__gethex+0x2ec>
 808c662:	2e01      	cmp	r6, #1
 808c664:	d112      	bne.n	808c68c <__gethex+0x2e0>
 808c666:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808c66a:	9a05      	ldr	r2, [sp, #20]
 808c66c:	2762      	movs	r7, #98	; 0x62
 808c66e:	6013      	str	r3, [r2, #0]
 808c670:	2301      	movs	r3, #1
 808c672:	6123      	str	r3, [r4, #16]
 808c674:	f8c9 3000 	str.w	r3, [r9]
 808c678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c67a:	601c      	str	r4, [r3, #0]
 808c67c:	e728      	b.n	808c4d0 <__gethex+0x124>
 808c67e:	bf00      	nop
 808c680:	0808f670 	.word	0x0808f670
 808c684:	0808f5d9 	.word	0x0808f5d9
 808c688:	0808f5ea 	.word	0x0808f5ea
 808c68c:	4620      	mov	r0, r4
 808c68e:	1e71      	subs	r1, r6, #1
 808c690:	f000 fe37 	bl	808d302 <__any_on>
 808c694:	2800      	cmp	r0, #0
 808c696:	d1e6      	bne.n	808c666 <__gethex+0x2ba>
 808c698:	4621      	mov	r1, r4
 808c69a:	9802      	ldr	r0, [sp, #8]
 808c69c:	f000 f9da 	bl	808ca54 <_Bfree>
 808c6a0:	2300      	movs	r3, #0
 808c6a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808c6a4:	2750      	movs	r7, #80	; 0x50
 808c6a6:	6013      	str	r3, [r2, #0]
 808c6a8:	e712      	b.n	808c4d0 <__gethex+0x124>
 808c6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c6ac:	2b00      	cmp	r3, #0
 808c6ae:	d1f3      	bne.n	808c698 <__gethex+0x2ec>
 808c6b0:	e7d9      	b.n	808c666 <__gethex+0x2ba>
 808c6b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c6b4:	2b00      	cmp	r3, #0
 808c6b6:	d1d6      	bne.n	808c666 <__gethex+0x2ba>
 808c6b8:	e7ee      	b.n	808c698 <__gethex+0x2ec>
 808c6ba:	1e6f      	subs	r7, r5, #1
 808c6bc:	f1ba 0f00 	cmp.w	sl, #0
 808c6c0:	d132      	bne.n	808c728 <__gethex+0x37c>
 808c6c2:	b127      	cbz	r7, 808c6ce <__gethex+0x322>
 808c6c4:	4639      	mov	r1, r7
 808c6c6:	4620      	mov	r0, r4
 808c6c8:	f000 fe1b 	bl	808d302 <__any_on>
 808c6cc:	4682      	mov	sl, r0
 808c6ce:	2101      	movs	r1, #1
 808c6d0:	117b      	asrs	r3, r7, #5
 808c6d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808c6d6:	f007 071f 	and.w	r7, r7, #31
 808c6da:	fa01 f707 	lsl.w	r7, r1, r7
 808c6de:	421f      	tst	r7, r3
 808c6e0:	f04f 0702 	mov.w	r7, #2
 808c6e4:	4629      	mov	r1, r5
 808c6e6:	4620      	mov	r0, r4
 808c6e8:	bf18      	it	ne
 808c6ea:	f04a 0a02 	orrne.w	sl, sl, #2
 808c6ee:	1b76      	subs	r6, r6, r5
 808c6f0:	f7ff fdf4 	bl	808c2dc <rshift>
 808c6f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808c6f8:	f1ba 0f00 	cmp.w	sl, #0
 808c6fc:	d048      	beq.n	808c790 <__gethex+0x3e4>
 808c6fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c702:	2b02      	cmp	r3, #2
 808c704:	d015      	beq.n	808c732 <__gethex+0x386>
 808c706:	2b03      	cmp	r3, #3
 808c708:	d017      	beq.n	808c73a <__gethex+0x38e>
 808c70a:	2b01      	cmp	r3, #1
 808c70c:	d109      	bne.n	808c722 <__gethex+0x376>
 808c70e:	f01a 0f02 	tst.w	sl, #2
 808c712:	d006      	beq.n	808c722 <__gethex+0x376>
 808c714:	f8d9 0000 	ldr.w	r0, [r9]
 808c718:	ea4a 0a00 	orr.w	sl, sl, r0
 808c71c:	f01a 0f01 	tst.w	sl, #1
 808c720:	d10e      	bne.n	808c740 <__gethex+0x394>
 808c722:	f047 0710 	orr.w	r7, r7, #16
 808c726:	e033      	b.n	808c790 <__gethex+0x3e4>
 808c728:	f04f 0a01 	mov.w	sl, #1
 808c72c:	e7cf      	b.n	808c6ce <__gethex+0x322>
 808c72e:	2701      	movs	r7, #1
 808c730:	e7e2      	b.n	808c6f8 <__gethex+0x34c>
 808c732:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c734:	f1c3 0301 	rsb	r3, r3, #1
 808c738:	9315      	str	r3, [sp, #84]	; 0x54
 808c73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c73c:	2b00      	cmp	r3, #0
 808c73e:	d0f0      	beq.n	808c722 <__gethex+0x376>
 808c740:	f04f 0c00 	mov.w	ip, #0
 808c744:	f8d4 b010 	ldr.w	fp, [r4, #16]
 808c748:	f104 0314 	add.w	r3, r4, #20
 808c74c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 808c750:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 808c754:	4618      	mov	r0, r3
 808c756:	f853 2b04 	ldr.w	r2, [r3], #4
 808c75a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808c75e:	d01c      	beq.n	808c79a <__gethex+0x3ee>
 808c760:	3201      	adds	r2, #1
 808c762:	6002      	str	r2, [r0, #0]
 808c764:	2f02      	cmp	r7, #2
 808c766:	f104 0314 	add.w	r3, r4, #20
 808c76a:	d13d      	bne.n	808c7e8 <__gethex+0x43c>
 808c76c:	f8d8 2000 	ldr.w	r2, [r8]
 808c770:	3a01      	subs	r2, #1
 808c772:	42b2      	cmp	r2, r6
 808c774:	d10a      	bne.n	808c78c <__gethex+0x3e0>
 808c776:	2201      	movs	r2, #1
 808c778:	1171      	asrs	r1, r6, #5
 808c77a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808c77e:	f006 061f 	and.w	r6, r6, #31
 808c782:	fa02 f606 	lsl.w	r6, r2, r6
 808c786:	421e      	tst	r6, r3
 808c788:	bf18      	it	ne
 808c78a:	4617      	movne	r7, r2
 808c78c:	f047 0720 	orr.w	r7, r7, #32
 808c790:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c792:	601c      	str	r4, [r3, #0]
 808c794:	9b05      	ldr	r3, [sp, #20]
 808c796:	601d      	str	r5, [r3, #0]
 808c798:	e69a      	b.n	808c4d0 <__gethex+0x124>
 808c79a:	4299      	cmp	r1, r3
 808c79c:	f843 cc04 	str.w	ip, [r3, #-4]
 808c7a0:	d8d8      	bhi.n	808c754 <__gethex+0x3a8>
 808c7a2:	68a3      	ldr	r3, [r4, #8]
 808c7a4:	459b      	cmp	fp, r3
 808c7a6:	db17      	blt.n	808c7d8 <__gethex+0x42c>
 808c7a8:	6861      	ldr	r1, [r4, #4]
 808c7aa:	9802      	ldr	r0, [sp, #8]
 808c7ac:	3101      	adds	r1, #1
 808c7ae:	f000 f911 	bl	808c9d4 <_Balloc>
 808c7b2:	4681      	mov	r9, r0
 808c7b4:	b918      	cbnz	r0, 808c7be <__gethex+0x412>
 808c7b6:	4602      	mov	r2, r0
 808c7b8:	2184      	movs	r1, #132	; 0x84
 808c7ba:	4b19      	ldr	r3, [pc, #100]	; (808c820 <__gethex+0x474>)
 808c7bc:	e6ab      	b.n	808c516 <__gethex+0x16a>
 808c7be:	6922      	ldr	r2, [r4, #16]
 808c7c0:	f104 010c 	add.w	r1, r4, #12
 808c7c4:	3202      	adds	r2, #2
 808c7c6:	0092      	lsls	r2, r2, #2
 808c7c8:	300c      	adds	r0, #12
 808c7ca:	f7fe fdc0 	bl	808b34e <memcpy>
 808c7ce:	4621      	mov	r1, r4
 808c7d0:	9802      	ldr	r0, [sp, #8]
 808c7d2:	f000 f93f 	bl	808ca54 <_Bfree>
 808c7d6:	464c      	mov	r4, r9
 808c7d8:	6923      	ldr	r3, [r4, #16]
 808c7da:	1c5a      	adds	r2, r3, #1
 808c7dc:	6122      	str	r2, [r4, #16]
 808c7de:	2201      	movs	r2, #1
 808c7e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808c7e4:	615a      	str	r2, [r3, #20]
 808c7e6:	e7bd      	b.n	808c764 <__gethex+0x3b8>
 808c7e8:	6922      	ldr	r2, [r4, #16]
 808c7ea:	455a      	cmp	r2, fp
 808c7ec:	dd0b      	ble.n	808c806 <__gethex+0x45a>
 808c7ee:	2101      	movs	r1, #1
 808c7f0:	4620      	mov	r0, r4
 808c7f2:	f7ff fd73 	bl	808c2dc <rshift>
 808c7f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c7fa:	3501      	adds	r5, #1
 808c7fc:	42ab      	cmp	r3, r5
 808c7fe:	f6ff aed4 	blt.w	808c5aa <__gethex+0x1fe>
 808c802:	2701      	movs	r7, #1
 808c804:	e7c2      	b.n	808c78c <__gethex+0x3e0>
 808c806:	f016 061f 	ands.w	r6, r6, #31
 808c80a:	d0fa      	beq.n	808c802 <__gethex+0x456>
 808c80c:	4453      	add	r3, sl
 808c80e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 808c812:	f000 f9d1 	bl	808cbb8 <__hi0bits>
 808c816:	f1c6 0620 	rsb	r6, r6, #32
 808c81a:	42b0      	cmp	r0, r6
 808c81c:	dbe7      	blt.n	808c7ee <__gethex+0x442>
 808c81e:	e7f0      	b.n	808c802 <__gethex+0x456>
 808c820:	0808f5d9 	.word	0x0808f5d9

0808c824 <L_shift>:
 808c824:	f1c2 0208 	rsb	r2, r2, #8
 808c828:	0092      	lsls	r2, r2, #2
 808c82a:	b570      	push	{r4, r5, r6, lr}
 808c82c:	f1c2 0620 	rsb	r6, r2, #32
 808c830:	6843      	ldr	r3, [r0, #4]
 808c832:	6804      	ldr	r4, [r0, #0]
 808c834:	fa03 f506 	lsl.w	r5, r3, r6
 808c838:	432c      	orrs	r4, r5
 808c83a:	40d3      	lsrs	r3, r2
 808c83c:	6004      	str	r4, [r0, #0]
 808c83e:	f840 3f04 	str.w	r3, [r0, #4]!
 808c842:	4288      	cmp	r0, r1
 808c844:	d3f4      	bcc.n	808c830 <L_shift+0xc>
 808c846:	bd70      	pop	{r4, r5, r6, pc}

0808c848 <__match>:
 808c848:	b530      	push	{r4, r5, lr}
 808c84a:	6803      	ldr	r3, [r0, #0]
 808c84c:	3301      	adds	r3, #1
 808c84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c852:	b914      	cbnz	r4, 808c85a <__match+0x12>
 808c854:	6003      	str	r3, [r0, #0]
 808c856:	2001      	movs	r0, #1
 808c858:	bd30      	pop	{r4, r5, pc}
 808c85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c85e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808c862:	2d19      	cmp	r5, #25
 808c864:	bf98      	it	ls
 808c866:	3220      	addls	r2, #32
 808c868:	42a2      	cmp	r2, r4
 808c86a:	d0f0      	beq.n	808c84e <__match+0x6>
 808c86c:	2000      	movs	r0, #0
 808c86e:	e7f3      	b.n	808c858 <__match+0x10>

0808c870 <__hexnan>:
 808c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c874:	2500      	movs	r5, #0
 808c876:	680b      	ldr	r3, [r1, #0]
 808c878:	4682      	mov	sl, r0
 808c87a:	115e      	asrs	r6, r3, #5
 808c87c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808c880:	f013 031f 	ands.w	r3, r3, #31
 808c884:	bf18      	it	ne
 808c886:	3604      	addne	r6, #4
 808c888:	1f37      	subs	r7, r6, #4
 808c88a:	46b9      	mov	r9, r7
 808c88c:	463c      	mov	r4, r7
 808c88e:	46ab      	mov	fp, r5
 808c890:	b087      	sub	sp, #28
 808c892:	4690      	mov	r8, r2
 808c894:	6802      	ldr	r2, [r0, #0]
 808c896:	9301      	str	r3, [sp, #4]
 808c898:	f846 5c04 	str.w	r5, [r6, #-4]
 808c89c:	9502      	str	r5, [sp, #8]
 808c89e:	7851      	ldrb	r1, [r2, #1]
 808c8a0:	1c53      	adds	r3, r2, #1
 808c8a2:	9303      	str	r3, [sp, #12]
 808c8a4:	b341      	cbz	r1, 808c8f8 <__hexnan+0x88>
 808c8a6:	4608      	mov	r0, r1
 808c8a8:	9205      	str	r2, [sp, #20]
 808c8aa:	9104      	str	r1, [sp, #16]
 808c8ac:	f7ff fd69 	bl	808c382 <__hexdig_fun>
 808c8b0:	2800      	cmp	r0, #0
 808c8b2:	d14f      	bne.n	808c954 <__hexnan+0xe4>
 808c8b4:	9904      	ldr	r1, [sp, #16]
 808c8b6:	9a05      	ldr	r2, [sp, #20]
 808c8b8:	2920      	cmp	r1, #32
 808c8ba:	d818      	bhi.n	808c8ee <__hexnan+0x7e>
 808c8bc:	9b02      	ldr	r3, [sp, #8]
 808c8be:	459b      	cmp	fp, r3
 808c8c0:	dd13      	ble.n	808c8ea <__hexnan+0x7a>
 808c8c2:	454c      	cmp	r4, r9
 808c8c4:	d206      	bcs.n	808c8d4 <__hexnan+0x64>
 808c8c6:	2d07      	cmp	r5, #7
 808c8c8:	dc04      	bgt.n	808c8d4 <__hexnan+0x64>
 808c8ca:	462a      	mov	r2, r5
 808c8cc:	4649      	mov	r1, r9
 808c8ce:	4620      	mov	r0, r4
 808c8d0:	f7ff ffa8 	bl	808c824 <L_shift>
 808c8d4:	4544      	cmp	r4, r8
 808c8d6:	d950      	bls.n	808c97a <__hexnan+0x10a>
 808c8d8:	2300      	movs	r3, #0
 808c8da:	f1a4 0904 	sub.w	r9, r4, #4
 808c8de:	f844 3c04 	str.w	r3, [r4, #-4]
 808c8e2:	461d      	mov	r5, r3
 808c8e4:	464c      	mov	r4, r9
 808c8e6:	f8cd b008 	str.w	fp, [sp, #8]
 808c8ea:	9a03      	ldr	r2, [sp, #12]
 808c8ec:	e7d7      	b.n	808c89e <__hexnan+0x2e>
 808c8ee:	2929      	cmp	r1, #41	; 0x29
 808c8f0:	d156      	bne.n	808c9a0 <__hexnan+0x130>
 808c8f2:	3202      	adds	r2, #2
 808c8f4:	f8ca 2000 	str.w	r2, [sl]
 808c8f8:	f1bb 0f00 	cmp.w	fp, #0
 808c8fc:	d050      	beq.n	808c9a0 <__hexnan+0x130>
 808c8fe:	454c      	cmp	r4, r9
 808c900:	d206      	bcs.n	808c910 <__hexnan+0xa0>
 808c902:	2d07      	cmp	r5, #7
 808c904:	dc04      	bgt.n	808c910 <__hexnan+0xa0>
 808c906:	462a      	mov	r2, r5
 808c908:	4649      	mov	r1, r9
 808c90a:	4620      	mov	r0, r4
 808c90c:	f7ff ff8a 	bl	808c824 <L_shift>
 808c910:	4544      	cmp	r4, r8
 808c912:	d934      	bls.n	808c97e <__hexnan+0x10e>
 808c914:	4623      	mov	r3, r4
 808c916:	f1a8 0204 	sub.w	r2, r8, #4
 808c91a:	f853 1b04 	ldr.w	r1, [r3], #4
 808c91e:	429f      	cmp	r7, r3
 808c920:	f842 1f04 	str.w	r1, [r2, #4]!
 808c924:	d2f9      	bcs.n	808c91a <__hexnan+0xaa>
 808c926:	1b3b      	subs	r3, r7, r4
 808c928:	f023 0303 	bic.w	r3, r3, #3
 808c92c:	3304      	adds	r3, #4
 808c92e:	3401      	adds	r4, #1
 808c930:	3e03      	subs	r6, #3
 808c932:	42b4      	cmp	r4, r6
 808c934:	bf88      	it	hi
 808c936:	2304      	movhi	r3, #4
 808c938:	2200      	movs	r2, #0
 808c93a:	4443      	add	r3, r8
 808c93c:	f843 2b04 	str.w	r2, [r3], #4
 808c940:	429f      	cmp	r7, r3
 808c942:	d2fb      	bcs.n	808c93c <__hexnan+0xcc>
 808c944:	683b      	ldr	r3, [r7, #0]
 808c946:	b91b      	cbnz	r3, 808c950 <__hexnan+0xe0>
 808c948:	4547      	cmp	r7, r8
 808c94a:	d127      	bne.n	808c99c <__hexnan+0x12c>
 808c94c:	2301      	movs	r3, #1
 808c94e:	603b      	str	r3, [r7, #0]
 808c950:	2005      	movs	r0, #5
 808c952:	e026      	b.n	808c9a2 <__hexnan+0x132>
 808c954:	3501      	adds	r5, #1
 808c956:	2d08      	cmp	r5, #8
 808c958:	f10b 0b01 	add.w	fp, fp, #1
 808c95c:	dd06      	ble.n	808c96c <__hexnan+0xfc>
 808c95e:	4544      	cmp	r4, r8
 808c960:	d9c3      	bls.n	808c8ea <__hexnan+0x7a>
 808c962:	2300      	movs	r3, #0
 808c964:	2501      	movs	r5, #1
 808c966:	f844 3c04 	str.w	r3, [r4, #-4]
 808c96a:	3c04      	subs	r4, #4
 808c96c:	6822      	ldr	r2, [r4, #0]
 808c96e:	f000 000f 	and.w	r0, r0, #15
 808c972:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808c976:	6022      	str	r2, [r4, #0]
 808c978:	e7b7      	b.n	808c8ea <__hexnan+0x7a>
 808c97a:	2508      	movs	r5, #8
 808c97c:	e7b5      	b.n	808c8ea <__hexnan+0x7a>
 808c97e:	9b01      	ldr	r3, [sp, #4]
 808c980:	2b00      	cmp	r3, #0
 808c982:	d0df      	beq.n	808c944 <__hexnan+0xd4>
 808c984:	f04f 32ff 	mov.w	r2, #4294967295
 808c988:	f1c3 0320 	rsb	r3, r3, #32
 808c98c:	fa22 f303 	lsr.w	r3, r2, r3
 808c990:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808c994:	401a      	ands	r2, r3
 808c996:	f846 2c04 	str.w	r2, [r6, #-4]
 808c99a:	e7d3      	b.n	808c944 <__hexnan+0xd4>
 808c99c:	3f04      	subs	r7, #4
 808c99e:	e7d1      	b.n	808c944 <__hexnan+0xd4>
 808c9a0:	2004      	movs	r0, #4
 808c9a2:	b007      	add	sp, #28
 808c9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c9a8 <__retarget_lock_acquire_recursive>:
 808c9a8:	4770      	bx	lr

0808c9aa <__retarget_lock_release>:
 808c9aa:	4770      	bx	lr

0808c9ac <__retarget_lock_release_recursive>:
 808c9ac:	4770      	bx	lr

0808c9ae <__ascii_mbtowc>:
 808c9ae:	b082      	sub	sp, #8
 808c9b0:	b901      	cbnz	r1, 808c9b4 <__ascii_mbtowc+0x6>
 808c9b2:	a901      	add	r1, sp, #4
 808c9b4:	b142      	cbz	r2, 808c9c8 <__ascii_mbtowc+0x1a>
 808c9b6:	b14b      	cbz	r3, 808c9cc <__ascii_mbtowc+0x1e>
 808c9b8:	7813      	ldrb	r3, [r2, #0]
 808c9ba:	600b      	str	r3, [r1, #0]
 808c9bc:	7812      	ldrb	r2, [r2, #0]
 808c9be:	1e10      	subs	r0, r2, #0
 808c9c0:	bf18      	it	ne
 808c9c2:	2001      	movne	r0, #1
 808c9c4:	b002      	add	sp, #8
 808c9c6:	4770      	bx	lr
 808c9c8:	4610      	mov	r0, r2
 808c9ca:	e7fb      	b.n	808c9c4 <__ascii_mbtowc+0x16>
 808c9cc:	f06f 0001 	mvn.w	r0, #1
 808c9d0:	e7f8      	b.n	808c9c4 <__ascii_mbtowc+0x16>
	...

0808c9d4 <_Balloc>:
 808c9d4:	b570      	push	{r4, r5, r6, lr}
 808c9d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808c9d8:	4604      	mov	r4, r0
 808c9da:	460d      	mov	r5, r1
 808c9dc:	b976      	cbnz	r6, 808c9fc <_Balloc+0x28>
 808c9de:	2010      	movs	r0, #16
 808c9e0:	f7fb f8f2 	bl	8087bc8 <malloc>
 808c9e4:	4602      	mov	r2, r0
 808c9e6:	6260      	str	r0, [r4, #36]	; 0x24
 808c9e8:	b920      	cbnz	r0, 808c9f4 <_Balloc+0x20>
 808c9ea:	2166      	movs	r1, #102	; 0x66
 808c9ec:	4b17      	ldr	r3, [pc, #92]	; (808ca4c <_Balloc+0x78>)
 808c9ee:	4818      	ldr	r0, [pc, #96]	; (808ca50 <_Balloc+0x7c>)
 808c9f0:	f7fb f93a 	bl	8087c68 <__assert_func>
 808c9f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808c9f8:	6006      	str	r6, [r0, #0]
 808c9fa:	60c6      	str	r6, [r0, #12]
 808c9fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808c9fe:	68f3      	ldr	r3, [r6, #12]
 808ca00:	b183      	cbz	r3, 808ca24 <_Balloc+0x50>
 808ca02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808ca04:	68db      	ldr	r3, [r3, #12]
 808ca06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808ca0a:	b9b8      	cbnz	r0, 808ca3c <_Balloc+0x68>
 808ca0c:	2101      	movs	r1, #1
 808ca0e:	fa01 f605 	lsl.w	r6, r1, r5
 808ca12:	1d72      	adds	r2, r6, #5
 808ca14:	4620      	mov	r0, r4
 808ca16:	0092      	lsls	r2, r2, #2
 808ca18:	f000 fc94 	bl	808d344 <_calloc_r>
 808ca1c:	b160      	cbz	r0, 808ca38 <_Balloc+0x64>
 808ca1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808ca22:	e00e      	b.n	808ca42 <_Balloc+0x6e>
 808ca24:	2221      	movs	r2, #33	; 0x21
 808ca26:	2104      	movs	r1, #4
 808ca28:	4620      	mov	r0, r4
 808ca2a:	f000 fc8b 	bl	808d344 <_calloc_r>
 808ca2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808ca30:	60f0      	str	r0, [r6, #12]
 808ca32:	68db      	ldr	r3, [r3, #12]
 808ca34:	2b00      	cmp	r3, #0
 808ca36:	d1e4      	bne.n	808ca02 <_Balloc+0x2e>
 808ca38:	2000      	movs	r0, #0
 808ca3a:	bd70      	pop	{r4, r5, r6, pc}
 808ca3c:	6802      	ldr	r2, [r0, #0]
 808ca3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808ca42:	2300      	movs	r3, #0
 808ca44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808ca48:	e7f7      	b.n	808ca3a <_Balloc+0x66>
 808ca4a:	bf00      	nop
 808ca4c:	0808f3ee 	.word	0x0808f3ee
 808ca50:	0808f682 	.word	0x0808f682

0808ca54 <_Bfree>:
 808ca54:	b570      	push	{r4, r5, r6, lr}
 808ca56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808ca58:	4605      	mov	r5, r0
 808ca5a:	460c      	mov	r4, r1
 808ca5c:	b976      	cbnz	r6, 808ca7c <_Bfree+0x28>
 808ca5e:	2010      	movs	r0, #16
 808ca60:	f7fb f8b2 	bl	8087bc8 <malloc>
 808ca64:	4602      	mov	r2, r0
 808ca66:	6268      	str	r0, [r5, #36]	; 0x24
 808ca68:	b920      	cbnz	r0, 808ca74 <_Bfree+0x20>
 808ca6a:	218a      	movs	r1, #138	; 0x8a
 808ca6c:	4b08      	ldr	r3, [pc, #32]	; (808ca90 <_Bfree+0x3c>)
 808ca6e:	4809      	ldr	r0, [pc, #36]	; (808ca94 <_Bfree+0x40>)
 808ca70:	f7fb f8fa 	bl	8087c68 <__assert_func>
 808ca74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808ca78:	6006      	str	r6, [r0, #0]
 808ca7a:	60c6      	str	r6, [r0, #12]
 808ca7c:	b13c      	cbz	r4, 808ca8e <_Bfree+0x3a>
 808ca7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808ca80:	6862      	ldr	r2, [r4, #4]
 808ca82:	68db      	ldr	r3, [r3, #12]
 808ca84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808ca88:	6021      	str	r1, [r4, #0]
 808ca8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808ca8e:	bd70      	pop	{r4, r5, r6, pc}
 808ca90:	0808f3ee 	.word	0x0808f3ee
 808ca94:	0808f682 	.word	0x0808f682

0808ca98 <__multadd>:
 808ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ca9c:	4607      	mov	r7, r0
 808ca9e:	460c      	mov	r4, r1
 808caa0:	461e      	mov	r6, r3
 808caa2:	2000      	movs	r0, #0
 808caa4:	690d      	ldr	r5, [r1, #16]
 808caa6:	f101 0c14 	add.w	ip, r1, #20
 808caaa:	f8dc 3000 	ldr.w	r3, [ip]
 808caae:	3001      	adds	r0, #1
 808cab0:	b299      	uxth	r1, r3
 808cab2:	fb02 6101 	mla	r1, r2, r1, r6
 808cab6:	0c1e      	lsrs	r6, r3, #16
 808cab8:	0c0b      	lsrs	r3, r1, #16
 808caba:	fb02 3306 	mla	r3, r2, r6, r3
 808cabe:	b289      	uxth	r1, r1
 808cac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 808cac4:	4285      	cmp	r5, r0
 808cac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 808caca:	f84c 1b04 	str.w	r1, [ip], #4
 808cace:	dcec      	bgt.n	808caaa <__multadd+0x12>
 808cad0:	b30e      	cbz	r6, 808cb16 <__multadd+0x7e>
 808cad2:	68a3      	ldr	r3, [r4, #8]
 808cad4:	42ab      	cmp	r3, r5
 808cad6:	dc19      	bgt.n	808cb0c <__multadd+0x74>
 808cad8:	6861      	ldr	r1, [r4, #4]
 808cada:	4638      	mov	r0, r7
 808cadc:	3101      	adds	r1, #1
 808cade:	f7ff ff79 	bl	808c9d4 <_Balloc>
 808cae2:	4680      	mov	r8, r0
 808cae4:	b928      	cbnz	r0, 808caf2 <__multadd+0x5a>
 808cae6:	4602      	mov	r2, r0
 808cae8:	21b5      	movs	r1, #181	; 0xb5
 808caea:	4b0c      	ldr	r3, [pc, #48]	; (808cb1c <__multadd+0x84>)
 808caec:	480c      	ldr	r0, [pc, #48]	; (808cb20 <__multadd+0x88>)
 808caee:	f7fb f8bb 	bl	8087c68 <__assert_func>
 808caf2:	6922      	ldr	r2, [r4, #16]
 808caf4:	f104 010c 	add.w	r1, r4, #12
 808caf8:	3202      	adds	r2, #2
 808cafa:	0092      	lsls	r2, r2, #2
 808cafc:	300c      	adds	r0, #12
 808cafe:	f7fe fc26 	bl	808b34e <memcpy>
 808cb02:	4621      	mov	r1, r4
 808cb04:	4638      	mov	r0, r7
 808cb06:	f7ff ffa5 	bl	808ca54 <_Bfree>
 808cb0a:	4644      	mov	r4, r8
 808cb0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808cb10:	3501      	adds	r5, #1
 808cb12:	615e      	str	r6, [r3, #20]
 808cb14:	6125      	str	r5, [r4, #16]
 808cb16:	4620      	mov	r0, r4
 808cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cb1c:	0808f5d9 	.word	0x0808f5d9
 808cb20:	0808f682 	.word	0x0808f682

0808cb24 <__s2b>:
 808cb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808cb28:	4615      	mov	r5, r2
 808cb2a:	2209      	movs	r2, #9
 808cb2c:	461f      	mov	r7, r3
 808cb2e:	3308      	adds	r3, #8
 808cb30:	460c      	mov	r4, r1
 808cb32:	fb93 f3f2 	sdiv	r3, r3, r2
 808cb36:	4606      	mov	r6, r0
 808cb38:	2201      	movs	r2, #1
 808cb3a:	2100      	movs	r1, #0
 808cb3c:	429a      	cmp	r2, r3
 808cb3e:	db09      	blt.n	808cb54 <__s2b+0x30>
 808cb40:	4630      	mov	r0, r6
 808cb42:	f7ff ff47 	bl	808c9d4 <_Balloc>
 808cb46:	b940      	cbnz	r0, 808cb5a <__s2b+0x36>
 808cb48:	4602      	mov	r2, r0
 808cb4a:	21ce      	movs	r1, #206	; 0xce
 808cb4c:	4b18      	ldr	r3, [pc, #96]	; (808cbb0 <__s2b+0x8c>)
 808cb4e:	4819      	ldr	r0, [pc, #100]	; (808cbb4 <__s2b+0x90>)
 808cb50:	f7fb f88a 	bl	8087c68 <__assert_func>
 808cb54:	0052      	lsls	r2, r2, #1
 808cb56:	3101      	adds	r1, #1
 808cb58:	e7f0      	b.n	808cb3c <__s2b+0x18>
 808cb5a:	9b08      	ldr	r3, [sp, #32]
 808cb5c:	2d09      	cmp	r5, #9
 808cb5e:	6143      	str	r3, [r0, #20]
 808cb60:	f04f 0301 	mov.w	r3, #1
 808cb64:	6103      	str	r3, [r0, #16]
 808cb66:	dd16      	ble.n	808cb96 <__s2b+0x72>
 808cb68:	f104 0909 	add.w	r9, r4, #9
 808cb6c:	46c8      	mov	r8, r9
 808cb6e:	442c      	add	r4, r5
 808cb70:	f818 3b01 	ldrb.w	r3, [r8], #1
 808cb74:	4601      	mov	r1, r0
 808cb76:	220a      	movs	r2, #10
 808cb78:	4630      	mov	r0, r6
 808cb7a:	3b30      	subs	r3, #48	; 0x30
 808cb7c:	f7ff ff8c 	bl	808ca98 <__multadd>
 808cb80:	45a0      	cmp	r8, r4
 808cb82:	d1f5      	bne.n	808cb70 <__s2b+0x4c>
 808cb84:	f1a5 0408 	sub.w	r4, r5, #8
 808cb88:	444c      	add	r4, r9
 808cb8a:	1b2d      	subs	r5, r5, r4
 808cb8c:	1963      	adds	r3, r4, r5
 808cb8e:	42bb      	cmp	r3, r7
 808cb90:	db04      	blt.n	808cb9c <__s2b+0x78>
 808cb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808cb96:	2509      	movs	r5, #9
 808cb98:	340a      	adds	r4, #10
 808cb9a:	e7f6      	b.n	808cb8a <__s2b+0x66>
 808cb9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 808cba0:	4601      	mov	r1, r0
 808cba2:	220a      	movs	r2, #10
 808cba4:	4630      	mov	r0, r6
 808cba6:	3b30      	subs	r3, #48	; 0x30
 808cba8:	f7ff ff76 	bl	808ca98 <__multadd>
 808cbac:	e7ee      	b.n	808cb8c <__s2b+0x68>
 808cbae:	bf00      	nop
 808cbb0:	0808f5d9 	.word	0x0808f5d9
 808cbb4:	0808f682 	.word	0x0808f682

0808cbb8 <__hi0bits>:
 808cbb8:	0c02      	lsrs	r2, r0, #16
 808cbba:	0412      	lsls	r2, r2, #16
 808cbbc:	4603      	mov	r3, r0
 808cbbe:	b9ca      	cbnz	r2, 808cbf4 <__hi0bits+0x3c>
 808cbc0:	0403      	lsls	r3, r0, #16
 808cbc2:	2010      	movs	r0, #16
 808cbc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808cbc8:	bf04      	itt	eq
 808cbca:	021b      	lsleq	r3, r3, #8
 808cbcc:	3008      	addeq	r0, #8
 808cbce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808cbd2:	bf04      	itt	eq
 808cbd4:	011b      	lsleq	r3, r3, #4
 808cbd6:	3004      	addeq	r0, #4
 808cbd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808cbdc:	bf04      	itt	eq
 808cbde:	009b      	lsleq	r3, r3, #2
 808cbe0:	3002      	addeq	r0, #2
 808cbe2:	2b00      	cmp	r3, #0
 808cbe4:	db05      	blt.n	808cbf2 <__hi0bits+0x3a>
 808cbe6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808cbea:	f100 0001 	add.w	r0, r0, #1
 808cbee:	bf08      	it	eq
 808cbf0:	2020      	moveq	r0, #32
 808cbf2:	4770      	bx	lr
 808cbf4:	2000      	movs	r0, #0
 808cbf6:	e7e5      	b.n	808cbc4 <__hi0bits+0xc>

0808cbf8 <__lo0bits>:
 808cbf8:	6803      	ldr	r3, [r0, #0]
 808cbfa:	4602      	mov	r2, r0
 808cbfc:	f013 0007 	ands.w	r0, r3, #7
 808cc00:	d00b      	beq.n	808cc1a <__lo0bits+0x22>
 808cc02:	07d9      	lsls	r1, r3, #31
 808cc04:	d421      	bmi.n	808cc4a <__lo0bits+0x52>
 808cc06:	0798      	lsls	r0, r3, #30
 808cc08:	bf49      	itett	mi
 808cc0a:	085b      	lsrmi	r3, r3, #1
 808cc0c:	089b      	lsrpl	r3, r3, #2
 808cc0e:	2001      	movmi	r0, #1
 808cc10:	6013      	strmi	r3, [r2, #0]
 808cc12:	bf5c      	itt	pl
 808cc14:	2002      	movpl	r0, #2
 808cc16:	6013      	strpl	r3, [r2, #0]
 808cc18:	4770      	bx	lr
 808cc1a:	b299      	uxth	r1, r3
 808cc1c:	b909      	cbnz	r1, 808cc22 <__lo0bits+0x2a>
 808cc1e:	2010      	movs	r0, #16
 808cc20:	0c1b      	lsrs	r3, r3, #16
 808cc22:	b2d9      	uxtb	r1, r3
 808cc24:	b909      	cbnz	r1, 808cc2a <__lo0bits+0x32>
 808cc26:	3008      	adds	r0, #8
 808cc28:	0a1b      	lsrs	r3, r3, #8
 808cc2a:	0719      	lsls	r1, r3, #28
 808cc2c:	bf04      	itt	eq
 808cc2e:	091b      	lsreq	r3, r3, #4
 808cc30:	3004      	addeq	r0, #4
 808cc32:	0799      	lsls	r1, r3, #30
 808cc34:	bf04      	itt	eq
 808cc36:	089b      	lsreq	r3, r3, #2
 808cc38:	3002      	addeq	r0, #2
 808cc3a:	07d9      	lsls	r1, r3, #31
 808cc3c:	d403      	bmi.n	808cc46 <__lo0bits+0x4e>
 808cc3e:	085b      	lsrs	r3, r3, #1
 808cc40:	f100 0001 	add.w	r0, r0, #1
 808cc44:	d003      	beq.n	808cc4e <__lo0bits+0x56>
 808cc46:	6013      	str	r3, [r2, #0]
 808cc48:	4770      	bx	lr
 808cc4a:	2000      	movs	r0, #0
 808cc4c:	4770      	bx	lr
 808cc4e:	2020      	movs	r0, #32
 808cc50:	4770      	bx	lr
	...

0808cc54 <__i2b>:
 808cc54:	b510      	push	{r4, lr}
 808cc56:	460c      	mov	r4, r1
 808cc58:	2101      	movs	r1, #1
 808cc5a:	f7ff febb 	bl	808c9d4 <_Balloc>
 808cc5e:	4602      	mov	r2, r0
 808cc60:	b928      	cbnz	r0, 808cc6e <__i2b+0x1a>
 808cc62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 808cc66:	4b04      	ldr	r3, [pc, #16]	; (808cc78 <__i2b+0x24>)
 808cc68:	4804      	ldr	r0, [pc, #16]	; (808cc7c <__i2b+0x28>)
 808cc6a:	f7fa fffd 	bl	8087c68 <__assert_func>
 808cc6e:	2301      	movs	r3, #1
 808cc70:	6144      	str	r4, [r0, #20]
 808cc72:	6103      	str	r3, [r0, #16]
 808cc74:	bd10      	pop	{r4, pc}
 808cc76:	bf00      	nop
 808cc78:	0808f5d9 	.word	0x0808f5d9
 808cc7c:	0808f682 	.word	0x0808f682

0808cc80 <__multiply>:
 808cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cc84:	4691      	mov	r9, r2
 808cc86:	690a      	ldr	r2, [r1, #16]
 808cc88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808cc8c:	460c      	mov	r4, r1
 808cc8e:	429a      	cmp	r2, r3
 808cc90:	bfbe      	ittt	lt
 808cc92:	460b      	movlt	r3, r1
 808cc94:	464c      	movlt	r4, r9
 808cc96:	4699      	movlt	r9, r3
 808cc98:	6927      	ldr	r7, [r4, #16]
 808cc9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 808cc9e:	68a3      	ldr	r3, [r4, #8]
 808cca0:	6861      	ldr	r1, [r4, #4]
 808cca2:	eb07 060a 	add.w	r6, r7, sl
 808cca6:	42b3      	cmp	r3, r6
 808cca8:	b085      	sub	sp, #20
 808ccaa:	bfb8      	it	lt
 808ccac:	3101      	addlt	r1, #1
 808ccae:	f7ff fe91 	bl	808c9d4 <_Balloc>
 808ccb2:	b930      	cbnz	r0, 808ccc2 <__multiply+0x42>
 808ccb4:	4602      	mov	r2, r0
 808ccb6:	f240 115d 	movw	r1, #349	; 0x15d
 808ccba:	4b43      	ldr	r3, [pc, #268]	; (808cdc8 <__multiply+0x148>)
 808ccbc:	4843      	ldr	r0, [pc, #268]	; (808cdcc <__multiply+0x14c>)
 808ccbe:	f7fa ffd3 	bl	8087c68 <__assert_func>
 808ccc2:	f100 0514 	add.w	r5, r0, #20
 808ccc6:	462b      	mov	r3, r5
 808ccc8:	2200      	movs	r2, #0
 808ccca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 808ccce:	4543      	cmp	r3, r8
 808ccd0:	d321      	bcc.n	808cd16 <__multiply+0x96>
 808ccd2:	f104 0314 	add.w	r3, r4, #20
 808ccd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808ccda:	f109 0314 	add.w	r3, r9, #20
 808ccde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 808cce2:	9202      	str	r2, [sp, #8]
 808cce4:	1b3a      	subs	r2, r7, r4
 808cce6:	3a15      	subs	r2, #21
 808cce8:	f022 0203 	bic.w	r2, r2, #3
 808ccec:	3204      	adds	r2, #4
 808ccee:	f104 0115 	add.w	r1, r4, #21
 808ccf2:	428f      	cmp	r7, r1
 808ccf4:	bf38      	it	cc
 808ccf6:	2204      	movcc	r2, #4
 808ccf8:	9201      	str	r2, [sp, #4]
 808ccfa:	9a02      	ldr	r2, [sp, #8]
 808ccfc:	9303      	str	r3, [sp, #12]
 808ccfe:	429a      	cmp	r2, r3
 808cd00:	d80c      	bhi.n	808cd1c <__multiply+0x9c>
 808cd02:	2e00      	cmp	r6, #0
 808cd04:	dd03      	ble.n	808cd0e <__multiply+0x8e>
 808cd06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808cd0a:	2b00      	cmp	r3, #0
 808cd0c:	d059      	beq.n	808cdc2 <__multiply+0x142>
 808cd0e:	6106      	str	r6, [r0, #16]
 808cd10:	b005      	add	sp, #20
 808cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cd16:	f843 2b04 	str.w	r2, [r3], #4
 808cd1a:	e7d8      	b.n	808ccce <__multiply+0x4e>
 808cd1c:	f8b3 a000 	ldrh.w	sl, [r3]
 808cd20:	f1ba 0f00 	cmp.w	sl, #0
 808cd24:	d023      	beq.n	808cd6e <__multiply+0xee>
 808cd26:	46a9      	mov	r9, r5
 808cd28:	f04f 0c00 	mov.w	ip, #0
 808cd2c:	f104 0e14 	add.w	lr, r4, #20
 808cd30:	f85e 2b04 	ldr.w	r2, [lr], #4
 808cd34:	f8d9 1000 	ldr.w	r1, [r9]
 808cd38:	fa1f fb82 	uxth.w	fp, r2
 808cd3c:	b289      	uxth	r1, r1
 808cd3e:	fb0a 110b 	mla	r1, sl, fp, r1
 808cd42:	4461      	add	r1, ip
 808cd44:	f8d9 c000 	ldr.w	ip, [r9]
 808cd48:	0c12      	lsrs	r2, r2, #16
 808cd4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 808cd4e:	fb0a c202 	mla	r2, sl, r2, ip
 808cd52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 808cd56:	b289      	uxth	r1, r1
 808cd58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 808cd5c:	4577      	cmp	r7, lr
 808cd5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 808cd62:	f849 1b04 	str.w	r1, [r9], #4
 808cd66:	d8e3      	bhi.n	808cd30 <__multiply+0xb0>
 808cd68:	9a01      	ldr	r2, [sp, #4]
 808cd6a:	f845 c002 	str.w	ip, [r5, r2]
 808cd6e:	9a03      	ldr	r2, [sp, #12]
 808cd70:	3304      	adds	r3, #4
 808cd72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 808cd76:	f1b9 0f00 	cmp.w	r9, #0
 808cd7a:	d020      	beq.n	808cdbe <__multiply+0x13e>
 808cd7c:	46ae      	mov	lr, r5
 808cd7e:	f04f 0a00 	mov.w	sl, #0
 808cd82:	6829      	ldr	r1, [r5, #0]
 808cd84:	f104 0c14 	add.w	ip, r4, #20
 808cd88:	f8bc b000 	ldrh.w	fp, [ip]
 808cd8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 808cd90:	b289      	uxth	r1, r1
 808cd92:	fb09 220b 	mla	r2, r9, fp, r2
 808cd96:	4492      	add	sl, r2
 808cd98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 808cd9c:	f84e 1b04 	str.w	r1, [lr], #4
 808cda0:	f85c 2b04 	ldr.w	r2, [ip], #4
 808cda4:	f8be 1000 	ldrh.w	r1, [lr]
 808cda8:	0c12      	lsrs	r2, r2, #16
 808cdaa:	fb09 1102 	mla	r1, r9, r2, r1
 808cdae:	4567      	cmp	r7, ip
 808cdb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 808cdb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 808cdb8:	d8e6      	bhi.n	808cd88 <__multiply+0x108>
 808cdba:	9a01      	ldr	r2, [sp, #4]
 808cdbc:	50a9      	str	r1, [r5, r2]
 808cdbe:	3504      	adds	r5, #4
 808cdc0:	e79b      	b.n	808ccfa <__multiply+0x7a>
 808cdc2:	3e01      	subs	r6, #1
 808cdc4:	e79d      	b.n	808cd02 <__multiply+0x82>
 808cdc6:	bf00      	nop
 808cdc8:	0808f5d9 	.word	0x0808f5d9
 808cdcc:	0808f682 	.word	0x0808f682

0808cdd0 <__pow5mult>:
 808cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808cdd4:	4615      	mov	r5, r2
 808cdd6:	f012 0203 	ands.w	r2, r2, #3
 808cdda:	4606      	mov	r6, r0
 808cddc:	460f      	mov	r7, r1
 808cdde:	d007      	beq.n	808cdf0 <__pow5mult+0x20>
 808cde0:	4c25      	ldr	r4, [pc, #148]	; (808ce78 <__pow5mult+0xa8>)
 808cde2:	3a01      	subs	r2, #1
 808cde4:	2300      	movs	r3, #0
 808cde6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808cdea:	f7ff fe55 	bl	808ca98 <__multadd>
 808cdee:	4607      	mov	r7, r0
 808cdf0:	10ad      	asrs	r5, r5, #2
 808cdf2:	d03d      	beq.n	808ce70 <__pow5mult+0xa0>
 808cdf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808cdf6:	b97c      	cbnz	r4, 808ce18 <__pow5mult+0x48>
 808cdf8:	2010      	movs	r0, #16
 808cdfa:	f7fa fee5 	bl	8087bc8 <malloc>
 808cdfe:	4602      	mov	r2, r0
 808ce00:	6270      	str	r0, [r6, #36]	; 0x24
 808ce02:	b928      	cbnz	r0, 808ce10 <__pow5mult+0x40>
 808ce04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 808ce08:	4b1c      	ldr	r3, [pc, #112]	; (808ce7c <__pow5mult+0xac>)
 808ce0a:	481d      	ldr	r0, [pc, #116]	; (808ce80 <__pow5mult+0xb0>)
 808ce0c:	f7fa ff2c 	bl	8087c68 <__assert_func>
 808ce10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808ce14:	6004      	str	r4, [r0, #0]
 808ce16:	60c4      	str	r4, [r0, #12]
 808ce18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808ce1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808ce20:	b94c      	cbnz	r4, 808ce36 <__pow5mult+0x66>
 808ce22:	f240 2171 	movw	r1, #625	; 0x271
 808ce26:	4630      	mov	r0, r6
 808ce28:	f7ff ff14 	bl	808cc54 <__i2b>
 808ce2c:	2300      	movs	r3, #0
 808ce2e:	4604      	mov	r4, r0
 808ce30:	f8c8 0008 	str.w	r0, [r8, #8]
 808ce34:	6003      	str	r3, [r0, #0]
 808ce36:	f04f 0900 	mov.w	r9, #0
 808ce3a:	07eb      	lsls	r3, r5, #31
 808ce3c:	d50a      	bpl.n	808ce54 <__pow5mult+0x84>
 808ce3e:	4639      	mov	r1, r7
 808ce40:	4622      	mov	r2, r4
 808ce42:	4630      	mov	r0, r6
 808ce44:	f7ff ff1c 	bl	808cc80 <__multiply>
 808ce48:	4680      	mov	r8, r0
 808ce4a:	4639      	mov	r1, r7
 808ce4c:	4630      	mov	r0, r6
 808ce4e:	f7ff fe01 	bl	808ca54 <_Bfree>
 808ce52:	4647      	mov	r7, r8
 808ce54:	106d      	asrs	r5, r5, #1
 808ce56:	d00b      	beq.n	808ce70 <__pow5mult+0xa0>
 808ce58:	6820      	ldr	r0, [r4, #0]
 808ce5a:	b938      	cbnz	r0, 808ce6c <__pow5mult+0x9c>
 808ce5c:	4622      	mov	r2, r4
 808ce5e:	4621      	mov	r1, r4
 808ce60:	4630      	mov	r0, r6
 808ce62:	f7ff ff0d 	bl	808cc80 <__multiply>
 808ce66:	6020      	str	r0, [r4, #0]
 808ce68:	f8c0 9000 	str.w	r9, [r0]
 808ce6c:	4604      	mov	r4, r0
 808ce6e:	e7e4      	b.n	808ce3a <__pow5mult+0x6a>
 808ce70:	4638      	mov	r0, r7
 808ce72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808ce76:	bf00      	nop
 808ce78:	0808f7f0 	.word	0x0808f7f0
 808ce7c:	0808f3ee 	.word	0x0808f3ee
 808ce80:	0808f682 	.word	0x0808f682

0808ce84 <__lshift>:
 808ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ce88:	460c      	mov	r4, r1
 808ce8a:	4607      	mov	r7, r0
 808ce8c:	4691      	mov	r9, r2
 808ce8e:	6923      	ldr	r3, [r4, #16]
 808ce90:	6849      	ldr	r1, [r1, #4]
 808ce92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808ce96:	68a3      	ldr	r3, [r4, #8]
 808ce98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808ce9c:	f108 0601 	add.w	r6, r8, #1
 808cea0:	42b3      	cmp	r3, r6
 808cea2:	db0b      	blt.n	808cebc <__lshift+0x38>
 808cea4:	4638      	mov	r0, r7
 808cea6:	f7ff fd95 	bl	808c9d4 <_Balloc>
 808ceaa:	4605      	mov	r5, r0
 808ceac:	b948      	cbnz	r0, 808cec2 <__lshift+0x3e>
 808ceae:	4602      	mov	r2, r0
 808ceb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 808ceb4:	4b29      	ldr	r3, [pc, #164]	; (808cf5c <__lshift+0xd8>)
 808ceb6:	482a      	ldr	r0, [pc, #168]	; (808cf60 <__lshift+0xdc>)
 808ceb8:	f7fa fed6 	bl	8087c68 <__assert_func>
 808cebc:	3101      	adds	r1, #1
 808cebe:	005b      	lsls	r3, r3, #1
 808cec0:	e7ee      	b.n	808cea0 <__lshift+0x1c>
 808cec2:	2300      	movs	r3, #0
 808cec4:	f100 0114 	add.w	r1, r0, #20
 808cec8:	f100 0210 	add.w	r2, r0, #16
 808cecc:	4618      	mov	r0, r3
 808cece:	4553      	cmp	r3, sl
 808ced0:	db37      	blt.n	808cf42 <__lshift+0xbe>
 808ced2:	6920      	ldr	r0, [r4, #16]
 808ced4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808ced8:	f104 0314 	add.w	r3, r4, #20
 808cedc:	f019 091f 	ands.w	r9, r9, #31
 808cee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808cee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 808cee8:	d02f      	beq.n	808cf4a <__lshift+0xc6>
 808ceea:	468a      	mov	sl, r1
 808ceec:	f04f 0c00 	mov.w	ip, #0
 808cef0:	f1c9 0e20 	rsb	lr, r9, #32
 808cef4:	681a      	ldr	r2, [r3, #0]
 808cef6:	fa02 f209 	lsl.w	r2, r2, r9
 808cefa:	ea42 020c 	orr.w	r2, r2, ip
 808cefe:	f84a 2b04 	str.w	r2, [sl], #4
 808cf02:	f853 2b04 	ldr.w	r2, [r3], #4
 808cf06:	4298      	cmp	r0, r3
 808cf08:	fa22 fc0e 	lsr.w	ip, r2, lr
 808cf0c:	d8f2      	bhi.n	808cef4 <__lshift+0x70>
 808cf0e:	1b03      	subs	r3, r0, r4
 808cf10:	3b15      	subs	r3, #21
 808cf12:	f023 0303 	bic.w	r3, r3, #3
 808cf16:	3304      	adds	r3, #4
 808cf18:	f104 0215 	add.w	r2, r4, #21
 808cf1c:	4290      	cmp	r0, r2
 808cf1e:	bf38      	it	cc
 808cf20:	2304      	movcc	r3, #4
 808cf22:	f841 c003 	str.w	ip, [r1, r3]
 808cf26:	f1bc 0f00 	cmp.w	ip, #0
 808cf2a:	d001      	beq.n	808cf30 <__lshift+0xac>
 808cf2c:	f108 0602 	add.w	r6, r8, #2
 808cf30:	3e01      	subs	r6, #1
 808cf32:	4638      	mov	r0, r7
 808cf34:	4621      	mov	r1, r4
 808cf36:	612e      	str	r6, [r5, #16]
 808cf38:	f7ff fd8c 	bl	808ca54 <_Bfree>
 808cf3c:	4628      	mov	r0, r5
 808cf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cf42:	f842 0f04 	str.w	r0, [r2, #4]!
 808cf46:	3301      	adds	r3, #1
 808cf48:	e7c1      	b.n	808cece <__lshift+0x4a>
 808cf4a:	3904      	subs	r1, #4
 808cf4c:	f853 2b04 	ldr.w	r2, [r3], #4
 808cf50:	4298      	cmp	r0, r3
 808cf52:	f841 2f04 	str.w	r2, [r1, #4]!
 808cf56:	d8f9      	bhi.n	808cf4c <__lshift+0xc8>
 808cf58:	e7ea      	b.n	808cf30 <__lshift+0xac>
 808cf5a:	bf00      	nop
 808cf5c:	0808f5d9 	.word	0x0808f5d9
 808cf60:	0808f682 	.word	0x0808f682

0808cf64 <__mcmp>:
 808cf64:	4603      	mov	r3, r0
 808cf66:	690a      	ldr	r2, [r1, #16]
 808cf68:	6900      	ldr	r0, [r0, #16]
 808cf6a:	b530      	push	{r4, r5, lr}
 808cf6c:	1a80      	subs	r0, r0, r2
 808cf6e:	d10d      	bne.n	808cf8c <__mcmp+0x28>
 808cf70:	3314      	adds	r3, #20
 808cf72:	3114      	adds	r1, #20
 808cf74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 808cf78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 808cf7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 808cf80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 808cf84:	4295      	cmp	r5, r2
 808cf86:	d002      	beq.n	808cf8e <__mcmp+0x2a>
 808cf88:	d304      	bcc.n	808cf94 <__mcmp+0x30>
 808cf8a:	2001      	movs	r0, #1
 808cf8c:	bd30      	pop	{r4, r5, pc}
 808cf8e:	42a3      	cmp	r3, r4
 808cf90:	d3f4      	bcc.n	808cf7c <__mcmp+0x18>
 808cf92:	e7fb      	b.n	808cf8c <__mcmp+0x28>
 808cf94:	f04f 30ff 	mov.w	r0, #4294967295
 808cf98:	e7f8      	b.n	808cf8c <__mcmp+0x28>
	...

0808cf9c <__mdiff>:
 808cf9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cfa0:	460d      	mov	r5, r1
 808cfa2:	4607      	mov	r7, r0
 808cfa4:	4611      	mov	r1, r2
 808cfa6:	4628      	mov	r0, r5
 808cfa8:	4614      	mov	r4, r2
 808cfaa:	f7ff ffdb 	bl	808cf64 <__mcmp>
 808cfae:	1e06      	subs	r6, r0, #0
 808cfb0:	d111      	bne.n	808cfd6 <__mdiff+0x3a>
 808cfb2:	4631      	mov	r1, r6
 808cfb4:	4638      	mov	r0, r7
 808cfb6:	f7ff fd0d 	bl	808c9d4 <_Balloc>
 808cfba:	4602      	mov	r2, r0
 808cfbc:	b928      	cbnz	r0, 808cfca <__mdiff+0x2e>
 808cfbe:	f240 2132 	movw	r1, #562	; 0x232
 808cfc2:	4b3a      	ldr	r3, [pc, #232]	; (808d0ac <__mdiff+0x110>)
 808cfc4:	483a      	ldr	r0, [pc, #232]	; (808d0b0 <__mdiff+0x114>)
 808cfc6:	f7fa fe4f 	bl	8087c68 <__assert_func>
 808cfca:	2301      	movs	r3, #1
 808cfcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 808cfd0:	4610      	mov	r0, r2
 808cfd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cfd6:	bfa4      	itt	ge
 808cfd8:	4623      	movge	r3, r4
 808cfda:	462c      	movge	r4, r5
 808cfdc:	4638      	mov	r0, r7
 808cfde:	6861      	ldr	r1, [r4, #4]
 808cfe0:	bfa6      	itte	ge
 808cfe2:	461d      	movge	r5, r3
 808cfe4:	2600      	movge	r6, #0
 808cfe6:	2601      	movlt	r6, #1
 808cfe8:	f7ff fcf4 	bl	808c9d4 <_Balloc>
 808cfec:	4602      	mov	r2, r0
 808cfee:	b918      	cbnz	r0, 808cff8 <__mdiff+0x5c>
 808cff0:	f44f 7110 	mov.w	r1, #576	; 0x240
 808cff4:	4b2d      	ldr	r3, [pc, #180]	; (808d0ac <__mdiff+0x110>)
 808cff6:	e7e5      	b.n	808cfc4 <__mdiff+0x28>
 808cff8:	f102 0814 	add.w	r8, r2, #20
 808cffc:	46c2      	mov	sl, r8
 808cffe:	f04f 0c00 	mov.w	ip, #0
 808d002:	6927      	ldr	r7, [r4, #16]
 808d004:	60c6      	str	r6, [r0, #12]
 808d006:	692e      	ldr	r6, [r5, #16]
 808d008:	f104 0014 	add.w	r0, r4, #20
 808d00c:	f105 0914 	add.w	r9, r5, #20
 808d010:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 808d014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808d018:	3410      	adds	r4, #16
 808d01a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 808d01e:	f859 3b04 	ldr.w	r3, [r9], #4
 808d022:	fa1f f18b 	uxth.w	r1, fp
 808d026:	448c      	add	ip, r1
 808d028:	b299      	uxth	r1, r3
 808d02a:	0c1b      	lsrs	r3, r3, #16
 808d02c:	ebac 0101 	sub.w	r1, ip, r1
 808d030:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808d034:	eb03 4321 	add.w	r3, r3, r1, asr #16
 808d038:	b289      	uxth	r1, r1
 808d03a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808d03e:	454e      	cmp	r6, r9
 808d040:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 808d044:	f84a 3b04 	str.w	r3, [sl], #4
 808d048:	d8e7      	bhi.n	808d01a <__mdiff+0x7e>
 808d04a:	1b73      	subs	r3, r6, r5
 808d04c:	3b15      	subs	r3, #21
 808d04e:	f023 0303 	bic.w	r3, r3, #3
 808d052:	3515      	adds	r5, #21
 808d054:	3304      	adds	r3, #4
 808d056:	42ae      	cmp	r6, r5
 808d058:	bf38      	it	cc
 808d05a:	2304      	movcc	r3, #4
 808d05c:	4418      	add	r0, r3
 808d05e:	4443      	add	r3, r8
 808d060:	461e      	mov	r6, r3
 808d062:	4605      	mov	r5, r0
 808d064:	4575      	cmp	r5, lr
 808d066:	d30e      	bcc.n	808d086 <__mdiff+0xea>
 808d068:	f10e 0103 	add.w	r1, lr, #3
 808d06c:	1a09      	subs	r1, r1, r0
 808d06e:	f021 0103 	bic.w	r1, r1, #3
 808d072:	3803      	subs	r0, #3
 808d074:	4586      	cmp	lr, r0
 808d076:	bf38      	it	cc
 808d078:	2100      	movcc	r1, #0
 808d07a:	4419      	add	r1, r3
 808d07c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 808d080:	b18b      	cbz	r3, 808d0a6 <__mdiff+0x10a>
 808d082:	6117      	str	r7, [r2, #16]
 808d084:	e7a4      	b.n	808cfd0 <__mdiff+0x34>
 808d086:	f855 8b04 	ldr.w	r8, [r5], #4
 808d08a:	fa1f f188 	uxth.w	r1, r8
 808d08e:	4461      	add	r1, ip
 808d090:	140c      	asrs	r4, r1, #16
 808d092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 808d096:	b289      	uxth	r1, r1
 808d098:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 808d09c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 808d0a0:	f846 1b04 	str.w	r1, [r6], #4
 808d0a4:	e7de      	b.n	808d064 <__mdiff+0xc8>
 808d0a6:	3f01      	subs	r7, #1
 808d0a8:	e7e8      	b.n	808d07c <__mdiff+0xe0>
 808d0aa:	bf00      	nop
 808d0ac:	0808f5d9 	.word	0x0808f5d9
 808d0b0:	0808f682 	.word	0x0808f682

0808d0b4 <__ulp>:
 808d0b4:	4b11      	ldr	r3, [pc, #68]	; (808d0fc <__ulp+0x48>)
 808d0b6:	400b      	ands	r3, r1
 808d0b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808d0bc:	2b00      	cmp	r3, #0
 808d0be:	dd02      	ble.n	808d0c6 <__ulp+0x12>
 808d0c0:	2000      	movs	r0, #0
 808d0c2:	4619      	mov	r1, r3
 808d0c4:	4770      	bx	lr
 808d0c6:	425b      	negs	r3, r3
 808d0c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 808d0cc:	f04f 0000 	mov.w	r0, #0
 808d0d0:	f04f 0100 	mov.w	r1, #0
 808d0d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 808d0d8:	da04      	bge.n	808d0e4 <__ulp+0x30>
 808d0da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 808d0de:	fa43 f102 	asr.w	r1, r3, r2
 808d0e2:	4770      	bx	lr
 808d0e4:	f1a2 0314 	sub.w	r3, r2, #20
 808d0e8:	2b1e      	cmp	r3, #30
 808d0ea:	bfd6      	itet	le
 808d0ec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 808d0f0:	2301      	movgt	r3, #1
 808d0f2:	fa22 f303 	lsrle.w	r3, r2, r3
 808d0f6:	4618      	mov	r0, r3
 808d0f8:	4770      	bx	lr
 808d0fa:	bf00      	nop
 808d0fc:	7ff00000 	.word	0x7ff00000

0808d100 <__b2d>:
 808d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d104:	6907      	ldr	r7, [r0, #16]
 808d106:	f100 0914 	add.w	r9, r0, #20
 808d10a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 808d10e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 808d112:	f1a7 0804 	sub.w	r8, r7, #4
 808d116:	4630      	mov	r0, r6
 808d118:	f7ff fd4e 	bl	808cbb8 <__hi0bits>
 808d11c:	f1c0 0320 	rsb	r3, r0, #32
 808d120:	280a      	cmp	r0, #10
 808d122:	600b      	str	r3, [r1, #0]
 808d124:	491f      	ldr	r1, [pc, #124]	; (808d1a4 <__b2d+0xa4>)
 808d126:	dc17      	bgt.n	808d158 <__b2d+0x58>
 808d128:	45c1      	cmp	r9, r8
 808d12a:	bf28      	it	cs
 808d12c:	2200      	movcs	r2, #0
 808d12e:	f1c0 0c0b 	rsb	ip, r0, #11
 808d132:	fa26 f30c 	lsr.w	r3, r6, ip
 808d136:	bf38      	it	cc
 808d138:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808d13c:	ea43 0501 	orr.w	r5, r3, r1
 808d140:	f100 0315 	add.w	r3, r0, #21
 808d144:	fa06 f303 	lsl.w	r3, r6, r3
 808d148:	fa22 f20c 	lsr.w	r2, r2, ip
 808d14c:	ea43 0402 	orr.w	r4, r3, r2
 808d150:	4620      	mov	r0, r4
 808d152:	4629      	mov	r1, r5
 808d154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d158:	45c1      	cmp	r9, r8
 808d15a:	bf2e      	itee	cs
 808d15c:	2200      	movcs	r2, #0
 808d15e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808d162:	f1a7 0808 	subcc.w	r8, r7, #8
 808d166:	f1b0 030b 	subs.w	r3, r0, #11
 808d16a:	d016      	beq.n	808d19a <__b2d+0x9a>
 808d16c:	f1c3 0720 	rsb	r7, r3, #32
 808d170:	fa22 f107 	lsr.w	r1, r2, r7
 808d174:	45c8      	cmp	r8, r9
 808d176:	fa06 f603 	lsl.w	r6, r6, r3
 808d17a:	ea46 0601 	orr.w	r6, r6, r1
 808d17e:	bf94      	ite	ls
 808d180:	2100      	movls	r1, #0
 808d182:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 808d186:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 808d18a:	fa02 f003 	lsl.w	r0, r2, r3
 808d18e:	40f9      	lsrs	r1, r7
 808d190:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 808d194:	ea40 0401 	orr.w	r4, r0, r1
 808d198:	e7da      	b.n	808d150 <__b2d+0x50>
 808d19a:	4614      	mov	r4, r2
 808d19c:	ea46 0501 	orr.w	r5, r6, r1
 808d1a0:	e7d6      	b.n	808d150 <__b2d+0x50>
 808d1a2:	bf00      	nop
 808d1a4:	3ff00000 	.word	0x3ff00000

0808d1a8 <__d2b>:
 808d1a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808d1ac:	2101      	movs	r1, #1
 808d1ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 808d1b2:	4690      	mov	r8, r2
 808d1b4:	461d      	mov	r5, r3
 808d1b6:	f7ff fc0d 	bl	808c9d4 <_Balloc>
 808d1ba:	4604      	mov	r4, r0
 808d1bc:	b930      	cbnz	r0, 808d1cc <__d2b+0x24>
 808d1be:	4602      	mov	r2, r0
 808d1c0:	f240 310a 	movw	r1, #778	; 0x30a
 808d1c4:	4b24      	ldr	r3, [pc, #144]	; (808d258 <__d2b+0xb0>)
 808d1c6:	4825      	ldr	r0, [pc, #148]	; (808d25c <__d2b+0xb4>)
 808d1c8:	f7fa fd4e 	bl	8087c68 <__assert_func>
 808d1cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 808d1d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 808d1d4:	bb2d      	cbnz	r5, 808d222 <__d2b+0x7a>
 808d1d6:	9301      	str	r3, [sp, #4]
 808d1d8:	f1b8 0300 	subs.w	r3, r8, #0
 808d1dc:	d026      	beq.n	808d22c <__d2b+0x84>
 808d1de:	4668      	mov	r0, sp
 808d1e0:	9300      	str	r3, [sp, #0]
 808d1e2:	f7ff fd09 	bl	808cbf8 <__lo0bits>
 808d1e6:	9900      	ldr	r1, [sp, #0]
 808d1e8:	b1f0      	cbz	r0, 808d228 <__d2b+0x80>
 808d1ea:	9a01      	ldr	r2, [sp, #4]
 808d1ec:	f1c0 0320 	rsb	r3, r0, #32
 808d1f0:	fa02 f303 	lsl.w	r3, r2, r3
 808d1f4:	430b      	orrs	r3, r1
 808d1f6:	40c2      	lsrs	r2, r0
 808d1f8:	6163      	str	r3, [r4, #20]
 808d1fa:	9201      	str	r2, [sp, #4]
 808d1fc:	9b01      	ldr	r3, [sp, #4]
 808d1fe:	2b00      	cmp	r3, #0
 808d200:	bf14      	ite	ne
 808d202:	2102      	movne	r1, #2
 808d204:	2101      	moveq	r1, #1
 808d206:	61a3      	str	r3, [r4, #24]
 808d208:	6121      	str	r1, [r4, #16]
 808d20a:	b1c5      	cbz	r5, 808d23e <__d2b+0x96>
 808d20c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 808d210:	4405      	add	r5, r0
 808d212:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808d216:	603d      	str	r5, [r7, #0]
 808d218:	6030      	str	r0, [r6, #0]
 808d21a:	4620      	mov	r0, r4
 808d21c:	b002      	add	sp, #8
 808d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d226:	e7d6      	b.n	808d1d6 <__d2b+0x2e>
 808d228:	6161      	str	r1, [r4, #20]
 808d22a:	e7e7      	b.n	808d1fc <__d2b+0x54>
 808d22c:	a801      	add	r0, sp, #4
 808d22e:	f7ff fce3 	bl	808cbf8 <__lo0bits>
 808d232:	2101      	movs	r1, #1
 808d234:	9b01      	ldr	r3, [sp, #4]
 808d236:	6121      	str	r1, [r4, #16]
 808d238:	6163      	str	r3, [r4, #20]
 808d23a:	3020      	adds	r0, #32
 808d23c:	e7e5      	b.n	808d20a <__d2b+0x62>
 808d23e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 808d242:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808d246:	6038      	str	r0, [r7, #0]
 808d248:	6918      	ldr	r0, [r3, #16]
 808d24a:	f7ff fcb5 	bl	808cbb8 <__hi0bits>
 808d24e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 808d252:	6031      	str	r1, [r6, #0]
 808d254:	e7e1      	b.n	808d21a <__d2b+0x72>
 808d256:	bf00      	nop
 808d258:	0808f5d9 	.word	0x0808f5d9
 808d25c:	0808f682 	.word	0x0808f682

0808d260 <__ratio>:
 808d260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d264:	4688      	mov	r8, r1
 808d266:	4669      	mov	r1, sp
 808d268:	4681      	mov	r9, r0
 808d26a:	f7ff ff49 	bl	808d100 <__b2d>
 808d26e:	460f      	mov	r7, r1
 808d270:	4604      	mov	r4, r0
 808d272:	460d      	mov	r5, r1
 808d274:	4640      	mov	r0, r8
 808d276:	a901      	add	r1, sp, #4
 808d278:	f7ff ff42 	bl	808d100 <__b2d>
 808d27c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808d280:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808d284:	468b      	mov	fp, r1
 808d286:	eba3 0c02 	sub.w	ip, r3, r2
 808d28a:	e9dd 3200 	ldrd	r3, r2, [sp]
 808d28e:	1a9b      	subs	r3, r3, r2
 808d290:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 808d294:	2b00      	cmp	r3, #0
 808d296:	bfd5      	itete	le
 808d298:	460a      	movle	r2, r1
 808d29a:	462a      	movgt	r2, r5
 808d29c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 808d2a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 808d2a4:	bfd8      	it	le
 808d2a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 808d2aa:	465b      	mov	r3, fp
 808d2ac:	4602      	mov	r2, r0
 808d2ae:	4639      	mov	r1, r7
 808d2b0:	4620      	mov	r0, r4
 808d2b2:	f7fd f8cb 	bl	808a44c <__aeabi_ddiv>
 808d2b6:	b003      	add	sp, #12
 808d2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d2bc <__copybits>:
 808d2bc:	3901      	subs	r1, #1
 808d2be:	b570      	push	{r4, r5, r6, lr}
 808d2c0:	1149      	asrs	r1, r1, #5
 808d2c2:	6914      	ldr	r4, [r2, #16]
 808d2c4:	3101      	adds	r1, #1
 808d2c6:	f102 0314 	add.w	r3, r2, #20
 808d2ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808d2ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808d2d2:	1f05      	subs	r5, r0, #4
 808d2d4:	42a3      	cmp	r3, r4
 808d2d6:	d30c      	bcc.n	808d2f2 <__copybits+0x36>
 808d2d8:	1aa3      	subs	r3, r4, r2
 808d2da:	3b11      	subs	r3, #17
 808d2dc:	f023 0303 	bic.w	r3, r3, #3
 808d2e0:	3211      	adds	r2, #17
 808d2e2:	42a2      	cmp	r2, r4
 808d2e4:	bf88      	it	hi
 808d2e6:	2300      	movhi	r3, #0
 808d2e8:	4418      	add	r0, r3
 808d2ea:	2300      	movs	r3, #0
 808d2ec:	4288      	cmp	r0, r1
 808d2ee:	d305      	bcc.n	808d2fc <__copybits+0x40>
 808d2f0:	bd70      	pop	{r4, r5, r6, pc}
 808d2f2:	f853 6b04 	ldr.w	r6, [r3], #4
 808d2f6:	f845 6f04 	str.w	r6, [r5, #4]!
 808d2fa:	e7eb      	b.n	808d2d4 <__copybits+0x18>
 808d2fc:	f840 3b04 	str.w	r3, [r0], #4
 808d300:	e7f4      	b.n	808d2ec <__copybits+0x30>

0808d302 <__any_on>:
 808d302:	f100 0214 	add.w	r2, r0, #20
 808d306:	6900      	ldr	r0, [r0, #16]
 808d308:	114b      	asrs	r3, r1, #5
 808d30a:	4298      	cmp	r0, r3
 808d30c:	b510      	push	{r4, lr}
 808d30e:	db11      	blt.n	808d334 <__any_on+0x32>
 808d310:	dd0a      	ble.n	808d328 <__any_on+0x26>
 808d312:	f011 011f 	ands.w	r1, r1, #31
 808d316:	d007      	beq.n	808d328 <__any_on+0x26>
 808d318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808d31c:	fa24 f001 	lsr.w	r0, r4, r1
 808d320:	fa00 f101 	lsl.w	r1, r0, r1
 808d324:	428c      	cmp	r4, r1
 808d326:	d10b      	bne.n	808d340 <__any_on+0x3e>
 808d328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808d32c:	4293      	cmp	r3, r2
 808d32e:	d803      	bhi.n	808d338 <__any_on+0x36>
 808d330:	2000      	movs	r0, #0
 808d332:	bd10      	pop	{r4, pc}
 808d334:	4603      	mov	r3, r0
 808d336:	e7f7      	b.n	808d328 <__any_on+0x26>
 808d338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808d33c:	2900      	cmp	r1, #0
 808d33e:	d0f5      	beq.n	808d32c <__any_on+0x2a>
 808d340:	2001      	movs	r0, #1
 808d342:	e7f6      	b.n	808d332 <__any_on+0x30>

0808d344 <_calloc_r>:
 808d344:	b538      	push	{r3, r4, r5, lr}
 808d346:	fb02 f501 	mul.w	r5, r2, r1
 808d34a:	4629      	mov	r1, r5
 808d34c:	f7fa fc7c 	bl	8087c48 <_malloc_r>
 808d350:	4604      	mov	r4, r0
 808d352:	b118      	cbz	r0, 808d35c <_calloc_r+0x18>
 808d354:	462a      	mov	r2, r5
 808d356:	2100      	movs	r1, #0
 808d358:	f7fe f807 	bl	808b36a <memset>
 808d35c:	4620      	mov	r0, r4
 808d35e:	bd38      	pop	{r3, r4, r5, pc}

0808d360 <__ascii_wctomb>:
 808d360:	4603      	mov	r3, r0
 808d362:	4608      	mov	r0, r1
 808d364:	b141      	cbz	r1, 808d378 <__ascii_wctomb+0x18>
 808d366:	2aff      	cmp	r2, #255	; 0xff
 808d368:	d904      	bls.n	808d374 <__ascii_wctomb+0x14>
 808d36a:	228a      	movs	r2, #138	; 0x8a
 808d36c:	f04f 30ff 	mov.w	r0, #4294967295
 808d370:	601a      	str	r2, [r3, #0]
 808d372:	4770      	bx	lr
 808d374:	2001      	movs	r0, #1
 808d376:	700a      	strb	r2, [r1, #0]
 808d378:	4770      	bx	lr
	...

0808d37c <__aeabi_d2lz>:
 808d37c:	b538      	push	{r3, r4, r5, lr}
 808d37e:	4605      	mov	r5, r0
 808d380:	460c      	mov	r4, r1
 808d382:	2200      	movs	r2, #0
 808d384:	2300      	movs	r3, #0
 808d386:	4628      	mov	r0, r5
 808d388:	4621      	mov	r1, r4
 808d38a:	f7fd f9a7 	bl	808a6dc <__aeabi_dcmplt>
 808d38e:	b928      	cbnz	r0, 808d39c <__aeabi_d2lz+0x20>
 808d390:	4628      	mov	r0, r5
 808d392:	4621      	mov	r1, r4
 808d394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808d398:	f7fd be0c 	b.w	808afb4 <__aeabi_d2ulz>
 808d39c:	4628      	mov	r0, r5
 808d39e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808d3a2:	f7fd fe07 	bl	808afb4 <__aeabi_d2ulz>
 808d3a6:	4240      	negs	r0, r0
 808d3a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d3ac:	bd38      	pop	{r3, r4, r5, pc}
 808d3ae:	bf00      	nop

0808d3b0 <dynalib_user>:
 808d3b0:	0041 0808 0081 0808 00a9 0808 00ad 0808     A...............
 808d3c0:	0000 0000 0100 0402 1008 2e25 5832 5400     ..........%.2X.T
 808d3d0:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808d3e0:	676e 6620 6f72 206d 4948 3848 3231 0030     ng from HIH8120.
 808d3f0:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 808d400:	6e69 2067 7266 6d6f 5420 504d 3633 5400     ing from TMP36.T
 808d410:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808d420:	676e 6620 6f72 206d 4d42 2045 6f66 2072     ng from BME for 
 808d430:	6c41 6870 7361 6e65 6573 5300 6174 7472     Alphasense.Start
 808d440:	6f20 2066 6c61 6870 2061 2032 6572 6461      of alpha 2 read
 808d450:	4300 756f 646c 276e 2074 6f63 6d6d 6e75     .Couldn't commun
 808d460:	6369 7461 2065 6977 6874 4c20 504d 3139     icate with LMP91
 808d470:	3030 2030 0032 6168 666c 7620 6572 3266     000 2.half vref2
 808d480:	6120 7364 0031 7453 7461 7375 3d20 203d      ads1.Status == 
 808d490:	2030 7266 6d6f 4c20 504d 3139 3030 2030     0 from LMP91000 
 808d4a0:	2032 7473 7461 7375 7220 6765 2d00 3939     2 status reg.-99
 808d4b0:	5700 6972 6974 676e 6420 7461 2061 6f74     .Writing data to
 808d4c0:	6c20 676f 6620 6c69 2e65 4600 6c69 2065      log file..File 
 808d4d0:	7453 7261 2074 6974 656d 7473 6d61 3a70     Start timestamp:
 808d4e0:	0020 6e55 6261 656c 7420 206f 7277 7469      .Unable to writ
 808d4f0:	2065 6f74 6c20 676f 6620 6c69 0065 6e69     e to log file.in
 808d500:	7469 4700 4147 4500 7272 726f 7220 6165     it.GGA.Error rea
 808d510:	6964 676e 4720 5350 4700 5350 7520 6374     ding GPS.GPS utc
 808d520:	7320 7274 6e69 3a67 0020 614c 6974 7574      string: .Latitu
 808d530:	6564 7320 7274 6e69 3a67 0020 6f6c 676e     de string: .long
 808d540:	7469 6475 2065 7473 6972 676e 203a 4500     itude string: .E
 808d550:	7272 726f 7220 6165 6964 676e 4720 5350     rror reading GPS
 808d560:	5220 434d 5300 6174 7472 6f20 2066 6c61      RMC.Start of al
 808d570:	6870 2061 6572 6461 4300 756f 646c 276e     pha read.Couldn'
 808d580:	2074 6f63 6d6d 6e75 6369 7461 2065 6977     t communicate wi
 808d590:	6874 4c20 504d 3139 3030 5f30 0031 6148     th LMP91000_1.Ha
 808d5a0:	666c 6f76 746c 203a 3125 322e 0a66 000d     lfvolt: %1.2f...
 808d5b0:	6148 666c 6f76 746c 6820 6769 6568 2072     Halfvolt higher 
 808d5c0:	6874 6e61 3020 352e 5300 6174 7574 2073     than 0.5.Status 
 808d5d0:	203d 2030 7266 6d6f 4c20 504d 3139 3030     = 0 from LMP9100
 808d5e0:	2030 7473 7461 7375 7220 6765 4c00 504d     0 status reg.LMP
 808d5f0:	3031 3030 7320 6174 7574 2073 203d 0030     1000 status = 0.
 808d600:	4f43 6d20 6165 7573 6572 656d 746e 3a73     CO measurements:
 808d610:	2020 0d0a 4100 5f30 6167 3a73 2520 0a64       ...A0_gas: %d.
 808d620:	000d 3141 615f 7875 203a 6425 0d0a 4100     ..A1_aux: %d...A
 808d630:	5f32 6574 706d 203a 6425 0d0a 6800 6c61     2_temp: %d...hal
 808d640:	5f66 7276 6665 203a 6425 0d0a 4000 0021     f_vref: %d...@!.
 808d650:	6553 646e 6e69 2067 656e 2077 6977 6966     Sending new wifi
 808d660:	6320 6572 6564 746e 6169 736c 7420 206f      credentials to 
 808d670:	5345 0050 7553 6363 7365 2173 6700 7465     ESP.Success!.get
 808d680:	6565 7270 6d6f 6164 6174 4300 5f4f 657a     eepromdata.CO_ze
 808d690:	6f72 0041 742e 7478 4300 6568 6b63 6e69     roA..txt.Checkin
 808d6a0:	2067 6f66 2072 6473 6320 7261 0064 6f6c     g for sd card.lo
 808d6b0:	5f67 4300 6572 7461 6465 6e20 7765 6620     g_.Created new f
 808d6c0:	6c69 2065 6f74 6c20 676f 7420 206f 5375     ile to log to uS
 808d6d0:	2044 6163 6472 203a 4e00 206f 5375 2044     D card: .No uSD 
 808d6e0:	6163 6472 6420 7465 6365 6574 2e64 5300     card detected..S
 808d6f0:	6174 7472 6e69 2067 4d4c 3950 3031 3030     tarting LMP91000
 808d700:	4320 204f 6e69 7469 6169 696c 617a 6974      CO initializati
 808d710:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 808d720:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 808d730:	3139 3030 5f30 2031 6f66 2072 4f43 4900     91000_1 for CO.I
 808d740:	696e 6974 6c61 7a69 6465 4c20 504d 3139     nitialized LMP91
 808d750:	3030 5f30 2031 6f66 2072 4f43 4900 696e     000_1 for CO.Ini
 808d760:	6974 6c61 7a69 6465 4c20 504d 3139 3030     tialized LMP9100
 808d770:	2030 6f66 2072 4f43 4300 756f 646c 6e20     0 for CO.Could n
 808d780:	746f 6320 6d6f 756d 696e 6163 6574 7720     ot communicate w
 808d790:	7469 2068 6441 6661 7572 7469 415f 5344     ith Adafruit_ADS
 808d7a0:	3131 3531 6620 726f 4320 004f 7453 7261     1115 for CO.Star
 808d7b0:	6974 676e 4c20 504d 3139 3030 5f30 2032     ting LMP91000_2 
 808d7c0:	6e69 7469 6169 696c 617a 6974 6e6f 4300     initialization.C
 808d7d0:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 808d7e0:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 808d7f0:	2030 6f66 2072 0032 6e49 7469 6169 696c     0 for 2.Initiali
 808d800:	657a 2064 4d4c 3950 3031 3030 6620 726f     zed LMP91000 for
 808d810:	4320 204f 0032 6f43 6c75 2064 6f6e 2074      CO 2.Could not 
 808d820:	6966 646e 6120 7620 6c61 6469 5420 3736     find a valid T67
 808d830:	3331 4300 756f 646c 6e20 746f 6620 6e69     13.Could not fin
 808d840:	2064 2061 6176 696c 2064 4d42 3645 3038     d a valid BME680
 808d850:	7320 6e65 6f73 2c72 6320 6568 6b63 7720      sensor, check w
 808d860:	7269 6e69 2167 4900 696e 6974 6c61 7a69     iring!.Initializ
 808d870:	6465 4220 454d 5320 6e65 6f73 0072 5345     ed BME Sensor.ES
 808d880:	2050 6572 6573 2174 4600 2057 6556 7372     P reset!.FW Vers
 808d890:	6f69 3a6e 0020 7542 6c69 3a64 0020 7953     ion: .Build: .Sy
 808d8a0:	7473 6d65 7620 7265 6973 6e6f 203a 7325     stem version: %s
 808d8b0:	4400 5645 432c 5f4f 2841 7070 296d 432c     .DEV,CO_A(ppm),C
 808d8c0:	5f4f 2842 7070 296d 432e 324f 7028 6d70     O_B(ppm).CO2(ppm
 808d8d0:	2c29 7250 7365 2873 426d 7261 2c29 614c     ),Press(mBar),La
 808d8e0:	6974 7574 6564 4c2c 6e6f 6967 7574 6564     titude,Longitude
 808d8f0:	532c 5649 482c 726f 7a69 6e6f 6174 206c     ,SIV,Horizontal 
 808d900:	6944 756c 6974 6e6f 422c 7461 2874 2925     Dilution,Batt(%)
 808d910:	442c 7461 2c65 6954 656d 2d00 3000 002c     ,Date,Time.-.0,.
 808d920:	7925 252f 2f6d 6425 252c 3a48 4d25 253a     %y/%m/%d,%H:%M:%
 808d930:	0053 6c4f 2064 6e69 7570 2074 7563 7272     S.Old input curr
 808d940:	6e65 2074 696c 696d 3a74 2520 0a64 000d     ent limit: %d...
 808d950:	654e 2077 6e69 7570 2074 7563 7272 6e65     New input curren
 808d960:	2074 696c 696d 3a74 2520 0a64 000d 6e49     t limit: %d...In
 808d970:	7263 6165 6973 676e 4320 6168 6772 2065     creasing Charge 
 808d980:	7563 7272 6e65 2074 7266 6d6f 2520 2064     current from %d 
 808d990:	416d 7420 206f 6e00 7765 6320 6168 6772     mA to .new charg
 808d9a0:	2065 7563 7272 6e65 2074 666f 2520 2064     e current of %d 
 808d9b0:	416d 0d0a 4300 7275 6572 746e 7320 6f74     mA...Current sto
 808d9c0:	6572 2064 7373 6469 203a 4300 7275 6572     red ssid: .Curre
 808d9d0:	746e 7320 6f74 6572 2064 6170 7373 6f77     nt stored passwo
 808d9e0:	6472 203a 5000 656c 7361 2065 6e65 6574     rd: .Please ente
 808d9f0:	2072 6170 7373 6f77 6472 6920 206e 726f     r password in or
 808da00:	6564 2072 6f74 6d20 6b61 2065 6863 6e61     der to make chan
 808da10:	6567 2e73 0d0a 6200 756f 646c 5000 7361     ges....bould.Pas
 808da20:	7773 726f 2064 6f63 7272 6365 2174 4500     sword correct!.E
 808da30:	746e 7265 6e20 7765 7320 6973 3a64 5900     nter new ssid:.Y
 808da40:	756f 2072 656e 2077 7373 6469 7720 6c69     our new ssid wil
 808da50:	206c 6562 203a 4900 2073 6874 7369 6f20     l be: .Is this o
 808da60:	616b 3f79 7928 6f20 2072 296e 5300 7661     kay?(y or n).Sav
 808da70:	6e69 2067 656e 2077 7373 6469 4500 746e     ing new ssid.Ent
 808da80:	7265 6e20 7765 7020 7361 7773 726f 0064     er new password.
 808da90:	6f59 7275 6e20 7765 7020 7361 7773 726f     Your new passwor
 808daa0:	2064 6977 6c6c 6220 3a65 0020 6153 6976     d will be: .Savi
 808dab0:	676e 6e20 7765 7020 7361 7773 726f 0064     ng new password.
 808dac0:	6b6f 7961 202c 6f6e 7020 6f72 6c62 6d65     okay, no problem
 808dad0:	0d0a 5000 656c 7361 2065 6e65 6574 2072     ...Please enter 
 808dae0:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 808daf0:	2072 6f74 6520 616e 6c62 2065 6164 6174     r to enable data
 808db00:	7020 7375 2068 6f74 5320 6e65 6973 6c62      push to Sensibl
 808db10:	2065 6f49 0074 6d69 6573 736e 6269 656c     e Iot.imsensible
 808db20:	4500 616e 6c62 6e69 2067 6573 736e 6269     .Enabling sensib
 808db30:	656c 6920 746f 6420 7461 2061 7570 6873     le iot data push
 808db40:	002e 0d0a 6e49 6f63 7272 6365 2074 6170     ....Incorrect pa
 808db50:	7373 6f77 6472 0021 7543 7272 6e65 2074     ssword!.Current 
 808db60:	6544 6976 6563 4920 3a44 5000 656c 7361     Device ID:.Pleas
 808db70:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 808db80:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 808db90:	676e 2065 6874 2065 4449 4500 746e 7265     nge the ID.Enter
 808dba0:	6e20 7765 4420 7665 6369 2065 4449 003a      new Device ID:.
 808dbb0:	0d0a 654e 2077 6544 6976 6563 4920 3a44     ..New Device ID:
 808dbc0:	0a00 490d 766e 6c61 6469 7620 6c61 6575     ...Invalid value
 808dbd0:	0021 6c50 6165 6573 6520 746e 7265 7020     !.Please enter p
 808dbe0:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 808dbf0:	7420 206f 7061 6c70 2079 6564 6166 6c75      to apply defaul
 808dc00:	2074 6573 7474 6e69 7367 5000 7361 7773     t settings.Passw
 808dc10:	726f 2064 6f63 7272 6365 2c74 7220 7365     ord correct, res
 808dc20:	7465 6974 676e 6120 6c6c 7320 7465 6974     etting all setti
 808dc30:	676e 2073 6f74 6420 6665 7561 746c 2021     ngs to default! 
 808dc40:	5020 656c 7361 2065 6572 6573 2074 6f79      Please reset yo
 808dc50:	7275 4920 2044 6f74 7420 6568 6f20 656e     ur ID to the one
 808dc60:	7320 6f68 6e77 6f20 206e 6f79 7275 6520      shown on your e
 808dc70:	636e 6f6c 7573 6572 002e 6e45 6574 2072     nclosure..Enter 
 808dc80:	656e 2077 6544 6976 6563 7420 6d69 2065     new Device time 
 808dc90:	6e61 2064 6164 6574 2820 3031 6420 6769     and date (10 dig
 808dca0:	7469 6520 6f70 6863 7420 6d69 7365 6174     it epoch timesta
 808dcb0:	706d 3a29 0a00 4e0d 7765 4420 7665 6369     mp):...New Devic
 808dcc0:	2065 6954 656d 003a 6e45 6574 2072 656e     e Time:.Enter ne
 808dcd0:	2077 6544 6976 6563 7420 6d69 2065 6f7a     w Device time zo
 808dce0:	656e 2820 312d 2e32 2030 6f74 3120 2e34     ne (-12.0 to 14.
 808dcf0:	2930 0a00 4e0d 7765 4420 7665 6369 2065     0)...New Device 
 808dd00:	6974 656d 7a20 6e6f 3a65 4300 7275 6572     time zone:.Curre
 808dd10:	746e 4620 6572 7571 6e65 7963 203a 2800     nt Frequency: .(
 808dd20:	327e 7320 6365 6e6f 2964 6d20 6165 7573     ~2 second) measu
 808dd30:	6572 656d 746e 0073 6e45 6574 2072 656e     rements.Enter ne
 808dd40:	2077 6d61 756f 746e 0d0a 0a00 4e0d 7765     w amount.....New
 808dd50:	4620 6572 7571 6e65 7963 203a 4300 7275      Frequency: .Cur
 808dd60:	6572 746e 4320 324f 7320 6f6c 6570 003a     rent CO2 slope:.
 808dd70:	7020 6d70 4500 746e 7265 6e20 7765 4320      ppm.Enter new C
 808dd80:	324f 7320 6f6c 6570 0d0a 0a00 4e0d 7765     O2 slope.....New
 808dd90:	4320 324f 7320 6f6c 6570 203a 4300 7275      CO2 slope: .Cur
 808dda0:	6572 746e 4320 5f4f 2041 6c73 706f 3a65     rent CO_A slope:
 808ddb0:	4500 746e 7265 6e20 7765 4320 5f4f 2041     .Enter new CO_A 
 808ddc0:	6c73 706f 0a65 000d 0d0a 654e 2077 4f43     slope.....New CO
 808ddd0:	415f 7320 6f6c 6570 203a 4300 7275 6572     _A slope: .Curre
 808dde0:	746e 4320 5f4f 2042 6c73 706f 3a65 4500     nt CO_B slope:.E
 808ddf0:	746e 7265 6e20 7765 4320 5f4f 2042 6c73     nter new CO_B sl
 808de00:	706f 0a65 000d 0d0a 654e 2077 4f43 425f     ope.....New CO_B
 808de10:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 808de20:	4320 5f4f 2041 657a 6f72 003a 7020 6270      CO_A zero:. ppb
 808de30:	4500 746e 7265 6e20 7765 4320 5f4f 2041     .Enter new CO_A 
 808de40:	655a 6f72 0d0a 0a00 4e0d 7765 4320 5f4f     Zero.....New CO_
 808de50:	2041 657a 6f72 203a 4300 7275 6572 746e     A zero: .Current
 808de60:	4320 5f4f 2042 657a 6f72 003a 6e45 6574      CO_B zero:.Ente
 808de70:	2072 656e 2077 4f43 425f 5a20 7265 0a6f     r new CO_B Zero.
 808de80:	000d 0d0a 654e 2077 4f43 425f 7a20 7265     ....New CO_B zer
 808de90:	3a6f 0020 7543 7272 6e65 2074 4d50 2031     o: .Current PM1 
 808dea0:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 808deb0:	5020 314d 7320 6f6c 6570 0d0a 0a00 4e0d      PM1 slope.....N
 808dec0:	7765 5020 314d 7320 6f6c 6570 203a 4300     ew PM1 slope: .C
 808ded0:	7275 6572 746e 6c20 776f 7265 6c20 6d69     urrent lower lim
 808dee0:	7469 003a 6c50 6165 6573 6520 746e 7265     it:.Please enter
 808def0:	7020 7361 7773 726f 2064 6e69 6f20 6472      password in ord
 808df00:	7265 7420 206f 6863 6e61 6567 7420 6568     er to change the
 808df10:	6c20 776f 7265 6c20 6d69 7469 4500 746e      lower limit.Ent
 808df20:	7265 6e20 7765 6c20 776f 7265 6c20 6d69     er new lower lim
 808df30:	7469 0a3a 000d 0d0a 654e 2077 6f6c 6577     it:.....New lowe
 808df40:	2072 696c 696d 3a74 4300 7275 6572 746e     r limit:.Current
 808df50:	7520 7070 7265 6c20 6d69 7469 003a 6c50      upper limit:.Pl
 808df60:	6165 6573 6520 746e 7265 7020 7361 7773     ease enter passw
 808df70:	726f 2064 6e69 6f20 6472 7265 7420 206f     ord in order to 
 808df80:	6863 6e61 6567 7420 6568 7520 7070 7265     change the upper
 808df90:	6c20 6d69 7469 4500 746e 7265 6e20 7765      limit.Enter new
 808dfa0:	7520 7070 7265 6c20 6d69 7469 0a3a 000d      upper limit:...
 808dfb0:	0d0a 654e 2077 7075 6570 2072 696c 696d     ..New upper limi
 808dfc0:	3a74 4300 3a4f 2520 2e31 6633 7020 6d70     t:.CO: %1.3f ppm
 808dfd0:	0d0a 4300 6d6f 616d 646e 203a 4420 7365     ...Command:  Des
 808dfe0:	7263 7069 6974 6e6f 6100 203a 4120 6a64     cription.a:  Adj
 808dff0:	7375 2074 4f43 415f 7320 6f6c 6570 6200     ust CO_A slope.b
 808e000:	203a 4120 6a64 7375 2074 4f43 415f 7a20     :  Adjust CO_A z
 808e010:	7265 006f 3a63 2020 6441 756a 7473 4320     ero.c:  Adjust C
 808e020:	5f4f 2042 6c73 706f 0065 3a64 2020 6441     O_B slope.d:  Ad
 808e030:	756a 7473 4320 5f4f 2042 657a 6f72 6500     just CO_B zero.e
 808e040:	203a 4120 6a64 7375 2074 4d50 2031 6c73     :  Adjust PM1 sl
 808e050:	706f 0065 3a66 2020 6441 756a 7473 5020     ope.f:  Adjust P
 808e060:	314d 7a20 7265 006f 3a67 2020 6441 756a     M1 zero.g:  Adju
 808e070:	7473 5020 324d 352e 7320 6f6c 6570 6800     st PM2.5 slope.h
 808e080:	203a 4120 6a64 7375 2074 4d50 2e32 2035     :  Adjust PM2.5 
 808e090:	657a 6f72 6900 203a 4120 6a64 7375 2074     zero.i:  Adjust 
 808e0a0:	4d50 3031 7320 6f6c 6570 6a00 203a 4120     PM10 slope.j:  A
 808e0b0:	6a64 7375 2074 4d50 3031 7a20 7265 006f     djust PM10 zero.
 808e0c0:	3a6b 2020 6441 756a 7473 5420 6d65 6570     k:  Adjust Tempe
 808e0d0:	6172 7574 6572 7320 6f6c 6570 6c00 203a     rature slope.l: 
 808e0e0:	4120 6a64 7375 2074 6554 706d 7265 7461      Adjust Temperat
 808e0f0:	7275 2065 657a 6f72 6d00 203a 4120 6a64     ure zero.m:  Adj
 808e100:	7375 2074 7250 7365 7573 6572 7320 6f6c     ust Pressure slo
 808e110:	6570 6e00 203a 4120 6a64 7375 2074 7250     pe.n:  Adjust Pr
 808e120:	7365 7573 6572 7a20 7265 006f 3a6f 2020     essure zero.o:  
 808e130:	6441 756a 7473 4820 6d75 6469 7469 2079     Adjust Humidity 
 808e140:	6c73 706f 0065 3a70 2020 6441 756a 7473     slope.p:  Adjust
 808e150:	4820 6d75 6469 7469 2079 657a 6f72 7100      Humidity zero.q
 808e160:	203a 4520 616e 6c62 2065 6573 6972 6c61     :  Enable serial
 808e170:	6420 6265 6775 6967 676e 7200 203a 4420      debugging.r:  D
 808e180:	7369 6261 656c 7320 7265 6169 206c 6564     isable serial de
 808e190:	7562 6767 6e69 0067 3a73 2020 754f 7074     bugging.s:  Outp
 808e1a0:	7475 6820 6165 6564 2072 7473 6972 676e     ut header string
 808e1b0:	7400 203a 4520 746e 7265 6e20 7765 7420     .t:  Enter new t
 808e1c0:	6d69 2065 6e61 2064 6164 6574 7500 203a     ime and date.u: 
 808e1d0:	4520 746e 7265 6e20 7765 7420 6d69 2065      Enter new time 
 808e1e0:	6f7a 656e 7600 203a 4120 6a64 7375 2074     zone.v:  Adjust 
 808e1f0:	6874 2065 6544 6976 6563 4920 0044 3a77     the Device ID.w:
 808e200:	2020 6547 2074 6977 6966 6320 6572 6564       Get wifi crede
 808e210:	746e 6169 736c 7900 203a 4520 616e 6c62     ntials.y:  Enabl
 808e220:	2065 6563 6c6c 6c75 7261 7a00 203a 4420     e cellular.z:  D
 808e230:	7369 6261 656c 6320 6c65 756c 616c 0072     isable cellular.
 808e240:	3a31 2020 6441 756a 7473 6720 7361 6c20     1:  Adjust gas l
 808e250:	776f 7265 6c20 6d69 7469 3200 203a 4120     ower limit.2:  A
 808e260:	6a64 7375 2074 6167 2073 7075 6570 2072     djust gas upper 
 808e270:	696c 696d 0074 3a33 2020 6547 2074 7562     limit.3:  Get bu
 808e280:	6c69 2064 6576 7372 6f69 006e 3a34 2020     ild version.4:  
 808e290:	6e45 6261 656c 4f20 6f7a 656e 3500 203a     Enable Ozone.5: 
 808e2a0:	4420 7369 6261 656c 4f20 6f7a 656e 3600      Disable Ozone.6
 808e2b0:	203a 4520 616e 6c62 2065 4f56 2743 0073     :  Enable VOC's.
 808e2c0:	3a37 2020 6944 6173 6c62 2065 4f56 2743     7:  Disable VOC'
 808e2d0:	0073 3a38 2020 754f 7074 7475 7420 6568     s.8:  Output the
 808e2e0:	5020 494d 2043 7973 7473 6d65 6320 6e6f      PMIC system con
 808e2f0:	6966 7567 6172 6974 6e6f 3900 203a 4920     figuration.9:  I
 808e300:	636e 6572 7361 2065 6874 2065 6863 7261     ncrease the char
 808e310:	6567 6320 7275 6572 746e 6220 2079 3436     ge current by 64
 808e320:	6d20 0041 3a30 2020 6e49 7263 6165 6573      mA.0:  Increase
 808e330:	7420 6568 6320 7275 6572 746e 6920 706e      the current inp
 808e340:	7475 6c20 6d69 7469 6220 2079 3031 2030     ut limit by 100 
 808e350:	416d 4100 203a 4f20 7075 7074 7475 4320     mA.A:  Ouptput C
 808e360:	204f 6f63 736e 6174 746e 796c 6120 646e     O constantly and
 808e370:	7220 7061 6469 796c 4200 203a 4f20 7475      rapidly.B:  Out
 808e380:	7570 2074 4d50 6320 6e6f 7473 6e61 6c74     put PM constantl
 808e390:	2079 6e61 2064 6172 6970 6c64 0079 3a43     y and rapidly.C:
 808e3a0:	2020 6843 6e61 6567 7420 6d65 6570 6172       Change tempera
 808e3b0:	7574 6572 7520 696e 7374 7420 206f 6543     ture units to Ce
 808e3c0:	636c 7569 0073 3a44 2020 6944 6173 6c62     lcius.D:  Disabl
 808e3d0:	2065 4d54 3350 2036 6574 706d 7265 7461     e TMP36 temperat
 808e3e0:	7275 2065 6573 736e 726f 6120 646e 7520     ure sensor and u
 808e3f0:	6573 4220 454d 3836 2030 6574 706d 7265     se BME680 temper
 808e400:	7461 7275 0065 3a45 2020 6e45 6261 656c     ature.E:  Enable
 808e410:	5420 504d 3633 7420 6d65 6570 6172 7574      TMP36 temperatu
 808e420:	6572 7320 6e65 6f73 2072 6e61 2064 6964     re sensor and di
 808e430:	6173 6c62 2065 4d42 3645 3038 7420 6d65     sable BME680 tem
 808e440:	6570 6172 7574 6572 4600 203a 4320 6168     perature.F:  Cha
 808e450:	676e 2065 6574 706d 7265 7461 7275 2065     nge temperature 
 808e460:	6e75 7469 2073 6f74 4620 7261 6e65 6568     units to Farenhe
 808e470:	7469 4700 203a 5220 6165 2064 7a6f 6e6f     it.G:  Read ozon
 808e480:	2065 7266 6d6f 6120 616e 6f6c 2067 6e69     e from analog in
 808e490:	7570 2074 6e28 746f 6420 6769 7469 6c61     put (not digital
 808e4a0:	796c 2d20 6220 616f 6472 6420 7065 6e65     ly - board depen
 808e4b0:	6564 746e 0029 3a48 2020 6552 6461 6f20     dent).H:  Read o
 808e4c0:	6f7a 656e 6420 6769 7469 6c61 796c 2820     zone digitally (
 808e4d0:	6f6e 2074 6874 6f72 6775 2068 6e61 6c61     not through anal
 808e4e0:	676f 6920 706e 7475 2d20 6220 616f 6472     og input - board
 808e4f0:	6420 7065 6e65 6564 746e 0029 3a49 2020      dependent).I:  
 808e500:	6441 756a 7473 6620 6572 7571 6e65 7963     Adjust frequency
 808e510:	6620 726f 7520 6c70 616f 6964 676e 7420      for uploading t
 808e520:	7268 756f 6867 6320 6c65 756c 616c 0072     hrough cellular.
 808e530:	3a4a 2020 6552 6573 2074 5345 2c50 4320     J:  Reset ESP, C
 808e540:	324f 202c 6c50 6e61 6f74 6577 0072 3a4b     O2, Plantower.K:
 808e550:	2020 6f43 746e 6e69 6f75 7375 7320 7265       Continuous ser
 808e560:	6169 206c 756f 7074 7475 6f20 2066 5047     ial output of GP
 808e570:	0053 3a4c 2020 7257 7469 2065 6564 6166     S.L:  Write defa
 808e580:	6c75 2074 6573 7474 6e69 7367 4d00 203a     ult settings.M: 
 808e590:	4520 616e 6c62 2065 3032 2025 6162 7474      Enable 20% batt
 808e5a0:	7265 2079 6874 6572 6873 6c6f 2064 696c     ery threshold li
 808e5b0:	696d 6974 676e 4e00 203a 4420 7369 6261     miting.N:  Disab
 808e5c0:	656c 3220 2530 6220 7461 6574 7972 7420     le 20% battery t
 808e5d0:	7268 7365 6f68 646c 6c20 6d69 7469 6e69     hreshold limitin
 808e5e0:	2067 4157 4e52 4e49 2147 0021 3a4f 2020     g WARNING!!.O:  
 808e5f0:	6e45 6261 656c 6c20 776f 7020 776f 7265     Enable low power
 808e600:	6620 726f 4720 5350 6d20 646f 6c75 0065      for GPS module.
 808e610:	3a50 2020 7554 6e72 6f20 6666 4220 5441     P:  Turn off BAT
 808e620:	4546 0054 3a51 2020 6c41 6f6c 2077 4142     FET.Q:  Allow BA
 808e630:	4654 5445 7420 206f 7574 6e72 6f20 006e     TFET to turn on.
 808e640:	3a52 2020 6944 6173 6c62 2065 4241 2043     R:  Disable ABC 
 808e650:	6f6c 6967 2063 6f66 2072 4f43 2032 6573     logic for CO2 se
 808e660:	736e 726f 5300 203a 4520 616e 6c62 2065     nsor.S:  Enable 
 808e670:	4241 2043 6f6c 6967 2063 6f66 2072 4f43     ABC logic for CO
 808e680:	2032 6573 736e 726f 5400 203a 4520 616e     2 sensor.T:  Ena
 808e690:	6c62 2f65 6964 6173 6c62 2065 4948 3848     ble/disable HIH8
 808e6a0:	3231 2030 4852 7320 6e65 6f73 0072 3a55     120 RH sensor.U:
 808e6b0:	2020 7753 7469 6863 7320 636f 656b 2074       Switch socket 
 808e6c0:	6877 7265 2065 4f43 6920 2073 6572 6461     where CO is read
 808e6d0:	6620 6f72 006d 3a57 2020 6e45 6261 656c      from.W:  Enable
 808e6e0:	442f 7369 6261 656c 6720 6f6f 6c67 2065     /Disable google 
 808e6f0:	6f6c 6163 6974 6e6f 7320 7265 6976 6563     location service
 808e700:	0073 3a56 2020 6143 696c 7262 7461 2065     s.V:  Calibrate 
 808e710:	4f43 2032 6573 736e 726f 2d20 6d20 7375     CO2 sensor - mus
 808e720:	2074 7573 7070 796c 6120 626d 6569 746e     t supply ambient
 808e730:	6c20 7665 6c65 2820 6f67 6f20 7475 6973      level (go outsi
 808e740:	6564 2921 5a00 203a 4f20 7475 7570 2074     de!).Z:  Output 
 808e750:	6563 6c6c 6c75 7261 6920 666e 726f 616d     cellular informa
 808e760:	6974 6e6f 2820 4343 4449 202c 4d49 4945     tion (CCID, IMEI
 808e770:	202c 7465 2963 2100 203a 4320 6e6f 6974     , etc).!:  Conti
 808e780:	756e 756f 2073 6573 6972 6c61 6f20 7475     nuous serial out
 808e790:	7570 2074 666f 5620 434f 7327 4000 2020     put of VOC's.@  
 808e7a0:	4520 616e 6c62 2f65 6944 6173 6c62 2065      Enable/Disable 
 808e7b0:	6553 736e 6269 656c 692d 746f 6420 7461     Sensible-iot dat
 808e7c0:	2061 7570 6873 202e 4920 2066 6e65 6261     a push.  If enab
 808e7d0:	656c 2c64 7420 6d69 2065 6f7a 656e 7720     led, time zone w
 808e7e0:	6c69 206c 6562 6920 6e67 726f 6465 2d20     ill be ignored -
 808e7f0:	5520 4354 7720 6c69 206c 6562 7520 6573      UTC will be use
 808e800:	2e64 2300 2020 4520 616e 6c62 2f65 6944     d..#   Enable/Di
 808e810:	6173 6c62 2065 6163 7472 706f 6570 2072     sable cartopper 
 808e820:	6f70 6577 2072 6f6d 6564 202e 4920 2066     power mode.  If 
 808e830:	6e65 6261 656c 2c64 6120 7362 6e65 6573     enabled, absense
 808e840:	6f20 2066 7865 6574 6e72 6c61 7020 776f      of external pow
 808e850:	7265 7720 6c69 206c 7473 706f 6320 6c65     er will stop cel
 808e860:	756c 616c 2e72 3f00 203a 4f20 7475 7570     lular..?:  Outpu
 808e870:	2074 6874 7369 6d20 6e65 0075 3a78 2020     t this menu.x:  
 808e880:	7845 7469 2073 6874 7369 6d20 6e65 0075     Exits this menu.
 808e890:	654d 756e 003e 6553 6972 6c61 6420 6265     Menu>.Serial deb
 808e8a0:	6775 6967 676e 6520 616e 6c62 6465 002e     ugging enabled..
 808e8b0:	6553 6972 6c61 6420 6265 6775 6967 676e     Serial debugging
 808e8c0:	6420 7369 6261 656c 2e64 4500 616e 6c62      disabled..Enabl
 808e8d0:	6e69 2067 6543 6c6c 6c75 7261 002e 6543     ing Cellular..Ce
 808e8e0:	6c6c 6c75 7261 6120 726c 6165 7964 6520     llular already e
 808e8f0:	616e 6c62 6465 002e 6944 6173 6c62 6e69     nabled..Disablin
 808e900:	2067 6543 6c6c 6c75 7261 4300 6c65 756c     g Cellular.Cellu
 808e910:	616c 2072 6c61 6572 6461 2079 6964 6173     lar already disa
 808e920:	6c62 6465 002e 6554 706d 7265 7461 7275     bled..Temperatur
 808e930:	2065 6e75 7469 2073 6c61 6572 6461 2079     e units already 
 808e940:	6573 2074 6f74 4620 7261 6e65 6965 2e74     set to Fareneit.
 808e950:	5400 6d65 6570 6172 7574 6572 7520 696e     .Temperature uni
 808e960:	7374 6120 726c 6165 7964 7320 7465 7420     ts already set t
 808e970:	206f 6543 636c 7569 2e73 4400 7369 6261     o Celcius..Disab
 808e980:	696c 676e 6e20 7765 7420 6d65 6570 6172     ling new tempera
 808e990:	7574 6572 7320 6e65 6f73 0072 6554 706d     ture sensor.Temp
 808e9a0:	7265 7461 7275 2065 6573 736e 726f 6120     erature sensor a
 808e9b0:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 808e9c0:	6554 706d 7265 7461 7275 2065 6573 736e     Temperature sens
 808e9d0:	726f 6120 726c 6165 7964 6520 616e 6c62     or already enabl
 808e9e0:	6465 5400 6d65 6570 6172 7574 2065 6573     ed.Temperatue se
 808e9f0:	736e 726f 6e20 776f 6520 616e 6c62 6465     nsor now enabled
 808ea00:	4100 616e 6f6c 2067 6572 6461 6e69 2067     .Analog reading 
 808ea10:	666f 6f20 6f7a 656e 6120 726c 6165 7964     of ozone already
 808ea20:	6520 616e 6c62 6465 4100 616e 6f6c 2067      enabled.Analog 
 808ea30:	6572 6461 6e69 2067 666f 6f20 6f7a 656e     reading of ozone
 808ea40:	6e20 776f 6520 616e 6c62 6465 4400 6769      now enabled.Dig
 808ea50:	7469 6c61 7220 6165 6964 676e 6f20 2066     ital reading of 
 808ea60:	7a6f 6e6f 2065 6c61 6572 6461 2079 6e65     ozone already en
 808ea70:	6261 656c 0064 6944 6967 6174 206c 6572     abled.Digital re
 808ea80:	6461 6e69 2067 666f 6f20 6f7a 656e 6e20     ading of ozone n
 808ea90:	776f 6520 616e 6c62 6465 4f00 7475 7570     ow enabled.Outpu
 808eaa0:	7474 6e69 2067 5047 2053 6f63 746e 6e69     tting GPS contin
 808eab0:	6f75 7375 796c 4200 7461 6574 7972 7420     uously.Battery t
 808eac0:	7268 7365 6f68 646c 6120 726c 6165 7964     hreshold already
 808ead0:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 808eae0:	2067 6162 7474 7265 2079 6874 6572 6873     g battery thresh
 808eaf0:	6c6f 2064 696c 696d 6974 676e 4200 7461     old limiting.Bat
 808eb00:	6574 7972 7420 7268 7365 6f68 646c 6120     tery threshold a
 808eb10:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 808eb20:	6944 6173 6c62 6e69 2067 6162 7474 7265     Disabling batter
 808eb30:	2079 6874 6572 6873 6c6f 2064 696c 696d     y threshold limi
 808eb40:	6974 676e 4500 616e 6c62 6e69 2067 6f6c     ting.Enabling lo
 808eb50:	2077 6f70 6577 2072 6f66 2072 7067 0073     w power for gps.
 808eb60:	7554 6e72 6e69 2067 666f 2066 6162 6674     Turning off batf
 808eb70:	7465 4100 6c6c 776f 6e69 2067 6162 6674     et.Allowing batf
 808eb80:	7465 7420 206f 7574 6e72 6f20 006e 6944     et to turn on.Di
 808eb90:	6173 6c62 6e69 2067 4241 2043 6f6c 6967     sabling ABC logi
 808eba0:	2063 6f66 2072 4f43 2032 6573 736e 726f     c for CO2 sensor
 808ebb0:	4100 4342 6c20 676f 6369 6120 726c 6165     .ABC logic alrea
 808ebc0:	7964 6420 7369 6261 656c 0064 6e45 6261     dy disabled.Enab
 808ebd0:	696c 676e 6120 6362 6c20 676f 6369 6620     ling abc logic f
 808ebe0:	726f 4320 324f 7320 6e65 6f73 0072 4241     or CO2 sensor.AB
 808ebf0:	2043 6f6c 6967 2063 6c61 6572 6461 2079     C logic already 
 808ec00:	6e65 6261 656c 0064 6e45 6261 696c 676e     enabled.Enabling
 808ec10:	4820 4849 3138 3032 5220 2048 6573 736e      HIH8120 RH sens
 808ec20:	726f 4400 7369 6261 696c 676e 4820 4849     or.Disabling HIH
 808ec30:	3138 3032 5220 2048 6573 736e 726f 4e00     8120 RH sensor.N
 808ec40:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 808ec50:	6d6f 5520 3032 412d 706c 6168 0032 6f4e     om U20-Alpha2.No
 808ec60:	2077 6572 6461 6e69 2067 4f43 6620 6f72     w reading CO fro
 808ec70:	206d 3155 2d39 6c41 6870 3161 5200 7365     m U19-Alpha1.Res
 808ec80:	7465 6e69 2067 6874 2065 4f43 2032 6573     eting the CO2 se
 808ec90:	736e 726f 4100 5050 5620 7265 6973 6e6f     nsor.APP Version
 808eca0:	203a 4500 616e 6c62 6e69 2067 7a4f 6e6f     : .Enabling Ozon
 808ecb0:	0065 7a4f 6e6f 2065 6c61 6572 6461 2079     e.Ozone already 
 808ecc0:	6e65 6261 656c 0064 6944 6173 6c62 6e69     enabled.Disablin
 808ecd0:	2067 7a4f 6e6f 0065 7a4f 6e6f 2065 6c61     g Ozone.Ozone al
 808ece0:	6572 6461 2079 6964 6173 6c62 6465 4500     ready disabled.E
 808ecf0:	616e 6c62 6e69 2067 4f56 2743 0073 4f56     nabling VOC's.VO
 808ed00:	2743 2073 6c61 6572 6461 2079 6e65 6261     C's already enab
 808ed10:	656c 0064 6944 6173 6c62 6e69 2067 4f56     led.Disabling VO
 808ed20:	2743 0073 4f56 2743 2073 6c61 6572 6461     C's.VOC's alread
 808ed30:	2079 6964 6173 6c62 6465 4600 7561 746c     y disabled.Fault
 808ed40:	203a 5300 7379 6574 206d 7473 7461 7375     : .System status
 808ed50:	203a 4f00 7475 7570 7474 6e69 2067 6f6e     : .Outputting no
 808ed60:	6d72 6c61 796c 4f00 7475 7570 7474 6e69     rmally.Outputtin
 808ed70:	2067 6e6f 796c 5020 004d 754f 7074 7475     g only PM.Output
 808ed80:	6974 676e 5620 434f 2073 6f63 746e 6e69     ting VOCs contin
 808ed90:	6f75 7375 796c 2021 5020 6572 7373 6120     uously!  Press a
 808eda0:	796e 6220 7475 6f74 206e 6f74 6520 6978     ny button to exi
 808edb0:	2e74 2e2e 4600 6961 656c 2064 6f74 7220     t....Failed to r
 808edc0:	6165 2064 4d42 3645 3038 5400 6f56 7363     ead BME680.TVocs
 808edd0:	253d 2e31 6630 202c 6554 706d 253d 2e31     =%1.0f, Temp=%1.
 808ede0:	6631 202c 7270 7365 3d73 3125 312e 2c66     1f, press=%1.1f,
 808edf0:	7220 3d68 3125 312e 0a66 000d 6944 6173      rh=%1.1f...Disa
 808ee00:	6c62 6e69 2067 6573 736e 6269 656c 6920     bling sensible i
 808ee10:	746f 6420 7461 2061 7570 6873 002e 6944     ot data push..Di
 808ee20:	6173 6c62 6e69 2067 6163 2072 6f74 7070     sabling car topp
 808ee30:	7265 7020 776f 7265 202e 0020 6e45 6261     er power.  .Enab
 808ee40:	696c 676e 6320 7261 7420 706f 6570 2072     ling car topper 
 808ee50:	6f70 6577 2e72 2020 6649 6e20 206f 7865     power.  If no ex
 808ee60:	6574 6e72 6c61 7020 776f 7265 202c 7973     ternal power, sy
 808ee70:	7473 6d65 7720 6c69 206c 7574 6e72 6f20     stem will turn o
 808ee80:	6666 002e 6944 6173 6c62 6e69 2067 6f67     ff..Disabling go
 808ee90:	676f 656c 6c20 636f 7461 6f69 206e 6573     ogle location se
 808eea0:	7672 6369 7365 002e 6e45 6261 696c 676e     rvices..Enabling
 808eeb0:	6720 6f6f 6c67 2065 6f6c 6163 6974 6e6f      google location
 808eec0:	7320 7265 6976 6563 2e73 4700 7465 6974      services..Getti
 808eed0:	676e 6320 6c65 756c 616c 2072 6e69 6f66     ng cellular info
 808eee0:	6d72 7461 6f69 2c6e 7420 6968 2073 616d     rmation, this ma
 808eef0:	2079 6174 656b 6120 7720 6968 656c 2e2e     y take a while..
 808ef00:	002e 4d49 4945 253d 0073 4d49 4953 253d     ..IMEI=%s.IMSI=%
 808ef10:	0073 4349 4943 3d44 7325 4500 6978 6974     s.ICCID=%s.Exiti
 808ef20:	676e 7320 7265 6169 206c 656d 756e 2e2e     ng serial menu..
 808ef30:	002e 265a 5500 616e 6c62 2065 6f74 6720     ..Z&.Unable to g
 808ef40:	7465 4120 5351 6e79 2063 6164 6174 6620     et AQSync data f
 808ef50:	6f72 206d 5345 2c50 6320 756f 746e 7265     rom ESP, counter
 808ef60:	6920 646e 7865 203a 3125 312e 0a66 000d      index: %1.1f...
 808ef70:	5141 7953 636e 5000 6275 696c 6873 6465     AQSync.Published
 808ef80:	4120 5351 6e79 2063 6164 6174 0021 6e69      AQSync data!.in
 808ef90:	6f63 6d6d 6e69 2067 7962 6574 003a 6f47     comming byte:.Go
 808efa0:	6e69 2067 6f74 7320 656c 7065 6220 6365     ing to sleep bec
 808efb0:	7561 6573 6220 7461 6574 7972 6920 2073     ause battery is 
 808efc0:	6562 6f6c 2077 3032 2025 6863 7261 6567     below 20% charge
 808efd0:	0000 0000                                   ....

0808efd4 <_ZTV4File>:
	...
 808efdc:	0b53 0808 0b63 0808 0bad 0808 0ba7 0808     S...c...........
 808efec:	0b37 0808 0bf1 0808 0beb 0808 0be5 0808     7...............

0808effc <_ZTV6SdFile>:
	...
 808f004:	0b51 0808 0b55 0808 0c5b 0808 0ba1 0808     Q...U...[.......

0808f014 <_ZTV5SdFat>:
	...
 808f01c:	0bdd 0808 0bd5 0808 0bcd 0808 0bc5 0808     ................
 808f02c:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808f03c:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808f04c:	831a 0000                                   ....

0808f050 <_ZTV10PowerCheck>:
	...
 808f058:	4cb9 0808 4cd1 0808 6572 6461 6e69 2067     .L...L..reading 
 808f068:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 808f078:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 808f088:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 808f098:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 808f0a8:	676e 4320 324f 0000                         ng CO2..

0808f0b0 <_ZTV5SdSpi>:
	...
 808f0b8:	5ec9 0808 5ed9 0808 5ec5 0808 5f51 0808     .^...^...^..Q_..
 808f0c8:	5f75 0808 5f65 0808 5fb9 0808 6564 6976     u_..e_..._..devi
 808f0d8:	6563 6f4c 6163 6f74 0072 5441 5426 0000     ceLocator.AT&T..

0808f0e8 <_ZTV23GoogleMapsDeviceLocator>:
	...
 808f0f0:	6f4d 0808 6f6d 0808 5954 4550 555f 4b4e     Mo..mo..TYPE_UNK
 808f100:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 808f110:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 808f120:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 808f130:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 808f140:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 808f150:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 808f160:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 808f170:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 808f180:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 808f190:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 808f1a0:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 808f1b0:	7830 3025 7832 4100 2b54 4743 494d 0a0d     0x%02x.AT+CGMI..
 808f1c0:	4100 2b54 4743 4e53 0a0d 4300 4943 0044     .AT+CGSN...CCID.
 808f1d0:	5441 432b 4943 0d44 000a 2b0a 7325 203a     AT+CCID....+%s: 
 808f1e0:	0000 0000                                   ....

0808f1e4 <_ZTV28CellularHelperStringResponse>:
	...
 808f1ec:	7321 0808                                   !s..

0808f1f0 <_ZTV32CellularHelperPlusStringResponse>:
	...
 808f1f8:	7359 0808                                   Ys..

0808f1fc <_ZTV7HIH61XX>:
	...
 808f204:	73e1 0808 73f1 0808 7551 0808               .s...s..Qu..

0808f210 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 808f210:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

0808f220 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808f220:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 808f230:	766f 0066 7061 0070 005a 2b25 3330 3a64     ovf.app.Z.%+03d:
 808f240:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 808f250:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 808f260:	0000 0000                                   ....

0808f264 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808f26c:	9009 0808 900f 0808 904d 0808 901d 0808     ........M.......
 808f27c:	900b 0808                                   ....

0808f280 <_ZTV9IPAddress>:
	...
 808f288:	958f 0808 958d 0808 95c1 0808               ............

0808f294 <_ZTV9USBSerial>:
	...
 808f29c:	9633 0808 9699 0808 9671 0808 85fd 0808     3.......q.......
 808f2ac:	9663 0808 9635 0808 9645 0808 9693 0808     c...5...E.......
 808f2bc:	9655 0808 962d 0808                         U...-...

0808f2c4 <_ZTVN5spark13CellularClassE>:
	...
 808f2cc:	9823 0808 9819 0808 980f 0808 9789 0808     #...............
 808f2dc:	9803 0808 97f7 0808 9ad1 0808 9ad9 0808     ................
 808f2ec:	97eb 0808 97e3 0808 97d9 0808 97cf 0808     ................
 808f2fc:	9793 0808                                   ....

0808f300 <_ZTV11USARTSerial>:
	...
 808f308:	985d 0808 98c5 0808 98a1 0808 85fd 0808     ]...............
 808f318:	9871 0808 988d 0808 987f 0808 989b 0808     q...............
 808f328:	985f 0808 9863 0808                         _...c...

0808f330 <_ZTV7TwoWire>:
	...
 808f338:	9939 0808 9983 0808 995b 0808 993b 0808     9.......[...;...
 808f348:	9963 0808 996b 0808 9973 0808 997b 0808     c...k...s...{...

0808f358 <_ZTVN5spark12NetworkClassE>:
	...
 808f360:	9a91 0808 9a9b 0808 9aa5 0808 9aaf 0808     ................
 808f370:	9ab9 0808 9ac5 0808 9ad1 0808 9ad9 0808     ................
 808f380:	9ae1 0808 9aed 0808 9af5 0808 9aff 0808     ................
 808f390:	9b09 0808                                   ....

0808f394 <_ZSt7nothrow>:
 808f394:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 808f3a4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

0808f3b5 <day_name.1>:
 808f3b5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808f3c5:	6972 6153                                    riSat

0808f3ca <mon_name.0>:
 808f3ca:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808f3da:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808f3ea:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
 808f3fa:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
 808f40a:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
 808f41a:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
 808f42a:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
 808f43a:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
 808f44a:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
 808f45a:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
 808f46a:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
 808f47a:	722f 6e61 2e64 0063 6e69 7469 0079          /rand.c.inity.

0808f488 <fpi.1>:
 808f488:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808f498:	0000 0000                                   ....

0808f49c <fpinan.0>:
 808f49c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808f4ac:	0000 0000                                   ....

0808f4b0 <tinytens>:
 808f4b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808f4c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808f4d0:	6f43 64ac 0628 1168                         Co.d(.h.

0808f4d8 <_ctype_>:
 808f4d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808f4e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808f4f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808f508:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808f518:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808f528:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808f538:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808f548:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808f558:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 808f5d8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 808f5e8:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
 808f5f8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
 808f608:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
 808f618:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
 808f628:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
 808f638:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
 808f648:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
 808f658:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
 808f668:	6874 7865 632e 0000                         thex.c..

0808f670 <_C_numeric_locale>:
 808f670:	ef00 0808 f1d9 0808 0140 2000 4f50 4953     ........@.. POSI
 808f680:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
 808f690:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
 808f6a0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
 808f6b0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
 808f6c0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
 808f6d0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
 808f6e0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
 808f6f0:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

0808f700 <__mprec_bigtens>:
 808f700:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808f710:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808f720:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808f728 <__mprec_tens>:
 808f728:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808f738:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808f748:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808f758:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808f768:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808f778:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808f788:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808f798:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808f7a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808f7b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808f7c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808f7d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808f7e8:	9db4 79d9 7843 44ea                         ...yCx.D

0808f7f0 <p05.0>:
 808f7f0:	0005 0000 0019 0000 007d 0000               ........}...

0808f7fc <link_const_variable_data_end>:
 808f7fc:	08084a81 	.word	0x08084a81
 808f800:	08086041 	.word	0x08086041
 808f804:	08086fe1 	.word	0x08086fe1
 808f808:	08088111 	.word	0x08088111
 808f80c:	08088955 	.word	0x08088955
 808f810:	08088d19 	.word	0x08088d19
 808f814:	08088d59 	.word	0x08088d59
 808f818:	0808982d 	.word	0x0808982d
 808f81c:	08089b51 	.word	0x08089b51
 808f820:	08089d71 	.word	0x08089d71

0808f824 <link_constructors_end>:
	...
